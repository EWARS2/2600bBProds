------- FILE C:\Users\jefma\Desktop\gaem\a.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\a.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\a.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit4_AnimStars =	y
      4  10000 ????		00 ec	    _Bit3_Walking_P0 =	y
      5  10000 ????		00 ec	    _Bit2_VFlip_P0 =	y
      6  10000 ????		00 ec	    _Bit1_HFlip_P0 =	y
      7  10000 ????		00 d8	    _playerRoom =	e
      8  10000 ????
      9  10000 ????		00 d7	    _respawnRoom =	d
     10  10000 ????
     11  10000 ????		00 d6	    _respawnY  =	c
     12  10000 ????
     13  10000 ????		00 d5	    _respawnX  =	b
     14  10000 ????
     15  10000 ????		00 d4	    _frameCounter =	a
     16  10000 ????		00 08	    _mapHRes   =	8
     17  10000 ????		00 01	    noscore    =	1
     18  10000 ????
     19  10000 ????		00 01	    PFcolors   =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\Users\jefma\Desktop\gaem\a.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit4_AnimStars =	y
      4  10000 ????		00 ec	    _Bit3_Walking_P0 =	y
      5  10000 ????		00 ec	    _Bit2_VFlip_P0 =	y
      6  10000 ????		00 ec	    _Bit1_HFlip_P0 =	y
      7  10000 ????		00 d8	    _playerRoom =	e
      8  10000 ????
      9  10000 ????		00 d7	    _respawnRoom =	d
     10  10000 ????
     11  10000 ????		00 d6	    _respawnY  =	c
     12  10000 ????
     13  10000 ????		00 d5	    _respawnX  =	b
     14  10000 ????
     15  10000 ????		00 d4	    _frameCounter =	a
     16  10000 ????		00 08	    _mapHRes   =	8
     17  10000 ????		00 01	    noscore    =	1
     18  10000 ????
     19  10000 ????		00 01	    PFcolors   =	1
------- FILE C:\Users\jefma\Desktop\gaem\a.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c cc f3 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c					      ifnconst	player1colors
    554  f13c		       a5 87		      lda	missile1height	;3
    555  f13e		       c7 88		      dcp	missile1y	;5
    556  f140				  -	      else
    557  f140				  -	      lda	(player1color),y
    558  f140				  -	      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 36		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157					      ifnconst	player1colors
    587  f157		       2a		      rol		;2
    588  f158		       2a		      rol		;2
    589  f159		       85 1e		      sta	ENAM1	;3
    590  f15b				  -	      else
    591  f15b				  -	      ifnconst	playercolors
    592  f15b				  -	      sleep	7
    593  f15b				  -	      else
    594  f15b				  -	      lda.w	player0colorstore
    595  f15b				  -	      sta	COLUP0
    596  f15b				  -	      endif
    597  f15b					      endif
    598  f15b
    599  f15b		       ad 8e 00 	      lda.w	player0height
    600  f15e		       c7 85		      dcp	player0y
    601  f160		       90 11		      bcc	.skipDrawlastP0
    602  f162		       a4 85		      ldy	player0y
    603  f164		       b1 8a		      lda	(player0pointer),y
    604  f166				   .continuelastP0
    605  f166		       85 1b		      sta	GRP0
    606  f168
    607  f168
    608  f168
    609  f168					      ifnconst	no_blank_lines
    610  f168		       a5 90		      lda	missile0height	;3
    611  f16a		       c7 91		      dcp	missile0y	;5
    612  f16c		       e5 f6		      sbc	stack1
    613  f16e		       85 1d		      sta	ENAM0	;3
    614  f170		       4c 13 f1 	      jmp	.endkerloop
    615  f173				  -	      else
    616  f173				  -	      ifconst	readpaddle
    617  f173				  -	      ldy	currentpaddle
    618  f173				  -	      lda	INPT0,y
    619  f173				  -	      bpl	noreadpaddle2
    620  f173				  -	      inc	paddle
    621  f173				  -	      jmp	.endkerloop
    622  f173				  -noreadpaddle2
    623  f173				  -	      sleep	4
    624  f173				  -	      jmp	.endkerloop
    625  f173				  -	      else		; no_blank_lines and no paddle reading
    626  f173				  -	      pla
    627  f173				  -	      pha		; 14 cycles in 4 bytes
    628  f173				  -	      pla
    629  f173				  -	      pha
    630  f173				  -			; sleep 14
    631  f173				  -	      jmp	.endkerloop
    632  f173				  -	      endif
    633  f173					      endif
    634  f173
    635  f173
    636  f173							; ifconst donepaddleskip
    637  f173							;paddleskipread
    638  f173							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f173							; plus we get a lo-res paddle read
    640  f173							; bmi donepaddleskip
    641  f173							; endif
    642  f173
    643  f173				   .skipDrawlastP0
    644  f173		       a9 00		      lda	#0
    645  f175		       a8		      tay
    646  f176		       4c 66 f1 	      jmp	.continuelastP0
    647  f179
    648  f179				  -	      ifconst	no_blank_lines
    649  f179				  -no_blank_lines_bailout
    650  f179				  -	      ldx	#0
    651  f179					      endif
    652  f179
    653  f179				   endkernel
    654  f179							; 6 digit score routine
    655  f179		       86 0e		      stx	PF1
    656  f17b		       86 0f		      stx	PF2
    657  f17d		       86 0d		      stx	PF0
    658  f17f		       18		      clc
    659  f180
    660  f180				  -	      ifconst	pfrowheight
    661  f180				  -	      lda	#pfrowheight+2
    662  f180					      else
    663  f180					      ifnconst	pfres
    664  f180		       a9 0a		      lda	#10
    665  f182				  -	      else
    666  f182				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f182					      endif
    668  f182					      endif
    669  f182
    670  f182		       e5 ef		      sbc	playfieldpos
    671  f184		       85 ef		      sta	playfieldpos
    672  f186		       8a		      txa
    673  f187
    674  f187				  -	      ifconst	shakescreen
    675  f187				  -	      bit	shakescreen
    676  f187				  -	      bmi	noshakescreen2
    677  f187				  -	      ldx	#$3D
    678  f187				  -noshakescreen2
    679  f187					      endif
    680  f187
    681  f187		       95 02		      sta	WSYNC,x
    682  f189
    683  f189							; STA WSYNC ;first one, need one more
    684  f189		       85 0b		      sta	REFP0
    685  f18b		       85 0c		      sta	REFP1
    686  f18d		       85 1b		      STA	GRP0
    687  f18f		       85 1c		      STA	GRP1
    688  f191							; STA PF1
    689  f191							; STA PF2
    690  f191		       85 2b		      sta	HMCLR
    691  f193		       85 1d		      sta	ENAM0
    692  f195		       85 1e		      sta	ENAM1
    693  f197		       85 1f		      sta	ENABL
    694  f199
    695  f199		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19b		       85 85		      sta	player0y
    697  f19d		       a5 9e		      lda	temp3
    698  f19f		       85 86		      sta	player1y
    699  f1a1					      ifnconst	player1colors
    700  f1a1		       a5 a1		      lda	temp6
    701  f1a3		       85 88		      sta	missile1y
    702  f1a5					      endif
    703  f1a5					      ifnconst	playercolors
    704  f1a5					      ifnconst	readpaddle
    705  f1a5		       a5 a0		      lda	temp5
    706  f1a7		       85 91		      sta	missile0y
    707  f1a9					      endif
    708  f1a9					      endif
    709  f1a9		       a5 f7		      lda	stack2
    710  f1ab		       85 89		      sta	bally
    711  f1ad
    712  f1ad							; strangely, this isn't required any more. might have
    713  f1ad							; resulted from the no_blank_lines score bounce fix
    714  f1ad							;ifconst no_blank_lines
    715  f1ad							;sta WSYNC
    716  f1ad							;endif
    717  f1ad
    718  f1ad		       ad 84 02 	      lda	INTIM
    719  f1b0		       18		      clc
    720  f1b1					      ifnconst	vblank_time
    721  f1b1		       69 8e		      adc	#43+12+87
    722  f1b3				  -	      else
    723  f1b3				  -	      adc	#vblank_time+12+87
    724  f1b3				  -
    725  f1b3					      endif
    726  f1b3							; sta WSYNC
    727  f1b3		       8d 96 02 	      sta	TIM64T
    728  f1b6
    729  f1b6				  -	      ifconst	minikernel
    730  f1b6				  -	      jsr	minikernel
    731  f1b6					      endif
    732  f1b6
    733  f1b6							; now reassign temp vars for score pointers
    734  f1b6
    735  f1b6							; score pointers contain:
    736  f1b6							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b6							; swap lo2->temp1
    738  f1b6							; swap lo4->temp3
    739  f1b6							; swap lo6->temp5
    740  f1b6				  -	      ifnconst	noscore
    741  f1b6				  -	      lda	scorepointers+1
    742  f1b6				  -			; ldy temp1
    743  f1b6				  -	      sta	temp1
    744  f1b6				  -			; sty scorepointers+1
    745  f1b6				  -
    746  f1b6				  -	      lda	scorepointers+3
    747  f1b6				  -			; ldy temp3
    748  f1b6				  -	      sta	temp3
    749  f1b6				  -			; sty scorepointers+3
    750  f1b6				  -
    751  f1b6				  -
    752  f1b6				  -	      sta	HMCLR
    753  f1b6				  -	      tsx
    754  f1b6				  -	      stx	stack1
    755  f1b6				  -	      ldx	#$E0
    756  f1b6				  -	      stx	HMP0
    757  f1b6				  -
    758  f1b6				  -	      LDA	scorecolor
    759  f1b6				  -	      STA	COLUP0
    760  f1b6				  -	      STA	COLUP1
    761  f1b6				  -	      ifconst	scorefade
    762  f1b6				  -	      STA	stack2
    763  f1b6				  -	      endif
    764  f1b6				  -	      ifconst	pfscore
    765  f1b6				  -	      lda	pfscorecolor
    766  f1b6				  -	      sta	COLUPF
    767  f1b6				  -	      endif
    768  f1b6				  -	      sta	WSYNC
    769  f1b6				  -	      ldx	#0
    770  f1b6				  -	      STx	GRP0
    771  f1b6				  -	      STx	GRP1	; seems to be needed because of vdel
    772  f1b6				  -
    773  f1b6				  -	      lda	scorepointers+5
    774  f1b6				  -			; ldy temp5
    775  f1b6				  -	      sta	temp5,x
    776  f1b6				  -			; sty scorepointers+5
    777  f1b6				  -	      lda	#>scoretable
    778  f1b6				  -	      sta	scorepointers+1
    779  f1b6				  -	      sta	scorepointers+3
    780  f1b6				  -	      sta	scorepointers+5
    781  f1b6				  -	      sta	temp2
    782  f1b6				  -	      sta	temp4
    783  f1b6				  -	      sta	temp6
    784  f1b6				  -	      LDY	#7
    785  f1b6				  -	      STY	VDELP0
    786  f1b6				  -	      STA	RESP0
    787  f1b6				  -	      STA	RESP1
    788  f1b6				  -
    789  f1b6				  -
    790  f1b6				  -	      LDA	#$03
    791  f1b6				  -	      STA	NUSIZ0
    792  f1b6				  -	      STA	NUSIZ1
    793  f1b6				  -	      STA	VDELP1
    794  f1b6				  -	      LDA	#$F0
    795  f1b6				  -	      STA	HMP1
    796  f1b6				  -	      lda	(scorepointers),y
    797  f1b6				  -	      sta	GRP0
    798  f1b6				  -	      STA	HMOVE	; cycle 73 ?
    799  f1b6				  -	      jmp	beginscore
    800  f1b6				  -
    801  f1b6				  -
    802  f1b6				  -	      if	((<*)>$d4)
    803  f1b6				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f1b6				  -	      endif
    805  f1b6				  -
    806  f1b6				  -loop2
    807  f1b6				  -	      lda	(scorepointers),y	;+5 68 204
    808  f1b6				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f1b6				  -	      ifconst	pfscore
    810  f1b6				  -	      lda.w	pfscore1
    811  f1b6				  -	      sta	PF1
    812  f1b6				  -	      else
    813  f1b6				  -	      ifconst	scorefade
    814  f1b6				  -	      sleep	2
    815  f1b6				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f1b6				  -	      else
    817  f1b6				  -	      sleep	7
    818  f1b6				  -	      endif
    819  f1b6				  -	      endif
    820  f1b6				  -			; cycle 0
    821  f1b6				  -beginscore
    822  f1b6				  -	      lda	(scorepointers+$8),y	;+5 5 15
    823  f1b6				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f1b6				  -	      lda	(scorepointers+$6),y	;+5 13 39
    825  f1b6				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f1b6				  -	      lax	(scorepointers+$2),y	;+5 29 87
    827  f1b6				  -	      txs
    828  f1b6				  -	      lax	(scorepointers+$4),y	;+5 36 108
    829  f1b6				  -	      ifconst	scorefade
    830  f1b6				  -	      lda	stack2
    831  f1b6				  -	      else
    832  f1b6				  -	      sleep	3
    833  f1b6				  -	      endif
    834  f1b6				  -
    835  f1b6				  -	      ifconst	pfscore
    836  f1b6				  -	      lda	pfscore2
    837  f1b6				  -	      sta	PF1
    838  f1b6				  -	      else
    839  f1b6				  -	      ifconst	scorefade
    840  f1b6				  -	      sta	COLUP0
    841  f1b6				  -	      sta	COLUP1
    842  f1b6				  -	      else
    843  f1b6				  -	      sleep	6
    844  f1b6				  -	      endif
    845  f1b6				  -	      endif
    846  f1b6				  -
    847  f1b6				  -	      lda	(scorepointers+$A),y	;+5 21 63
    848  f1b6				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f1b6				  -	      tsx
    850  f1b6				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f1b6				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f1b6				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f1b6				  -	      dey
    854  f1b6				  -	      bpl	loop2	;+2 60 180
    855  f1b6				  -
    856  f1b6				  -	      ldx	stack1
    857  f1b6				  -	      txs
    858  f1b6				  -			; lda scorepointers+1
    859  f1b6				  -	      ldy	temp1
    860  f1b6				  -			; sta temp1
    861  f1b6				  -	      sty	scorepointers+1
    862  f1b6				  -
    863  f1b6				  -	      LDA	#0
    864  f1b6				  -	      sta	PF1
    865  f1b6				  -	      STA	GRP0
    866  f1b6				  -	      STA	GRP1
    867  f1b6				  -	      STA	VDELP0
    868  f1b6				  -	      STA	VDELP1	;do we need these
    869  f1b6				  -	      STA	NUSIZ0
    870  f1b6				  -	      STA	NUSIZ1
    871  f1b6				  -
    872  f1b6				  -			; lda scorepointers+3
    873  f1b6				  -	      ldy	temp3
    874  f1b6				  -			; sta temp3
    875  f1b6				  -	      sty	scorepointers+3
    876  f1b6				  -
    877  f1b6				  -			; lda scorepointers+5
    878  f1b6				  -	      ldy	temp5
    879  f1b6				  -			; sta temp5
    880  f1b6				  -	      sty	scorepointers+5
    881  f1b6					      endif		;noscore
    882  f1b6				  -	      ifconst	readpaddle
    883  f1b6				  -	      lda	#%11000010
    884  f1b6					      else
    885  f1b6				  -	      ifconst	qtcontroller
    886  f1b6				  -	      lda	qtcontroller
    887  f1b6				  -	      lsr		; bit 0 in carry
    888  f1b6				  -	      lda	#4
    889  f1b6				  -	      ror		; carry into top of A
    890  f1b6					      else
    891  f1b6		       a9 02		      lda	#2
    892  f1b8					      endif		; qtcontroller
    893  f1b8					      endif		; readpaddle
    894  f1b8		       85 02		      sta	WSYNC
    895  f1ba		       85 01		      sta	VBLANK
      0  f1bc					      RETURN
      1  f1bc					      ifnconst	bankswitch
      2  f1bc		       60		      rts
      3  f1bd				  -	      else
      4  f1bd				  -	      jmp	BS_return
      5  f1bd					      endif
    897  f1bd				  -	      ifconst	shakescreen
    898  f1bd				  -doshakescreen
    899  f1bd				  -	      bit	shakescreen
    900  f1bd				  -	      bmi	noshakescreen
    901  f1bd				  -	      sta	WSYNC
    902  f1bd				  -noshakescreen
    903  f1bd				  -	      ldx	missile0height
    904  f1bd				  -	      inx
    905  f1bd				  -	      rts
    906  f1bd					      endif
    907  f1bd
    908  f1bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f1bd
    910  f1bd							; playfield drawing routines
    911  f1bd							; you get a 32x12 bitmapped display in a single color :)
    912  f1bd							; 0-31 and 0-11
    913  f1bd
    914  f1bd				   pfclear		; clears playfield - or fill with pattern
    915  f1bd				  -	      ifconst	pfres
    916  f1bd				  -	      ldx	#pfres*pfwidth-1
    917  f1bd					      else
    918  f1bd		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f1bf					      endif
    920  f1bf				   pfclear_loop
    921  f1bf					      ifnconst	superchip
    922  f1bf		       95 a4		      sta	playfield,x
    923  f1c1				  -	      else
    924  f1c1				  -	      sta	playfield-128,x
    925  f1c1					      endif
    926  f1c1		       ca		      dex
    927  f1c2		       10 fb		      bpl	pfclear_loop
      0  f1c4					      RETURN
      1  f1c4					      ifnconst	bankswitch
      2  f1c4		       60		      rts
      3  f1c5				  -	      else
      4  f1c5				  -	      jmp	BS_return
      5  f1c5					      endif
    929  f1c5
    930  f1c5				   setuppointers
    931  f1c5		       86 9d		      stx	temp2	; store on.off.flip value
    932  f1c7		       aa		      tax		; put x-value in x 
    933  f1c8		       4a		      lsr
    934  f1c9		       4a		      lsr
    935  f1ca		       4a		      lsr		; divide x pos by 8 
    936  f1cb		       85 9c		      sta	temp1
    937  f1cd		       98		      tya
    938  f1ce		       0a		      asl
    939  f1cf					      if	pfwidth=4
    940  f1cf		       0a		      asl		; multiply y pos by 4
    941  f1d0					      endif		; else multiply by 2
    942  f1d0		       18		      clc
    943  f1d1		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f1d3		       a8		      tay		; put the value in y
    945  f1d4		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f1d6		       60		      rts
    947  f1d7
    948  f1d7				   pfread
    949  f1d7							;x=xvalue, y=yvalue
    950  f1d7		       20 c5 f1 	      jsr	setuppointers
    951  f1da		       bd 3f f2 	      lda	setbyte,x
    952  f1dd		       39 a4 00 	      and	playfield,y
    953  f1e0		       5d 3f f2 	      eor	setbyte,x
    954  f1e3							; beq readzero
    955  f1e3							; lda #1
    956  f1e3							; readzero
      0  f1e3					      RETURN
      1  f1e3					      ifnconst	bankswitch
      2  f1e3		       60		      rts
      3  f1e4				  -	      else
      4  f1e4				  -	      jmp	BS_return
      5  f1e4					      endif
    958  f1e4
    959  f1e4				   pfpixel
    960  f1e4							;x=xvalue, y=yvalue, a=0,1,2
    961  f1e4		       20 c5 f1 	      jsr	setuppointers
    962  f1e7
    963  f1e7				  -	      ifconst	bankswitch
    964  f1e7				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f1e7				  -	      beq	pixelon_r	; if "on" go to on
    966  f1e7				  -	      lsr
    967  f1e7				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f1e7				  -	      lda	playfield,y	; if here, it's "flip"
    969  f1e7				  -	      eor	setbyte,x
    970  f1e7				  -	      ifconst	superchip
    971  f1e7				  -	      sta	playfield-128,y
    972  f1e7				  -	      else
    973  f1e7				  -	      sta	playfield,y
    974  f1e7				  -	      endif
    975  f1e7				  -	      RETURN
    976  f1e7				  -pixelon_r
    977  f1e7				  -	      lda	playfield,y
    978  f1e7				  -	      ora	setbyte,x
    979  f1e7				  -	      ifconst	superchip
    980  f1e7				  -	      sta	playfield-128,y
    981  f1e7				  -	      else
    982  f1e7				  -	      sta	playfield,y
    983  f1e7				  -	      endif
    984  f1e7				  -	      RETURN
    985  f1e7				  -pixeloff_r
    986  f1e7				  -	      lda	setbyte,x
    987  f1e7				  -	      eor	#$ff
    988  f1e7				  -	      and	playfield,y
    989  f1e7				  -	      ifconst	superchip
    990  f1e7				  -	      sta	playfield-128,y
    991  f1e7				  -	      else
    992  f1e7				  -	      sta	playfield,y
    993  f1e7				  -	      endif
    994  f1e7				  -	      RETURN
    995  f1e7				  -
    996  f1e7					      else
    997  f1e7		       4c 18 f2 	      jmp	plotpoint
    998  f1ea					      endif
    999  f1ea
   1000  f1ea				   pfhline
   1001  f1ea							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f1ea		       20 c5 f1 	      jsr	setuppointers
   1003  f1ed		       4c f7 f1 	      jmp	noinc
   1004  f1f0				   keepgoing
   1005  f1f0		       e8		      inx
   1006  f1f1		       8a		      txa
   1007  f1f2		       29 07		      and	#7
   1008  f1f4		       d0 01		      bne	noinc
   1009  f1f6		       c8		      iny
   1010  f1f7				   noinc
   1011  f1f7		       20 18 f2 	      jsr	plotpoint
   1012  f1fa		       e4 9e		      cpx	temp3
   1013  f1fc		       30 f2		      bmi	keepgoing
      0  f1fe					      RETURN
      1  f1fe					      ifnconst	bankswitch
      2  f1fe		       60		      rts
      3  f1ff				  -	      else
      4  f1ff				  -	      jmp	BS_return
      5  f1ff					      endif
   1015  f1ff
   1016  f1ff				   pfvline
   1017  f1ff							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f1ff		       20 c5 f1 	      jsr	setuppointers
   1019  f202		       84 9c		      sty	temp1	; store memory location offset
   1020  f204		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f206		       a5 9e		      lda	temp3
   1022  f208		       0a		      asl
   1023  f209					      if	pfwidth=4
   1024  f209		       0a		      asl		; multiply by 4
   1025  f20a					      endif		; else multiply by 2
   1026  f20a		       85 9e		      sta	temp3	; store it
   1027  f20c							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f20c							; right now, temp1=y=starting memory location, temp3=final
   1029  f20c							; x should equal original x value
   1030  f20c				   keepgoingy
   1031  f20c		       20 18 f2 	      jsr	plotpoint
   1032  f20f		       c8		      iny
   1033  f210		       c8		      iny
   1034  f211					      if	pfwidth=4
   1035  f211		       c8		      iny
   1036  f212		       c8		      iny
   1037  f213					      endif
   1038  f213		       c4 9e		      cpy	temp3
   1039  f215		       30 f5		      bmi	keepgoingy
      0  f217					      RETURN
      1  f217					      ifnconst	bankswitch
      2  f217		       60		      rts
      3  f218				  -	      else
      4  f218				  -	      jmp	BS_return
      5  f218					      endif
   1041  f218
   1042  f218				   plotpoint
   1043  f218		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f21a		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f21c		       4a		      lsr
   1046  f21d		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f21f		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f222		       5d 3f f2 	      eor	setbyte,x
   1049  f225				  -	      ifconst	superchip
   1050  f225				  -	      sta	playfield-128,y
   1051  f225					      else
   1052  f225		       99 a4 00 	      sta	playfield,y
   1053  f228					      endif
   1054  f228		       60		      rts
   1055  f229				   pixelon
   1056  f229		       b9 a4 00 	      lda	playfield,y
   1057  f22c		       1d 3f f2 	      ora	setbyte,x
   1058  f22f				  -	      ifconst	superchip
   1059  f22f				  -	      sta	playfield-128,y
   1060  f22f					      else
   1061  f22f		       99 a4 00 	      sta	playfield,y
   1062  f232					      endif
   1063  f232		       60		      rts
   1064  f233				   pixeloff
   1065  f233		       bd 3f f2 	      lda	setbyte,x
   1066  f236		       49 ff		      eor	#$ff
   1067  f238		       39 a4 00 	      and	playfield,y
   1068  f23b				  -	      ifconst	superchip
   1069  f23b				  -	      sta	playfield-128,y
   1070  f23b					      else
   1071  f23b		       99 a4 00 	      sta	playfield,y
   1072  f23e					      endif
   1073  f23e		       60		      rts
   1074  f23f
   1075  f23f				   setbyte
   1076  f23f					      ifnconst	pfcenter
   1077  f23f		       80		      .byte.b	$80
   1078  f240		       40		      .byte.b	$40
   1079  f241		       20		      .byte.b	$20
   1080  f242		       10		      .byte.b	$10
   1081  f243		       08		      .byte.b	$08
   1082  f244		       04		      .byte.b	$04
   1083  f245		       02		      .byte.b	$02
   1084  f246		       01		      .byte.b	$01
   1085  f247					      endif
   1086  f247		       01		      .byte.b	$01
   1087  f248		       02		      .byte.b	$02
   1088  f249		       04		      .byte.b	$04
   1089  f24a		       08		      .byte.b	$08
   1090  f24b		       10		      .byte.b	$10
   1091  f24c		       20		      .byte.b	$20
   1092  f24d		       40		      .byte.b	$40
   1093  f24e		       80		      .byte.b	$80
   1094  f24f		       80		      .byte.b	$80
   1095  f250		       40		      .byte.b	$40
   1096  f251		       20		      .byte.b	$20
   1097  f252		       10		      .byte.b	$10
   1098  f253		       08		      .byte.b	$08
   1099  f254		       04		      .byte.b	$04
   1100  f255		       02		      .byte.b	$02
   1101  f256		       01		      .byte.b	$01
   1102  f257		       01		      .byte.b	$01
   1103  f258		       02		      .byte.b	$02
   1104  f259		       04		      .byte.b	$04
   1105  f25a		       08		      .byte.b	$08
   1106  f25b		       10		      .byte.b	$10
   1107  f25c		       20		      .byte.b	$20
   1108  f25d		       40		      .byte.b	$40
   1109  f25e		       80		      .byte.b	$80
   1110  f25f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f25f
   1112  f25f				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f25f		       d0 13		      bne	notleft
   1114  f261							;left
   1115  f261				  -	      ifconst	pfres
   1116  f261				  -	      ldx	#pfres*4
   1117  f261					      else
   1118  f261		       a2 30		      ldx	#48
   1119  f263					      endif
   1120  f263				   leftloop
   1121  f263		       b5 a3		      lda	playfield-1,x
   1122  f265		       4a		      lsr
   1123  f266
   1124  f266				  -	      ifconst	superchip
   1125  f266				  -	      lda	playfield-2,x
   1126  f266				  -	      rol
   1127  f266				  -	      sta	playfield-130,x
   1128  f266				  -	      lda	playfield-3,x
   1129  f266				  -	      ror
   1130  f266				  -	      sta	playfield-131,x
   1131  f266				  -	      lda	playfield-4,x
   1132  f266				  -	      rol
   1133  f266				  -	      sta	playfield-132,x
   1134  f266				  -	      lda	playfield-1,x
   1135  f266				  -	      ror
   1136  f266				  -	      sta	playfield-129,x
   1137  f266					      else
   1138  f266		       36 a2		      rol	playfield-2,x
   1139  f268		       76 a1		      ror	playfield-3,x
   1140  f26a		       36 a0		      rol	playfield-4,x
   1141  f26c		       76 a3		      ror	playfield-1,x
   1142  f26e					      endif
   1143  f26e
   1144  f26e		       8a		      txa
   1145  f26f		       cb 04		      sbx	#4
   1146  f271		       d0 f0		      bne	leftloop
      0  f273					      RETURN
      1  f273					      ifnconst	bankswitch
      2  f273		       60		      rts
      3  f274				  -	      else
      4  f274				  -	      jmp	BS_return
      5  f274					      endif
   1148  f274
   1149  f274				   notleft
   1150  f274		       4a		      lsr
   1151  f275		       90 13		      bcc	notright
   1152  f277							;right
   1153  f277
   1154  f277				  -	      ifconst	pfres
   1155  f277				  -	      ldx	#pfres*4
   1156  f277					      else
   1157  f277		       a2 30		      ldx	#48
   1158  f279					      endif
   1159  f279				   rightloop
   1160  f279		       b5 a0		      lda	playfield-4,x
   1161  f27b		       4a		      lsr
   1162  f27c				  -	      ifconst	superchip
   1163  f27c				  -	      lda	playfield-3,x
   1164  f27c				  -	      rol
   1165  f27c				  -	      sta	playfield-131,x
   1166  f27c				  -	      lda	playfield-2,x
   1167  f27c				  -	      ror
   1168  f27c				  -	      sta	playfield-130,x
   1169  f27c				  -	      lda	playfield-1,x
   1170  f27c				  -	      rol
   1171  f27c				  -	      sta	playfield-129,x
   1172  f27c				  -	      lda	playfield-4,x
   1173  f27c				  -	      ror
   1174  f27c				  -	      sta	playfield-132,x
   1175  f27c					      else
   1176  f27c		       36 a1		      rol	playfield-3,x
   1177  f27e		       76 a2		      ror	playfield-2,x
   1178  f280		       36 a3		      rol	playfield-1,x
   1179  f282		       76 a0		      ror	playfield-4,x
   1180  f284					      endif
   1181  f284		       8a		      txa
   1182  f285		       cb 04		      sbx	#4
   1183  f287		       d0 f0		      bne	rightloop
      0  f289					      RETURN
      1  f289					      ifnconst	bankswitch
      2  f289		       60		      rts
      3  f28a				  -	      else
      4  f28a				  -	      jmp	BS_return
      5  f28a					      endif
   1185  f28a
   1186  f28a				   notright
   1187  f28a		       4a		      lsr
   1188  f28b		       90 49		      bcc	notup
   1189  f28d							;up
   1190  f28d		       4a		      lsr
   1191  f28e		       90 02		      bcc	onedecup
   1192  f290		       c6 ef		      dec	playfieldpos
   1193  f292				   onedecup
   1194  f292		       c6 ef		      dec	playfieldpos
   1195  f294		       f0 02		      beq	shiftdown
   1196  f296		       10 3d		      bpl	noshiftdown2
   1197  f298				   shiftdown
   1198  f298				  -	      ifconst	pfrowheight
   1199  f298				  -	      lda	#pfrowheight
   1200  f298					      else
   1201  f298					      ifnconst	pfres
   1202  f298		       a9 08		      lda	#8
   1203  f29a				  -	      else
   1204  f29a				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f29a					      endif
   1206  f29a					      endif
   1207  f29a
   1208  f29a		       85 ef		      sta	playfieldpos
   1209  f29c		       a5 a7		      lda	playfield+3
   1210  f29e		       85 9f		      sta	temp4
   1211  f2a0		       a5 a6		      lda	playfield+2
   1212  f2a2		       85 9e		      sta	temp3
   1213  f2a4		       a5 a5		      lda	playfield+1
   1214  f2a6		       85 9d		      sta	temp2
   1215  f2a8		       a5 a4		      lda	playfield
   1216  f2aa		       85 9c		      sta	temp1
   1217  f2ac		       a2 00		      ldx	#0
   1218  f2ae				   up2
   1219  f2ae		       b5 a8		      lda	playfield+4,x
   1220  f2b0				  -	      ifconst	superchip
   1221  f2b0				  -	      sta	playfield-128,x
   1222  f2b0				  -	      lda	playfield+5,x
   1223  f2b0				  -	      sta	playfield-127,x
   1224  f2b0				  -	      lda	playfield+6,x
   1225  f2b0				  -	      sta	playfield-126,x
   1226  f2b0				  -	      lda	playfield+7,x
   1227  f2b0				  -	      sta	playfield-125,x
   1228  f2b0					      else
   1229  f2b0		       95 a4		      sta	playfield,x
   1230  f2b2		       b5 a9		      lda	playfield+5,x
   1231  f2b4		       95 a5		      sta	playfield+1,x
   1232  f2b6		       b5 aa		      lda	playfield+6,x
   1233  f2b8		       95 a6		      sta	playfield+2,x
   1234  f2ba		       b5 ab		      lda	playfield+7,x
   1235  f2bc		       95 a7		      sta	playfield+3,x
   1236  f2be					      endif
   1237  f2be		       8a		      txa
   1238  f2bf		       cb fc		      sbx	#252
   1239  f2c1				  -	      ifconst	pfres
   1240  f2c1				  -	      cpx	#(pfres-1)*4
   1241  f2c1					      else
   1242  f2c1		       e0 2c		      cpx	#44
   1243  f2c3					      endif
   1244  f2c3		       d0 e9		      bne	up2
   1245  f2c5
   1246  f2c5		       a5 9f		      lda	temp4
   1247  f2c7
   1248  f2c7				  -	      ifconst	superchip
   1249  f2c7				  -	      ifconst	pfres
   1250  f2c7				  -	      sta	playfield+pfres*4-129
   1251  f2c7				  -	      lda	temp3
   1252  f2c7				  -	      sta	playfield+pfres*4-130
   1253  f2c7				  -	      lda	temp2
   1254  f2c7				  -	      sta	playfield+pfres*4-131
   1255  f2c7				  -	      lda	temp1
   1256  f2c7				  -	      sta	playfield+pfres*4-132
   1257  f2c7				  -	      else
   1258  f2c7				  -	      sta	playfield+47-128
   1259  f2c7				  -	      lda	temp3
   1260  f2c7				  -	      sta	playfield+46-128
   1261  f2c7				  -	      lda	temp2
   1262  f2c7				  -	      sta	playfield+45-128
   1263  f2c7				  -	      lda	temp1
   1264  f2c7				  -	      sta	playfield+44-128
   1265  f2c7				  -	      endif
   1266  f2c7					      else
   1267  f2c7				  -	      ifconst	pfres
   1268  f2c7				  -	      sta	playfield+pfres*4-1
   1269  f2c7				  -	      lda	temp3
   1270  f2c7				  -	      sta	playfield+pfres*4-2
   1271  f2c7				  -	      lda	temp2
   1272  f2c7				  -	      sta	playfield+pfres*4-3
   1273  f2c7				  -	      lda	temp1
   1274  f2c7				  -	      sta	playfield+pfres*4-4
   1275  f2c7					      else
   1276  f2c7		       85 d3		      sta	playfield+47
   1277  f2c9		       a5 9e		      lda	temp3
   1278  f2cb		       85 d2		      sta	playfield+46
   1279  f2cd		       a5 9d		      lda	temp2
   1280  f2cf		       85 d1		      sta	playfield+45
   1281  f2d1		       a5 9c		      lda	temp1
   1282  f2d3		       85 d0		      sta	playfield+44
   1283  f2d5					      endif
   1284  f2d5					      endif
   1285  f2d5				   noshiftdown2
      0  f2d5					      RETURN
      1  f2d5					      ifnconst	bankswitch
      2  f2d5		       60		      rts
      3  f2d6				  -	      else
      4  f2d6				  -	      jmp	BS_return
      5  f2d6					      endif
   1287  f2d6
   1288  f2d6
   1289  f2d6				   notup
   1290  f2d6							;down
   1291  f2d6		       4a		      lsr
   1292  f2d7		       b0 02		      bcs	oneincup
   1293  f2d9		       e6 ef		      inc	playfieldpos
   1294  f2db				   oneincup
   1295  f2db		       e6 ef		      inc	playfieldpos
   1296  f2dd		       a5 ef		      lda	playfieldpos
   1297  f2df
   1298  f2df				  -	      ifconst	pfrowheight
   1299  f2df				  -	      cmp	#pfrowheight+1
   1300  f2df					      else
   1301  f2df					      ifnconst	pfres
   1302  f2df		       c9 09		      cmp	#9
   1303  f2e1				  -	      else
   1304  f2e1				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f2e1					      endif
   1306  f2e1					      endif
   1307  f2e1
   1308  f2e1		       90 3b		      bcc	noshiftdown
   1309  f2e3		       a9 01		      lda	#1
   1310  f2e5		       85 ef		      sta	playfieldpos
   1311  f2e7
   1312  f2e7				  -	      ifconst	pfres
   1313  f2e7				  -	      lda	playfield+pfres*4-1
   1314  f2e7				  -	      sta	temp4
   1315  f2e7				  -	      lda	playfield+pfres*4-2
   1316  f2e7				  -	      sta	temp3
   1317  f2e7				  -	      lda	playfield+pfres*4-3
   1318  f2e7				  -	      sta	temp2
   1319  f2e7				  -	      lda	playfield+pfres*4-4
   1320  f2e7					      else
   1321  f2e7		       a5 d3		      lda	playfield+47
   1322  f2e9		       85 9f		      sta	temp4
   1323  f2eb		       a5 d2		      lda	playfield+46
   1324  f2ed		       85 9e		      sta	temp3
   1325  f2ef		       a5 d1		      lda	playfield+45
   1326  f2f1		       85 9d		      sta	temp2
   1327  f2f3		       a5 d0		      lda	playfield+44
   1328  f2f5					      endif
   1329  f2f5
   1330  f2f5		       85 9c		      sta	temp1
   1331  f2f7
   1332  f2f7				  -	      ifconst	pfres
   1333  f2f7				  -	      ldx	#(pfres-1)*4
   1334  f2f7					      else
   1335  f2f7		       a2 2c		      ldx	#44
   1336  f2f9					      endif
   1337  f2f9				   down2
   1338  f2f9		       b5 a3		      lda	playfield-1,x
   1339  f2fb				  -	      ifconst	superchip
   1340  f2fb				  -	      sta	playfield-125,x
   1341  f2fb				  -	      lda	playfield-2,x
   1342  f2fb				  -	      sta	playfield-126,x
   1343  f2fb				  -	      lda	playfield-3,x
   1344  f2fb				  -	      sta	playfield-127,x
   1345  f2fb				  -	      lda	playfield-4,x
   1346  f2fb				  -	      sta	playfield-128,x
   1347  f2fb					      else
   1348  f2fb		       95 a7		      sta	playfield+3,x
   1349  f2fd		       b5 a2		      lda	playfield-2,x
   1350  f2ff		       95 a6		      sta	playfield+2,x
   1351  f301		       b5 a1		      lda	playfield-3,x
   1352  f303		       95 a5		      sta	playfield+1,x
   1353  f305		       b5 a0		      lda	playfield-4,x
   1354  f307		       95 a4		      sta	playfield,x
   1355  f309					      endif
   1356  f309		       8a		      txa
   1357  f30a		       cb 04		      sbx	#4
   1358  f30c		       d0 eb		      bne	down2
   1359  f30e
   1360  f30e		       a5 9f		      lda	temp4
   1361  f310				  -	      ifconst	superchip
   1362  f310				  -	      sta	playfield-125
   1363  f310				  -	      lda	temp3
   1364  f310				  -	      sta	playfield-126
   1365  f310				  -	      lda	temp2
   1366  f310				  -	      sta	playfield-127
   1367  f310				  -	      lda	temp1
   1368  f310				  -	      sta	playfield-128
   1369  f310					      else
   1370  f310		       85 a7		      sta	playfield+3
   1371  f312		       a5 9e		      lda	temp3
   1372  f314		       85 a6		      sta	playfield+2
   1373  f316		       a5 9d		      lda	temp2
   1374  f318		       85 a5		      sta	playfield+1
   1375  f31a		       a5 9c		      lda	temp1
   1376  f31c		       85 a4		      sta	playfield
   1377  f31e					      endif
   1378  f31e				   noshiftdown
      0  f31e					      RETURN
      1  f31e					      ifnconst	bankswitch
      2  f31e		       60		      rts
      3  f31f				  -	      else
      4  f31f				  -	      jmp	BS_return
      5  f31f					      endif
   1380  f31f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f31f
   1382  f31f							;standard routines needed for pretty much all games
   1383  f31f							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f31f							; repositioning code and score pointer setup moved to overscan
   1385  f31f							; read switches, joysticks now compiler generated (more efficient)
   1386  f31f
   1387  f31f				   randomize
   1388  f31f		       a5 a2		      lda	rand
   1389  f321		       4a		      lsr
   1390  f322				  -	      ifconst	rand16
   1391  f322				  -	      rol	rand16
   1392  f322					      endif
   1393  f322		       90 02		      bcc	noeor
   1394  f324		       49 b4		      eor	#$B4
   1395  f326				   noeor
   1396  f326		       85 a2		      sta	rand
   1397  f328				  -	      ifconst	rand16
   1398  f328				  -	      eor	rand16
   1399  f328					      endif
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1401  f329							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f329
   1403  f329				   drawscreen
   1404  f329				  -	      ifconst	debugscore
   1405  f329				  -	      ldx	#14
   1406  f329				  -	      lda	INTIM	; display # cycles left in the score
   1407  f329				  -
   1408  f329				  -	      ifconst	mincycles
   1409  f329				  -	      lda	mincycles
   1410  f329				  -	      cmp	INTIM
   1411  f329				  -	      lda	mincycles
   1412  f329				  -	      bcc	nochange
   1413  f329				  -	      lda	INTIM
   1414  f329				  -	      sta	mincycles
   1415  f329				  -nochange
   1416  f329				  -	      endif
   1417  f329				  -
   1418  f329				  -			; cmp #$2B
   1419  f329				  -			; bcs no_cycles_left
   1420  f329				  -	      bmi	cycles_left
   1421  f329				  -	      ldx	#64
   1422  f329				  -	      eor	#$ff	;make negative
   1423  f329				  -cycles_left
   1424  f329				  -	      stx	scorecolor
   1425  f329				  -	      and	#$7f	; clear sign bit
   1426  f329				  -	      tax
   1427  f329				  -	      lda	scorebcd,x
   1428  f329				  -	      sta	score+2
   1429  f329				  -	      lda	scorebcd1,x
   1430  f329				  -	      sta	score+1
   1431  f329				  -	      jmp	done_debugscore
   1432  f329				  -scorebcd
   1433  f329				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f329				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f329				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f329				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f329				  -scorebcd1
   1438  f329				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f329				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f329				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f329				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f329				  -done_debugscore
   1443  f329					      endif
   1444  f329
   1445  f329				  -	      ifconst	debugcycles
   1446  f329				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f329				  -			; cmp #$2B
   1448  f329				  -			; BCC overscan
   1449  f329				  -	      bmi	overscan
   1450  f329				  -	      sta	COLUBK
   1451  f329				  -	      bcs	doneoverscan
   1452  f329					      endif
   1453  f329
   1454  f329				   overscan
   1455  f329				  -	      ifconst	interlaced
   1456  f329				  -	      PHP
   1457  f329				  -	      PLA
   1458  f329				  -	      EOR	#4	; flip interrupt bit
   1459  f329				  -	      PHA
   1460  f329				  -	      PLP
   1461  f329				  -	      AND	#4	; isolate the interrupt bit
   1462  f329				  -	      TAX		; save it for later
   1463  f329					      endif
   1464  f329
   1465  f329				   overscanloop
   1466  f329		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f32c		       30 fb		      bmi	overscanloop
   1468  f32e				   doneoverscan
   1469  f32e
   1470  f32e							;do VSYNC
   1471  f32e
   1472  f32e				  -	      ifconst	interlaced
   1473  f32e				  -	      CPX	#4
   1474  f32e				  -	      BNE	oddframevsync
   1475  f32e					      endif
   1476  f32e
   1477  f32e		       a9 02		      lda	#2
   1478  f330		       85 02		      sta	WSYNC
   1479  f332		       85 00		      sta	VSYNC
   1480  f334		       85 02		      STA	WSYNC
   1481  f336		       85 02		      STA	WSYNC
   1482  f338		       4a		      lsr
   1483  f339		       85 02		      STA	WSYNC
   1484  f33b		       85 00		      STA	VSYNC
   1485  f33d		       85 01		      sta	VBLANK
   1486  f33f					      ifnconst	overscan_time
   1487  f33f		       a9 a5		      lda	#37+128
   1488  f341				  -	      else
   1489  f341				  -	      lda	#overscan_time+128
   1490  f341					      endif
   1491  f341		       8d 96 02 	      sta	TIM64T
   1492  f344
   1493  f344				  -	      ifconst	interlaced
   1494  f344				  -	      jmp	postsync
   1495  f344				  -
   1496  f344				  -oddframevsync
   1497  f344				  -	      sta	WSYNC
   1498  f344				  -
   1499  f344				  -	      LDA	($80,X)	; 11 waste
   1500  f344				  -	      LDA	($80,X)	; 11 waste
   1501  f344				  -	      LDA	($80,X)	; 11 waste
   1502  f344				  -
   1503  f344				  -	      lda	#2
   1504  f344				  -	      sta	VSYNC
   1505  f344				  -	      sta	WSYNC
   1506  f344				  -	      sta	WSYNC
   1507  f344				  -	      sta	WSYNC
   1508  f344				  -
   1509  f344				  -	      LDA	($80,X)	; 11 waste
   1510  f344				  -	      LDA	($80,X)	; 11 waste
   1511  f344				  -	      LDA	($80,X)	; 11 waste
   1512  f344				  -
   1513  f344				  -	      lda	#0
   1514  f344				  -	      sta	VSYNC
   1515  f344				  -	      sta	VBLANK
   1516  f344				  -	      ifnconst	overscan_time
   1517  f344				  -	      lda	#37+128
   1518  f344				  -	      else
   1519  f344				  -	      lda	#overscan_time+128
   1520  f344				  -	      endif
   1521  f344				  -	      sta	TIM64T
   1522  f344				  -
   1523  f344				  -postsync
   1524  f344					      endif
   1525  f344
   1526  f344				  -	      ifconst	legacy
   1527  f344				  -	      if	legacy < 100
   1528  f344				  -	      ldx	#4
   1529  f344				  -adjustloop
   1530  f344				  -	      lda	player0x,x
   1531  f344				  -	      sec
   1532  f344				  -	      sbc	#14	;?
   1533  f344				  -	      sta	player0x,x
   1534  f344				  -	      dex
   1535  f344				  -	      bpl	adjustloop
   1536  f344				  -	      endif
   1537  f344					      endif
   1538  f344				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f344				  -	      repeat	($fa-(<*))
   1540  f344				  -	      nop
   1541  f344				  -	      repend
   1542  f344					      endif
   1543  f344		       85 02		      sta	WSYNC
   1544  f346		       a2 04		      ldx	#4
      0  f348					      SLEEP	3
      1  f348				   .CYCLES    SET	3
      2  f348
      3  f348				  -	      IF	.CYCLES < 2
      4  f348				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f348				  -	      ERR
      6  f348					      ENDIF
      7  f348
      8  f348					      IF	.CYCLES & 1
      9  f348					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f348		       04 00		      nop	0
     11  f34a				  -	      ELSE
     12  f34a				  -	      bit	VSYNC
     13  f34a					      ENDIF
     14  f34a				   .CYCLES    SET	.CYCLES - 3
     15  f34a					      ENDIF
     16  f34a
     17  f34a				  -	      REPEAT	.CYCLES / 2
     18  f34a				  -	      nop
     19  f34a					      REPEND
   1546  f34a				   HorPosLoop		; 5
   1547  f34a		       b5 80		      lda	player0x,X	;+4 9
   1548  f34c		       38		      sec		;+2 11
   1549  f34d				   DivideLoop
   1550  f34d		       e9 0f		      sbc	#15
   1551  f34f		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f351		       95 9c		      sta	temp1,X	;+4 19
   1553  f353		       95 10		      sta	RESP0,X	;+4 23
   1554  f355		       85 02		      sta	WSYNC
   1555  f357		       ca		      dex
   1556  f358		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f35a							; 4
   1558  f35a
   1559  f35a		       a2 04		      ldx	#4
   1560  f35c		       b4 9c		      ldy	temp1,X
   1561  f35e		       b9 bd f2 	      lda	repostable-256,Y
   1562  f361		       95 20		      sta	HMP0,X	;+14 18
   1563  f363
   1564  f363		       ca		      dex
   1565  f364		       b4 9c		      ldy	temp1,X
   1566  f366		       b9 bd f2 	      lda	repostable-256,Y
   1567  f369		       95 20		      sta	HMP0,X	;+14 32
   1568  f36b
   1569  f36b		       ca		      dex
   1570  f36c		       b4 9c		      ldy	temp1,X
   1571  f36e		       b9 bd f2 	      lda	repostable-256,Y
   1572  f371		       95 20		      sta	HMP0,X	;+14 46
   1573  f373
   1574  f373		       ca		      dex
   1575  f374		       b4 9c		      ldy	temp1,X
   1576  f376		       b9 bd f2 	      lda	repostable-256,Y
   1577  f379		       95 20		      sta	HMP0,X	;+14 60
   1578  f37b
   1579  f37b		       ca		      dex
   1580  f37c		       b4 9c		      ldy	temp1,X
   1581  f37e		       b9 bd f2 	      lda	repostable-256,Y
   1582  f381		       95 20		      sta	HMP0,X	;+14 74
   1583  f383
   1584  f383		       85 02		      sta	WSYNC
   1585  f385
   1586  f385		       85 2a		      sta	HMOVE	;+3 3
   1587  f387
   1588  f387
   1589  f387				  -	      ifconst	legacy
   1590  f387				  -	      if	legacy < 100
   1591  f387				  -	      ldx	#4
   1592  f387				  -adjustloop2
   1593  f387				  -	      lda	player0x,x
   1594  f387				  -	      clc
   1595  f387				  -	      adc	#14	;?
   1596  f387				  -	      sta	player0x,x
   1597  f387				  -	      dex
   1598  f387				  -	      bpl	adjustloop2
   1599  f387				  -	      endif
   1600  f387					      endif
   1601  f387
   1602  f387
   1603  f387
   1604  f387
   1605  f387							;set score pointers
   1606  f387		       a7 95		      lax	score+2
   1607  f389		       20 bd f3 	      jsr	scorepointerset
   1608  f38c		       84 9b		      sty	scorepointers+5
   1609  f38e		       86 98		      stx	scorepointers+2
   1610  f390		       a7 94		      lax	score+1
   1611  f392		       20 bd f3 	      jsr	scorepointerset
   1612  f395		       84 9a		      sty	scorepointers+4
   1613  f397		       86 97		      stx	scorepointers+1
   1614  f399		       a7 93		      lax	score
   1615  f39b		       20 bd f3 	      jsr	scorepointerset
   1616  f39e		       84 99		      sty	scorepointers+3
   1617  f3a0		       86 96		      stx	scorepointers
   1618  f3a2
   1619  f3a2				   vblk
   1620  f3a2							; run possible vblank bB code
   1621  f3a2					      ifconst	vblank_bB_code
   1622  f3a2		       20 df f8 	      jsr	vblank_bB_code
   1623  f3a5					      endif
   1624  f3a5				   vblk2
   1625  f3a5		       ad 84 02 	      LDA	INTIM
   1626  f3a8		       30 fb		      bmi	vblk2
   1627  f3aa		       4c 34 f0 	      jmp	kernel
   1628  f3ad
   1629  f3ad
   1630  f3ad		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f3b6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f3bd				   repostable
   1633  f3bd
   1634  f3bd				   scorepointerset
   1635  f3bd		       29 0f		      and	#$0F
   1636  f3bf		       0a		      asl
   1637  f3c0		       0a		      asl
   1638  f3c1		       0a		      asl
   1639  f3c2		       69 9c		      adc	#<scoretable
   1640  f3c4		       a8		      tay
   1641  f3c5		       8a		      txa
   1642  f3c6							; and #$F0
   1643  f3c6							; lsr
   1644  f3c6		       4b f0		      asr	#$F0
   1645  f3c8		       69 9c		      adc	#<scoretable
   1646  f3ca		       aa		      tax
   1647  f3cb		       60		      rts
   1648  f3cc				   game
   1649  f3cc				   .
   1650  f3cc							; 
   1651  f3cc
   1652  f3cc				   .L00 		;  set kernel_options pfcolors
   1653  f3cc
   1654  f3cc				   .
   1655  f3cc							; 
   1656  f3cc
   1657  f3cc				   .L01 		;  const noscore  =  1
   1658  f3cc
   1659  f3cc				   .
   1660  f3cc							; 
   1661  f3cc
   1662  f3cc				   .L02 		;  const _mapHRes  =  8  : rem Makes designing the level easier
   1663  f3cc
   1664  f3cc				   .
   1665  f3cc							; 
   1666  f3cc
   1667  f3cc				   .L03 		;  dim _frameCounter  =  a  : rem should be 0-12
   1668  f3cc
   1669  f3cc				   .L04 		;  dim _respawnX  =  b
   1670  f3cc
   1671  f3cc				   .L05 		;  dim _respawnY  =  c
   1672  f3cc
   1673  f3cc				   .L06 		;  dim _respawnRoom  =  d
   1674  f3cc
   1675  f3cc				   .L07 		;  dim _playerRoom  =	e
   1676  f3cc
   1677  f3cc				   .
   1678  f3cc							; 
   1679  f3cc
   1680  f3cc				   .L08 		;  dim _Bit1_HFlip_P0	=  y  :  rem for horizontal flip
   1681  f3cc
   1682  f3cc				   .L09 		;  dim _Bit2_VFlip_P0	=  y  :  rem for vertical flip
   1683  f3cc
   1684  f3cc				   .L010		;  dim _Bit3_Walking_P0  =  y	:  rem If walking
   1685  f3cc
   1686  f3cc				   .L011		;  dim _Bit4_AnimStars  =  y  :  rem If to show stars
   1687  f3cc
   1688  f3cc				   .
   1689  f3cc							; 
   1690  f3cc
   1691  f3cc				   .L012		;  CTRLPF = 5
   1692  f3cc
   1693  f3cc		       a9 05		      LDA	#5
   1694  f3ce		       85 0a		      STA	CTRLPF
   1695  f3d0				   .
   1696  f3d0							; 
   1697  f3d0
   1698  f3d0				   .
   1699  f3d0							; 
   1700  f3d0
   1701  f3d0				   .L013		;  pfscroll upup : pfscroll upup
   1702  f3d0
   1703  f3d0		       a9 06		      LDA	#6
   1704  f3d2		       20 5f f2 	      jsr	pfscroll
   1705  f3d5		       a9 06		      LDA	#6
   1706  f3d7		       20 5f f2 	      jsr	pfscroll
   1707  f3da				   .
   1708  f3da							; 
   1709  f3da
   1710  f3da				   .L014		;  COLUPF = $56  : rem playfield
   1711  f3da
   1712  f3da		       a9 56		      LDA	#$56
   1713  f3dc		       85 08		      STA	COLUPF
   1714  f3de				   .
   1715  f3de							; 
   1716  f3de
   1717  f3de				   .
   1718  f3de							; 
   1719  f3de
   1720  f3de				   .L015		;  rem very top color seems to be ignored?
   1721  f3de
   1722  f3de				   .L016		;  pfcolors:
   1723  f3de
   1724  f3de		       a9 0e		      lda	# $0E
   1725  f3e0		       85 08		      sta	COLUPF
   1726  f3e2				  -	      ifconst	pfres
   1727  f3e2				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   1728  f3e2					      else
   1729  f3e2		       a9 f9		      lda	#>(pfcolorlabel13-84)
   1730  f3e4					      endif
   1731  f3e4		       85 f1		      sta	pfcolortable+1
   1732  f3e6				  -	      ifconst	pfres
   1733  f3e6				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   1734  f3e6					      else
   1735  f3e6		       a9 04		      lda	#<(pfcolorlabel13-84)
   1736  f3e8					      endif
   1737  f3e8		       85 f0		      sta	pfcolortable
   1738  f3ea				   .
   1739  f3ea							; 
   1740  f3ea
   1741  f3ea				   .
   1742  f3ea							; 
   1743  f3ea
   1744  f3ea				   .
   1745  f3ea							; 
   1746  f3ea
   1747  f3ea				   .
   1748  f3ea							; 
   1749  f3ea
   1750  f3ea				   .L017		;  missile0height  =  88
   1751  f3ea
   1752  f3ea		       a9 58		      LDA	#88
   1753  f3ec		       85 90		      STA	missile0height
   1754  f3ee				   .L018		;  missile0y  =  88
   1755  f3ee
   1756  f3ee		       a9 58		      LDA	#88
   1757  f3f0		       85 91		      STA	missile0y
   1758  f3f2				   .
   1759  f3f2							; 
   1760  f3f2
   1761  f3f2				   .
   1762  f3f2							; 
   1763  f3f2
   1764  f3f2				   .__start
   1765  f3f2							; __start
   1766  f3f2
   1767  f3f2				   .L019		;  _respawnX = 55 : _respawnY = 59
   1768  f3f2
   1769  f3f2		       a9 37		      LDA	#55
   1770  f3f4		       85 d5		      STA	_respawnX
   1771  f3f6		       a9 3b		      LDA	#59
   1772  f3f8		       85 d6		      STA	_respawnY
   1773  f3fa				   .L020		;  player1x = 75 : player1y = 67
   1774  f3fa
   1775  f3fa		       a9 4b		      LDA	#75
   1776  f3fc		       85 81		      STA	player1x
   1777  f3fe		       a9 43		      LDA	#67
   1778  f400		       85 86		      STA	player1y
   1779  f402				   .L021		;  gosub __objCheckpoint
   1780  f402
   1781  f402		       20 d2 f8 	      jsr	.__objCheckpoint
   1782  f405
   1783  f405				   .L022		;  rem NUSIZ1 = $33
   1784  f405
   1785  f405				   .
   1786  f405							; 
   1787  f405
   1788  f405				   .
   1789  f405							; 
   1790  f405
   1791  f405				   .__respawn
   1792  f405							; __respawn
   1793  f405
   1794  f405				   .L023		;  COLUP0 = $9A  : rem player
   1795  f405
   1796  f405		       a9 9a		      LDA	#$9A
   1797  f407		       85 06		      STA	COLUP0
   1798  f409				   .L024		;  player0x = _respawnX : player0y = _respawnY
   1799  f409
   1800  f409		       a5 d5		      LDA	_respawnX
   1801  f40b		       85 80		      STA	player0x
   1802  f40d		       a5 d6		      LDA	_respawnY
   1803  f40f		       85 85		      STA	player0y
   1804  f411				   .L025		;  _playerRoom = _respawnRoom
   1805  f411
   1806  f411		       a5 d7		      LDA	_respawnRoom
   1807  f413		       85 d8		      STA	_playerRoom
   1808  f415				   .L026		;  _Bit1_HFlip_P0{1} = 0
   1809  f415
   1810  f415		       a5 ec		      LDA	_Bit1_HFlip_P0
   1811  f417		       29 fd		      AND	#253
   1812  f419		       85 ec		      STA	_Bit1_HFlip_P0
   1813  f41b				   .L027		;  _Bit2_VFlip_P0{2} = 1
   1814  f41b
   1815  f41b		       a5 ec		      LDA	_Bit2_VFlip_P0
   1816  f41d		       09 04		      ORA	#4
   1817  f41f		       85 ec		      STA	_Bit2_VFlip_P0
   1818  f421				   .L028		;  gosub __updateScreen
   1819  f421
   1820  f421		       20 fe f4 	      jsr	.__updateScreen
   1821  f424
   1822  f424				   .
   1823  f424							; 
   1824  f424
   1825  f424				   .
   1826  f424							; 
   1827  f424
   1828  f424				   .
   1829  f424							; 
   1830  f424
   1831  f424				   .
   1832  f424							; 
   1833  f424
   1834  f424				   .
   1835  f424							; 
   1836  f424
   1837  f424				   .
   1838  f424							; 
   1839  f424
   1840  f424				   .__main
   1841  f424							; __main
   1842  f424
   1843  f424				   .L029		;  gosub __draw
   1844  f424
   1845  f424		       20 ad f4 	      jsr	.__draw
   1846  f427
   1847  f427				   .
   1848  f427							; 
   1849  f427
   1850  f427				   .L030		;  _Bit3_Walking_P0{3} = 0
   1851  f427
   1852  f427		       a5 ec		      LDA	_Bit3_Walking_P0
   1853  f429		       29 f7		      AND	#247
   1854  f42b		       85 ec		      STA	_Bit3_Walking_P0
   1855  f42d				   .L031		;  if joy0left then gosub __moveLeft
   1856  f42d
   1857  f42d		       2c 80 02 	      bit	SWCHA
   1858  f430		       70 03		      BVS	.skipL031
   1859  f432				   .condpart0
   1860  f432		       20 95 f6 	      jsr	.__moveLeft
   1861  f435
   1862  f435				   .skipL031
   1863  f435				   .L032		;  if joy0right then gosub __moveRight
   1864  f435
   1865  f435		       2c 80 02 	      bit	SWCHA
   1866  f438		       30 03		      BMI	.skipL032
   1867  f43a				   .condpart1
   1868  f43a		       20 00 f7 	      jsr	.__moveRight
   1869  f43d
   1870  f43d				   .skipL032
   1871  f43d				   .L033		;  if _Bit2_VFlip_P0{2} then gosub __moveDown else gosub __moveUp
   1872  f43d
   1873  f43d		       a5 ec		      LDA	_Bit2_VFlip_P0
   1874  f43f		       29 04		      AND	#4
   1875  f441		       f0 06		      BEQ	.skipL033
   1876  f443				   .condpart2
   1877  f443		       20 d2 f7 	      jsr	.__moveDown
   1878  f446		       4c 4c f4 	      jmp	.skipelse0
   1879  f449				   .skipL033
   1880  f449		       20 6b f7 	      jsr	.__moveUp
   1881  f44c
   1882  f44c				   .skipelse0
   1883  f44c				   .L034		;  if player0x > 135 then player0x = 15 : _playerRoom = _playerRoom + 1 : gosub __updateScreen
   1884  f44c
   1885  f44c		       a9 87		      LDA	#135
   1886  f44e		       c5 80		      CMP	player0x
   1887  f450		       b0 09		      BCS	.skipL034
   1888  f452				   .condpart3
   1889  f452		       a9 0f		      LDA	#15
   1890  f454		       85 80		      STA	player0x
   1891  f456		       e6 d8		      INC	_playerRoom
   1892  f458		       20 fe f4 	      jsr	.__updateScreen
   1893  f45b
   1894  f45b				   .skipL034
   1895  f45b				   .L035		;  if player0x < 15 then player0x = 135 : _playerRoom = _playerRoom - 1 : gosub __updateScreen
   1896  f45b
   1897  f45b		       a5 80		      LDA	player0x
   1898  f45d		       c9 0f		      CMP	#15
   1899  f45f		       b0 09		      BCS	.skipL035
   1900  f461				   .condpart4
   1901  f461		       a9 87		      LDA	#135
   1902  f463		       85 80		      STA	player0x
   1903  f465		       c6 d8		      DEC	_playerRoom
   1904  f467		       20 fe f4 	      jsr	.__updateScreen
   1905  f46a
   1906  f46a				   .skipL035
   1907  f46a				   .L036		;  if player0y < 20 then player0y = 88 : _playerRoom = _playerRoom - _mapHRes : gosub __updateScreen
   1908  f46a
   1909  f46a		       a5 85		      LDA	player0y
   1910  f46c		       c9 14		      CMP	#20
   1911  f46e		       b0 0e		      BCS	.skipL036
   1912  f470				   .condpart5
   1913  f470		       a9 58		      LDA	#88
   1914  f472		       85 85		      STA	player0y
   1915  f474		       a5 d8		      LDA	_playerRoom
   1916  f476		       38		      SEC
   1917  f477		       e9 08		      SBC	#_mapHRes
   1918  f479		       85 d8		      STA	_playerRoom
   1919  f47b		       20 fe f4 	      jsr	.__updateScreen
   1920  f47e
   1921  f47e				   .skipL036
   1922  f47e				   .L037		;  if player0y > 88 then player0y = 20 : _playerRoom = _playerRoom + _mapHRes : gosub __updateScreen
   1923  f47e
   1924  f47e		       a9 58		      LDA	#88
   1925  f480		       c5 85		      CMP	player0y
   1926  f482		       b0 0e		      BCS	.skipL037
   1927  f484				   .condpart6
   1928  f484		       a9 14		      LDA	#20
   1929  f486		       85 85		      STA	player0y
   1930  f488		       a5 d8		      LDA	_playerRoom
   1931  f48a		       18		      CLC
   1932  f48b		       69 08		      ADC	#_mapHRes
   1933  f48d		       85 d8		      STA	_playerRoom
   1934  f48f		       20 fe f4 	      jsr	.__updateScreen
   1935  f492
   1936  f492				   .skipL037
   1937  f492				   .
   1938  f492							; 
   1939  f492
   1940  f492				   .L038		;  if _playerRoom = _respawnRoom then COLUP1 = $0E else COLUP1 = $9A
   1941  f492
   1942  f492		       a5 d8		      LDA	_playerRoom
   1943  f494		       c5 d7		      CMP	_respawnRoom
   1944  f496		       d0 07		      BNE	.skipL038
   1945  f498				   .condpart7
   1946  f498		       a9 0e		      LDA	#$0E
   1947  f49a		       85 07		      STA	COLUP1
   1948  f49c		       4c a3 f4 	      jmp	.skipelse1
   1949  f49f				   .skipL038
   1950  f49f		       a9 9a		      LDA	#$9A
   1951  f4a1		       85 07		      STA	COLUP1
   1952  f4a3				   .skipelse1
   1953  f4a3				   .L039		;  if collision(player0,player1) then gosub __scriptCheckpoint
   1954  f4a3
   1955  f4a3		       24 07		      bit	CXPPMM
   1956  f4a5		       10 03		      BPL	.skipL039
   1957  f4a7				   .condpart8
   1958  f4a7		       20 6f f6 	      jsr	.__scriptCheckpoint
   1959  f4aa
   1960  f4aa				   .skipL039
   1961  f4aa				   .
   1962  f4aa							; 
   1963  f4aa
   1964  f4aa				   .
   1965  f4aa							; 
   1966  f4aa
   1967  f4aa				   .
   1968  f4aa							; 
   1969  f4aa
   1970  f4aa				   .
   1971  f4aa							; 
   1972  f4aa
   1973  f4aa				   .L040		;  goto __main
   1974  f4aa
   1975  f4aa		       4c 24 f4 	      jmp	.__main
   1976  f4ad
   1977  f4ad				   .__draw
   1978  f4ad							; __draw
   1979  f4ad
   1980  f4ad				   .L041		;  if _Bit1_HFlip_P0{1} then REFP0  =	8
   1981  f4ad
   1982  f4ad		       a5 ec		      LDA	_Bit1_HFlip_P0
   1983  f4af		       29 02		      AND	#2
   1984  f4b1		       f0 04		      BEQ	.skipL041
   1985  f4b3				   .condpart9
   1986  f4b3		       a9 08		      LDA	#8
   1987  f4b5		       85 0b		      STA	REFP0
   1988  f4b7				   .skipL041
   1989  f4b7				   .L042		;  _frameCounter = _frameCounter + 1
   1990  f4b7
   1991  f4b7		       e6 d4		      INC	_frameCounter
   1992  f4b9				   .L043		;  if _frameCounter = 12 then _frameCounter = 0
   1993  f4b9
   1994  f4b9		       a5 d4		      LDA	_frameCounter
   1995  f4bb		       c9 0c		      CMP	#12
   1996  f4bd		       d0 04		      BNE	.skipL043
   1997  f4bf				   .condpart10
   1998  f4bf		       a9 00		      LDA	#0
   1999  f4c1		       85 d4		      STA	_frameCounter
   2000  f4c3				   .skipL043
   2001  f4c3				   .L044		;  ENAM0 = 2
   2002  f4c3
   2003  f4c3		       a9 02		      LDA	#2
   2004  f4c5		       85 1d		      STA	ENAM0
   2005  f4c7				   .L045		;  if _Bit4_AnimStars{4} then missile0x = missile0x - 1 else missile0x = 0
   2006  f4c7
   2007  f4c7		       a5 ec		      LDA	_Bit4_AnimStars
   2008  f4c9		       29 10		      AND	#16
   2009  f4cb		       f0 05		      BEQ	.skipL045
   2010  f4cd				   .condpart11
   2011  f4cd		       c6 82		      DEC	missile0x
   2012  f4cf		       4c d6 f4 	      jmp	.skipelse2
   2013  f4d2				   .skipL045
   2014  f4d2		       a9 00		      LDA	#0
   2015  f4d4		       85 82		      STA	missile0x
   2016  f4d6				   .skipelse2
   2017  f4d6				   .L046		;  if missile0x > 200 then missile0x = missile0x + 160
   2018  f4d6
   2019  f4d6		       a9 c8		      LDA	#200
   2020  f4d8		       c5 82		      CMP	missile0x
   2021  f4da		       b0 07		      BCS	.skipL046
   2022  f4dc				   .condpart12
   2023  f4dc		       a5 82		      LDA	missile0x
   2024  f4de		       18		      CLC
   2025  f4df		       69 a0		      ADC	#160
   2026  f4e1		       85 82		      STA	missile0x
   2027  f4e3				   .skipL046
   2028  f4e3				   .L047		;  if missile0x > 159 then missile0x = missile0x - 160
   2029  f4e3
   2030  f4e3		       a9 9f		      LDA	#159
   2031  f4e5		       c5 82		      CMP	missile0x
   2032  f4e7		       b0 07		      BCS	.skipL047
   2033  f4e9				   .condpart13
   2034  f4e9		       a5 82		      LDA	missile0x
   2035  f4eb		       38		      SEC
   2036  f4ec		       e9 a0		      SBC	#160
   2037  f4ee		       85 82		      STA	missile0x
   2038  f4f0				   .skipL047
   2039  f4f0				   .L048		;  drawscreen
   2040  f4f0
   2041  f4f0		       20 29 f3 	      jsr	drawscreen
   2042  f4f3				   .L049		;  if switchreset then goto __scriptHazard
   2043  f4f3
   2044  f4f3		       a9 01		      lda	#1
   2045  f4f5		       2c 82 02 	      bit	SWCHB
   2046  f4f8		       d0 03		      BNE	.skipL049
   2047  f4fa				   .condpart14
   2048  f4fa		       4c 7c f6 	      jmp	.__scriptHazard
   2049  f4fd
   2050  f4fd				   .skipL049
   2051  f4fd				   .L050		;  return
   2052  f4fd
   2053  f4fd		       60		      RTS
   2054  f4fe				   .
   2055  f4fe							; 
   2056  f4fe
   2057  f4fe				   .__updateScreen
   2058  f4fe							; __updateScreen
   2059  f4fe
   2060  f4fe				   .
   2061  f4fe							; 
   2062  f4fe
   2063  f4fe				   .
   2064  f4fe							; 
   2065  f4fe
   2066  f4fe				   .
   2067  f4fe							; 
   2068  f4fe
   2069  f4fe				   .L051		;  on _playerRoom goto __lvl0 __lvl1 __lvl2 __lvl3
   2070  f4fe
   2071  f4fe		       a6 d8		      LDX	_playerRoom
   2072  f500		       bd 09 f5 	      LDA	.L051jumptablehi,x
   2073  f503		       48		      PHA
   2074  f504		       bd 0d f5 	      LDA	.L051jumptablelo,x
   2075  f507		       48		      PHA
   2076  f508		       60		      RTS
   2077  f509				   .L051jumptablehi
   2078  f509		       f5		      .byte.b	>(.__lvl0-1)
   2079  f50a		       f5		      .byte.b	>(.__lvl1-1)
   2080  f50b		       f5		      .byte.b	>(.__lvl2-1)
   2081  f50c		       f6		      .byte.b	>(.__lvl3-1)
   2082  f50d				   .L051jumptablelo
   2083  f50d		       4e		      .byte.b	<(.__lvl0-1)
   2084  f50e		       96		      .byte.b	<(.__lvl1-1)
   2085  f50f		       de		      .byte.b	<(.__lvl2-1)
   2086  f510		       26		      .byte.b	<(.__lvl3-1)
   2087  f511				   .return
   2088  f511							; return
   2089  f511
   2090  f511				   .
   2091  f511							; 
   2092  f511
   2093  f511				   .L052		;  rem *********************************************************************************************************
   2094  f511
   2095  f511				   .L053		;  rem Level Data here
   2096  f511
   2097  f511				   .L054		;  rem *********************************************************************************************************
   2098  f511
   2099  f511				   .
   2100  f511							; 
   2101  f511
   2102  f511				   .__lvl
   2103  f511							; __lvl
   2104  f511
   2105  f511				   .L055		;  playfield:
   2106  f511
   2107  f511				  -	      ifconst	pfres
   2108  f511				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2109  f511					      else
   2110  f511		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2111  f513					      endif
   2112  f513		       4c 46 f5 	      jmp	pflabel0
   2113  f516				   PF_data0
   2114  f516		       00 00		      .byte.b	%00000000, %00000000
   2115  f518					      if	(pfwidth>2)
   2116  f518		       00 00		      .byte.b	%00000000, %00000000
   2117  f51a					      endif
   2118  f51a		       00 00		      .byte.b	%00000000, %00000000
   2119  f51c					      if	(pfwidth>2)
   2120  f51c		       00 00		      .byte.b	%00000000, %00000000
   2121  f51e					      endif
   2122  f51e		       29 52		      .byte.b	%00101001, %01010010
   2123  f520					      if	(pfwidth>2)
   2124  f520		       52 29		      .byte.b	%01010010, %00101001
   2125  f522					      endif
   2126  f522		       10 21		      .byte.b	%00010000, %00100001
   2127  f524					      if	(pfwidth>2)
   2128  f524		       21 10		      .byte.b	%00100001, %00010000
   2129  f526					      endif
   2130  f526		       00 00		      .byte.b	%00000000, %00000000
   2131  f528					      if	(pfwidth>2)
   2132  f528		       00 00		      .byte.b	%00000000, %00000000
   2133  f52a					      endif
   2134  f52a		       00 00		      .byte.b	%00000000, %00000000
   2135  f52c					      if	(pfwidth>2)
   2136  f52c		       00 00		      .byte.b	%00000000, %00000000
   2137  f52e					      endif
   2138  f52e		       00 00		      .byte.b	%00000000, %00000000
   2139  f530					      if	(pfwidth>2)
   2140  f530		       00 00		      .byte.b	%00000000, %00000000
   2141  f532					      endif
   2142  f532		       00 00		      .byte.b	%00000000, %00000000
   2143  f534					      if	(pfwidth>2)
   2144  f534		       00 00		      .byte.b	%00000000, %00000000
   2145  f536					      endif
   2146  f536		       00 00		      .byte.b	%00000000, %00000000
   2147  f538					      if	(pfwidth>2)
   2148  f538		       00 00		      .byte.b	%00000000, %00000000
   2149  f53a					      endif
   2150  f53a		       00 00		      .byte.b	%00000000, %00000000
   2151  f53c					      if	(pfwidth>2)
   2152  f53c		       00 00		      .byte.b	%00000000, %00000000
   2153  f53e					      endif
   2154  f53e		       00 00		      .byte.b	%00000000, %00000000
   2155  f540					      if	(pfwidth>2)
   2156  f540		       00 00		      .byte.b	%00000000, %00000000
   2157  f542					      endif
   2158  f542		       00 00		      .byte.b	%00000000, %00000000
   2159  f544					      if	(pfwidth>2)
   2160  f544		       00 00		      .byte.b	%00000000, %00000000
   2161  f546					      endif
   2162  f546				   pflabel0
   2163  f546		       bd 16 f5 	      lda	PF_data0,x
   2164  f549		       95 a4		      sta	playfield,x
   2165  f54b		       ca		      dex
   2166  f54c		       10 f8		      bpl	pflabel0
   2167  f54e				   .L056		;  return
   2168  f54e
   2169  f54e		       60		      RTS
   2170  f54f				   .
   2171  f54f							; 
   2172  f54f
   2173  f54f				   .
   2174  f54f							; 
   2175  f54f
   2176  f54f				   .
   2177  f54f							; 
   2178  f54f
   2179  f54f				   .
   2180  f54f							; 
   2181  f54f
   2182  f54f				   .
   2183  f54f							; 
   2184  f54f
   2185  f54f				   .
   2186  f54f							; 
   2187  f54f
   2188  f54f				   .
   2189  f54f							; 
   2190  f54f
   2191  f54f				   .
   2192  f54f							; 
   2193  f54f
   2194  f54f				   .
   2195  f54f							; 
   2196  f54f
   2197  f54f				   .
   2198  f54f							; 
   2199  f54f
   2200  f54f				   .
   2201  f54f							; 
   2202  f54f
   2203  f54f				   .
   2204  f54f							; 
   2205  f54f
   2206  f54f				   .
   2207  f54f							; 
   2208  f54f
   2209  f54f				   .
   2210  f54f							; 
   2211  f54f
   2212  f54f				   .
   2213  f54f							; 
   2214  f54f
   2215  f54f				   .
   2216  f54f							; 
   2217  f54f
   2218  f54f				   .__lvl0
   2219  f54f							; __lvl0
   2220  f54f
   2221  f54f				   .L057		;  COLUBK = $00  : rem bg
   2222  f54f
   2223  f54f		       a9 00		      LDA	#$00
   2224  f551		       85 09		      STA	COLUBK
   2225  f553				   .L058		;  _Bit4_AnimStars{4} = 1
   2226  f553
   2227  f553		       a5 ec		      LDA	_Bit4_AnimStars
   2228  f555		       09 10		      ORA	#16
   2229  f557		       85 ec		      STA	_Bit4_AnimStars
   2230  f559				   .L059		;  playfield:
   2231  f559
   2232  f559				  -	      ifconst	pfres
   2233  f559				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2234  f559					      else
   2235  f559		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2236  f55b					      endif
   2237  f55b		       4c 8e f5 	      jmp	pflabel1
   2238  f55e				   PF_data1
   2239  f55e		       aa 55		      .byte.b	%10101010, %01010101
   2240  f560					      if	(pfwidth>2)
   2241  f560		       aa 55		      .byte.b	%10101010, %01010101
   2242  f562					      endif
   2243  f562		       55 aa		      .byte.b	%01010101, %10101010
   2244  f564					      if	(pfwidth>2)
   2245  f564		       55 aa		      .byte.b	%01010101, %10101010
   2246  f566					      endif
   2247  f566		       bf ff		      .byte.b	%10111111, %11111111
   2248  f568					      if	(pfwidth>2)
   2249  f568		       ff 7f		      .byte.b	%11111111, %01111111
   2250  f56a					      endif
   2251  f56a		       60 00		      .byte.b	%01100000, %00000000
   2252  f56c					      if	(pfwidth>2)
   2253  f56c		       00 a0		      .byte.b	%00000000, %10100000
   2254  f56e					      endif
   2255  f56e		       a0 00		      .byte.b	%10100000, %00000000
   2256  f570					      if	(pfwidth>2)
   2257  f570		       00 e0		      .byte.b	%00000000, %11100000
   2258  f572					      endif
   2259  f572		       60 00		      .byte.b	%01100000, %00000000
   2260  f574					      if	(pfwidth>2)
   2261  f574		       00 00		      .byte.b	%00000000, %00000000
   2262  f576					      endif
   2263  f576		       a0 00		      .byte.b	%10100000, %00000000
   2264  f578					      if	(pfwidth>2)
   2265  f578		       00 00		      .byte.b	%00000000, %00000000
   2266  f57a					      endif
   2267  f57a		       60 00		      .byte.b	%01100000, %00000000
   2268  f57c					      if	(pfwidth>2)
   2269  f57c		       00 00		      .byte.b	%00000000, %00000000
   2270  f57e					      endif
   2271  f57e		       a0 00		      .byte.b	%10100000, %00000000
   2272  f580					      if	(pfwidth>2)
   2273  f580		       00 00		      .byte.b	%00000000, %00000000
   2274  f582					      endif
   2275  f582		       7f ff		      .byte.b	%01111111, %11111111
   2276  f584					      if	(pfwidth>2)
   2277  f584		       ff ff		      .byte.b	%11111111, %11111111
   2278  f586					      endif
   2279  f586		       aa 55		      .byte.b	%10101010, %01010101
   2280  f588					      if	(pfwidth>2)
   2281  f588		       aa 55		      .byte.b	%10101010, %01010101
   2282  f58a					      endif
   2283  f58a		       55 aa		      .byte.b	%01010101, %10101010
   2284  f58c					      if	(pfwidth>2)
   2285  f58c		       55 aa		      .byte.b	%01010101, %10101010
   2286  f58e					      endif
   2287  f58e				   pflabel1
   2288  f58e		       bd 5e f5 	      lda	PF_data1,x
   2289  f591		       95 a4		      sta	playfield,x
   2290  f593		       ca		      dex
   2291  f594		       10 f8		      bpl	pflabel1
   2292  f596				   .L060		;  return
   2293  f596
   2294  f596		       60		      RTS
   2295  f597				   .
   2296  f597							; 
   2297  f597
   2298  f597				   .__lvl1
   2299  f597							; __lvl1
   2300  f597
   2301  f597				   .L061		;  COLUBK = $50  : rem bg
   2302  f597
   2303  f597		       a9 50		      LDA	#$50
   2304  f599		       85 09		      STA	COLUBK
   2305  f59b				   .L062		;  _Bit4_AnimStars{4} = 0
   2306  f59b
   2307  f59b		       a5 ec		      LDA	_Bit4_AnimStars
   2308  f59d		       29 ef		      AND	#239
   2309  f59f		       85 ec		      STA	_Bit4_AnimStars
   2310  f5a1				   .L063		;  playfield:
   2311  f5a1
   2312  f5a1				  -	      ifconst	pfres
   2313  f5a1				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2314  f5a1					      else
   2315  f5a1		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2316  f5a3					      endif
   2317  f5a3		       4c d6 f5 	      jmp	pflabel2
   2318  f5a6				   PF_data2
   2319  f5a6		       ff ff		      .byte.b	%11111111, %11111111
   2320  f5a8					      if	(pfwidth>2)
   2321  f5a8		       ff ff		      .byte.b	%11111111, %11111111
   2322  f5aa					      endif
   2323  f5aa		       ff ff		      .byte.b	%11111111, %11111111
   2324  f5ac					      if	(pfwidth>2)
   2325  f5ac		       ff ff		      .byte.b	%11111111, %11111111
   2326  f5ae					      endif
   2327  f5ae		       ff ff		      .byte.b	%11111111, %11111111
   2328  f5b0					      if	(pfwidth>2)
   2329  f5b0		       ff ff		      .byte.b	%11111111, %11111111
   2330  f5b2					      endif
   2331  f5b2		       ff ff		      .byte.b	%11111111, %11111111
   2332  f5b4					      if	(pfwidth>2)
   2333  f5b4		       ff ff		      .byte.b	%11111111, %11111111
   2334  f5b6					      endif
   2335  f5b6		       ff ff		      .byte.b	%11111111, %11111111
   2336  f5b8					      if	(pfwidth>2)
   2337  f5b8		       ff ff		      .byte.b	%11111111, %11111111
   2338  f5ba					      endif
   2339  f5ba		       00 00		      .byte.b	%00000000, %00000000
   2340  f5bc					      if	(pfwidth>2)
   2341  f5bc		       00 00		      .byte.b	%00000000, %00000000
   2342  f5be					      endif
   2343  f5be		       00 00		      .byte.b	%00000000, %00000000
   2344  f5c0					      if	(pfwidth>2)
   2345  f5c0		       00 00		      .byte.b	%00000000, %00000000
   2346  f5c2					      endif
   2347  f5c2		       00 00		      .byte.b	%00000000, %00000000
   2348  f5c4					      if	(pfwidth>2)
   2349  f5c4		       00 00		      .byte.b	%00000000, %00000000
   2350  f5c6					      endif
   2351  f5c6		       00 00		      .byte.b	%00000000, %00000000
   2352  f5c8					      if	(pfwidth>2)
   2353  f5c8		       00 00		      .byte.b	%00000000, %00000000
   2354  f5ca					      endif
   2355  f5ca		       ff 01		      .byte.b	%11111111, %00000001
   2356  f5cc					      if	(pfwidth>2)
   2357  f5cc		       00 ff		      .byte.b	%00000000, %11111111
   2358  f5ce					      endif
   2359  f5ce		       ff ff		      .byte.b	%11111111, %11111111
   2360  f5d0					      if	(pfwidth>2)
   2361  f5d0		       ff ff		      .byte.b	%11111111, %11111111
   2362  f5d2					      endif
   2363  f5d2		       55 aa		      .byte.b	%01010101, %10101010
   2364  f5d4					      if	(pfwidth>2)
   2365  f5d4		       55 aa		      .byte.b	%01010101, %10101010
   2366  f5d6					      endif
   2367  f5d6				   pflabel2
   2368  f5d6		       bd a6 f5 	      lda	PF_data2,x
   2369  f5d9		       95 a4		      sta	playfield,x
   2370  f5db		       ca		      dex
   2371  f5dc		       10 f8		      bpl	pflabel2
   2372  f5de				   .L064		;  return
   2373  f5de
   2374  f5de		       60		      RTS
   2375  f5df				   .
   2376  f5df							; 
   2377  f5df
   2378  f5df				   .__lvl2
   2379  f5df							; __lvl2
   2380  f5df
   2381  f5df				   .L065		;  COLUBK = $00  : rem bg
   2382  f5df
   2383  f5df		       a9 00		      LDA	#$00
   2384  f5e1		       85 09		      STA	COLUBK
   2385  f5e3				   .L066		;  _Bit4_AnimStars{4} = 1
   2386  f5e3
   2387  f5e3		       a5 ec		      LDA	_Bit4_AnimStars
   2388  f5e5		       09 10		      ORA	#16
   2389  f5e7		       85 ec		      STA	_Bit4_AnimStars
   2390  f5e9				   .L067		;  playfield:
   2391  f5e9
   2392  f5e9				  -	      ifconst	pfres
   2393  f5e9				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2394  f5e9					      else
   2395  f5e9		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2396  f5eb					      endif
   2397  f5eb		       4c 1e f6 	      jmp	pflabel3
   2398  f5ee				   PF_data3
   2399  f5ee		       e0 00		      .byte.b	%11100000, %00000000
   2400  f5f0					      if	(pfwidth>2)
   2401  f5f0		       00 e0		      .byte.b	%00000000, %11100000
   2402  f5f2					      endif
   2403  f5f2		       e0 00		      .byte.b	%11100000, %00000000
   2404  f5f4					      if	(pfwidth>2)
   2405  f5f4		       00 e0		      .byte.b	%00000000, %11100000
   2406  f5f6					      endif
   2407  f5f6		       e0 00		      .byte.b	%11100000, %00000000
   2408  f5f8					      if	(pfwidth>2)
   2409  f5f8		       00 e0		      .byte.b	%00000000, %11100000
   2410  f5fa					      endif
   2411  f5fa		       e0 00		      .byte.b	%11100000, %00000000
   2412  f5fc					      if	(pfwidth>2)
   2413  f5fc		       00 e0		      .byte.b	%00000000, %11100000
   2414  f5fe					      endif
   2415  f5fe		       e0 00		      .byte.b	%11100000, %00000000
   2416  f600					      if	(pfwidth>2)
   2417  f600		       00 e0		      .byte.b	%00000000, %11100000
   2418  f602					      endif
   2419  f602		       00 00		      .byte.b	%00000000, %00000000
   2420  f604					      if	(pfwidth>2)
   2421  f604		       00 e0		      .byte.b	%00000000, %11100000
   2422  f606					      endif
   2423  f606		       00 00		      .byte.b	%00000000, %00000000
   2424  f608					      if	(pfwidth>2)
   2425  f608		       00 00		      .byte.b	%00000000, %00000000
   2426  f60a					      endif
   2427  f60a		       00 00		      .byte.b	%00000000, %00000000
   2428  f60c					      if	(pfwidth>2)
   2429  f60c		       00 00		      .byte.b	%00000000, %00000000
   2430  f60e					      endif
   2431  f60e		       00 00		      .byte.b	%00000000, %00000000
   2432  f610					      if	(pfwidth>2)
   2433  f610		       00 00		      .byte.b	%00000000, %00000000
   2434  f612					      endif
   2435  f612		       ff ff		      .byte.b	%11111111, %11111111
   2436  f614					      if	(pfwidth>2)
   2437  f614		       ff ff		      .byte.b	%11111111, %11111111
   2438  f616					      endif
   2439  f616		       aa 55		      .byte.b	%10101010, %01010101
   2440  f618					      if	(pfwidth>2)
   2441  f618		       aa 55		      .byte.b	%10101010, %01010101
   2442  f61a					      endif
   2443  f61a		       55 aa		      .byte.b	%01010101, %10101010
   2444  f61c					      if	(pfwidth>2)
   2445  f61c		       55 aa		      .byte.b	%01010101, %10101010
   2446  f61e					      endif
   2447  f61e				   pflabel3
   2448  f61e		       bd ee f5 	      lda	PF_data3,x
   2449  f621		       95 a4		      sta	playfield,x
   2450  f623		       ca		      dex
   2451  f624		       10 f8		      bpl	pflabel3
   2452  f626				   .L068		;  return
   2453  f626
   2454  f626		       60		      RTS
   2455  f627				   .
   2456  f627							; 
   2457  f627
   2458  f627				   .__lvl3
   2459  f627							; __lvl3
   2460  f627
   2461  f627				   .L069		;  COLUBK = $00  : rem bg
   2462  f627
   2463  f627		       a9 00		      LDA	#$00
   2464  f629		       85 09		      STA	COLUBK
   2465  f62b				   .L070		;  _Bit4_AnimStars{4} = 1
   2466  f62b
   2467  f62b		       a5 ec		      LDA	_Bit4_AnimStars
   2468  f62d		       09 10		      ORA	#16
   2469  f62f		       85 ec		      STA	_Bit4_AnimStars
   2470  f631				   .L071		;  playfield:
   2471  f631
   2472  f631				  -	      ifconst	pfres
   2473  f631				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2474  f631					      else
   2475  f631		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2476  f633					      endif
   2477  f633		       4c 66 f6 	      jmp	pflabel4
   2478  f636				   PF_data4
   2479  f636		       ff ff		      .byte.b	%11111111, %11111111
   2480  f638					      if	(pfwidth>2)
   2481  f638		       fd ff		      .byte.b	%11111101, %11111111
   2482  f63a					      endif
   2483  f63a		       fc 00		      .byte.b	%11111100, %00000000
   2484  f63c					      if	(pfwidth>2)
   2485  f63c		       00 e0		      .byte.b	%00000000, %11100000
   2486  f63e					      endif
   2487  f63e		       f8 00		      .byte.b	%11111000, %00000000
   2488  f640					      if	(pfwidth>2)
   2489  f640		       00 e0		      .byte.b	%00000000, %11100000
   2490  f642					      endif
   2491  f642		       f0 00		      .byte.b	%11110000, %00000000
   2492  f644					      if	(pfwidth>2)
   2493  f644		       00 e0		      .byte.b	%00000000, %11100000
   2494  f646					      endif
   2495  f646		       e0 00		      .byte.b	%11100000, %00000000
   2496  f648					      if	(pfwidth>2)
   2497  f648		       00 e0		      .byte.b	%00000000, %11100000
   2498  f64a					      endif
   2499  f64a		       00 00		      .byte.b	%00000000, %00000000
   2500  f64c					      if	(pfwidth>2)
   2501  f64c		       00 e0		      .byte.b	%00000000, %11100000
   2502  f64e					      endif
   2503  f64e		       00 00		      .byte.b	%00000000, %00000000
   2504  f650					      if	(pfwidth>2)
   2505  f650		       00 60		      .byte.b	%00000000, %01100000
   2506  f652					      endif
   2507  f652		       00 00		      .byte.b	%00000000, %00000000
   2508  f654					      if	(pfwidth>2)
   2509  f654		       00 40		      .byte.b	%00000000, %01000000
   2510  f656					      endif
   2511  f656		       00 00		      .byte.b	%00000000, %00000000
   2512  f658					      if	(pfwidth>2)
   2513  f658		       00 c0		      .byte.b	%00000000, %11000000
   2514  f65a					      endif
   2515  f65a		       f0 00		      .byte.b	%11110000, %00000000
   2516  f65c					      if	(pfwidth>2)
   2517  f65c		       00 f8		      .byte.b	%00000000, %11111000
   2518  f65e					      endif
   2519  f65e		       fe 00		      .byte.b	%11111110, %00000000
   2520  f660					      if	(pfwidth>2)
   2521  f660		       00 fe		      .byte.b	%00000000, %11111110
   2522  f662					      endif
   2523  f662		       ff ff		      .byte.b	%11111111, %11111111
   2524  f664					      if	(pfwidth>2)
   2525  f664		       ff ff		      .byte.b	%11111111, %11111111
   2526  f666					      endif
   2527  f666				   pflabel4
   2528  f666		       bd 36 f6 	      lda	PF_data4,x
   2529  f669		       95 a4		      sta	playfield,x
   2530  f66b		       ca		      dex
   2531  f66c		       10 f8		      bpl	pflabel4
   2532  f66e				   .L072		;  return
   2533  f66e
   2534  f66e		       60		      RTS
   2535  f66f				   .
   2536  f66f							; 
   2537  f66f
   2538  f66f				   .
   2539  f66f							; 
   2540  f66f
   2541  f66f				   .
   2542  f66f							; 
   2543  f66f
   2544  f66f				   .L073		;  rem ****************************************************************************************
   2545  f66f
   2546  f66f				   .L074		;  rem Scripts for controlling objects
   2547  f66f
   2548  f66f				   .L075		;  rem ****************************************************************************************
   2549  f66f
   2550  f66f				   .
   2551  f66f							; 
   2552  f66f
   2553  f66f				   .__scriptCheckpoint
   2554  f66f							; __scriptCheckpoint
   2555  f66f
   2556  f66f				   .L076		;  _respawnX = player1x : _respawnY = player1y
   2557  f66f
   2558  f66f		       a5 81		      LDA	player1x
   2559  f671		       85 d5		      STA	_respawnX
   2560  f673		       a5 86		      LDA	player1y
   2561  f675		       85 d6		      STA	_respawnY
   2562  f677				   .L077		;  _respawnRoom = _playerRoom
   2563  f677
   2564  f677		       a5 d8		      LDA	_playerRoom
   2565  f679		       85 d7		      STA	_respawnRoom
   2566  f67b				   .L078		;  return
   2567  f67b
   2568  f67b		       60		      RTS
   2569  f67c				   .
   2570  f67c							; 
   2571  f67c
   2572  f67c				   .__scriptHazard
   2573  f67c							; __scriptHazard
   2574  f67c
   2575  f67c				   .L079		;  COLUP0 = $44 : rem Player color
   2576  f67c
   2577  f67c		       a9 44		      LDA	#$44
   2578  f67e		       85 06		      STA	COLUP0
   2579  f680				   .L080		;  _frameCounter = 0
   2580  f680
   2581  f680		       a9 00		      LDA	#0
   2582  f682		       85 d4		      STA	_frameCounter
   2583  f684				   .L081		;  pop
   2584  f684
   2585  f684		       68		      pla
   2586  f685		       68		      pla
   2587  f686				   .
   2588  f686							; 
   2589  f686
   2590  f686				   .__death
   2591  f686							; __death
   2592  f686
   2593  f686				   .L082		;  gosub __draw
   2594  f686
   2595  f686		       20 ad f4 	      jsr	.__draw
   2596  f689
   2597  f689				   .L083		;  if _frameCounter < 11 then goto __death
   2598  f689
   2599  f689		       a5 d4		      LDA	_frameCounter
   2600  f68b		       c9 0b		      CMP	#11
   2601  f68d		       b0 03		      BCS	.skipL083
   2602  f68f				   .condpart15
   2603  f68f		       4c 86 f6 	      jmp	.__death
   2604  f692
   2605  f692				   .skipL083
   2606  f692				   .L084		;  goto __respawn
   2607  f692
   2608  f692		       4c 05 f4 	      jmp	.__respawn
   2609  f695
   2610  f695				   .
   2611  f695							; 
   2612  f695
   2613  f695				   .
   2614  f695							; 
   2615  f695
   2616  f695				   .
   2617  f695							; 
   2618  f695
   2619  f695				   .
   2620  f695							; 
   2621  f695
   2622  f695				   .
   2623  f695							; 
   2624  f695
   2625  f695				   .
   2626  f695							; 
   2627  f695
   2628  f695				   .L085		;  rem ******************************************************************************************************************
   2629  f695
   2630  f695				   .L086		;  rem Player Scripts
   2631  f695
   2632  f695				   .L087		;  rem ******************************************************************************************************************
   2633  f695
   2634  f695				   .
   2635  f695							; 
   2636  f695
   2637  f695				   .__moveLeft
   2638  f695							; __moveLeft
   2639  f695
   2640  f695				   .L088		;  _Bit1_HFlip_P0{1} = 1
   2641  f695
   2642  f695		       a5 ec		      LDA	_Bit1_HFlip_P0
   2643  f697		       09 02		      ORA	#2
   2644  f699		       85 ec		      STA	_Bit1_HFlip_P0
   2645  f69b				   .L089		;  temp6  =   ( player0x - 18 )  / 4
   2646  f69b
   2647  f69b							; complex statement detected
   2648  f69b		       a5 80		      LDA	player0x
   2649  f69d		       38		      SEC
   2650  f69e		       e9 12		      SBC	#18
   2651  f6a0		       4a		      lsr
   2652  f6a1		       4a		      lsr
   2653  f6a2		       85 a1		      STA	temp6
   2654  f6a4				   .L090		;  temp5  =   ( player0y + 3 )  / 8
   2655  f6a4
   2656  f6a4							; complex statement detected
   2657  f6a4		       a5 85		      LDA	player0y
   2658  f6a6		       18		      CLC
   2659  f6a7		       69 03		      ADC	#3
   2660  f6a9		       4a		      lsr
   2661  f6aa		       4a		      lsr
   2662  f6ab		       4a		      lsr
   2663  f6ac		       85 a0		      STA	temp5
   2664  f6ae				   .L091		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then return
   2665  f6ae
   2666  f6ae		       a5 a1		      LDA	temp6
   2667  f6b0		       c9 22		      CMP	#34
   2668  f6b2		       b0 0a		      BCS	.skipL091
   2669  f6b4				   .condpart16
   2670  f6b4		       a5 a1		      LDA	temp6
   2671  f6b6		       a4 a0		      LDY	temp5
   2672  f6b8		       20 d7 f1 	      jsr	pfread
   2673  f6bb		       d0 01		      BNE	.skip16then
   2674  f6bd				   .condpart17
   2675  f6bd		       60		      RTS
   2676  f6be				   .skip16then
   2677  f6be				   .skipL091
   2678  f6be				   .L092		;  temp3  =   ( player0y - 5 )  / 8
   2679  f6be
   2680  f6be							; complex statement detected
   2681  f6be		       a5 85		      LDA	player0y
   2682  f6c0		       38		      SEC
   2683  f6c1		       e9 05		      SBC	#5
   2684  f6c3		       4a		      lsr
   2685  f6c4		       4a		      lsr
   2686  f6c5		       4a		      lsr
   2687  f6c6		       85 9e		      STA	temp3
   2688  f6c8				   .L093		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then return
   2689  f6c8
   2690  f6c8		       a5 a1		      LDA	temp6
   2691  f6ca		       c9 22		      CMP	#34
   2692  f6cc		       b0 0a		      BCS	.skipL093
   2693  f6ce				   .condpart18
   2694  f6ce		       a5 a1		      LDA	temp6
   2695  f6d0		       a4 9e		      LDY	temp3
   2696  f6d2		       20 d7 f1 	      jsr	pfread
   2697  f6d5		       d0 01		      BNE	.skip18then
   2698  f6d7				   .condpart19
   2699  f6d7		       60		      RTS
   2700  f6d8				   .skip18then
   2701  f6d8				   .skipL093
   2702  f6d8				   .L094		;  temp4  =   ( player0y - 13 )  / 8
   2703  f6d8
   2704  f6d8							; complex statement detected
   2705  f6d8		       a5 85		      LDA	player0y
   2706  f6da		       38		      SEC
   2707  f6db		       e9 0d		      SBC	#13
   2708  f6dd		       4a		      lsr
   2709  f6de		       4a		      lsr
   2710  f6df		       4a		      lsr
   2711  f6e0		       85 9f		      STA	temp4
   2712  f6e2				   .L095		;  if temp6  <  34 then if pfread ( temp6 , temp4 )  then return
   2713  f6e2
   2714  f6e2		       a5 a1		      LDA	temp6
   2715  f6e4		       c9 22		      CMP	#34
   2716  f6e6		       b0 0a		      BCS	.skipL095
   2717  f6e8				   .condpart20
   2718  f6e8		       a5 a1		      LDA	temp6
   2719  f6ea		       a4 9f		      LDY	temp4
   2720  f6ec		       20 d7 f1 	      jsr	pfread
   2721  f6ef		       d0 01		      BNE	.skip20then
   2722  f6f1				   .condpart21
   2723  f6f1		       60		      RTS
   2724  f6f2				   .skip20then
   2725  f6f2				   .skipL095
   2726  f6f2				   .L096		;  player0x = player0x - 2
   2727  f6f2
   2728  f6f2		       a5 80		      LDA	player0x
   2729  f6f4		       38		      SEC
   2730  f6f5		       e9 02		      SBC	#2
   2731  f6f7		       85 80		      STA	player0x
   2732  f6f9				   .L097		;  _Bit3_Walking_P0{3} = 1
   2733  f6f9
   2734  f6f9		       a5 ec		      LDA	_Bit3_Walking_P0
   2735  f6fb		       09 08		      ORA	#8
   2736  f6fd		       85 ec		      STA	_Bit3_Walking_P0
   2737  f6ff				   .L098		;  return
   2738  f6ff
   2739  f6ff		       60		      RTS
   2740  f700				   .
   2741  f700							; 
   2742  f700
   2743  f700				   .__moveRight
   2744  f700							; __moveRight
   2745  f700
   2746  f700				   .L099		;  _Bit1_HFlip_P0{1} = 0
   2747  f700
   2748  f700		       a5 ec		      LDA	_Bit1_HFlip_P0
   2749  f702		       29 fd		      AND	#253
   2750  f704		       85 ec		      STA	_Bit1_HFlip_P0
   2751  f706				   .L0100		;  temp6  =   ( player0x - 9 )  / 4
   2752  f706
   2753  f706							; complex statement detected
   2754  f706		       a5 80		      LDA	player0x
   2755  f708		       38		      SEC
   2756  f709		       e9 09		      SBC	#9
   2757  f70b		       4a		      lsr
   2758  f70c		       4a		      lsr
   2759  f70d		       85 a1		      STA	temp6
   2760  f70f				   .L0101		;  temp5  =   ( player0y + 3 )  / 8
   2761  f70f
   2762  f70f							; complex statement detected
   2763  f70f		       a5 85		      LDA	player0y
   2764  f711		       18		      CLC
   2765  f712		       69 03		      ADC	#3
   2766  f714		       4a		      lsr
   2767  f715		       4a		      lsr
   2768  f716		       4a		      lsr
   2769  f717		       85 a0		      STA	temp5
   2770  f719				   .L0102		;  if temp6  <  34 then if pfread ( temp6 , temp5 )  then return
   2771  f719
   2772  f719		       a5 a1		      LDA	temp6
   2773  f71b		       c9 22		      CMP	#34
   2774  f71d		       b0 0a		      BCS	.skipL0102
   2775  f71f				   .condpart22
   2776  f71f		       a5 a1		      LDA	temp6
   2777  f721		       a4 a0		      LDY	temp5
   2778  f723		       20 d7 f1 	      jsr	pfread
   2779  f726		       d0 01		      BNE	.skip22then
   2780  f728				   .condpart23
   2781  f728		       60		      RTS
   2782  f729				   .skip22then
   2783  f729				   .skipL0102
   2784  f729				   .L0103		;  temp3  =   ( player0y - 5 )  / 8
   2785  f729
   2786  f729							; complex statement detected
   2787  f729		       a5 85		      LDA	player0y
   2788  f72b		       38		      SEC
   2789  f72c		       e9 05		      SBC	#5
   2790  f72e		       4a		      lsr
   2791  f72f		       4a		      lsr
   2792  f730		       4a		      lsr
   2793  f731		       85 9e		      STA	temp3
   2794  f733				   .L0104		;  if temp6  <  34 then if pfread ( temp6 , temp3 )  then return
   2795  f733
   2796  f733		       a5 a1		      LDA	temp6
   2797  f735		       c9 22		      CMP	#34
   2798  f737		       b0 0a		      BCS	.skipL0104
   2799  f739				   .condpart24
   2800  f739		       a5 a1		      LDA	temp6
   2801  f73b		       a4 9e		      LDY	temp3
   2802  f73d		       20 d7 f1 	      jsr	pfread
   2803  f740		       d0 01		      BNE	.skip24then
   2804  f742				   .condpart25
   2805  f742		       60		      RTS
   2806  f743				   .skip24then
   2807  f743				   .skipL0104
   2808  f743				   .L0105		;  temp4  =   ( player0y - 13 )  / 8
   2809  f743
   2810  f743							; complex statement detected
   2811  f743		       a5 85		      LDA	player0y
   2812  f745		       38		      SEC
   2813  f746		       e9 0d		      SBC	#13
   2814  f748		       4a		      lsr
   2815  f749		       4a		      lsr
   2816  f74a		       4a		      lsr
   2817  f74b		       85 9f		      STA	temp4
   2818  f74d				   .L0106		;  if temp6  <  34 then if pfread ( temp6 , temp4 )  then return
   2819  f74d
   2820  f74d		       a5 a1		      LDA	temp6
   2821  f74f		       c9 22		      CMP	#34
   2822  f751		       b0 0a		      BCS	.skipL0106
   2823  f753				   .condpart26
   2824  f753		       a5 a1		      LDA	temp6
   2825  f755		       a4 9f		      LDY	temp4
   2826  f757		       20 d7 f1 	      jsr	pfread
   2827  f75a		       d0 01		      BNE	.skip26then
   2828  f75c				   .condpart27
   2829  f75c		       60		      RTS
   2830  f75d				   .skip26then
   2831  f75d				   .skipL0106
   2832  f75d				   .L0107		;  player0x = player0x + 2
   2833  f75d
   2834  f75d		       a5 80		      LDA	player0x
   2835  f75f		       18		      CLC
   2836  f760		       69 02		      ADC	#2
   2837  f762		       85 80		      STA	player0x
   2838  f764				   .L0108		;  _Bit3_Walking_P0{3} = 1
   2839  f764
   2840  f764		       a5 ec		      LDA	_Bit3_Walking_P0
   2841  f766		       09 08		      ORA	#8
   2842  f768		       85 ec		      STA	_Bit3_Walking_P0
   2843  f76a				   .L0109		;  return
   2844  f76a
   2845  f76a		       60		      RTS
   2846  f76b				   .
   2847  f76b							; 
   2848  f76b
   2849  f76b				   .__moveUp
   2850  f76b							; __moveUp
   2851  f76b
   2852  f76b				   .L0110		;  gosub __playerIdle
   2853  f76b
   2854  f76b		       20 9e f8 	      jsr	.__playerIdle
   2855  f76e
   2856  f76e				   .L0111		;  temp5  =   ( player0x - 10 )  / 4
   2857  f76e
   2858  f76e							; complex statement detected
   2859  f76e		       a5 80		      LDA	player0x
   2860  f770		       38		      SEC
   2861  f771		       e9 0a		      SBC	#10
   2862  f773		       4a		      lsr
   2863  f774		       4a		      lsr
   2864  f775		       85 a0		      STA	temp5
   2865  f777				   .L0112		;  temp6  =   ( player0y - 15 )  / 8
   2866  f777
   2867  f777							; complex statement detected
   2868  f777		       a5 85		      LDA	player0y
   2869  f779		       38		      SEC
   2870  f77a		       e9 0f		      SBC	#15
   2871  f77c		       4a		      lsr
   2872  f77d		       4a		      lsr
   2873  f77e		       4a		      lsr
   2874  f77f		       85 a1		      STA	temp6
   2875  f781				   .L0113		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __touchingUp
   2876  f781
   2877  f781		       a5 a0		      LDA	temp5
   2878  f783		       c9 22		      CMP	#34
   2879  f785		       b0 0c		      BCS	.skipL0113
   2880  f787				   .condpart28
   2881  f787		       a5 a0		      LDA	temp5
   2882  f789		       a4 a1		      LDY	temp6
   2883  f78b		       20 d7 f1 	      jsr	pfread
   2884  f78e		       d0 03		      BNE	.skip28then
   2885  f790				   .condpart29
   2886  f790		       4c 39 f8 	      jmp	.__touchingUp
   2887  f793
   2888  f793				   .skip28then
   2889  f793				   .skipL0113
   2890  f793				   .L0114		;  temp4  =   ( player0x - 17 )  / 4
   2891  f793
   2892  f793							; complex statement detected
   2893  f793		       a5 80		      LDA	player0x
   2894  f795		       38		      SEC
   2895  f796		       e9 11		      SBC	#17
   2896  f798		       4a		      lsr
   2897  f799		       4a		      lsr
   2898  f79a		       85 9f		      STA	temp4
   2899  f79c				   .L0115		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __touchingUp
   2900  f79c
   2901  f79c		       a5 9f		      LDA	temp4
   2902  f79e		       c9 22		      CMP	#34
   2903  f7a0		       b0 0c		      BCS	.skipL0115
   2904  f7a2				   .condpart30
   2905  f7a2		       a5 9f		      LDA	temp4
   2906  f7a4		       a4 a1		      LDY	temp6
   2907  f7a6		       20 d7 f1 	      jsr	pfread
   2908  f7a9		       d0 03		      BNE	.skip30then
   2909  f7ab				   .condpart31
   2910  f7ab		       4c 39 f8 	      jmp	.__touchingUp
   2911  f7ae
   2912  f7ae				   .skip30then
   2913  f7ae				   .skipL0115
   2914  f7ae				   .L0116		;  temp3  =  temp5  -	1
   2915  f7ae
   2916  f7ae		       a5 a0		      LDA	temp5
   2917  f7b0		       38		      SEC
   2918  f7b1		       e9 01		      SBC	#1
   2919  f7b3		       85 9e		      STA	temp3
   2920  f7b5				   .L0117		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __touchingUp
   2921  f7b5
   2922  f7b5		       a5 9e		      LDA	temp3
   2923  f7b7		       c9 22		      CMP	#34
   2924  f7b9		       b0 0c		      BCS	.skipL0117
   2925  f7bb				   .condpart32
   2926  f7bb		       a5 9e		      LDA	temp3
   2927  f7bd		       a4 a1		      LDY	temp6
   2928  f7bf		       20 d7 f1 	      jsr	pfread
   2929  f7c2		       d0 03		      BNE	.skip32then
   2930  f7c4				   .condpart33
   2931  f7c4		       4c 39 f8 	      jmp	.__touchingUp
   2932  f7c7
   2933  f7c7				   .skip32then
   2934  f7c7				   .skipL0117
   2935  f7c7				   .L0118		;  gosub __playerWalk
   2936  f7c7
   2937  f7c7		       20 ab f8 	      jsr	.__playerWalk
   2938  f7ca
   2939  f7ca				   .L0119		;  player0y  =  player0y  -  2
   2940  f7ca
   2941  f7ca		       a5 85		      LDA	player0y
   2942  f7cc		       38		      SEC
   2943  f7cd		       e9 02		      SBC	#2
   2944  f7cf		       85 85		      STA	player0y
   2945  f7d1				   .L0120		;  return
   2946  f7d1
   2947  f7d1		       60		      RTS
   2948  f7d2				   .
   2949  f7d2							; 
   2950  f7d2
   2951  f7d2				   .__moveDown
   2952  f7d2							; __moveDown
   2953  f7d2
   2954  f7d2				   .L0121		;  gosub __playerFlippedIdle
   2955  f7d2
   2956  f7d2		       20 b8 f8 	      jsr	.__playerFlippedIdle
   2957  f7d5
   2958  f7d5				   .L0122		;  temp5  =   ( player0x - 10 )  / 4
   2959  f7d5
   2960  f7d5							; complex statement detected
   2961  f7d5		       a5 80		      LDA	player0x
   2962  f7d7		       38		      SEC
   2963  f7d8		       e9 0a		      SBC	#10
   2964  f7da		       4a		      lsr
   2965  f7db		       4a		      lsr
   2966  f7dc		       85 a0		      STA	temp5
   2967  f7de				   .L0123		;  temp6  =   ( player0y + 5 )  / 8
   2968  f7de
   2969  f7de							; complex statement detected
   2970  f7de		       a5 85		      LDA	player0y
   2971  f7e0		       18		      CLC
   2972  f7e1		       69 05		      ADC	#5
   2973  f7e3		       4a		      lsr
   2974  f7e4		       4a		      lsr
   2975  f7e5		       4a		      lsr
   2976  f7e6		       85 a1		      STA	temp6
   2977  f7e8				   .L0124		;  if temp5  <  34 then if pfread ( temp5 , temp6 )  then goto __touchingDown
   2978  f7e8
   2979  f7e8		       a5 a0		      LDA	temp5
   2980  f7ea		       c9 22		      CMP	#34
   2981  f7ec		       b0 0c		      BCS	.skipL0124
   2982  f7ee				   .condpart34
   2983  f7ee		       a5 a0		      LDA	temp5
   2984  f7f0		       a4 a1		      LDY	temp6
   2985  f7f2		       20 d7 f1 	      jsr	pfread
   2986  f7f5		       d0 03		      BNE	.skip34then
   2987  f7f7				   .condpart35
   2988  f7f7		       4c 3f f8 	      jmp	.__touchingDown
   2989  f7fa
   2990  f7fa				   .skip34then
   2991  f7fa				   .skipL0124
   2992  f7fa				   .L0125		;  temp4  =   ( player0x - 17 )  / 4
   2993  f7fa
   2994  f7fa							; complex statement detected
   2995  f7fa		       a5 80		      LDA	player0x
   2996  f7fc		       38		      SEC
   2997  f7fd		       e9 11		      SBC	#17
   2998  f7ff		       4a		      lsr
   2999  f800		       4a		      lsr
   3000  f801		       85 9f		      STA	temp4
   3001  f803				   .L0126		;  if temp4  <  34 then if pfread ( temp4 , temp6 )  then goto __touchingDown
   3002  f803
   3003  f803		       a5 9f		      LDA	temp4
   3004  f805		       c9 22		      CMP	#34
   3005  f807		       b0 0c		      BCS	.skipL0126
   3006  f809				   .condpart36
   3007  f809		       a5 9f		      LDA	temp4
   3008  f80b		       a4 a1		      LDY	temp6
   3009  f80d		       20 d7 f1 	      jsr	pfread
   3010  f810		       d0 03		      BNE	.skip36then
   3011  f812				   .condpart37
   3012  f812		       4c 3f f8 	      jmp	.__touchingDown
   3013  f815
   3014  f815				   .skip36then
   3015  f815				   .skipL0126
   3016  f815				   .L0127		;  temp3  =  temp5  -	1
   3017  f815
   3018  f815		       a5 a0		      LDA	temp5
   3019  f817		       38		      SEC
   3020  f818		       e9 01		      SBC	#1
   3021  f81a		       85 9e		      STA	temp3
   3022  f81c				   .L0128		;  if temp3  <  34 then if pfread ( temp3 , temp6 )  then goto __touchingDown
   3023  f81c
   3024  f81c		       a5 9e		      LDA	temp3
   3025  f81e		       c9 22		      CMP	#34
   3026  f820		       b0 0c		      BCS	.skipL0128
   3027  f822				   .condpart38
   3028  f822		       a5 9e		      LDA	temp3
   3029  f824		       a4 a1		      LDY	temp6
   3030  f826		       20 d7 f1 	      jsr	pfread
   3031  f829		       d0 03		      BNE	.skip38then
   3032  f82b				   .condpart39
   3033  f82b		       4c 3f f8 	      jmp	.__touchingDown
   3034  f82e
   3035  f82e				   .skip38then
   3036  f82e				   .skipL0128
   3037  f82e				   .L0129		;  gosub __playerFlippedWalk
   3038  f82e
   3039  f82e		       20 c5 f8 	      jsr	.__playerFlippedWalk
   3040  f831
   3041  f831				   .L0130		;  player0y  =  player0y  +  2
   3042  f831
   3043  f831		       a5 85		      LDA	player0y
   3044  f833		       18		      CLC
   3045  f834		       69 02		      ADC	#2
   3046  f836		       85 85		      STA	player0y
   3047  f838				   .L0131		;  return
   3048  f838
   3049  f838		       60		      RTS
   3050  f839				   .
   3051  f839							; 
   3052  f839
   3053  f839				   .__touchingUp
   3054  f839							; __touchingUp
   3055  f839
   3056  f839				   .L0132		;  gosub __animate
   3057  f839
   3058  f839		       20 7e f8 	      jsr	.__animate
   3059  f83c
   3060  f83c				   .L0133		;  goto __touchingGround
   3061  f83c
   3062  f83c		       4c 45 f8 	      jmp	.__touchingGround
   3063  f83f
   3064  f83f				   .
   3065  f83f							; 
   3066  f83f
   3067  f83f				   .__touchingDown
   3068  f83f							; __touchingDown
   3069  f83f
   3070  f83f				   .L0134		;  gosub __animateFlipped
   3071  f83f
   3072  f83f		       20 8e f8 	      jsr	.__animateFlipped
   3073  f842
   3074  f842				   .L0135		;  goto __touchingGround
   3075  f842
   3076  f842		       4c 45 f8 	      jmp	.__touchingGround
   3077  f845
   3078  f845				   .
   3079  f845							; 
   3080  f845
   3081  f845				   .__touchingGround
   3082  f845							; __touchingGround
   3083  f845
   3084  f845				   .L0136		;  if joy0up  ||  joy0down then _Bit2_VFlip_P0{2} = !_Bit2_VFlip_P0{2} else if joy0fire then _Bit2_VFlip_P0{2} = !_Bit2_VFlip_P0{2}
   3085  f845
   3086  f845		       a9 10		      lda	#$10
   3087  f847		       2c 80 02 	      bit	SWCHA
   3088  f84a		       d0 03		      BNE	.skipL0136
   3089  f84c				   .condpart40
   3090  f84c		       4c 56 f8 	      jmp	.condpart41
   3091  f84f				   .skipL0136
   3092  f84f		       a9 20		      lda	#$20
   3093  f851		       2c 80 02 	      bit	SWCHA
   3094  f854		       d0 13		      BNE	.skip0OR
   3095  f856				   .condpart41
   3096  f856		       a5 ec		      LDA	_Bit2_VFlip_P0
   3097  f858		       29 04		      AND	#4
   3098  f85a		       08		      PHP
   3099  f85b		       a5 ec		      LDA	_Bit2_VFlip_P0
   3100  f85d		       29 fb		      AND	#251
   3101  f85f		       28		      PLP
   3102  f860		       d0 02		      .byte.b	$D0, $02
   3103  f862		       09 04		      ORA	#4
   3104  f864		       85 ec		      STA	_Bit2_VFlip_P0
   3105  f866		       4c 7d f8 	      jmp	.skipelse3
   3106  f869				   .skip0OR
   3107  f869		       24 0c		      bit	INPT4
   3108  f86b		       30 10		      BMI	.skipelse
   3109  f86d				   .condpart42
   3110  f86d		       a5 ec		      LDA	_Bit2_VFlip_P0
   3111  f86f		       29 04		      AND	#4
   3112  f871		       08		      PHP
   3113  f872		       a5 ec		      LDA	_Bit2_VFlip_P0
   3114  f874		       29 fb		      AND	#251
   3115  f876		       28		      PLP
   3116  f877		       d0 02		      .byte.b	$D0, $02
   3117  f879		       09 04		      ORA	#4
   3118  f87b		       85 ec		      STA	_Bit2_VFlip_P0
   3119  f87d				   .skipelse
   3120  f87d				   .skipelse3
   3121  f87d				   .L0137		;  return
   3122  f87d
   3123  f87d		       60		      RTS
   3124  f87e				   .
   3125  f87e							; 
   3126  f87e
   3127  f87e				   .__animate
   3128  f87e							; __animate
   3129  f87e
   3130  f87e				   .L0138		;  if _Bit3_Walking_P0{3}  &&	_frameCounter <= 6 then gosub __playerWalk
   3131  f87e
   3132  f87e		       a5 ec		      LDA	_Bit3_Walking_P0
   3133  f880		       29 08		      AND	#8
   3134  f882		       f0 09		      BEQ	.skipL0138
   3135  f884				   .condpart43
   3136  f884		       a9 06		      LDA	#6
   3137  f886		       c5 d4		      CMP	_frameCounter
   3138  f888		       90 03		      BCC	.skip43then
   3139  f88a				   .condpart44
   3140  f88a		       20 ab f8 	      jsr	.__playerWalk
   3141  f88d
   3142  f88d				   .skip43then
   3143  f88d				   .skipL0138
   3144  f88d				   .L0139		;  return
   3145  f88d
   3146  f88d		       60		      RTS
   3147  f88e				   .
   3148  f88e							; 
   3149  f88e
   3150  f88e				   .__animateFlipped
   3151  f88e							; __animateFlipped
   3152  f88e
   3153  f88e				   .L0140		;  if _Bit3_Walking_P0{3}  &&	_frameCounter <= 6 then gosub __playerFlippedWalk
   3154  f88e
   3155  f88e		       a5 ec		      LDA	_Bit3_Walking_P0
   3156  f890		       29 08		      AND	#8
   3157  f892		       f0 09		      BEQ	.skipL0140
   3158  f894				   .condpart45
   3159  f894		       a9 06		      LDA	#6
   3160  f896		       c5 d4		      CMP	_frameCounter
   3161  f898		       90 03		      BCC	.skip45then
   3162  f89a				   .condpart46
   3163  f89a		       20 c5 f8 	      jsr	.__playerFlippedWalk
   3164  f89d
   3165  f89d				   .skip45then
   3166  f89d				   .skipL0140
   3167  f89d				   .L0141		;  return
   3168  f89d
   3169  f89d		       60		      RTS
   3170  f89e				   .
   3171  f89e							; 
   3172  f89e
   3173  f89e				   .
   3174  f89e							; 
   3175  f89e
   3176  f89e				   .
   3177  f89e							; 
   3178  f89e
   3179  f89e				   .L0142		;  rem ****************************************
   3180  f89e
   3181  f89e				   .L0143		;  rem GFX Area
   3182  f89e
   3183  f89e				   .L0144		;  rem ****************************************
   3184  f89e
   3185  f89e				   .
   3186  f89e							; 
   3187  f89e
   3188  f89e				   .
   3189  f89e							; 
   3190  f89e
   3191  f89e				   .__playerIdle
   3192  f89e							; __playerIdle
   3193  f89e
   3194  f89e				   .L0145		;  player0:
   3195  f89e
   3196  f89e		       a2 84		      LDX	#<playerL0145_0
   3197  f8a0		       86 8a		      STX	player0pointerlo
   3198  f8a2		       a9 f9		      LDA	#>playerL0145_0
   3199  f8a4		       85 8b		      STA	player0pointerhi
   3200  f8a6		       a9 11		      LDA	#17
   3201  f8a8		       85 8e		      STA	player0height
   3202  f8aa				   .L0146		;  return
   3203  f8aa
   3204  f8aa		       60		      RTS
   3205  f8ab				   .
   3206  f8ab							; 
   3207  f8ab
   3208  f8ab				   .__playerWalk
   3209  f8ab							; __playerWalk
   3210  f8ab
   3211  f8ab				   .L0147		;  player0:
   3212  f8ab
   3213  f8ab		       a2 96		      LDX	#<playerL0147_0
   3214  f8ad		       86 8a		      STX	player0pointerlo
   3215  f8af		       a9 f9		      LDA	#>playerL0147_0
   3216  f8b1		       85 8b		      STA	player0pointerhi
   3217  f8b3		       a9 11		      LDA	#17
   3218  f8b5		       85 8e		      STA	player0height
   3219  f8b7				   .L0148		;  return
   3220  f8b7
   3221  f8b7		       60		      RTS
   3222  f8b8				   .
   3223  f8b8							; 
   3224  f8b8
   3225  f8b8				   .__playerFlippedIdle
   3226  f8b8							; __playerFlippedIdle
   3227  f8b8
   3228  f8b8				   .L0149		;  player0:
   3229  f8b8
   3230  f8b8		       a2 a8		      LDX	#<playerL0149_0
   3231  f8ba		       86 8a		      STX	player0pointerlo
   3232  f8bc		       a9 f9		      LDA	#>playerL0149_0
   3233  f8be		       85 8b		      STA	player0pointerhi
   3234  f8c0		       a9 11		      LDA	#17
   3235  f8c2		       85 8e		      STA	player0height
   3236  f8c4				   .L0150		;  return
   3237  f8c4
   3238  f8c4		       60		      RTS
   3239  f8c5				   .
   3240  f8c5							; 
   3241  f8c5
   3242  f8c5				   .__playerFlippedWalk
   3243  f8c5							; __playerFlippedWalk
   3244  f8c5
   3245  f8c5				   .L0151		;  player0:
   3246  f8c5
   3247  f8c5		       a2 ba		      LDX	#<playerL0151_0
   3248  f8c7		       86 8a		      STX	player0pointerlo
   3249  f8c9		       a9 f9		      LDA	#>playerL0151_0
   3250  f8cb		       85 8b		      STA	player0pointerhi
   3251  f8cd		       a9 11		      LDA	#17
   3252  f8cf		       85 8e		      STA	player0height
   3253  f8d1				   .L0152		;  return
   3254  f8d1
   3255  f8d1		       60		      RTS
   3256  f8d2				   .
   3257  f8d2							; 
   3258  f8d2
   3259  f8d2				   .__objCheckpoint
   3260  f8d2							; __objCheckpoint
   3261  f8d2
   3262  f8d2				   .L0153		;  player1:
   3263  f8d2
   3264  f8d2		       a2 cc		      LDX	#<playerL0153_1
   3265  f8d4		       86 8c		      STX	player1pointerlo
   3266  f8d6		       a9 f9		      LDA	#>playerL0153_1
   3267  f8d8		       85 8d		      STA	player1pointerhi
   3268  f8da		       a9 10		      LDA	#16
   3269  f8dc		       85 8f		      STA	player1height
   3270  f8de				   .L0154		;  return
   3271  f8de
   3272  f8de		       60		      RTS
   3273  f8df				   .
   3274  f8df							; 
   3275  f8df
   3276  f8df				   .
   3277  f8df							; 
   3278  f8df
   3279  f8df				   .
   3280  f8df							; 
   3281  f8df
   3282  f8df				   .
   3283  f8df							; 
   3284  f8df
   3285  f8df				   .
   3286  f8df							; 
   3287  f8df
   3288  f8df				   .
   3289  f8df							; 
   3290  f8df
   3291  f8df				   .
   3292  f8df							; 
   3293  f8df
   3294  f8df				   .
   3295  f8df							; 
   3296  f8df
   3297  f8df				   .
   3298  f8df							; 
   3299  f8df
   3300  f8df				   .
   3301  f8df							; 
   3302  f8df
   3303  f8df				   .
   3304  f8df							; 
   3305  f8df
   3306  f8df				   .
   3307  f8df							; 
   3308  f8df
   3309  f8df				   .
   3310  f8df							; 
   3311  f8df
   3312  f8df				   .
   3313  f8df							; 
   3314  f8df
   3315  f8df				   .
   3316  f8df							; 
   3317  f8df
   3318  f8df				   .
   3319  f8df							; 
   3320  f8df
   3321  f8df				   .
   3322  f8df							; 
   3323  f8df
   3324  f8df				   .
   3325  f8df							; 
   3326  f8df
   3327  f8df				   .
   3328  f8df							; 
   3329  f8df
   3330  f8df				   .
   3331  f8df							; 
   3332  f8df
   3333  f8df				   .
   3334  f8df							; 
   3335  f8df
   3336  f8df				   .
   3337  f8df							; 
   3338  f8df
   3339  f8df				   .
   3340  f8df							; 
   3341  f8df
   3342  f8df				   .
   3343  f8df							; 
   3344  f8df
   3345  f8df				   .
   3346  f8df							; 
   3347  f8df
   3348  f8df				   .
   3349  f8df							; 
   3350  f8df
   3351  f8df				   .
   3352  f8df							; 
   3353  f8df
   3354  f8df				   .
   3355  f8df							; 
   3356  f8df
   3357  f8df				   .
   3358  f8df							; 
   3359  f8df
   3360  f8df				   .
   3361  f8df							; 
   3362  f8df
   3363  f8df				   .
   3364  f8df							; 
   3365  f8df
   3366  f8df				   .
   3367  f8df							; 
   3368  f8df
   3369  f8df				   .
   3370  f8df							; 
   3371  f8df
   3372  f8df				   .
   3373  f8df							; 
   3374  f8df
   3375  f8df				   .
   3376  f8df							; 
   3377  f8df
   3378  f8df				   .
   3379  f8df							; 
   3380  f8df
   3381  f8df				   .
   3382  f8df							; 
   3383  f8df
   3384  f8df				   .
   3385  f8df							; 
   3386  f8df
   3387  f8df				   .
   3388  f8df							; 
   3389  f8df
   3390  f8df				   .L0155		;  vblank
   3391  f8df
   3392  f8df				   vblank_bB_code
   3393  f8df				   .L0156		;  asm
   3394  f8df
   3395  f8df		       85 2b		      sta	HMCLR
   3396  f8e1
   3397  f8e1		       85 02		      sta	WSYNC
   3398  f8e3
   3399  f8e3		       a9 ff		      lda	#$ff
   3400  f8e5
   3401  f8e5		       85 22		      sta	HMM0
   3402  f8e7
   3403  f8e7		       a9 c0		      lda	#$c0
   3404  f8e9
   3405  f8e9		       85 02		      sta	WSYNC
   3406  f8eb
   3407  f8eb		       85 2a		      sta	HMOVE
   3408  f8ed
      0  f8ed					      sleep	5
      1  f8ed				   .CYCLES    SET	5
      2  f8ed
      3  f8ed				  -	      IF	.CYCLES < 2
      4  f8ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8ed				  -	      ERR
      6  f8ed					      ENDIF
      7  f8ed
      8  f8ed					      IF	.CYCLES & 1
      9  f8ed					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8ed		       04 00		      nop	0
     11  f8ef				  -	      ELSE
     12  f8ef				  -	      bit	VSYNC
     13  f8ef					      ENDIF
     14  f8ef				   .CYCLES    SET	.CYCLES - 3
     15  f8ef					      ENDIF
     16  f8ef
     17  f8ef					      REPEAT	.CYCLES / 2
     18  f8ef		       ea		      nop
     19  f8f0					      REPEND
   3410  f8f0
   3411  f8f0		       85 22		      sta	HMM0
   3412  f8f2
   3413  f8f2				   .L0157		;  return
   3414  f8f2
   3415  f8f2		       60		      RTS
   3416  f8f3				   .
   3417  f8f3							; 
   3418  f8f3
   3419  f8f3				   .L0158		;  
   3420  f8f3				  -	      ifconst	pfres
   3421  f8f3				  -	      if	(<*) > (254-pfres*pfwidth)
   3422  f8f3				  -	      align	256
   3423  f8f3				  -	      endif
   3424  f8f3				  -	      if	(<*) < (136-pfres*pfwidth)
   3425  f8f3				  -	      repeat	((136-pfres*pfwidth)-(<*))
   3426  f8f3				  -	      .byte	0
   3427  f8f3				  -	      repend
   3428  f8f3				  -	      endif
   3429  f8f3					      else
   3430  f8f3					      if	(<*) > 206
   3431  f900		       00 00 00 00*	      align	256
   3432  f900					      endif
   3433  f900					      if	(<*) < 88
   3434  f900					      repeat	(88-(<*))
   3435  f900		       00		      .byte.b	0
   3434  f900					      repend
   3435  f901		       00		      .byte.b	0
   3434  f901					      repend
   3435  f902		       00		      .byte.b	0
   3434  f902					      repend
   3435  f903		       00		      .byte.b	0
   3434  f903					      repend
   3435  f904		       00		      .byte.b	0
   3434  f904					      repend
   3435  f905		       00		      .byte.b	0
   3434  f905					      repend
   3435  f906		       00		      .byte.b	0
   3434  f906					      repend
   3435  f907		       00		      .byte.b	0
   3434  f907					      repend
   3435  f908		       00		      .byte.b	0
   3434  f908					      repend
   3435  f909		       00		      .byte.b	0
   3434  f909					      repend
   3435  f90a		       00		      .byte.b	0
   3434  f90a					      repend
   3435  f90b		       00		      .byte.b	0
   3434  f90b					      repend
   3435  f90c		       00		      .byte.b	0
   3434  f90c					      repend
   3435  f90d		       00		      .byte.b	0
   3434  f90d					      repend
   3435  f90e		       00		      .byte.b	0
   3434  f90e					      repend
   3435  f90f		       00		      .byte.b	0
   3434  f90f					      repend
   3435  f910		       00		      .byte.b	0
   3434  f910					      repend
   3435  f911		       00		      .byte.b	0
   3434  f911					      repend
   3435  f912		       00		      .byte.b	0
   3434  f912					      repend
   3435  f913		       00		      .byte.b	0
   3434  f913					      repend
   3435  f914		       00		      .byte.b	0
   3434  f914					      repend
   3435  f915		       00		      .byte.b	0
   3434  f915					      repend
   3435  f916		       00		      .byte.b	0
   3434  f916					      repend
   3435  f917		       00		      .byte.b	0
   3434  f917					      repend
   3435  f918		       00		      .byte.b	0
   3434  f918					      repend
   3435  f919		       00		      .byte.b	0
   3434  f919					      repend
   3435  f91a		       00		      .byte.b	0
   3434  f91a					      repend
   3435  f91b		       00		      .byte.b	0
   3434  f91b					      repend
   3435  f91c		       00		      .byte.b	0
   3434  f91c					      repend
   3435  f91d		       00		      .byte.b	0
   3434  f91d					      repend
   3435  f91e		       00		      .byte.b	0
   3434  f91e					      repend
   3435  f91f		       00		      .byte.b	0
   3434  f91f					      repend
   3435  f920		       00		      .byte.b	0
   3434  f920					      repend
   3435  f921		       00		      .byte.b	0
   3434  f921					      repend
   3435  f922		       00		      .byte.b	0
   3434  f922					      repend
   3435  f923		       00		      .byte.b	0
   3434  f923					      repend
   3435  f924		       00		      .byte.b	0
   3434  f924					      repend
   3435  f925		       00		      .byte.b	0
   3434  f925					      repend
   3435  f926		       00		      .byte.b	0
   3434  f926					      repend
   3435  f927		       00		      .byte.b	0
   3434  f927					      repend
   3435  f928		       00		      .byte.b	0
   3434  f928					      repend
   3435  f929		       00		      .byte.b	0
   3434  f929					      repend
   3435  f92a		       00		      .byte.b	0
   3434  f92a					      repend
   3435  f92b		       00		      .byte.b	0
   3434  f92b					      repend
   3435  f92c		       00		      .byte.b	0
   3434  f92c					      repend
   3435  f92d		       00		      .byte.b	0
   3434  f92d					      repend
   3435  f92e		       00		      .byte.b	0
   3434  f92e					      repend
   3435  f92f		       00		      .byte.b	0
   3434  f92f					      repend
   3435  f930		       00		      .byte.b	0
   3434  f930					      repend
   3435  f931		       00		      .byte.b	0
   3434  f931					      repend
   3435  f932		       00		      .byte.b	0
   3434  f932					      repend
   3435  f933		       00		      .byte.b	0
   3434  f933					      repend
   3435  f934		       00		      .byte.b	0
   3434  f934					      repend
   3435  f935		       00		      .byte.b	0
   3434  f935					      repend
   3435  f936		       00		      .byte.b	0
   3434  f936					      repend
   3435  f937		       00		      .byte.b	0
   3434  f937					      repend
   3435  f938		       00		      .byte.b	0
   3434  f938					      repend
   3435  f939		       00		      .byte.b	0
   3434  f939					      repend
   3435  f93a		       00		      .byte.b	0
   3434  f93a					      repend
   3435  f93b		       00		      .byte.b	0
   3434  f93b					      repend
   3435  f93c		       00		      .byte.b	0
   3434  f93c					      repend
   3435  f93d		       00		      .byte.b	0
   3434  f93d					      repend
   3435  f93e		       00		      .byte.b	0
   3434  f93e					      repend
   3435  f93f		       00		      .byte.b	0
   3434  f93f					      repend
   3435  f940		       00		      .byte.b	0
   3434  f940					      repend
   3435  f941		       00		      .byte.b	0
   3434  f941					      repend
   3435  f942		       00		      .byte.b	0
   3434  f942					      repend
   3435  f943		       00		      .byte.b	0
   3434  f943					      repend
   3435  f944		       00		      .byte.b	0
   3434  f944					      repend
   3435  f945		       00		      .byte.b	0
   3434  f945					      repend
   3435  f946		       00		      .byte.b	0
   3434  f946					      repend
   3435  f947		       00		      .byte.b	0
   3434  f947					      repend
   3435  f948		       00		      .byte.b	0
   3434  f948					      repend
   3435  f949		       00		      .byte.b	0
   3434  f949					      repend
   3435  f94a		       00		      .byte.b	0
   3434  f94a					      repend
   3435  f94b		       00		      .byte.b	0
   3434  f94b					      repend
   3435  f94c		       00		      .byte.b	0
   3434  f94c					      repend
   3435  f94d		       00		      .byte.b	0
   3434  f94d					      repend
   3435  f94e		       00		      .byte.b	0
   3434  f94e					      repend
   3435  f94f		       00		      .byte.b	0
   3434  f94f					      repend
   3435  f950		       00		      .byte.b	0
   3434  f950					      repend
   3435  f951		       00		      .byte.b	0
   3434  f951					      repend
   3435  f952		       00		      .byte.b	0
   3434  f952					      repend
   3435  f953		       00		      .byte.b	0
   3434  f953					      repend
   3435  f954		       00		      .byte.b	0
   3434  f954					      repend
   3435  f955		       00		      .byte.b	0
   3434  f955					      repend
   3435  f956		       00		      .byte.b	0
   3434  f956					      repend
   3435  f957		       00		      .byte.b	0
   3436  f958					      repend
   3437  f958					      endif
   3438  f958					      endif
   3439  f958				   pfcolorlabel13
   3440  f958		       0e 00 00 00	      .byte.b	$0E,0,0,0
   3441  f95c		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3442  f960		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3443  f964		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3444  f968		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3445  f96c		       0e 00 00 00	      .byte.b	$0E,0,0,0
   3446  f970		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3447  f974		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3448  f978		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3449  f97c		       9a 00 00 00	      .byte.b	$9A,0,0,0
   3450  f980		       0e 00 00 00	      .byte.b	$0E,0,0,0
   3451  f984				  -	      if	(<*) > (<(*+17))
   3452  f984				  -	      repeat	($100-<*)
   3453  f984				  -	      .byte	0
   3454  f984				  -	      repend
   3455  f984					      endif
   3456  f984				   playerL0145_0
   3457  f984		       7e		      .byte.b	%01111110
   3458  f985		       ff		      .byte.b	%11111111
   3459  f986		       c9		      .byte.b	%11001001
   3460  f987		       c9		      .byte.b	%11001001
   3461  f988		       ff		      .byte.b	%11111111
   3462  f989		       ff		      .byte.b	%11111111
   3463  f98a		       c1		      .byte.b	%11000001
   3464  f98b		       e3		      .byte.b	%11100011
   3465  f98c		       7e		      .byte.b	%01111110
   3466  f98d		       18		      .byte.b	%00011000
   3467  f98e		       3c		      .byte.b	%00111100
   3468  f98f		       7e		      .byte.b	%01111110
   3469  f990		       7e		      .byte.b	%01111110
   3470  f991		       5a		      .byte.b	%01011010
   3471  f992		       3c		      .byte.b	%00111100
   3472  f993		       24		      .byte.b	%00100100
   3473  f994		       66		      .byte.b	%01100110
   3474  f995		       66		      .byte.b	%01100110
   3475  f996				  -	      if	(<*) > (<(*+17))
   3476  f996				  -	      repeat	($100-<*)
   3477  f996				  -	      .byte	0
   3478  f996				  -	      repend
   3479  f996					      endif
   3480  f996				   playerL0147_0
   3481  f996		       00		      .byte.b	%00000000
   3482  f997		       7e		      .byte.b	%01111110
   3483  f998		       ff		      .byte.b	%11111111
   3484  f999		       c9		      .byte.b	%11001001
   3485  f99a		       c9		      .byte.b	%11001001
   3486  f99b		       ff		      .byte.b	%11111111
   3487  f99c		       ff		      .byte.b	%11111111
   3488  f99d		       c1		      .byte.b	%11000001
   3489  f99e		       e3		      .byte.b	%11100011
   3490  f99f		       7e		      .byte.b	%01111110
   3491  f9a0		       18		      .byte.b	%00011000
   3492  f9a1		       3c		      .byte.b	%00111100
   3493  f9a2		       7e		      .byte.b	%01111110
   3494  f9a3		       99		      .byte.b	%10011001
   3495  f9a4		       3c		      .byte.b	%00111100
   3496  f9a5		       24		      .byte.b	%00100100
   3497  f9a6		       66		      .byte.b	%01100110
   3498  f9a7		       c3		      .byte.b	%11000011
   3499  f9a8				  -	      if	(<*) > (<(*+17))
   3500  f9a8				  -	      repeat	($100-<*)
   3501  f9a8				  -	      .byte	0
   3502  f9a8				  -	      repend
   3503  f9a8					      endif
   3504  f9a8				   playerL0149_0
   3505  f9a8		       66		      .byte.b	%01100110
   3506  f9a9		       66		      .byte.b	%01100110
   3507  f9aa		       24		      .byte.b	%00100100
   3508  f9ab		       3c		      .byte.b	%00111100
   3509  f9ac		       5a		      .byte.b	%01011010
   3510  f9ad		       7e		      .byte.b	%01111110
   3511  f9ae		       7e		      .byte.b	%01111110
   3512  f9af		       3c		      .byte.b	%00111100
   3513  f9b0		       18		      .byte.b	%00011000
   3514  f9b1		       7e		      .byte.b	%01111110
   3515  f9b2		       e3		      .byte.b	%11100011
   3516  f9b3		       c1		      .byte.b	%11000001
   3517  f9b4		       ff		      .byte.b	%11111111
   3518  f9b5		       ff		      .byte.b	%11111111
   3519  f9b6		       c9		      .byte.b	%11001001
   3520  f9b7		       c9		      .byte.b	%11001001
   3521  f9b8		       ff		      .byte.b	%11111111
   3522  f9b9		       7e		      .byte.b	%01111110
   3523  f9ba				  -	      if	(<*) > (<(*+17))
   3524  f9ba				  -	      repeat	($100-<*)
   3525  f9ba				  -	      .byte	0
   3526  f9ba				  -	      repend
   3527  f9ba					      endif
   3528  f9ba				   playerL0151_0
   3529  f9ba		       c3		      .byte.b	%11000011
   3530  f9bb		       66		      .byte.b	%01100110
   3531  f9bc		       24		      .byte.b	%00100100
   3532  f9bd		       3c		      .byte.b	%00111100
   3533  f9be		       99		      .byte.b	%10011001
   3534  f9bf		       7e		      .byte.b	%01111110
   3535  f9c0		       3c		      .byte.b	%00111100
   3536  f9c1		       18		      .byte.b	%00011000
   3537  f9c2		       7e		      .byte.b	%01111110
   3538  f9c3		       e3		      .byte.b	%11100011
   3539  f9c4		       c1		      .byte.b	%11000001
   3540  f9c5		       ff		      .byte.b	%11111111
   3541  f9c6		       ff		      .byte.b	%11111111
   3542  f9c7		       c9		      .byte.b	%11001001
   3543  f9c8		       c9		      .byte.b	%11001001
   3544  f9c9		       ff		      .byte.b	%11111111
   3545  f9ca		       7e		      .byte.b	%01111110
   3546  f9cb		       00		      .byte.b	%00000000
   3547  f9cc				  -	      if	(<*) > (<(*+16))
   3548  f9cc				  -	      repeat	($100-<*)
   3549  f9cc				  -	      .byte	0
   3550  f9cc				  -	      repend
   3551  f9cc					      endif
   3552  f9cc				   playerL0153_1
   3553  f9cc		       ff		      .byte.b	%11111111
   3554  f9cd		       7e		      .byte.b	%01111110
   3555  f9ce		       00		      .byte.b	%00000000
   3556  f9cf		       3c		      .byte.b	%00111100
   3557  f9d0		       42		      .byte.b	%01000010
   3558  f9d1		       81		      .byte.b	%10000001
   3559  f9d2		       99		      .byte.b	%10011001
   3560  f9d3		       bd		      .byte.b	%10111101
   3561  f9d4		       a5		      .byte.b	%10100101
   3562  f9d5		       a1		      .byte.b	%10100001
   3563  f9d6		       a1		      .byte.b	%10100001
   3564  f9d7		       a5		      .byte.b	%10100101
   3565  f9d8		       bd		      .byte.b	%10111101
   3566  f9d9		       99		      .byte.b	%10011001
   3567  f9da		       81		      .byte.b	%10000001
   3568  f9db		       42		      .byte.b	%01000010
   3569  f9dc		       3c		      .byte.b	%00111100
   3570  f9dd					      if	ECHOFIRST
      1471 bytes of ROM space left
   3571  f9dd					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3572  f9dd					      endif
   3573  f9dd		       00 01	   ECHOFIRST  =	1
   3574  f9dd
   3575  f9dd
   3576  f9dd
   3577  f9dd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3578  f9dd
   3579  f9dd							; feel free to modify the score graphics - just keep each digit 8 high
   3580  f9dd							; and keep the conditional compilation stuff intact
   3581  f9dd				  -	      ifconst	ROM2k
   3582  f9dd				  -	      ORG	$F7AC-8
   3583  f9dd					      else
   3584  f9dd				  -	      ifconst	bankswitch
   3585  f9dd				  -	      if	bankswitch == 8
   3586  f9dd				  -	      ORG	$2F94-bscode_length
   3587  f9dd				  -	      RORG	$FF94-bscode_length
   3588  f9dd				  -	      endif
   3589  f9dd				  -	      if	bankswitch == 16
   3590  f9dd				  -	      ORG	$4F94-bscode_length
   3591  f9dd				  -	      RORG	$FF94-bscode_length
   3592  f9dd				  -	      endif
   3593  f9dd				  -	      if	bankswitch == 32
   3594  f9dd				  -	      ORG	$8F94-bscode_length
   3595  f9dd				  -	      RORG	$FF94-bscode_length
   3596  f9dd				  -	      endif
   3597  f9dd				  -	      if	bankswitch == 64
   3598  f9dd				  -	      ORG	$10F80-bscode_length
   3599  f9dd				  -	      RORG	$1FF80-bscode_length
   3600  f9dd				  -	      endif
   3601  f9dd					      else
   3602  ff9c					      ORG	$FF9C
   3603  ff9c					      endif
   3604  ff9c					      endif
   3605  ff9c
   3606  ff9c							; font equates
   3607  ff9c		       00 01	   .21stcentury =	1
   3608  ff9c		       00 02	   alarmclock =	2
   3609  ff9c		       00 03	   handwritten =	3
   3610  ff9c		       00 04	   interrupted =	4
   3611  ff9c		       00 05	   retroputer =	5
   3612  ff9c		       00 06	   whimsey    =	6
   3613  ff9c		       00 07	   tiny       =	7
   3614  ff9c		       00 08	   hex	      =	8
   3615  ff9c
   3616  ff9c				  -	      ifconst	font
   3617  ff9c				  -	      if	font == hex
   3618  ff9c				  -	      ORG	. - 48
   3619  ff9c				  -	      endif
   3620  ff9c					      endif
   3621  ff9c
   3622  ff9c				   scoretable
   3623  ff9c
   3624  ff9c				  -	      ifconst	font
   3625  ff9c				  -	      if	font == .21stcentury
   3626  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3627  ff9c				  -	      endif
   3628  ff9c				  -	      if	font == alarmclock
   3629  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3630  ff9c				  -	      endif
   3631  ff9c				  -	      if	font == handwritten
   3632  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3633  ff9c				  -	      endif
   3634  ff9c				  -	      if	font == interrupted
   3635  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3636  ff9c				  -	      endif
   3637  ff9c				  -	      if	font == retroputer
   3638  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3639  ff9c				  -	      endif
   3640  ff9c				  -	      if	font == whimsey
   3641  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3642  ff9c				  -	      endif
   3643  ff9c				  -	      if	font == tiny
   3644  ff9c				  -	      include	"score_graphics.asm.tiny"
   3645  ff9c				  -	      endif
   3646  ff9c				  -	      if	font == hex
   3647  ff9c				  -	      include	"score_graphics.asm.hex"
   3648  ff9c				  -	      endif
   3649  ff9c					      else		; default font
   3650  ff9c
   3651  ff9c		       3c		      .byte.b	%00111100
   3652  ff9d		       66		      .byte.b	%01100110
   3653  ff9e		       66		      .byte.b	%01100110
   3654  ff9f		       66		      .byte.b	%01100110
   3655  ffa0		       66		      .byte.b	%01100110
   3656  ffa1		       66		      .byte.b	%01100110
   3657  ffa2		       66		      .byte.b	%01100110
   3658  ffa3		       3c		      .byte.b	%00111100
   3659  ffa4
   3660  ffa4		       7e		      .byte.b	%01111110
   3661  ffa5		       18		      .byte.b	%00011000
   3662  ffa6		       18		      .byte.b	%00011000
   3663  ffa7		       18		      .byte.b	%00011000
   3664  ffa8		       18		      .byte.b	%00011000
   3665  ffa9		       38		      .byte.b	%00111000
   3666  ffaa		       18		      .byte.b	%00011000
   3667  ffab		       08		      .byte.b	%00001000
   3668  ffac
   3669  ffac		       7e		      .byte.b	%01111110
   3670  ffad		       60		      .byte.b	%01100000
   3671  ffae		       60		      .byte.b	%01100000
   3672  ffaf		       3c		      .byte.b	%00111100
   3673  ffb0		       06		      .byte.b	%00000110
   3674  ffb1		       06		      .byte.b	%00000110
   3675  ffb2		       46		      .byte.b	%01000110
   3676  ffb3		       3c		      .byte.b	%00111100
   3677  ffb4
   3678  ffb4		       3c		      .byte.b	%00111100
   3679  ffb5		       46		      .byte.b	%01000110
   3680  ffb6		       06		      .byte.b	%00000110
   3681  ffb7		       06		      .byte.b	%00000110
   3682  ffb8		       1c		      .byte.b	%00011100
   3683  ffb9		       06		      .byte.b	%00000110
   3684  ffba		       46		      .byte.b	%01000110
   3685  ffbb		       3c		      .byte.b	%00111100
   3686  ffbc
   3687  ffbc		       0c		      .byte.b	%00001100
   3688  ffbd		       0c		      .byte.b	%00001100
   3689  ffbe		       7e		      .byte.b	%01111110
   3690  ffbf		       4c		      .byte.b	%01001100
   3691  ffc0		       4c		      .byte.b	%01001100
   3692  ffc1		       2c		      .byte.b	%00101100
   3693  ffc2		       1c		      .byte.b	%00011100
   3694  ffc3		       0c		      .byte.b	%00001100
   3695  ffc4
   3696  ffc4		       3c		      .byte.b	%00111100
   3697  ffc5		       46		      .byte.b	%01000110
   3698  ffc6		       06		      .byte.b	%00000110
   3699  ffc7		       06		      .byte.b	%00000110
   3700  ffc8		       3c		      .byte.b	%00111100
   3701  ffc9		       60		      .byte.b	%01100000
   3702  ffca		       60		      .byte.b	%01100000
   3703  ffcb		       7e		      .byte.b	%01111110
   3704  ffcc
   3705  ffcc		       3c		      .byte.b	%00111100
   3706  ffcd		       66		      .byte.b	%01100110
   3707  ffce		       66		      .byte.b	%01100110
   3708  ffcf		       66		      .byte.b	%01100110
   3709  ffd0		       7c		      .byte.b	%01111100
   3710  ffd1		       60		      .byte.b	%01100000
   3711  ffd2		       62		      .byte.b	%01100010
   3712  ffd3		       3c		      .byte.b	%00111100
   3713  ffd4
   3714  ffd4		       30		      .byte.b	%00110000
   3715  ffd5		       30		      .byte.b	%00110000
   3716  ffd6		       30		      .byte.b	%00110000
   3717  ffd7		       18		      .byte.b	%00011000
   3718  ffd8		       0c		      .byte.b	%00001100
   3719  ffd9		       06		      .byte.b	%00000110
   3720  ffda		       42		      .byte.b	%01000010
   3721  ffdb		       3e		      .byte.b	%00111110
   3722  ffdc
   3723  ffdc		       3c		      .byte.b	%00111100
   3724  ffdd		       66		      .byte.b	%01100110
   3725  ffde		       66		      .byte.b	%01100110
   3726  ffdf		       66		      .byte.b	%01100110
   3727  ffe0		       3c		      .byte.b	%00111100
   3728  ffe1		       66		      .byte.b	%01100110
   3729  ffe2		       66		      .byte.b	%01100110
   3730  ffe3		       3c		      .byte.b	%00111100
   3731  ffe4
   3732  ffe4		       3c		      .byte.b	%00111100
   3733  ffe5		       46		      .byte.b	%01000110
   3734  ffe6		       06		      .byte.b	%00000110
   3735  ffe7		       3e		      .byte.b	%00111110
   3736  ffe8		       66		      .byte.b	%01100110
   3737  ffe9		       66		      .byte.b	%01100110
   3738  ffea		       66		      .byte.b	%01100110
   3739  ffeb		       3c		      .byte.b	%00111100
   3740  ffec
   3741  ffec					      ifnconst	DPC_kernel_options
   3742  ffec
   3743  ffec		       00		      .byte.b	%00000000
   3744  ffed		       00		      .byte.b	%00000000
   3745  ffee		       00		      .byte.b	%00000000
   3746  ffef		       00		      .byte.b	%00000000
   3747  fff0		       00		      .byte.b	%00000000
   3748  fff1		       00		      .byte.b	%00000000
   3749  fff2		       00		      .byte.b	%00000000
   3750  fff3		       00		      .byte.b	%00000000
   3751  fff4
   3752  fff4					      endif
   3753  fff4
   3754  fff4					      endif
   3755  fff4
   3756  fff4				  -	      ifconst	ROM2k
   3757  fff4				  -	      ORG	$F7FC
   3758  fff4					      else
   3759  fff4				  -	      ifconst	bankswitch
   3760  fff4				  -	      if	bankswitch == 8
   3761  fff4				  -	      ORG	$2FF4-bscode_length
   3762  fff4				  -	      RORG	$FFF4-bscode_length
   3763  fff4				  -	      endif
   3764  fff4				  -	      if	bankswitch == 16
   3765  fff4				  -	      ORG	$4FF4-bscode_length
   3766  fff4				  -	      RORG	$FFF4-bscode_length
   3767  fff4				  -	      endif
   3768  fff4				  -	      if	bankswitch == 32
   3769  fff4				  -	      ORG	$8FF4-bscode_length
   3770  fff4				  -	      RORG	$FFF4-bscode_length
   3771  fff4				  -	      endif
   3772  fff4				  -	      if	bankswitch == 64
   3773  fff4				  -	      ORG	$10FE0-bscode_length
   3774  fff4				  -	      RORG	$1FFE0-bscode_length
   3775  fff4				  -	      endif
   3776  fff4					      else
   3777  fffc					      ORG	$FFFC
   3778  fffc					      endif
   3779  fffc					      endif
   3780  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3781  fffc
   3782  fffc				  -	      ifconst	bankswitch
   3783  fffc				  -	      if	bankswitch == 8
   3784  fffc				  -	      ORG	$2FFC
   3785  fffc				  -	      RORG	$FFFC
   3786  fffc				  -	      endif
   3787  fffc				  -	      if	bankswitch == 16
   3788  fffc				  -	      ORG	$4FFC
   3789  fffc				  -	      RORG	$FFFC
   3790  fffc				  -	      endif
   3791  fffc				  -	      if	bankswitch == 32
   3792  fffc				  -	      ORG	$8FFC
   3793  fffc				  -	      RORG	$FFFC
   3794  fffc				  -	      endif
   3795  fffc				  -	      if	bankswitch == 64
   3796  fffc				  -	      ORG	$10FF0
   3797  fffc				  -	      RORG	$1FFF0
   3798  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3799  fffc				  -	      ORG	$10FF8
   3800  fffc				  -	      RORG	$1FFF8
   3801  fffc				  -	      ifconst	superchip
   3802  fffc				  -	      .byte	"E","F","S","C"
   3803  fffc				  -	      else
   3804  fffc				  -	      .byte	"E","F","E","F"
   3805  fffc				  -	      endif
   3806  fffc				  -	      ORG	$10FFC
   3807  fffc				  -	      RORG	$1FFFC
   3808  fffc				  -	      endif
   3809  fffc					      else
   3810  fffc				  -	      ifconst	ROM2k
   3811  fffc				  -	      ORG	$F7FC
   3812  fffc					      else
   3813  fffc					      ORG	$FFFC
   3814  fffc					      endif
   3815  fffc					      endif
   3816  fffc		       00 f0		      .word.w	(start & $ffff)
   3817  fffe		       00 f0		      .word.w	(start & $ffff)

------- FILE C:\Users\jefma\Desktop\gaem\Amogus\Amogus.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\Amogus\Amogus.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\Amogus\Amogus.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit1_P0_Walk =	y
      4  10000 ????
      5  10000 ????		00 d4	    _frameCounter =	a
      6  10000 ????
      7  10000 ????		00 01	    noscore    =	1
      8  10000 ????
      9  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\Users\jefma\Desktop\gaem\Amogus\Amogus.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit1_P0_Walk =	y
      4  10000 ????
      5  10000 ????		00 d4	    _frameCounter =	a
      6  10000 ????
      7  10000 ????		00 01	    noscore    =	1
      8  10000 ????
      9  10000 ????		00 01	    no_blank_lines =	1
------- FILE C:\Users\jefma\Desktop\gaem\Amogus\Amogus.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c cd f3 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7				  -	      ifconst	minikernel
    730  f1b7				  -	      jsr	minikernel
    731  f1b7					      endif
    732  f1b7
    733  f1b7							; now reassign temp vars for score pointers
    734  f1b7
    735  f1b7							; score pointers contain:
    736  f1b7							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b7							; swap lo2->temp1
    738  f1b7							; swap lo4->temp3
    739  f1b7							; swap lo6->temp5
    740  f1b7				  -	      ifnconst	noscore
    741  f1b7				  -	      lda	scorepointers+1
    742  f1b7				  -			; ldy temp1
    743  f1b7				  -	      sta	temp1
    744  f1b7				  -			; sty scorepointers+1
    745  f1b7				  -
    746  f1b7				  -	      lda	scorepointers+3
    747  f1b7				  -			; ldy temp3
    748  f1b7				  -	      sta	temp3
    749  f1b7				  -			; sty scorepointers+3
    750  f1b7				  -
    751  f1b7				  -
    752  f1b7				  -	      sta	HMCLR
    753  f1b7				  -	      tsx
    754  f1b7				  -	      stx	stack1
    755  f1b7				  -	      ldx	#$E0
    756  f1b7				  -	      stx	HMP0
    757  f1b7				  -
    758  f1b7				  -	      LDA	scorecolor
    759  f1b7				  -	      STA	COLUP0
    760  f1b7				  -	      STA	COLUP1
    761  f1b7				  -	      ifconst	scorefade
    762  f1b7				  -	      STA	stack2
    763  f1b7				  -	      endif
    764  f1b7				  -	      ifconst	pfscore
    765  f1b7				  -	      lda	pfscorecolor
    766  f1b7				  -	      sta	COLUPF
    767  f1b7				  -	      endif
    768  f1b7				  -	      sta	WSYNC
    769  f1b7				  -	      ldx	#0
    770  f1b7				  -	      STx	GRP0
    771  f1b7				  -	      STx	GRP1	; seems to be needed because of vdel
    772  f1b7				  -
    773  f1b7				  -	      lda	scorepointers+5
    774  f1b7				  -			; ldy temp5
    775  f1b7				  -	      sta	temp5,x
    776  f1b7				  -			; sty scorepointers+5
    777  f1b7				  -	      lda	#>scoretable
    778  f1b7				  -	      sta	scorepointers+1
    779  f1b7				  -	      sta	scorepointers+3
    780  f1b7				  -	      sta	scorepointers+5
    781  f1b7				  -	      sta	temp2
    782  f1b7				  -	      sta	temp4
    783  f1b7				  -	      sta	temp6
    784  f1b7				  -	      LDY	#7
    785  f1b7				  -	      STY	VDELP0
    786  f1b7				  -	      STA	RESP0
    787  f1b7				  -	      STA	RESP1
    788  f1b7				  -
    789  f1b7				  -
    790  f1b7				  -	      LDA	#$03
    791  f1b7				  -	      STA	NUSIZ0
    792  f1b7				  -	      STA	NUSIZ1
    793  f1b7				  -	      STA	VDELP1
    794  f1b7				  -	      LDA	#$F0
    795  f1b7				  -	      STA	HMP1
    796  f1b7				  -	      lda	(scorepointers),y
    797  f1b7				  -	      sta	GRP0
    798  f1b7				  -	      STA	HMOVE	; cycle 73 ?
    799  f1b7				  -	      jmp	beginscore
    800  f1b7				  -
    801  f1b7				  -
    802  f1b7				  -	      if	((<*)>$d4)
    803  f1b7				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f1b7				  -	      endif
    805  f1b7				  -
    806  f1b7				  -loop2
    807  f1b7				  -	      lda	(scorepointers),y	;+5 68 204
    808  f1b7				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f1b7				  -	      ifconst	pfscore
    810  f1b7				  -	      lda.w	pfscore1
    811  f1b7				  -	      sta	PF1
    812  f1b7				  -	      else
    813  f1b7				  -	      ifconst	scorefade
    814  f1b7				  -	      sleep	2
    815  f1b7				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f1b7				  -	      else
    817  f1b7				  -	      sleep	7
    818  f1b7				  -	      endif
    819  f1b7				  -	      endif
    820  f1b7				  -			; cycle 0
    821  f1b7				  -beginscore
    822  f1b7				  -	      lda	(scorepointers+$8),y	;+5 5 15
    823  f1b7				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f1b7				  -	      lda	(scorepointers+$6),y	;+5 13 39
    825  f1b7				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f1b7				  -	      lax	(scorepointers+$2),y	;+5 29 87
    827  f1b7				  -	      txs
    828  f1b7				  -	      lax	(scorepointers+$4),y	;+5 36 108
    829  f1b7				  -	      ifconst	scorefade
    830  f1b7				  -	      lda	stack2
    831  f1b7				  -	      else
    832  f1b7				  -	      sleep	3
    833  f1b7				  -	      endif
    834  f1b7				  -
    835  f1b7				  -	      ifconst	pfscore
    836  f1b7				  -	      lda	pfscore2
    837  f1b7				  -	      sta	PF1
    838  f1b7				  -	      else
    839  f1b7				  -	      ifconst	scorefade
    840  f1b7				  -	      sta	COLUP0
    841  f1b7				  -	      sta	COLUP1
    842  f1b7				  -	      else
    843  f1b7				  -	      sleep	6
    844  f1b7				  -	      endif
    845  f1b7				  -	      endif
    846  f1b7				  -
    847  f1b7				  -	      lda	(scorepointers+$A),y	;+5 21 63
    848  f1b7				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f1b7				  -	      tsx
    850  f1b7				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f1b7				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f1b7				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f1b7				  -	      dey
    854  f1b7				  -	      bpl	loop2	;+2 60 180
    855  f1b7				  -
    856  f1b7				  -	      ldx	stack1
    857  f1b7				  -	      txs
    858  f1b7				  -			; lda scorepointers+1
    859  f1b7				  -	      ldy	temp1
    860  f1b7				  -			; sta temp1
    861  f1b7				  -	      sty	scorepointers+1
    862  f1b7				  -
    863  f1b7				  -	      LDA	#0
    864  f1b7				  -	      sta	PF1
    865  f1b7				  -	      STA	GRP0
    866  f1b7				  -	      STA	GRP1
    867  f1b7				  -	      STA	VDELP0
    868  f1b7				  -	      STA	VDELP1	;do we need these
    869  f1b7				  -	      STA	NUSIZ0
    870  f1b7				  -	      STA	NUSIZ1
    871  f1b7				  -
    872  f1b7				  -			; lda scorepointers+3
    873  f1b7				  -	      ldy	temp3
    874  f1b7				  -			; sta temp3
    875  f1b7				  -	      sty	scorepointers+3
    876  f1b7				  -
    877  f1b7				  -			; lda scorepointers+5
    878  f1b7				  -	      ldy	temp5
    879  f1b7				  -			; sta temp5
    880  f1b7				  -	      sty	scorepointers+5
    881  f1b7					      endif		;noscore
    882  f1b7				  -	      ifconst	readpaddle
    883  f1b7				  -	      lda	#%11000010
    884  f1b7					      else
    885  f1b7				  -	      ifconst	qtcontroller
    886  f1b7				  -	      lda	qtcontroller
    887  f1b7				  -	      lsr		; bit 0 in carry
    888  f1b7				  -	      lda	#4
    889  f1b7				  -	      ror		; carry into top of A
    890  f1b7					      else
    891  f1b7		       a9 02		      lda	#2
    892  f1b9					      endif		; qtcontroller
    893  f1b9					      endif		; readpaddle
    894  f1b9		       85 02		      sta	WSYNC
    895  f1bb		       85 01		      sta	VBLANK
      0  f1bd					      RETURN
      1  f1bd					      ifnconst	bankswitch
      2  f1bd		       60		      rts
      3  f1be				  -	      else
      4  f1be				  -	      jmp	BS_return
      5  f1be					      endif
    897  f1be				  -	      ifconst	shakescreen
    898  f1be				  -doshakescreen
    899  f1be				  -	      bit	shakescreen
    900  f1be				  -	      bmi	noshakescreen
    901  f1be				  -	      sta	WSYNC
    902  f1be				  -noshakescreen
    903  f1be				  -	      ldx	missile0height
    904  f1be				  -	      inx
    905  f1be				  -	      rts
    906  f1be					      endif
    907  f1be
    908  f1be							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f1be
    910  f1be							; playfield drawing routines
    911  f1be							; you get a 32x12 bitmapped display in a single color :)
    912  f1be							; 0-31 and 0-11
    913  f1be
    914  f1be				   pfclear		; clears playfield - or fill with pattern
    915  f1be				  -	      ifconst	pfres
    916  f1be				  -	      ldx	#pfres*pfwidth-1
    917  f1be					      else
    918  f1be		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f1c0					      endif
    920  f1c0				   pfclear_loop
    921  f1c0					      ifnconst	superchip
    922  f1c0		       95 a4		      sta	playfield,x
    923  f1c2				  -	      else
    924  f1c2				  -	      sta	playfield-128,x
    925  f1c2					      endif
    926  f1c2		       ca		      dex
    927  f1c3		       10 fb		      bpl	pfclear_loop
      0  f1c5					      RETURN
      1  f1c5					      ifnconst	bankswitch
      2  f1c5		       60		      rts
      3  f1c6				  -	      else
      4  f1c6				  -	      jmp	BS_return
      5  f1c6					      endif
    929  f1c6
    930  f1c6				   setuppointers
    931  f1c6		       86 9d		      stx	temp2	; store on.off.flip value
    932  f1c8		       aa		      tax		; put x-value in x 
    933  f1c9		       4a		      lsr
    934  f1ca		       4a		      lsr
    935  f1cb		       4a		      lsr		; divide x pos by 8 
    936  f1cc		       85 9c		      sta	temp1
    937  f1ce		       98		      tya
    938  f1cf		       0a		      asl
    939  f1d0					      if	pfwidth=4
    940  f1d0		       0a		      asl		; multiply y pos by 4
    941  f1d1					      endif		; else multiply by 2
    942  f1d1		       18		      clc
    943  f1d2		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f1d4		       a8		      tay		; put the value in y
    945  f1d5		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f1d7		       60		      rts
    947  f1d8
    948  f1d8				   pfread
    949  f1d8							;x=xvalue, y=yvalue
    950  f1d8		       20 c6 f1 	      jsr	setuppointers
    951  f1db		       bd 40 f2 	      lda	setbyte,x
    952  f1de		       39 a4 00 	      and	playfield,y
    953  f1e1		       5d 40 f2 	      eor	setbyte,x
    954  f1e4							; beq readzero
    955  f1e4							; lda #1
    956  f1e4							; readzero
      0  f1e4					      RETURN
      1  f1e4					      ifnconst	bankswitch
      2  f1e4		       60		      rts
      3  f1e5				  -	      else
      4  f1e5				  -	      jmp	BS_return
      5  f1e5					      endif
    958  f1e5
    959  f1e5				   pfpixel
    960  f1e5							;x=xvalue, y=yvalue, a=0,1,2
    961  f1e5		       20 c6 f1 	      jsr	setuppointers
    962  f1e8
    963  f1e8				  -	      ifconst	bankswitch
    964  f1e8				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f1e8				  -	      beq	pixelon_r	; if "on" go to on
    966  f1e8				  -	      lsr
    967  f1e8				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f1e8				  -	      lda	playfield,y	; if here, it's "flip"
    969  f1e8				  -	      eor	setbyte,x
    970  f1e8				  -	      ifconst	superchip
    971  f1e8				  -	      sta	playfield-128,y
    972  f1e8				  -	      else
    973  f1e8				  -	      sta	playfield,y
    974  f1e8				  -	      endif
    975  f1e8				  -	      RETURN
    976  f1e8				  -pixelon_r
    977  f1e8				  -	      lda	playfield,y
    978  f1e8				  -	      ora	setbyte,x
    979  f1e8				  -	      ifconst	superchip
    980  f1e8				  -	      sta	playfield-128,y
    981  f1e8				  -	      else
    982  f1e8				  -	      sta	playfield,y
    983  f1e8				  -	      endif
    984  f1e8				  -	      RETURN
    985  f1e8				  -pixeloff_r
    986  f1e8				  -	      lda	setbyte,x
    987  f1e8				  -	      eor	#$ff
    988  f1e8				  -	      and	playfield,y
    989  f1e8				  -	      ifconst	superchip
    990  f1e8				  -	      sta	playfield-128,y
    991  f1e8				  -	      else
    992  f1e8				  -	      sta	playfield,y
    993  f1e8				  -	      endif
    994  f1e8				  -	      RETURN
    995  f1e8				  -
    996  f1e8					      else
    997  f1e8		       4c 19 f2 	      jmp	plotpoint
    998  f1eb					      endif
    999  f1eb
   1000  f1eb				   pfhline
   1001  f1eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f1eb		       20 c6 f1 	      jsr	setuppointers
   1003  f1ee		       4c f8 f1 	      jmp	noinc
   1004  f1f1				   keepgoing
   1005  f1f1		       e8		      inx
   1006  f1f2		       8a		      txa
   1007  f1f3		       29 07		      and	#7
   1008  f1f5		       d0 01		      bne	noinc
   1009  f1f7		       c8		      iny
   1010  f1f8				   noinc
   1011  f1f8		       20 19 f2 	      jsr	plotpoint
   1012  f1fb		       e4 9e		      cpx	temp3
   1013  f1fd		       30 f2		      bmi	keepgoing
      0  f1ff					      RETURN
      1  f1ff					      ifnconst	bankswitch
      2  f1ff		       60		      rts
      3  f200				  -	      else
      4  f200				  -	      jmp	BS_return
      5  f200					      endif
   1015  f200
   1016  f200				   pfvline
   1017  f200							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f200		       20 c6 f1 	      jsr	setuppointers
   1019  f203		       84 9c		      sty	temp1	; store memory location offset
   1020  f205		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f207		       a5 9e		      lda	temp3
   1022  f209		       0a		      asl
   1023  f20a					      if	pfwidth=4
   1024  f20a		       0a		      asl		; multiply by 4
   1025  f20b					      endif		; else multiply by 2
   1026  f20b		       85 9e		      sta	temp3	; store it
   1027  f20d							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f20d							; right now, temp1=y=starting memory location, temp3=final
   1029  f20d							; x should equal original x value
   1030  f20d				   keepgoingy
   1031  f20d		       20 19 f2 	      jsr	plotpoint
   1032  f210		       c8		      iny
   1033  f211		       c8		      iny
   1034  f212					      if	pfwidth=4
   1035  f212		       c8		      iny
   1036  f213		       c8		      iny
   1037  f214					      endif
   1038  f214		       c4 9e		      cpy	temp3
   1039  f216		       30 f5		      bmi	keepgoingy
      0  f218					      RETURN
      1  f218					      ifnconst	bankswitch
      2  f218		       60		      rts
      3  f219				  -	      else
      4  f219				  -	      jmp	BS_return
      5  f219					      endif
   1041  f219
   1042  f219				   plotpoint
   1043  f219		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f21b		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f21d		       4a		      lsr
   1046  f21e		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f220		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f223		       5d 40 f2 	      eor	setbyte,x
   1049  f226				  -	      ifconst	superchip
   1050  f226				  -	      sta	playfield-128,y
   1051  f226					      else
   1052  f226		       99 a4 00 	      sta	playfield,y
   1053  f229					      endif
   1054  f229		       60		      rts
   1055  f22a				   pixelon
   1056  f22a		       b9 a4 00 	      lda	playfield,y
   1057  f22d		       1d 40 f2 	      ora	setbyte,x
   1058  f230				  -	      ifconst	superchip
   1059  f230				  -	      sta	playfield-128,y
   1060  f230					      else
   1061  f230		       99 a4 00 	      sta	playfield,y
   1062  f233					      endif
   1063  f233		       60		      rts
   1064  f234				   pixeloff
   1065  f234		       bd 40 f2 	      lda	setbyte,x
   1066  f237		       49 ff		      eor	#$ff
   1067  f239		       39 a4 00 	      and	playfield,y
   1068  f23c				  -	      ifconst	superchip
   1069  f23c				  -	      sta	playfield-128,y
   1070  f23c					      else
   1071  f23c		       99 a4 00 	      sta	playfield,y
   1072  f23f					      endif
   1073  f23f		       60		      rts
   1074  f240
   1075  f240				   setbyte
   1076  f240					      ifnconst	pfcenter
   1077  f240		       80		      .byte.b	$80
   1078  f241		       40		      .byte.b	$40
   1079  f242		       20		      .byte.b	$20
   1080  f243		       10		      .byte.b	$10
   1081  f244		       08		      .byte.b	$08
   1082  f245		       04		      .byte.b	$04
   1083  f246		       02		      .byte.b	$02
   1084  f247		       01		      .byte.b	$01
   1085  f248					      endif
   1086  f248		       01		      .byte.b	$01
   1087  f249		       02		      .byte.b	$02
   1088  f24a		       04		      .byte.b	$04
   1089  f24b		       08		      .byte.b	$08
   1090  f24c		       10		      .byte.b	$10
   1091  f24d		       20		      .byte.b	$20
   1092  f24e		       40		      .byte.b	$40
   1093  f24f		       80		      .byte.b	$80
   1094  f250		       80		      .byte.b	$80
   1095  f251		       40		      .byte.b	$40
   1096  f252		       20		      .byte.b	$20
   1097  f253		       10		      .byte.b	$10
   1098  f254		       08		      .byte.b	$08
   1099  f255		       04		      .byte.b	$04
   1100  f256		       02		      .byte.b	$02
   1101  f257		       01		      .byte.b	$01
   1102  f258		       01		      .byte.b	$01
   1103  f259		       02		      .byte.b	$02
   1104  f25a		       04		      .byte.b	$04
   1105  f25b		       08		      .byte.b	$08
   1106  f25c		       10		      .byte.b	$10
   1107  f25d		       20		      .byte.b	$20
   1108  f25e		       40		      .byte.b	$40
   1109  f25f		       80		      .byte.b	$80
   1110  f260							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f260
   1112  f260				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f260		       d0 13		      bne	notleft
   1114  f262							;left
   1115  f262				  -	      ifconst	pfres
   1116  f262				  -	      ldx	#pfres*4
   1117  f262					      else
   1118  f262		       a2 30		      ldx	#48
   1119  f264					      endif
   1120  f264				   leftloop
   1121  f264		       b5 a3		      lda	playfield-1,x
   1122  f266		       4a		      lsr
   1123  f267
   1124  f267				  -	      ifconst	superchip
   1125  f267				  -	      lda	playfield-2,x
   1126  f267				  -	      rol
   1127  f267				  -	      sta	playfield-130,x
   1128  f267				  -	      lda	playfield-3,x
   1129  f267				  -	      ror
   1130  f267				  -	      sta	playfield-131,x
   1131  f267				  -	      lda	playfield-4,x
   1132  f267				  -	      rol
   1133  f267				  -	      sta	playfield-132,x
   1134  f267				  -	      lda	playfield-1,x
   1135  f267				  -	      ror
   1136  f267				  -	      sta	playfield-129,x
   1137  f267					      else
   1138  f267		       36 a2		      rol	playfield-2,x
   1139  f269		       76 a1		      ror	playfield-3,x
   1140  f26b		       36 a0		      rol	playfield-4,x
   1141  f26d		       76 a3		      ror	playfield-1,x
   1142  f26f					      endif
   1143  f26f
   1144  f26f		       8a		      txa
   1145  f270		       cb 04		      sbx	#4
   1146  f272		       d0 f0		      bne	leftloop
      0  f274					      RETURN
      1  f274					      ifnconst	bankswitch
      2  f274		       60		      rts
      3  f275				  -	      else
      4  f275				  -	      jmp	BS_return
      5  f275					      endif
   1148  f275
   1149  f275				   notleft
   1150  f275		       4a		      lsr
   1151  f276		       90 13		      bcc	notright
   1152  f278							;right
   1153  f278
   1154  f278				  -	      ifconst	pfres
   1155  f278				  -	      ldx	#pfres*4
   1156  f278					      else
   1157  f278		       a2 30		      ldx	#48
   1158  f27a					      endif
   1159  f27a				   rightloop
   1160  f27a		       b5 a0		      lda	playfield-4,x
   1161  f27c		       4a		      lsr
   1162  f27d				  -	      ifconst	superchip
   1163  f27d				  -	      lda	playfield-3,x
   1164  f27d				  -	      rol
   1165  f27d				  -	      sta	playfield-131,x
   1166  f27d				  -	      lda	playfield-2,x
   1167  f27d				  -	      ror
   1168  f27d				  -	      sta	playfield-130,x
   1169  f27d				  -	      lda	playfield-1,x
   1170  f27d				  -	      rol
   1171  f27d				  -	      sta	playfield-129,x
   1172  f27d				  -	      lda	playfield-4,x
   1173  f27d				  -	      ror
   1174  f27d				  -	      sta	playfield-132,x
   1175  f27d					      else
   1176  f27d		       36 a1		      rol	playfield-3,x
   1177  f27f		       76 a2		      ror	playfield-2,x
   1178  f281		       36 a3		      rol	playfield-1,x
   1179  f283		       76 a0		      ror	playfield-4,x
   1180  f285					      endif
   1181  f285		       8a		      txa
   1182  f286		       cb 04		      sbx	#4
   1183  f288		       d0 f0		      bne	rightloop
      0  f28a					      RETURN
      1  f28a					      ifnconst	bankswitch
      2  f28a		       60		      rts
      3  f28b				  -	      else
      4  f28b				  -	      jmp	BS_return
      5  f28b					      endif
   1185  f28b
   1186  f28b				   notright
   1187  f28b		       4a		      lsr
   1188  f28c		       90 49		      bcc	notup
   1189  f28e							;up
   1190  f28e		       4a		      lsr
   1191  f28f		       90 02		      bcc	onedecup
   1192  f291		       c6 ef		      dec	playfieldpos
   1193  f293				   onedecup
   1194  f293		       c6 ef		      dec	playfieldpos
   1195  f295		       f0 02		      beq	shiftdown
   1196  f297		       10 3d		      bpl	noshiftdown2
   1197  f299				   shiftdown
   1198  f299				  -	      ifconst	pfrowheight
   1199  f299				  -	      lda	#pfrowheight
   1200  f299					      else
   1201  f299					      ifnconst	pfres
   1202  f299		       a9 08		      lda	#8
   1203  f29b				  -	      else
   1204  f29b				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f29b					      endif
   1206  f29b					      endif
   1207  f29b
   1208  f29b		       85 ef		      sta	playfieldpos
   1209  f29d		       a5 a7		      lda	playfield+3
   1210  f29f		       85 9f		      sta	temp4
   1211  f2a1		       a5 a6		      lda	playfield+2
   1212  f2a3		       85 9e		      sta	temp3
   1213  f2a5		       a5 a5		      lda	playfield+1
   1214  f2a7		       85 9d		      sta	temp2
   1215  f2a9		       a5 a4		      lda	playfield
   1216  f2ab		       85 9c		      sta	temp1
   1217  f2ad		       a2 00		      ldx	#0
   1218  f2af				   up2
   1219  f2af		       b5 a8		      lda	playfield+4,x
   1220  f2b1				  -	      ifconst	superchip
   1221  f2b1				  -	      sta	playfield-128,x
   1222  f2b1				  -	      lda	playfield+5,x
   1223  f2b1				  -	      sta	playfield-127,x
   1224  f2b1				  -	      lda	playfield+6,x
   1225  f2b1				  -	      sta	playfield-126,x
   1226  f2b1				  -	      lda	playfield+7,x
   1227  f2b1				  -	      sta	playfield-125,x
   1228  f2b1					      else
   1229  f2b1		       95 a4		      sta	playfield,x
   1230  f2b3		       b5 a9		      lda	playfield+5,x
   1231  f2b5		       95 a5		      sta	playfield+1,x
   1232  f2b7		       b5 aa		      lda	playfield+6,x
   1233  f2b9		       95 a6		      sta	playfield+2,x
   1234  f2bb		       b5 ab		      lda	playfield+7,x
   1235  f2bd		       95 a7		      sta	playfield+3,x
   1236  f2bf					      endif
   1237  f2bf		       8a		      txa
   1238  f2c0		       cb fc		      sbx	#252
   1239  f2c2				  -	      ifconst	pfres
   1240  f2c2				  -	      cpx	#(pfres-1)*4
   1241  f2c2					      else
   1242  f2c2		       e0 2c		      cpx	#44
   1243  f2c4					      endif
   1244  f2c4		       d0 e9		      bne	up2
   1245  f2c6
   1246  f2c6		       a5 9f		      lda	temp4
   1247  f2c8
   1248  f2c8				  -	      ifconst	superchip
   1249  f2c8				  -	      ifconst	pfres
   1250  f2c8				  -	      sta	playfield+pfres*4-129
   1251  f2c8				  -	      lda	temp3
   1252  f2c8				  -	      sta	playfield+pfres*4-130
   1253  f2c8				  -	      lda	temp2
   1254  f2c8				  -	      sta	playfield+pfres*4-131
   1255  f2c8				  -	      lda	temp1
   1256  f2c8				  -	      sta	playfield+pfres*4-132
   1257  f2c8				  -	      else
   1258  f2c8				  -	      sta	playfield+47-128
   1259  f2c8				  -	      lda	temp3
   1260  f2c8				  -	      sta	playfield+46-128
   1261  f2c8				  -	      lda	temp2
   1262  f2c8				  -	      sta	playfield+45-128
   1263  f2c8				  -	      lda	temp1
   1264  f2c8				  -	      sta	playfield+44-128
   1265  f2c8				  -	      endif
   1266  f2c8					      else
   1267  f2c8				  -	      ifconst	pfres
   1268  f2c8				  -	      sta	playfield+pfres*4-1
   1269  f2c8				  -	      lda	temp3
   1270  f2c8				  -	      sta	playfield+pfres*4-2
   1271  f2c8				  -	      lda	temp2
   1272  f2c8				  -	      sta	playfield+pfres*4-3
   1273  f2c8				  -	      lda	temp1
   1274  f2c8				  -	      sta	playfield+pfres*4-4
   1275  f2c8					      else
   1276  f2c8		       85 d3		      sta	playfield+47
   1277  f2ca		       a5 9e		      lda	temp3
   1278  f2cc		       85 d2		      sta	playfield+46
   1279  f2ce		       a5 9d		      lda	temp2
   1280  f2d0		       85 d1		      sta	playfield+45
   1281  f2d2		       a5 9c		      lda	temp1
   1282  f2d4		       85 d0		      sta	playfield+44
   1283  f2d6					      endif
   1284  f2d6					      endif
   1285  f2d6				   noshiftdown2
      0  f2d6					      RETURN
      1  f2d6					      ifnconst	bankswitch
      2  f2d6		       60		      rts
      3  f2d7				  -	      else
      4  f2d7				  -	      jmp	BS_return
      5  f2d7					      endif
   1287  f2d7
   1288  f2d7
   1289  f2d7				   notup
   1290  f2d7							;down
   1291  f2d7		       4a		      lsr
   1292  f2d8		       b0 02		      bcs	oneincup
   1293  f2da		       e6 ef		      inc	playfieldpos
   1294  f2dc				   oneincup
   1295  f2dc		       e6 ef		      inc	playfieldpos
   1296  f2de		       a5 ef		      lda	playfieldpos
   1297  f2e0
   1298  f2e0				  -	      ifconst	pfrowheight
   1299  f2e0				  -	      cmp	#pfrowheight+1
   1300  f2e0					      else
   1301  f2e0					      ifnconst	pfres
   1302  f2e0		       c9 09		      cmp	#9
   1303  f2e2				  -	      else
   1304  f2e2				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f2e2					      endif
   1306  f2e2					      endif
   1307  f2e2
   1308  f2e2		       90 3b		      bcc	noshiftdown
   1309  f2e4		       a9 01		      lda	#1
   1310  f2e6		       85 ef		      sta	playfieldpos
   1311  f2e8
   1312  f2e8				  -	      ifconst	pfres
   1313  f2e8				  -	      lda	playfield+pfres*4-1
   1314  f2e8				  -	      sta	temp4
   1315  f2e8				  -	      lda	playfield+pfres*4-2
   1316  f2e8				  -	      sta	temp3
   1317  f2e8				  -	      lda	playfield+pfres*4-3
   1318  f2e8				  -	      sta	temp2
   1319  f2e8				  -	      lda	playfield+pfres*4-4
   1320  f2e8					      else
   1321  f2e8		       a5 d3		      lda	playfield+47
   1322  f2ea		       85 9f		      sta	temp4
   1323  f2ec		       a5 d2		      lda	playfield+46
   1324  f2ee		       85 9e		      sta	temp3
   1325  f2f0		       a5 d1		      lda	playfield+45
   1326  f2f2		       85 9d		      sta	temp2
   1327  f2f4		       a5 d0		      lda	playfield+44
   1328  f2f6					      endif
   1329  f2f6
   1330  f2f6		       85 9c		      sta	temp1
   1331  f2f8
   1332  f2f8				  -	      ifconst	pfres
   1333  f2f8				  -	      ldx	#(pfres-1)*4
   1334  f2f8					      else
   1335  f2f8		       a2 2c		      ldx	#44
   1336  f2fa					      endif
   1337  f2fa				   down2
   1338  f2fa		       b5 a3		      lda	playfield-1,x
   1339  f2fc				  -	      ifconst	superchip
   1340  f2fc				  -	      sta	playfield-125,x
   1341  f2fc				  -	      lda	playfield-2,x
   1342  f2fc				  -	      sta	playfield-126,x
   1343  f2fc				  -	      lda	playfield-3,x
   1344  f2fc				  -	      sta	playfield-127,x
   1345  f2fc				  -	      lda	playfield-4,x
   1346  f2fc				  -	      sta	playfield-128,x
   1347  f2fc					      else
   1348  f2fc		       95 a7		      sta	playfield+3,x
   1349  f2fe		       b5 a2		      lda	playfield-2,x
   1350  f300		       95 a6		      sta	playfield+2,x
   1351  f302		       b5 a1		      lda	playfield-3,x
   1352  f304		       95 a5		      sta	playfield+1,x
   1353  f306		       b5 a0		      lda	playfield-4,x
   1354  f308		       95 a4		      sta	playfield,x
   1355  f30a					      endif
   1356  f30a		       8a		      txa
   1357  f30b		       cb 04		      sbx	#4
   1358  f30d		       d0 eb		      bne	down2
   1359  f30f
   1360  f30f		       a5 9f		      lda	temp4
   1361  f311				  -	      ifconst	superchip
   1362  f311				  -	      sta	playfield-125
   1363  f311				  -	      lda	temp3
   1364  f311				  -	      sta	playfield-126
   1365  f311				  -	      lda	temp2
   1366  f311				  -	      sta	playfield-127
   1367  f311				  -	      lda	temp1
   1368  f311				  -	      sta	playfield-128
   1369  f311					      else
   1370  f311		       85 a7		      sta	playfield+3
   1371  f313		       a5 9e		      lda	temp3
   1372  f315		       85 a6		      sta	playfield+2
   1373  f317		       a5 9d		      lda	temp2
   1374  f319		       85 a5		      sta	playfield+1
   1375  f31b		       a5 9c		      lda	temp1
   1376  f31d		       85 a4		      sta	playfield
   1377  f31f					      endif
   1378  f31f				   noshiftdown
      0  f31f					      RETURN
      1  f31f					      ifnconst	bankswitch
      2  f31f		       60		      rts
      3  f320				  -	      else
      4  f320				  -	      jmp	BS_return
      5  f320					      endif
   1380  f320							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f320
   1382  f320							;standard routines needed for pretty much all games
   1383  f320							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f320							; repositioning code and score pointer setup moved to overscan
   1385  f320							; read switches, joysticks now compiler generated (more efficient)
   1386  f320
   1387  f320				   randomize
   1388  f320		       a5 a2		      lda	rand
   1389  f322		       4a		      lsr
   1390  f323				  -	      ifconst	rand16
   1391  f323				  -	      rol	rand16
   1392  f323					      endif
   1393  f323		       90 02		      bcc	noeor
   1394  f325		       49 b4		      eor	#$B4
   1395  f327				   noeor
   1396  f327		       85 a2		      sta	rand
   1397  f329				  -	      ifconst	rand16
   1398  f329				  -	      eor	rand16
   1399  f329					      endif
      0  f329					      RETURN
      1  f329					      ifnconst	bankswitch
      2  f329		       60		      rts
      3  f32a				  -	      else
      4  f32a				  -	      jmp	BS_return
      5  f32a					      endif
   1401  f32a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f32a
   1403  f32a				   drawscreen
   1404  f32a				  -	      ifconst	debugscore
   1405  f32a				  -	      ldx	#14
   1406  f32a				  -	      lda	INTIM	; display # cycles left in the score
   1407  f32a				  -
   1408  f32a				  -	      ifconst	mincycles
   1409  f32a				  -	      lda	mincycles
   1410  f32a				  -	      cmp	INTIM
   1411  f32a				  -	      lda	mincycles
   1412  f32a				  -	      bcc	nochange
   1413  f32a				  -	      lda	INTIM
   1414  f32a				  -	      sta	mincycles
   1415  f32a				  -nochange
   1416  f32a				  -	      endif
   1417  f32a				  -
   1418  f32a				  -			; cmp #$2B
   1419  f32a				  -			; bcs no_cycles_left
   1420  f32a				  -	      bmi	cycles_left
   1421  f32a				  -	      ldx	#64
   1422  f32a				  -	      eor	#$ff	;make negative
   1423  f32a				  -cycles_left
   1424  f32a				  -	      stx	scorecolor
   1425  f32a				  -	      and	#$7f	; clear sign bit
   1426  f32a				  -	      tax
   1427  f32a				  -	      lda	scorebcd,x
   1428  f32a				  -	      sta	score+2
   1429  f32a				  -	      lda	scorebcd1,x
   1430  f32a				  -	      sta	score+1
   1431  f32a				  -	      jmp	done_debugscore
   1432  f32a				  -scorebcd
   1433  f32a				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f32a				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f32a				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f32a				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f32a				  -scorebcd1
   1438  f32a				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f32a				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f32a				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f32a				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f32a				  -done_debugscore
   1443  f32a					      endif
   1444  f32a
   1445  f32a				  -	      ifconst	debugcycles
   1446  f32a				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f32a				  -			; cmp #$2B
   1448  f32a				  -			; BCC overscan
   1449  f32a				  -	      bmi	overscan
   1450  f32a				  -	      sta	COLUBK
   1451  f32a				  -	      bcs	doneoverscan
   1452  f32a					      endif
   1453  f32a
   1454  f32a				   overscan
   1455  f32a				  -	      ifconst	interlaced
   1456  f32a				  -	      PHP
   1457  f32a				  -	      PLA
   1458  f32a				  -	      EOR	#4	; flip interrupt bit
   1459  f32a				  -	      PHA
   1460  f32a				  -	      PLP
   1461  f32a				  -	      AND	#4	; isolate the interrupt bit
   1462  f32a				  -	      TAX		; save it for later
   1463  f32a					      endif
   1464  f32a
   1465  f32a				   overscanloop
   1466  f32a		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f32d		       30 fb		      bmi	overscanloop
   1468  f32f				   doneoverscan
   1469  f32f
   1470  f32f							;do VSYNC
   1471  f32f
   1472  f32f				  -	      ifconst	interlaced
   1473  f32f				  -	      CPX	#4
   1474  f32f				  -	      BNE	oddframevsync
   1475  f32f					      endif
   1476  f32f
   1477  f32f		       a9 02		      lda	#2
   1478  f331		       85 02		      sta	WSYNC
   1479  f333		       85 00		      sta	VSYNC
   1480  f335		       85 02		      STA	WSYNC
   1481  f337		       85 02		      STA	WSYNC
   1482  f339		       4a		      lsr
   1483  f33a		       85 02		      STA	WSYNC
   1484  f33c		       85 00		      STA	VSYNC
   1485  f33e		       85 01		      sta	VBLANK
   1486  f340					      ifnconst	overscan_time
   1487  f340		       a9 a5		      lda	#37+128
   1488  f342				  -	      else
   1489  f342				  -	      lda	#overscan_time+128
   1490  f342					      endif
   1491  f342		       8d 96 02 	      sta	TIM64T
   1492  f345
   1493  f345				  -	      ifconst	interlaced
   1494  f345				  -	      jmp	postsync
   1495  f345				  -
   1496  f345				  -oddframevsync
   1497  f345				  -	      sta	WSYNC
   1498  f345				  -
   1499  f345				  -	      LDA	($80,X)	; 11 waste
   1500  f345				  -	      LDA	($80,X)	; 11 waste
   1501  f345				  -	      LDA	($80,X)	; 11 waste
   1502  f345				  -
   1503  f345				  -	      lda	#2
   1504  f345				  -	      sta	VSYNC
   1505  f345				  -	      sta	WSYNC
   1506  f345				  -	      sta	WSYNC
   1507  f345				  -	      sta	WSYNC
   1508  f345				  -
   1509  f345				  -	      LDA	($80,X)	; 11 waste
   1510  f345				  -	      LDA	($80,X)	; 11 waste
   1511  f345				  -	      LDA	($80,X)	; 11 waste
   1512  f345				  -
   1513  f345				  -	      lda	#0
   1514  f345				  -	      sta	VSYNC
   1515  f345				  -	      sta	VBLANK
   1516  f345				  -	      ifnconst	overscan_time
   1517  f345				  -	      lda	#37+128
   1518  f345				  -	      else
   1519  f345				  -	      lda	#overscan_time+128
   1520  f345				  -	      endif
   1521  f345				  -	      sta	TIM64T
   1522  f345				  -
   1523  f345				  -postsync
   1524  f345					      endif
   1525  f345
   1526  f345				  -	      ifconst	legacy
   1527  f345				  -	      if	legacy < 100
   1528  f345				  -	      ldx	#4
   1529  f345				  -adjustloop
   1530  f345				  -	      lda	player0x,x
   1531  f345				  -	      sec
   1532  f345				  -	      sbc	#14	;?
   1533  f345				  -	      sta	player0x,x
   1534  f345				  -	      dex
   1535  f345				  -	      bpl	adjustloop
   1536  f345				  -	      endif
   1537  f345					      endif
   1538  f345				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f345				  -	      repeat	($fa-(<*))
   1540  f345				  -	      nop
   1541  f345				  -	      repend
   1542  f345					      endif
   1543  f345		       85 02		      sta	WSYNC
   1544  f347		       a2 04		      ldx	#4
      0  f349					      SLEEP	3
      1  f349				   .CYCLES    SET	3
      2  f349
      3  f349				  -	      IF	.CYCLES < 2
      4  f349				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f349				  -	      ERR
      6  f349					      ENDIF
      7  f349
      8  f349					      IF	.CYCLES & 1
      9  f349					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f349		       04 00		      nop	0
     11  f34b				  -	      ELSE
     12  f34b				  -	      bit	VSYNC
     13  f34b					      ENDIF
     14  f34b				   .CYCLES    SET	.CYCLES - 3
     15  f34b					      ENDIF
     16  f34b
     17  f34b				  -	      REPEAT	.CYCLES / 2
     18  f34b				  -	      nop
     19  f34b					      REPEND
   1546  f34b				   HorPosLoop		; 5
   1547  f34b		       b5 80		      lda	player0x,X	;+4 9
   1548  f34d		       38		      sec		;+2 11
   1549  f34e				   DivideLoop
   1550  f34e		       e9 0f		      sbc	#15
   1551  f350		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f352		       95 9c		      sta	temp1,X	;+4 19
   1553  f354		       95 10		      sta	RESP0,X	;+4 23
   1554  f356		       85 02		      sta	WSYNC
   1555  f358		       ca		      dex
   1556  f359		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f35b							; 4
   1558  f35b
   1559  f35b		       a2 04		      ldx	#4
   1560  f35d		       b4 9c		      ldy	temp1,X
   1561  f35f		       b9 be f2 	      lda	repostable-256,Y
   1562  f362		       95 20		      sta	HMP0,X	;+14 18
   1563  f364
   1564  f364		       ca		      dex
   1565  f365		       b4 9c		      ldy	temp1,X
   1566  f367		       b9 be f2 	      lda	repostable-256,Y
   1567  f36a		       95 20		      sta	HMP0,X	;+14 32
   1568  f36c
   1569  f36c		       ca		      dex
   1570  f36d		       b4 9c		      ldy	temp1,X
   1571  f36f		       b9 be f2 	      lda	repostable-256,Y
   1572  f372		       95 20		      sta	HMP0,X	;+14 46
   1573  f374
   1574  f374		       ca		      dex
   1575  f375		       b4 9c		      ldy	temp1,X
   1576  f377		       b9 be f2 	      lda	repostable-256,Y
   1577  f37a		       95 20		      sta	HMP0,X	;+14 60
   1578  f37c
   1579  f37c		       ca		      dex
   1580  f37d		       b4 9c		      ldy	temp1,X
   1581  f37f		       b9 be f2 	      lda	repostable-256,Y
   1582  f382		       95 20		      sta	HMP0,X	;+14 74
   1583  f384
   1584  f384		       85 02		      sta	WSYNC
   1585  f386
   1586  f386		       85 2a		      sta	HMOVE	;+3 3
   1587  f388
   1588  f388
   1589  f388				  -	      ifconst	legacy
   1590  f388				  -	      if	legacy < 100
   1591  f388				  -	      ldx	#4
   1592  f388				  -adjustloop2
   1593  f388				  -	      lda	player0x,x
   1594  f388				  -	      clc
   1595  f388				  -	      adc	#14	;?
   1596  f388				  -	      sta	player0x,x
   1597  f388				  -	      dex
   1598  f388				  -	      bpl	adjustloop2
   1599  f388				  -	      endif
   1600  f388					      endif
   1601  f388
   1602  f388
   1603  f388
   1604  f388
   1605  f388							;set score pointers
   1606  f388		       a7 95		      lax	score+2
   1607  f38a		       20 be f3 	      jsr	scorepointerset
   1608  f38d		       84 9b		      sty	scorepointers+5
   1609  f38f		       86 98		      stx	scorepointers+2
   1610  f391		       a7 94		      lax	score+1
   1611  f393		       20 be f3 	      jsr	scorepointerset
   1612  f396		       84 9a		      sty	scorepointers+4
   1613  f398		       86 97		      stx	scorepointers+1
   1614  f39a		       a7 93		      lax	score
   1615  f39c		       20 be f3 	      jsr	scorepointerset
   1616  f39f		       84 99		      sty	scorepointers+3
   1617  f3a1		       86 96		      stx	scorepointers
   1618  f3a3
   1619  f3a3				   vblk
   1620  f3a3							; run possible vblank bB code
   1621  f3a3					      ifconst	vblank_bB_code
   1622  f3a3		       20 8b f4 	      jsr	vblank_bB_code
   1623  f3a6					      endif
   1624  f3a6				   vblk2
   1625  f3a6		       ad 84 02 	      LDA	INTIM
   1626  f3a9		       30 fb		      bmi	vblk2
   1627  f3ab		       4c 34 f0 	      jmp	kernel
   1628  f3ae
   1629  f3ae
   1630  f3ae		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f3b7		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f3be				   repostable
   1633  f3be
   1634  f3be				   scorepointerset
   1635  f3be		       29 0f		      and	#$0F
   1636  f3c0		       0a		      asl
   1637  f3c1		       0a		      asl
   1638  f3c2		       0a		      asl
   1639  f3c3		       69 9c		      adc	#<scoretable
   1640  f3c5		       a8		      tay
   1641  f3c6		       8a		      txa
   1642  f3c7							; and #$F0
   1643  f3c7							; lsr
   1644  f3c7		       4b f0		      asr	#$F0
   1645  f3c9		       69 9c		      adc	#<scoretable
   1646  f3cb		       aa		      tax
   1647  f3cc		       60		      rts
   1648  f3cd				   game
   1649  f3cd				   .L00 		;  set kernel_options no_blank_lines
   1650  f3cd
   1651  f3cd				   .L01 		;  const noscore  =  1
   1652  f3cd
   1653  f3cd				   .L02 		;  CTRLPF = 5
   1654  f3cd
   1655  f3cd		       a9 05		      LDA	#5
   1656  f3cf		       85 0a		      STA	CTRLPF
   1657  f3d1				   .L03 		;  COLUPF = $0A
   1658  f3d1
   1659  f3d1		       a9 0a		      LDA	#$0A
   1660  f3d3		       85 08		      STA	COLUPF
   1661  f3d5				   .L04 		;  COLUP0 = $42
   1662  f3d5
   1663  f3d5		       a9 42		      LDA	#$42
   1664  f3d7		       85 06		      STA	COLUP0
   1665  f3d9				   .
   1666  f3d9							; 
   1667  f3d9
   1668  f3d9				   .L05 		;  dim _frameCounter  =  a
   1669  f3d9
   1670  f3d9				   .
   1671  f3d9							; 
   1672  f3d9
   1673  f3d9				   .L06 		;  dim _Bit1_P0_Walk  =  y
   1674  f3d9
   1675  f3d9				   .
   1676  f3d9							; 
   1677  f3d9
   1678  f3d9				   .L07 		;  player0x = 70
   1679  f3d9
   1680  f3d9		       a9 46		      LDA	#70
   1681  f3db		       85 80		      STA	player0x
   1682  f3dd				   .L08 		;  player0y = 55
   1683  f3dd
   1684  f3dd		       a9 37		      LDA	#55
   1685  f3df		       85 85		      STA	player0y
   1686  f3e1				   .
   1687  f3e1							; 
   1688  f3e1
   1689  f3e1				   .
   1690  f3e1							; 
   1691  f3e1
   1692  f3e1				   .
   1693  f3e1							; 
   1694  f3e1
   1695  f3e1				   .
   1696  f3e1							; 
   1697  f3e1
   1698  f3e1				   .__main
   1699  f3e1							; __main
   1700  f3e1
   1701  f3e1				   .L09 		;  _Bit1_P0_Walk{1} = 0
   1702  f3e1
   1703  f3e1		       a5 ec		      LDA	_Bit1_P0_Walk
   1704  f3e3		       29 fd		      AND	#253
   1705  f3e5		       85 ec		      STA	_Bit1_P0_Walk
   1706  f3e7				   .L010		;  if joy0up then missile0x = missile0x + 34 : _Bit1_P0_Walk{1} = 1
   1707  f3e7
   1708  f3e7		       a9 10		      lda	#$10
   1709  f3e9		       2c 80 02 	      bit	SWCHA
   1710  f3ec		       d0 0d		      BNE	.skipL010
   1711  f3ee				   .condpart0
   1712  f3ee		       a5 82		      LDA	missile0x
   1713  f3f0		       18		      CLC
   1714  f3f1		       69 22		      ADC	#34
   1715  f3f3		       85 82		      STA	missile0x
   1716  f3f5		       a5 ec		      LDA	_Bit1_P0_Walk
   1717  f3f7		       09 02		      ORA	#2
   1718  f3f9		       85 ec		      STA	_Bit1_P0_Walk
   1719  f3fb				   .skipL010
   1720  f3fb				   .L011		;  if joy0down then missile0x = missile0x - 34 : _Bit1_P0_Walk{1} = 1
   1721  f3fb
   1722  f3fb		       a9 20		      lda	#$20
   1723  f3fd		       2c 80 02 	      bit	SWCHA
   1724  f400		       d0 0d		      BNE	.skipL011
   1725  f402				   .condpart1
   1726  f402		       a5 82		      LDA	missile0x
   1727  f404		       38		      SEC
   1728  f405		       e9 22		      SBC	#34
   1729  f407		       85 82		      STA	missile0x
   1730  f409		       a5 ec		      LDA	_Bit1_P0_Walk
   1731  f40b		       09 02		      ORA	#2
   1732  f40d		       85 ec		      STA	_Bit1_P0_Walk
   1733  f40f				   .skipL011
   1734  f40f				   .L012		;  if joy0left then missile0x = missile0x + 1 : _Bit1_P0_Walk{1} = 1
   1735  f40f
   1736  f40f		       2c 80 02 	      bit	SWCHA
   1737  f412		       70 08		      BVS	.skipL012
   1738  f414				   .condpart2
   1739  f414		       e6 82		      INC	missile0x
   1740  f416		       a5 ec		      LDA	_Bit1_P0_Walk
   1741  f418		       09 02		      ORA	#2
   1742  f41a		       85 ec		      STA	_Bit1_P0_Walk
   1743  f41c				   .skipL012
   1744  f41c				   .L013		;  if joy0right then missile0x = missile0x - 1 : _Bit1_P0_Walk{1} = 1
   1745  f41c
   1746  f41c		       2c 80 02 	      bit	SWCHA
   1747  f41f		       30 08		      BMI	.skipL013
   1748  f421				   .condpart3
   1749  f421		       c6 82		      DEC	missile0x
   1750  f423		       a5 ec		      LDA	_Bit1_P0_Walk
   1751  f425		       09 02		      ORA	#2
   1752  f427		       85 ec		      STA	_Bit1_P0_Walk
   1753  f429				   .skipL013
   1754  f429				   .L014		;  if missile0x > 200 then missile0x = missile0x + 160
   1755  f429
   1756  f429		       a9 c8		      LDA	#200
   1757  f42b		       c5 82		      CMP	missile0x
   1758  f42d		       b0 07		      BCS	.skipL014
   1759  f42f				   .condpart4
   1760  f42f		       a5 82		      LDA	missile0x
   1761  f431		       18		      CLC
   1762  f432		       69 a0		      ADC	#160
   1763  f434		       85 82		      STA	missile0x
   1764  f436				   .skipL014
   1765  f436				   .L015		;  if missile0x > 159 then missile0x = missile0x - 160
   1766  f436
   1767  f436		       a9 9f		      LDA	#159
   1768  f438		       c5 82		      CMP	missile0x
   1769  f43a		       b0 07		      BCS	.skipL015
   1770  f43c				   .condpart5
   1771  f43c		       a5 82		      LDA	missile0x
   1772  f43e		       38		      SEC
   1773  f43f		       e9 a0		      SBC	#160
   1774  f441		       85 82		      STA	missile0x
   1775  f443				   .skipL015
   1776  f443				   .L016		;  if _frameCounter < 6  &&  _Bit1_P0_Walk{1} then gosub __playerWalk1 else gosub __playerIdle
   1777  f443
   1778  f443		       a5 d4		      LDA	_frameCounter
   1779  f445		       c9 06		      CMP	#6
   1780  f447		       b0 0c		      BCS	.skipL016
   1781  f449				   .condpart6
   1782  f449		       a5 ec		      LDA	_Bit1_P0_Walk
   1783  f44b		       29 02		      AND	#2
   1784  f44d		       f0 06		      BEQ	.skip6then
   1785  f44f				   .condpart7
   1786  f44f		       20 7e f4 	      jsr	.__playerWalk1
   1787  f452		       4c 58 f4 	      jmp	.skipelse0
   1788  f455				   .skip6then
   1789  f455				   .skipL016
   1790  f455		       20 71 f4 	      jsr	.__playerIdle
   1791  f458
   1792  f458				   .skipelse0
   1793  f458				   .
   1794  f458							; 
   1795  f458
   1796  f458				   .L017		;  gosub __draw
   1797  f458
   1798  f458		       20 5e f4 	      jsr	.__draw
   1799  f45b
   1800  f45b				   .L018		;  goto __main
   1801  f45b
   1802  f45b		       4c e1 f3 	      jmp	.__main
   1803  f45e
   1804  f45e				   .__draw
   1805  f45e							; __draw
   1806  f45e
   1807  f45e				   .L019		;  ENAM0 = 2
   1808  f45e
   1809  f45e		       a9 02		      LDA	#2
   1810  f460		       85 1d		      STA	ENAM0
   1811  f462				   .L020		;  _frameCounter = _frameCounter + 1
   1812  f462
   1813  f462		       e6 d4		      INC	_frameCounter
   1814  f464				   .L021		;  if _frameCounter >= 12 then _frameCounter = 0
   1815  f464
   1816  f464		       a5 d4		      LDA	_frameCounter
   1817  f466		       c9 0c		      CMP	#12
   1818  f468		       90 04		      BCC	.skipL021
   1819  f46a				   .condpart8
   1820  f46a		       a9 00		      LDA	#0
   1821  f46c		       85 d4		      STA	_frameCounter
   1822  f46e				   .skipL021
   1823  f46e				   .L022		;  drawscreen
   1824  f46e
   1825  f46e		       20 2a f3 	      jsr	drawscreen
   1826  f471				   .return
   1827  f471							; return
   1828  f471
   1829  f471				   .
   1830  f471							; 
   1831  f471
   1832  f471				   .__playerIdle
   1833  f471							; __playerIdle
   1834  f471
   1835  f471				   .L023		;  player0:
   1836  f471
   1837  f471		       a2 9f		      LDX	#<playerL023_0
   1838  f473		       86 8a		      STX	player0pointerlo
   1839  f475		       a9 f4		      LDA	#>playerL023_0
   1840  f477		       85 8b		      STA	player0pointerhi
   1841  f479		       a9 09		      LDA	#9
   1842  f47b		       85 8e		      STA	player0height
   1843  f47d				   .L024		;  return
   1844  f47d
   1845  f47d		       60		      RTS
   1846  f47e				   .
   1847  f47e							; 
   1848  f47e
   1849  f47e				   .__playerWalk1
   1850  f47e							; __playerWalk1
   1851  f47e
   1852  f47e				   .L025		;  player0:
   1853  f47e
   1854  f47e		       a2 a9		      LDX	#<playerL025_0
   1855  f480		       86 8a		      STX	player0pointerlo
   1856  f482		       a9 f4		      LDA	#>playerL025_0
   1857  f484		       85 8b		      STA	player0pointerhi
   1858  f486		       a9 0a		      LDA	#10
   1859  f488		       85 8e		      STA	player0height
   1860  f48a				   .L026		;  return
   1861  f48a
   1862  f48a		       60		      RTS
   1863  f48b				   .
   1864  f48b							; 
   1865  f48b
   1866  f48b				   .
   1867  f48b							; 
   1868  f48b
   1869  f48b				   .
   1870  f48b							; 
   1871  f48b
   1872  f48b				   .
   1873  f48b							; 
   1874  f48b
   1875  f48b				   .L027		;  vblank
   1876  f48b
   1877  f48b				   vblank_bB_code
   1878  f48b				   .L028		;  asm
   1879  f48b
   1880  f48b		       85 2b		      sta	HMCLR
   1881  f48d
   1882  f48d		       85 02		      sta	WSYNC
   1883  f48f
   1884  f48f		       a9 ff		      lda	#$ff
   1885  f491
   1886  f491		       85 22		      sta	HMM0
   1887  f493
   1888  f493		       a9 c0		      lda	#$c0
   1889  f495
   1890  f495		       85 02		      sta	WSYNC
   1891  f497
   1892  f497		       85 2a		      sta	HMOVE
   1893  f499
      0  f499					      sleep	5
      1  f499				   .CYCLES    SET	5
      2  f499
      3  f499				  -	      IF	.CYCLES < 2
      4  f499				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f499				  -	      ERR
      6  f499					      ENDIF
      7  f499
      8  f499					      IF	.CYCLES & 1
      9  f499					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f499		       04 00		      nop	0
     11  f49b				  -	      ELSE
     12  f49b				  -	      bit	VSYNC
     13  f49b					      ENDIF
     14  f49b				   .CYCLES    SET	.CYCLES - 3
     15  f49b					      ENDIF
     16  f49b
     17  f49b					      REPEAT	.CYCLES / 2
     18  f49b		       ea		      nop
     19  f49c					      REPEND
   1895  f49c
   1896  f49c		       85 22		      sta	HMM0
   1897  f49e
   1898  f49e				   .L029		;  return 
   1899  f49e		       60		      RTS
   1900  f49f				  -	      if	(<*) > (<(*+9))
   1901  f49f				  -	      repeat	($100-<*)
   1902  f49f				  -	      .byte	0
   1903  f49f				  -	      repend
   1904  f49f					      endif
   1905  f49f				   playerL023_0
   1906  f49f		       3e		      .byte.b	%00111110
   1907  f4a0		       2a		      .byte.b	%00101010
   1908  f4a1		       2a		      .byte.b	%00101010
   1909  f4a2		       62		      .byte.b	%01100010
   1910  f4a3		       a6		      .byte.b	%10100110
   1911  f4a4		       a9		      .byte.b	%10101001
   1912  f4a5		       a9		      .byte.b	%10101001
   1913  f4a6		       66		      .byte.b	%01100110
   1914  f4a7		       24		      .byte.b	%00100100
   1915  f4a8		       18		      .byte.b	%00011000
   1916  f4a9				  -	      if	(<*) > (<(*+10))
   1917  f4a9				  -	      repeat	($100-<*)
   1918  f4a9				  -	      .byte	0
   1919  f4a9				  -	      repend
   1920  f4a9					      endif
   1921  f4a9				   playerL025_0
   1922  f4a9		       00		      .byte.b	%00000000
   1923  f4aa		       00		      .byte.b	%00000000
   1924  f4ab		       ff		      .byte.b	%11111111
   1925  f4ac		       89		      .byte.b	%10001001
   1926  f4ad		       62		      .byte.b	%01100010
   1927  f4ae		       a6		      .byte.b	%10100110
   1928  f4af		       a9		      .byte.b	%10101001
   1929  f4b0		       a9		      .byte.b	%10101001
   1930  f4b1		       66		      .byte.b	%01100110
   1931  f4b2		       24		      .byte.b	%00100100
   1932  f4b3		       18		      .byte.b	%00011000
   1933  f4b4					      if	ECHOFIRST
      2792 bytes of ROM space left
   1934  f4b4					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   1935  f4b4					      endif
   1936  f4b4		       00 01	   ECHOFIRST  =	1
   1937  f4b4
   1938  f4b4
   1939  f4b4
   1940  f4b4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1941  f4b4
   1942  f4b4							; feel free to modify the score graphics - just keep each digit 8 high
   1943  f4b4							; and keep the conditional compilation stuff intact
   1944  f4b4				  -	      ifconst	ROM2k
   1945  f4b4				  -	      ORG	$F7AC-8
   1946  f4b4					      else
   1947  f4b4				  -	      ifconst	bankswitch
   1948  f4b4				  -	      if	bankswitch == 8
   1949  f4b4				  -	      ORG	$2F94-bscode_length
   1950  f4b4				  -	      RORG	$FF94-bscode_length
   1951  f4b4				  -	      endif
   1952  f4b4				  -	      if	bankswitch == 16
   1953  f4b4				  -	      ORG	$4F94-bscode_length
   1954  f4b4				  -	      RORG	$FF94-bscode_length
   1955  f4b4				  -	      endif
   1956  f4b4				  -	      if	bankswitch == 32
   1957  f4b4				  -	      ORG	$8F94-bscode_length
   1958  f4b4				  -	      RORG	$FF94-bscode_length
   1959  f4b4				  -	      endif
   1960  f4b4				  -	      if	bankswitch == 64
   1961  f4b4				  -	      ORG	$10F80-bscode_length
   1962  f4b4				  -	      RORG	$1FF80-bscode_length
   1963  f4b4				  -	      endif
   1964  f4b4					      else
   1965  ff9c					      ORG	$FF9C
   1966  ff9c					      endif
   1967  ff9c					      endif
   1968  ff9c
   1969  ff9c							; font equates
   1970  ff9c		       00 01	   .21stcentury =	1
   1971  ff9c		       00 02	   alarmclock =	2
   1972  ff9c		       00 03	   handwritten =	3
   1973  ff9c		       00 04	   interrupted =	4
   1974  ff9c		       00 05	   retroputer =	5
   1975  ff9c		       00 06	   whimsey    =	6
   1976  ff9c		       00 07	   tiny       =	7
   1977  ff9c		       00 08	   hex	      =	8
   1978  ff9c
   1979  ff9c				  -	      ifconst	font
   1980  ff9c				  -	      if	font == hex
   1981  ff9c				  -	      ORG	. - 48
   1982  ff9c				  -	      endif
   1983  ff9c					      endif
   1984  ff9c
   1985  ff9c				   scoretable
   1986  ff9c
   1987  ff9c				  -	      ifconst	font
   1988  ff9c				  -	      if	font == .21stcentury
   1989  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   1990  ff9c				  -	      endif
   1991  ff9c				  -	      if	font == alarmclock
   1992  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   1993  ff9c				  -	      endif
   1994  ff9c				  -	      if	font == handwritten
   1995  ff9c				  -	      include	"score_graphics.asm.handwritten"
   1996  ff9c				  -	      endif
   1997  ff9c				  -	      if	font == interrupted
   1998  ff9c				  -	      include	"score_graphics.asm.interrupted"
   1999  ff9c				  -	      endif
   2000  ff9c				  -	      if	font == retroputer
   2001  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2002  ff9c				  -	      endif
   2003  ff9c				  -	      if	font == whimsey
   2004  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2005  ff9c				  -	      endif
   2006  ff9c				  -	      if	font == tiny
   2007  ff9c				  -	      include	"score_graphics.asm.tiny"
   2008  ff9c				  -	      endif
   2009  ff9c				  -	      if	font == hex
   2010  ff9c				  -	      include	"score_graphics.asm.hex"
   2011  ff9c				  -	      endif
   2012  ff9c					      else		; default font
   2013  ff9c
   2014  ff9c		       3c		      .byte.b	%00111100
   2015  ff9d		       66		      .byte.b	%01100110
   2016  ff9e		       66		      .byte.b	%01100110
   2017  ff9f		       66		      .byte.b	%01100110
   2018  ffa0		       66		      .byte.b	%01100110
   2019  ffa1		       66		      .byte.b	%01100110
   2020  ffa2		       66		      .byte.b	%01100110
   2021  ffa3		       3c		      .byte.b	%00111100
   2022  ffa4
   2023  ffa4		       7e		      .byte.b	%01111110
   2024  ffa5		       18		      .byte.b	%00011000
   2025  ffa6		       18		      .byte.b	%00011000
   2026  ffa7		       18		      .byte.b	%00011000
   2027  ffa8		       18		      .byte.b	%00011000
   2028  ffa9		       38		      .byte.b	%00111000
   2029  ffaa		       18		      .byte.b	%00011000
   2030  ffab		       08		      .byte.b	%00001000
   2031  ffac
   2032  ffac		       7e		      .byte.b	%01111110
   2033  ffad		       60		      .byte.b	%01100000
   2034  ffae		       60		      .byte.b	%01100000
   2035  ffaf		       3c		      .byte.b	%00111100
   2036  ffb0		       06		      .byte.b	%00000110
   2037  ffb1		       06		      .byte.b	%00000110
   2038  ffb2		       46		      .byte.b	%01000110
   2039  ffb3		       3c		      .byte.b	%00111100
   2040  ffb4
   2041  ffb4		       3c		      .byte.b	%00111100
   2042  ffb5		       46		      .byte.b	%01000110
   2043  ffb6		       06		      .byte.b	%00000110
   2044  ffb7		       06		      .byte.b	%00000110
   2045  ffb8		       1c		      .byte.b	%00011100
   2046  ffb9		       06		      .byte.b	%00000110
   2047  ffba		       46		      .byte.b	%01000110
   2048  ffbb		       3c		      .byte.b	%00111100
   2049  ffbc
   2050  ffbc		       0c		      .byte.b	%00001100
   2051  ffbd		       0c		      .byte.b	%00001100
   2052  ffbe		       7e		      .byte.b	%01111110
   2053  ffbf		       4c		      .byte.b	%01001100
   2054  ffc0		       4c		      .byte.b	%01001100
   2055  ffc1		       2c		      .byte.b	%00101100
   2056  ffc2		       1c		      .byte.b	%00011100
   2057  ffc3		       0c		      .byte.b	%00001100
   2058  ffc4
   2059  ffc4		       3c		      .byte.b	%00111100
   2060  ffc5		       46		      .byte.b	%01000110
   2061  ffc6		       06		      .byte.b	%00000110
   2062  ffc7		       06		      .byte.b	%00000110
   2063  ffc8		       3c		      .byte.b	%00111100
   2064  ffc9		       60		      .byte.b	%01100000
   2065  ffca		       60		      .byte.b	%01100000
   2066  ffcb		       7e		      .byte.b	%01111110
   2067  ffcc
   2068  ffcc		       3c		      .byte.b	%00111100
   2069  ffcd		       66		      .byte.b	%01100110
   2070  ffce		       66		      .byte.b	%01100110
   2071  ffcf		       66		      .byte.b	%01100110
   2072  ffd0		       7c		      .byte.b	%01111100
   2073  ffd1		       60		      .byte.b	%01100000
   2074  ffd2		       62		      .byte.b	%01100010
   2075  ffd3		       3c		      .byte.b	%00111100
   2076  ffd4
   2077  ffd4		       30		      .byte.b	%00110000
   2078  ffd5		       30		      .byte.b	%00110000
   2079  ffd6		       30		      .byte.b	%00110000
   2080  ffd7		       18		      .byte.b	%00011000
   2081  ffd8		       0c		      .byte.b	%00001100
   2082  ffd9		       06		      .byte.b	%00000110
   2083  ffda		       42		      .byte.b	%01000010
   2084  ffdb		       3e		      .byte.b	%00111110
   2085  ffdc
   2086  ffdc		       3c		      .byte.b	%00111100
   2087  ffdd		       66		      .byte.b	%01100110
   2088  ffde		       66		      .byte.b	%01100110
   2089  ffdf		       66		      .byte.b	%01100110
   2090  ffe0		       3c		      .byte.b	%00111100
   2091  ffe1		       66		      .byte.b	%01100110
   2092  ffe2		       66		      .byte.b	%01100110
   2093  ffe3		       3c		      .byte.b	%00111100
   2094  ffe4
   2095  ffe4		       3c		      .byte.b	%00111100
   2096  ffe5		       46		      .byte.b	%01000110
   2097  ffe6		       06		      .byte.b	%00000110
   2098  ffe7		       3e		      .byte.b	%00111110
   2099  ffe8		       66		      .byte.b	%01100110
   2100  ffe9		       66		      .byte.b	%01100110
   2101  ffea		       66		      .byte.b	%01100110
   2102  ffeb		       3c		      .byte.b	%00111100
   2103  ffec
   2104  ffec					      ifnconst	DPC_kernel_options
   2105  ffec
   2106  ffec		       00		      .byte.b	%00000000
   2107  ffed		       00		      .byte.b	%00000000
   2108  ffee		       00		      .byte.b	%00000000
   2109  ffef		       00		      .byte.b	%00000000
   2110  fff0		       00		      .byte.b	%00000000
   2111  fff1		       00		      .byte.b	%00000000
   2112  fff2		       00		      .byte.b	%00000000
   2113  fff3		       00		      .byte.b	%00000000
   2114  fff4
   2115  fff4					      endif
   2116  fff4
   2117  fff4					      endif
   2118  fff4
   2119  fff4				  -	      ifconst	ROM2k
   2120  fff4				  -	      ORG	$F7FC
   2121  fff4					      else
   2122  fff4				  -	      ifconst	bankswitch
   2123  fff4				  -	      if	bankswitch == 8
   2124  fff4				  -	      ORG	$2FF4-bscode_length
   2125  fff4				  -	      RORG	$FFF4-bscode_length
   2126  fff4				  -	      endif
   2127  fff4				  -	      if	bankswitch == 16
   2128  fff4				  -	      ORG	$4FF4-bscode_length
   2129  fff4				  -	      RORG	$FFF4-bscode_length
   2130  fff4				  -	      endif
   2131  fff4				  -	      if	bankswitch == 32
   2132  fff4				  -	      ORG	$8FF4-bscode_length
   2133  fff4				  -	      RORG	$FFF4-bscode_length
   2134  fff4				  -	      endif
   2135  fff4				  -	      if	bankswitch == 64
   2136  fff4				  -	      ORG	$10FE0-bscode_length
   2137  fff4				  -	      RORG	$1FFE0-bscode_length
   2138  fff4				  -	      endif
   2139  fff4					      else
   2140  fffc					      ORG	$FFFC
   2141  fffc					      endif
   2142  fffc					      endif
   2143  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2144  fffc
   2145  fffc				  -	      ifconst	bankswitch
   2146  fffc				  -	      if	bankswitch == 8
   2147  fffc				  -	      ORG	$2FFC
   2148  fffc				  -	      RORG	$FFFC
   2149  fffc				  -	      endif
   2150  fffc				  -	      if	bankswitch == 16
   2151  fffc				  -	      ORG	$4FFC
   2152  fffc				  -	      RORG	$FFFC
   2153  fffc				  -	      endif
   2154  fffc				  -	      if	bankswitch == 32
   2155  fffc				  -	      ORG	$8FFC
   2156  fffc				  -	      RORG	$FFFC
   2157  fffc				  -	      endif
   2158  fffc				  -	      if	bankswitch == 64
   2159  fffc				  -	      ORG	$10FF0
   2160  fffc				  -	      RORG	$1FFF0
   2161  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2162  fffc				  -	      ORG	$10FF8
   2163  fffc				  -	      RORG	$1FFF8
   2164  fffc				  -	      ifconst	superchip
   2165  fffc				  -	      .byte	"E","F","S","C"
   2166  fffc				  -	      else
   2167  fffc				  -	      .byte	"E","F","E","F"
   2168  fffc				  -	      endif
   2169  fffc				  -	      ORG	$10FFC
   2170  fffc				  -	      RORG	$1FFFC
   2171  fffc				  -	      endif
   2172  fffc					      else
   2173  fffc				  -	      ifconst	ROM2k
   2174  fffc				  -	      ORG	$F7FC
   2175  fffc					      else
   2176  fffc					      ORG	$FFFC
   2177  fffc					      endif
   2178  fffc					      endif
   2179  fffc		       00 f0		      .word.w	(start & $ffff)
   2180  fffe		       00 f0		      .word.w	(start & $ffff)

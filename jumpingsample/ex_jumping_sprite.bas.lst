------- FILE G:\jumpingsample\ex_jumping_sprite.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE G:\jumpingsample\ex_jumping_sprite.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE G:\jumpingsample\ex_jumping_sprite.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 51	    _SD_Jump_length =	.skipL0222-_SD_Jump
      4  10000 ????
      5  10000 ????		00 fe	    _FE        =	$FE
      6  10000 ????
      7  10000 ????		00 fc	    _FC        =	$FC
      8  10000 ????
      9  10000 ????		00 fa	    _FA        =	$FA
     10  10000 ????
     11  10000 ????		00 f8	    _F8        =	$F8
     12  10000 ????
     13  10000 ????		00 f6	    _F6        =	$F6
     14  10000 ????
     15  10000 ????		00 f4	    _F4        =	$F4
     16  10000 ????
     17  10000 ????		00 f2	    _F2        =	$F2
     18  10000 ????
     19  10000 ????		00 f0	    _F0        =	$F0
     20  10000 ????
     21  10000 ????		00 ee	    _EE        =	$EE
     22  10000 ????
     23  10000 ????		00 ec	    _EC        =	$EC
     24  10000 ????
     25  10000 ????		00 ea	    _EA        =	$EA
     26  10000 ????
     27  10000 ????		00 e8	    _E8        =	$E8
     28  10000 ????
     29  10000 ????		00 e6	    _E6        =	$E6
     30  10000 ????
     31  10000 ????		00 e4	    _E4        =	$E4
     32  10000 ????
     33  10000 ????		00 e2	    _E2        =	$E2
     34  10000 ????
     35  10000 ????		00 e0	    _E0        =	$E0
     36  10000 ????
     37  10000 ????		00 de	    _DE        =	$DE
     38  10000 ????
     39  10000 ????		00 dc	    _DC        =	$DC
     40  10000 ????
     41  10000 ????		00 da	    _DA        =	$DA
     42  10000 ????
     43  10000 ????		00 d8	    _D8        =	$D8
     44  10000 ????
     45  10000 ????		00 d6	    _D6        =	$D6
     46  10000 ????
     47  10000 ????		00 d4	    _D4        =	$D4
     48  10000 ????
     49  10000 ????		00 d2	    _D2        =	$D2
     50  10000 ????
     51  10000 ????		00 d0	    _D0        =	$D0
     52  10000 ????
     53  10000 ????		00 ce	    _CE        =	$CE
     54  10000 ????
     55  10000 ????		00 cc	    _CC        =	$CC
     56  10000 ????
     57  10000 ????		00 ca	    _CA        =	$CA
     58  10000 ????
     59  10000 ????		00 c8	    _C8        =	$C8
     60  10000 ????
     61  10000 ????		00 c6	    _C6        =	$C6
     62  10000 ????
     63  10000 ????		00 c4	    _C4        =	$C4
     64  10000 ????
     65  10000 ????		00 c2	    _C2        =	$C2
     66  10000 ????
     67  10000 ????		00 c0	    _C0        =	$C0
     68  10000 ????
     69  10000 ????		00 be	    _BE        =	$BE
     70  10000 ????
     71  10000 ????		00 bc	    _BC        =	$BC
     72  10000 ????
     73  10000 ????		00 ba	    _BA        =	$BA
     74  10000 ????
     75  10000 ????		00 b8	    _B8        =	$B8
     76  10000 ????
     77  10000 ????		00 b6	    _B6        =	$B6
     78  10000 ????
     79  10000 ????		00 b4	    _B4        =	$B4
     80  10000 ????
     81  10000 ????		00 b2	    _B2        =	$B2
     82  10000 ????
     83  10000 ????		00 b0	    _B0        =	$B0
     84  10000 ????
     85  10000 ????		00 ae	    _AE        =	$AE
     86  10000 ????
     87  10000 ????		00 ac	    _AC        =	$AC
     88  10000 ????
     89  10000 ????		00 aa	    _AA        =	$AA
     90  10000 ????
     91  10000 ????		00 a8	    _A8        =	$A8
     92  10000 ????
     93  10000 ????		00 a6	    _A6        =	$A6
     94  10000 ????
     95  10000 ????		00 a4	    _A4        =	$A4
     96  10000 ????
     97  10000 ????		00 a2	    _A2        =	$A2
     98  10000 ????
     99  10000 ????		00 a0	    _A0        =	$A0
    100  10000 ????
    101  10000 ????		00 9e	    _9E        =	$9E
    102  10000 ????
    103  10000 ????		00 9c	    _9C        =	$9C
    104  10000 ????
    105  10000 ????		00 9a	    _9A        =	$9A
    106  10000 ????
    107  10000 ????		00 98	    _98        =	$98
    108  10000 ????
    109  10000 ????		00 96	    _96        =	$96
    110  10000 ????
    111  10000 ????		00 94	    _94        =	$94
    112  10000 ????
    113  10000 ????		00 92	    _92        =	$92
    114  10000 ????
    115  10000 ????		00 90	    _90        =	$90
    116  10000 ????
    117  10000 ????		00 8e	    _8E        =	$8E
    118  10000 ????
    119  10000 ????		00 8c	    _8C        =	$8C
    120  10000 ????
    121  10000 ????		00 8a	    _8A        =	$8A
    122  10000 ????
    123  10000 ????		00 88	    _88        =	$88
    124  10000 ????
    125  10000 ????		00 86	    _86        =	$86
    126  10000 ????
    127  10000 ????		00 84	    _84        =	$84
    128  10000 ????
    129  10000 ????		00 82	    _82        =	$82
    130  10000 ????
    131  10000 ????		00 80	    _80        =	$80
    132  10000 ????
    133  10000 ????		00 7e	    _7E        =	$7E
    134  10000 ????
    135  10000 ????		00 7c	    _7C        =	$7C
    136  10000 ????
    137  10000 ????		00 7a	    _7A        =	$7A
    138  10000 ????
    139  10000 ????		00 78	    _78        =	$78
    140  10000 ????
    141  10000 ????		00 76	    _76        =	$76
    142  10000 ????
    143  10000 ????		00 74	    _74        =	$74
    144  10000 ????
    145  10000 ????		00 72	    _72        =	$72
    146  10000 ????
    147  10000 ????		00 70	    _70        =	$70
    148  10000 ????
    149  10000 ????		00 6e	    _6E        =	$6E
    150  10000 ????
    151  10000 ????		00 6c	    _6C        =	$6C
    152  10000 ????
    153  10000 ????		00 6a	    _6A        =	$6A
    154  10000 ????
    155  10000 ????		00 68	    _68        =	$68
    156  10000 ????
    157  10000 ????		00 66	    _66        =	$66
    158  10000 ????
    159  10000 ????		00 64	    _64        =	$64
    160  10000 ????
    161  10000 ????		00 62	    _62        =	$62
    162  10000 ????
    163  10000 ????		00 60	    _60        =	$60
    164  10000 ????
    165  10000 ????		00 5e	    _5E        =	$5E
    166  10000 ????
    167  10000 ????		00 5c	    _5C        =	$5C
    168  10000 ????
    169  10000 ????		00 5a	    _5A        =	$5A
    170  10000 ????
    171  10000 ????		00 58	    _58        =	$58
    172  10000 ????
    173  10000 ????		00 56	    _56        =	$56
    174  10000 ????
    175  10000 ????		00 54	    _54        =	$54
    176  10000 ????
    177  10000 ????		00 52	    _52        =	$52
    178  10000 ????
    179  10000 ????		00 50	    _50        =	$50
    180  10000 ????
    181  10000 ????		00 4e	    _4E        =	$4E
    182  10000 ????
    183  10000 ????		00 4c	    _4C        =	$4C
    184  10000 ????
    185  10000 ????		00 4a	    _4A        =	$4A
    186  10000 ????
    187  10000 ????		00 48	    _48        =	$48
    188  10000 ????
    189  10000 ????		00 46	    _46        =	$46
    190  10000 ????
    191  10000 ????		00 44	    _44        =	$44
    192  10000 ????
    193  10000 ????		00 42	    _42        =	$42
    194  10000 ????
    195  10000 ????		00 40	    _40        =	$40
    196  10000 ????
    197  10000 ????		00 3e	    _3E        =	$3E
    198  10000 ????
    199  10000 ????		00 3c	    _3C        =	$3C
    200  10000 ????
    201  10000 ????		00 3a	    _3A        =	$3A
    202  10000 ????
    203  10000 ????		00 38	    _38        =	$38
    204  10000 ????
    205  10000 ????		00 36	    _36        =	$36
    206  10000 ????
    207  10000 ????		00 34	    _34        =	$34
    208  10000 ????
    209  10000 ????		00 32	    _32        =	$32
    210  10000 ????
    211  10000 ????		00 30	    _30        =	$30
    212  10000 ????
    213  10000 ????		00 2e	    _2E        =	$2E
    214  10000 ????
    215  10000 ????		00 2c	    _2C        =	$2C
    216  10000 ????
    217  10000 ????		00 2a	    _2A        =	$2A
    218  10000 ????
    219  10000 ????		00 28	    _28        =	$28
    220  10000 ????
    221  10000 ????		00 26	    _26        =	$26
    222  10000 ????
    223  10000 ????		00 24	    _24        =	$24
    224  10000 ????
    225  10000 ????		00 22	    _22        =	$22
    226  10000 ????
    227  10000 ????		00 20	    _20        =	$20
    228  10000 ????
    229  10000 ????		00 1e	    _1E        =	$1E
    230  10000 ????
    231  10000 ????		00 1c	    _1C        =	$1C
    232  10000 ????
    233  10000 ????		00 1a	    _1A        =	$1A
    234  10000 ????
    235  10000 ????		00 18	    _18        =	$18
    236  10000 ????
    237  10000 ????		00 16	    _16        =	$16
    238  10000 ????
    239  10000 ????		00 14	    _14        =	$14
    240  10000 ????
    241  10000 ????		00 12	    _12        =	$12
    242  10000 ????
    243  10000 ????		00 10	    _10        =	$10
    244  10000 ????
    245  10000 ????		00 0e	    _0E        =	$0E
    246  10000 ????
    247  10000 ????		00 0c	    _0C        =	$0C
    248  10000 ????
    249  10000 ????		00 0a	    _0A        =	$0A
    250  10000 ????
    251  10000 ????		00 08	    _08        =	$08
    252  10000 ????
    253  10000 ????		00 06	    _06        =	$06
    254  10000 ????
    255  10000 ????		00 04	    _04        =	$04
    256  10000 ????
    257  10000 ????		00 02	    _02        =	$02
    258  10000 ????
    259  10000 ????		00 00	    _00        =	$00
    260  10000 ????
    261  10000 ????		00 01	    _c_Jump_Sound =	1
    262  10000 ????
    263  10000 ????		00 ec	    _Bit7_Reset_Restrainer =	y
    264  10000 ????
    265  10000 ????		00 ec	    _Bit6_Duck_in_Progress =	y
    266  10000 ????
    267  10000 ????		00 ec	    _Bit5_LR_Joy_Movement =	y
    268  10000 ????
    269  10000 ????		00 ec	    _Bit4_Flip_P1 =	y
    270  10000 ????
    271  10000 ????		00 ec	    _Bit3_FireB_Restrainer =	y
    272  10000 ????
    273  10000 ????		00 ec	    _Bit2_Fall_in_Progress =	y
    274  10000 ????
    275  10000 ????		00 ec	    _BitOp_01  =	y
    276  10000 ????
    277  10000 ????		00 db	    _Ch0_Counter =	h
    278  10000 ????
    279  10000 ????		00 da	    _Ch0_Duration =	g
    280  10000 ????
    281  10000 ????		00 d9	    _Ch0_Sound =	f
    282  10000 ????
    283  10000 ????		00 d8	    _Frame_Counter =	e
    284  10000 ????
    285  10000 ????		00 d7	    _Master_Counter =	d
    286  10000 ????
    287  10000 ????		00 d6	    _Fall_Gravity_Counter =	c
    288  10000 ????
    289  10000 ????		00 d5	    _Jump_Gravity_Counter =	b
    290  10000 ????
    291  10000 ????		00 81	    _P1_Left_Right =	player1x
    292  10000 ????		00 01	    player1colors =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE G:\jumpingsample\ex_jumping_sprite.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 51	    _SD_Jump_length =	.skipL0222-_SD_Jump
      4  10000 ????
      5  10000 ????		00 fe	    _FE        =	$FE
      6  10000 ????
      7  10000 ????		00 fc	    _FC        =	$FC
      8  10000 ????
      9  10000 ????		00 fa	    _FA        =	$FA
     10  10000 ????
     11  10000 ????		00 f8	    _F8        =	$F8
     12  10000 ????
     13  10000 ????		00 f6	    _F6        =	$F6
     14  10000 ????
     15  10000 ????		00 f4	    _F4        =	$F4
     16  10000 ????
     17  10000 ????		00 f2	    _F2        =	$F2
     18  10000 ????
     19  10000 ????		00 f0	    _F0        =	$F0
     20  10000 ????
     21  10000 ????		00 ee	    _EE        =	$EE
     22  10000 ????
     23  10000 ????		00 ec	    _EC        =	$EC
     24  10000 ????
     25  10000 ????		00 ea	    _EA        =	$EA
     26  10000 ????
     27  10000 ????		00 e8	    _E8        =	$E8
     28  10000 ????
     29  10000 ????		00 e6	    _E6        =	$E6
     30  10000 ????
     31  10000 ????		00 e4	    _E4        =	$E4
     32  10000 ????
     33  10000 ????		00 e2	    _E2        =	$E2
     34  10000 ????
     35  10000 ????		00 e0	    _E0        =	$E0
     36  10000 ????
     37  10000 ????		00 de	    _DE        =	$DE
     38  10000 ????
     39  10000 ????		00 dc	    _DC        =	$DC
     40  10000 ????
     41  10000 ????		00 da	    _DA        =	$DA
     42  10000 ????
     43  10000 ????		00 d8	    _D8        =	$D8
     44  10000 ????
     45  10000 ????		00 d6	    _D6        =	$D6
     46  10000 ????
     47  10000 ????		00 d4	    _D4        =	$D4
     48  10000 ????
     49  10000 ????		00 d2	    _D2        =	$D2
     50  10000 ????
     51  10000 ????		00 d0	    _D0        =	$D0
     52  10000 ????
     53  10000 ????		00 ce	    _CE        =	$CE
     54  10000 ????
     55  10000 ????		00 cc	    _CC        =	$CC
     56  10000 ????
     57  10000 ????		00 ca	    _CA        =	$CA
     58  10000 ????
     59  10000 ????		00 c8	    _C8        =	$C8
     60  10000 ????
     61  10000 ????		00 c6	    _C6        =	$C6
     62  10000 ????
     63  10000 ????		00 c4	    _C4        =	$C4
     64  10000 ????
     65  10000 ????		00 c2	    _C2        =	$C2
     66  10000 ????
     67  10000 ????		00 c0	    _C0        =	$C0
     68  10000 ????
     69  10000 ????		00 be	    _BE        =	$BE
     70  10000 ????
     71  10000 ????		00 bc	    _BC        =	$BC
     72  10000 ????
     73  10000 ????		00 ba	    _BA        =	$BA
     74  10000 ????
     75  10000 ????		00 b8	    _B8        =	$B8
     76  10000 ????
     77  10000 ????		00 b6	    _B6        =	$B6
     78  10000 ????
     79  10000 ????		00 b4	    _B4        =	$B4
     80  10000 ????
     81  10000 ????		00 b2	    _B2        =	$B2
     82  10000 ????
     83  10000 ????		00 b0	    _B0        =	$B0
     84  10000 ????
     85  10000 ????		00 ae	    _AE        =	$AE
     86  10000 ????
     87  10000 ????		00 ac	    _AC        =	$AC
     88  10000 ????
     89  10000 ????		00 aa	    _AA        =	$AA
     90  10000 ????
     91  10000 ????		00 a8	    _A8        =	$A8
     92  10000 ????
     93  10000 ????		00 a6	    _A6        =	$A6
     94  10000 ????
     95  10000 ????		00 a4	    _A4        =	$A4
     96  10000 ????
     97  10000 ????		00 a2	    _A2        =	$A2
     98  10000 ????
     99  10000 ????		00 a0	    _A0        =	$A0
    100  10000 ????
    101  10000 ????		00 9e	    _9E        =	$9E
    102  10000 ????
    103  10000 ????		00 9c	    _9C        =	$9C
    104  10000 ????
    105  10000 ????		00 9a	    _9A        =	$9A
    106  10000 ????
    107  10000 ????		00 98	    _98        =	$98
    108  10000 ????
    109  10000 ????		00 96	    _96        =	$96
    110  10000 ????
    111  10000 ????		00 94	    _94        =	$94
    112  10000 ????
    113  10000 ????		00 92	    _92        =	$92
    114  10000 ????
    115  10000 ????		00 90	    _90        =	$90
    116  10000 ????
    117  10000 ????		00 8e	    _8E        =	$8E
    118  10000 ????
    119  10000 ????		00 8c	    _8C        =	$8C
    120  10000 ????
    121  10000 ????		00 8a	    _8A        =	$8A
    122  10000 ????
    123  10000 ????		00 88	    _88        =	$88
    124  10000 ????
    125  10000 ????		00 86	    _86        =	$86
    126  10000 ????
    127  10000 ????		00 84	    _84        =	$84
    128  10000 ????
    129  10000 ????		00 82	    _82        =	$82
    130  10000 ????
    131  10000 ????		00 80	    _80        =	$80
    132  10000 ????
    133  10000 ????		00 7e	    _7E        =	$7E
    134  10000 ????
    135  10000 ????		00 7c	    _7C        =	$7C
    136  10000 ????
    137  10000 ????		00 7a	    _7A        =	$7A
    138  10000 ????
    139  10000 ????		00 78	    _78        =	$78
    140  10000 ????
    141  10000 ????		00 76	    _76        =	$76
    142  10000 ????
    143  10000 ????		00 74	    _74        =	$74
    144  10000 ????
    145  10000 ????		00 72	    _72        =	$72
    146  10000 ????
    147  10000 ????		00 70	    _70        =	$70
    148  10000 ????
    149  10000 ????		00 6e	    _6E        =	$6E
    150  10000 ????
    151  10000 ????		00 6c	    _6C        =	$6C
    152  10000 ????
    153  10000 ????		00 6a	    _6A        =	$6A
    154  10000 ????
    155  10000 ????		00 68	    _68        =	$68
    156  10000 ????
    157  10000 ????		00 66	    _66        =	$66
    158  10000 ????
    159  10000 ????		00 64	    _64        =	$64
    160  10000 ????
    161  10000 ????		00 62	    _62        =	$62
    162  10000 ????
    163  10000 ????		00 60	    _60        =	$60
    164  10000 ????
    165  10000 ????		00 5e	    _5E        =	$5E
    166  10000 ????
    167  10000 ????		00 5c	    _5C        =	$5C
    168  10000 ????
    169  10000 ????		00 5a	    _5A        =	$5A
    170  10000 ????
    171  10000 ????		00 58	    _58        =	$58
    172  10000 ????
    173  10000 ????		00 56	    _56        =	$56
    174  10000 ????
    175  10000 ????		00 54	    _54        =	$54
    176  10000 ????
    177  10000 ????		00 52	    _52        =	$52
    178  10000 ????
    179  10000 ????		00 50	    _50        =	$50
    180  10000 ????
    181  10000 ????		00 4e	    _4E        =	$4E
    182  10000 ????
    183  10000 ????		00 4c	    _4C        =	$4C
    184  10000 ????
    185  10000 ????		00 4a	    _4A        =	$4A
    186  10000 ????
    187  10000 ????		00 48	    _48        =	$48
    188  10000 ????
    189  10000 ????		00 46	    _46        =	$46
    190  10000 ????
    191  10000 ????		00 44	    _44        =	$44
    192  10000 ????
    193  10000 ????		00 42	    _42        =	$42
    194  10000 ????
    195  10000 ????		00 40	    _40        =	$40
    196  10000 ????
    197  10000 ????		00 3e	    _3E        =	$3E
    198  10000 ????
    199  10000 ????		00 3c	    _3C        =	$3C
    200  10000 ????
    201  10000 ????		00 3a	    _3A        =	$3A
    202  10000 ????
    203  10000 ????		00 38	    _38        =	$38
    204  10000 ????
    205  10000 ????		00 36	    _36        =	$36
    206  10000 ????
    207  10000 ????		00 34	    _34        =	$34
    208  10000 ????
    209  10000 ????		00 32	    _32        =	$32
    210  10000 ????
    211  10000 ????		00 30	    _30        =	$30
    212  10000 ????
    213  10000 ????		00 2e	    _2E        =	$2E
    214  10000 ????
    215  10000 ????		00 2c	    _2C        =	$2C
    216  10000 ????
    217  10000 ????		00 2a	    _2A        =	$2A
    218  10000 ????
    219  10000 ????		00 28	    _28        =	$28
    220  10000 ????
    221  10000 ????		00 26	    _26        =	$26
    222  10000 ????
    223  10000 ????		00 24	    _24        =	$24
    224  10000 ????
    225  10000 ????		00 22	    _22        =	$22
    226  10000 ????
    227  10000 ????		00 20	    _20        =	$20
    228  10000 ????
    229  10000 ????		00 1e	    _1E        =	$1E
    230  10000 ????
    231  10000 ????		00 1c	    _1C        =	$1C
    232  10000 ????
    233  10000 ????		00 1a	    _1A        =	$1A
    234  10000 ????
    235  10000 ????		00 18	    _18        =	$18
    236  10000 ????
    237  10000 ????		00 16	    _16        =	$16
    238  10000 ????
    239  10000 ????		00 14	    _14        =	$14
    240  10000 ????
    241  10000 ????		00 12	    _12        =	$12
    242  10000 ????
    243  10000 ????		00 10	    _10        =	$10
    244  10000 ????
    245  10000 ????		00 0e	    _0E        =	$0E
    246  10000 ????
    247  10000 ????		00 0c	    _0C        =	$0C
    248  10000 ????
    249  10000 ????		00 0a	    _0A        =	$0A
    250  10000 ????
    251  10000 ????		00 08	    _08        =	$08
    252  10000 ????
    253  10000 ????		00 06	    _06        =	$06
    254  10000 ????
    255  10000 ????		00 04	    _04        =	$04
    256  10000 ????
    257  10000 ????		00 02	    _02        =	$02
    258  10000 ????
    259  10000 ????		00 00	    _00        =	$00
    260  10000 ????
    261  10000 ????		00 01	    _c_Jump_Sound =	1
    262  10000 ????
    263  10000 ????		00 ec	    _Bit7_Reset_Restrainer =	y
    264  10000 ????
    265  10000 ????		00 ec	    _Bit6_Duck_in_Progress =	y
    266  10000 ????
    267  10000 ????		00 ec	    _Bit5_LR_Joy_Movement =	y
    268  10000 ????
    269  10000 ????		00 ec	    _Bit4_Flip_P1 =	y
    270  10000 ????
    271  10000 ????		00 ec	    _Bit3_FireB_Restrainer =	y
    272  10000 ????
    273  10000 ????		00 ec	    _Bit2_Fall_in_Progress =	y
    274  10000 ????
    275  10000 ????		00 ec	    _BitOp_01  =	y
    276  10000 ????
    277  10000 ????		00 db	    _Ch0_Counter =	h
    278  10000 ????
    279  10000 ????		00 da	    _Ch0_Duration =	g
    280  10000 ????
    281  10000 ????		00 d9	    _Ch0_Sound =	f
    282  10000 ????
    283  10000 ????		00 d8	    _Frame_Counter =	e
    284  10000 ????
    285  10000 ????		00 d7	    _Master_Counter =	d
    286  10000 ????
    287  10000 ????		00 d6	    _Fall_Gravity_Counter =	c
    288  10000 ????
    289  10000 ????		00 d5	    _Jump_Gravity_Counter =	b
    290  10000 ????
    291  10000 ????		00 81	    _P1_Left_Right =	player1x
    292  10000 ????		00 01	    player1colors =	1
------- FILE G:\jumpingsample\ex_jumping_sprite.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5a f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4				  -	      ifnconst	player1colors
    233  f0b4				  -	      lda	missile1height	;3
    234  f0b4				  -	      dcp	missile1y	;5
    235  f0b4				  -	      rol		;2
    236  f0b4				  -	      rol		;2
    237  f0b4				  -	      sta	ENAM1	;3
    238  f0b4					      else
    239  f0b4		       b1 87		      lda	(player1color),y
    240  f0b6		       85 07		      sta	COLUP1
    241  f0b8					      ifnconst	playercolors
      0  f0b8					      sleep	7
      1  f0b8				   .CYCLES    SET	7
      2  f0b8
      3  f0b8				  -	      IF	.CYCLES < 2
      4  f0b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b8				  -	      ERR
      6  f0b8					      ENDIF
      7  f0b8
      8  f0b8					      IF	.CYCLES & 1
      9  f0b8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b8		       04 00		      nop	0
     11  f0ba				  -	      ELSE
     12  f0ba				  -	      bit	VSYNC
     13  f0ba					      ENDIF
     14  f0ba				   .CYCLES    SET	.CYCLES - 3
     15  f0ba					      ENDIF
     16  f0ba
     17  f0ba					      REPEAT	.CYCLES / 2
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     19  f0bc					      REPEND
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc					      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b				  -	      ifnconst	player1colors
    554  f13b				  -	      lda	missile1height	;3
    555  f13b				  -	      dcp	missile1y	;5
    556  f13b					      else
    557  f13b		       b1 87		      lda	(player1color),y
    558  f13d		       85 07		      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156				  -	      ifnconst	player1colors
    587  f156				  -	      rol		;2
    588  f156				  -	      rol		;2
    589  f156				  -	      sta	ENAM1	;3
    590  f156					      else
    591  f156					      ifnconst	playercolors
      0  f156					      sleep	7
      1  f156				   .CYCLES    SET	7
      2  f156
      3  f156				  -	      IF	.CYCLES < 2
      4  f156				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f156				  -	      ERR
      6  f156					      ENDIF
      7  f156
      8  f156					      IF	.CYCLES & 1
      9  f156					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f156		       04 00		      nop	0
     11  f158				  -	      ELSE
     12  f158				  -	      bit	VSYNC
     13  f158					      ENDIF
     14  f158				   .CYCLES    SET	.CYCLES - 3
     15  f158					      ENDIF
     16  f158
     17  f158					      REPEAT	.CYCLES / 2
     18  f158		       ea		      nop
     17  f158					      REPEND
     18  f159		       ea		      nop
     19  f15a					      REPEND
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a					      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0				  -	      ifnconst	player1colors
    700  f1a0				  -	      lda	temp6
    701  f1a0				  -	      sta	missile1y
    702  f1a0					      endif
    703  f1a0					      ifnconst	playercolors
    704  f1a0					      ifnconst	readpaddle
    705  f1a0		       a5 a0		      lda	temp5
    706  f1a2		       85 91		      sta	missile0y
    707  f1a4					      endif
    708  f1a4					      endif
    709  f1a4		       a5 f7		      lda	stack2
    710  f1a6		       85 89		      sta	bally
    711  f1a8
    712  f1a8							; strangely, this isn't required any more. might have
    713  f1a8							; resulted from the no_blank_lines score bounce fix
    714  f1a8							;ifconst no_blank_lines
    715  f1a8							;sta WSYNC
    716  f1a8							;endif
    717  f1a8
    718  f1a8		       ad 84 02 	      lda	INTIM
    719  f1ab		       18		      clc
    720  f1ac					      ifnconst	vblank_time
    721  f1ac		       69 8e		      adc	#43+12+87
    722  f1ae				  -	      else
    723  f1ae				  -	      adc	#vblank_time+12+87
    724  f1ae				  -
    725  f1ae					      endif
    726  f1ae							; sta WSYNC
    727  f1ae		       8d 96 02 	      sta	TIM64T
    728  f1b1
    729  f1b1				  -	      ifconst	minikernel
    730  f1b1				  -	      jsr	minikernel
    731  f1b1					      endif
    732  f1b1
    733  f1b1							; now reassign temp vars for score pointers
    734  f1b1
    735  f1b1							; score pointers contain:
    736  f1b1							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b1							; swap lo2->temp1
    738  f1b1							; swap lo4->temp3
    739  f1b1							; swap lo6->temp5
    740  f1b1					      ifnconst	noscore
    741  f1b1		       a5 97		      lda	scorepointers+1
    742  f1b3							; ldy temp1
    743  f1b3		       85 9c		      sta	temp1
    744  f1b5							; sty scorepointers+1
    745  f1b5
    746  f1b5		       a5 99		      lda	scorepointers+3
    747  f1b7							; ldy temp3
    748  f1b7		       85 9e		      sta	temp3
    749  f1b9							; sty scorepointers+3
    750  f1b9
    751  f1b9
    752  f1b9		       85 2b		      sta	HMCLR
    753  f1bb		       ba		      tsx
    754  f1bc		       86 f6		      stx	stack1
    755  f1be		       a2 e0		      ldx	#$E0
    756  f1c0		       86 20		      stx	HMP0
    757  f1c2
    758  f1c2		       a5 a3		      LDA	scorecolor
    759  f1c4		       85 06		      STA	COLUP0
    760  f1c6		       85 07		      STA	COLUP1
    761  f1c8				  -	      ifconst	scorefade
    762  f1c8				  -	      STA	stack2
    763  f1c8					      endif
    764  f1c8				  -	      ifconst	pfscore
    765  f1c8				  -	      lda	pfscorecolor
    766  f1c8				  -	      sta	COLUPF
    767  f1c8					      endif
    768  f1c8		       85 02		      sta	WSYNC
    769  f1ca		       a2 00		      ldx	#0
    770  f1cc		       86 1b		      STx	GRP0
    771  f1ce		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d0
    773  f1d0		       a5 9b		      lda	scorepointers+5
    774  f1d2							; ldy temp5
    775  f1d2		       95 a0		      sta	temp5,x
    776  f1d4							; sty scorepointers+5
    777  f1d4		       a9 ff		      lda	#>scoretable
    778  f1d6		       85 97		      sta	scorepointers+1
    779  f1d8		       85 99		      sta	scorepointers+3
    780  f1da		       85 9b		      sta	scorepointers+5
    781  f1dc		       85 9d		      sta	temp2
    782  f1de		       85 9f		      sta	temp4
    783  f1e0		       85 a1		      sta	temp6
    784  f1e2		       a0 07		      LDY	#7
    785  f1e4		       84 25		      STY	VDELP0
    786  f1e6		       85 10		      STA	RESP0
    787  f1e8		       85 11		      STA	RESP1
    788  f1ea
    789  f1ea
    790  f1ea		       a9 03		      LDA	#$03
    791  f1ec		       85 04		      STA	NUSIZ0
    792  f1ee		       85 05		      STA	NUSIZ1
    793  f1f0		       85 26		      STA	VDELP1
    794  f1f2		       a9 f0		      LDA	#$F0
    795  f1f4		       85 21		      STA	HMP1
    796  f1f6		       b1 96		      lda	(scorepointers),y
    797  f1f8		       85 1b		      sta	GRP0
    798  f1fa		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f1fc		       4c 08 f2 	      jmp	beginscore
    800  f1ff
    801  f1ff
    802  f1ff					      if	((<*)>$d4)
    803  f200		       00		      align	256	; kludge that potentially wastes space! should be fixed!
    804  f200					      endif
    805  f200
    806  f200				   loop2
    807  f200		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f204				  -	      ifconst	pfscore
    810  f204				  -	      lda.w	pfscore1
    811  f204				  -	      sta	PF1
    812  f204					      else
    813  f204				  -	      ifconst	scorefade
    814  f204				  -	      sleep	2
    815  f204				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f204					      else
      0  f204					      sleep	7
      1  f204				   .CYCLES    SET	7
      2  f204
      3  f204				  -	      IF	.CYCLES < 2
      4  f204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f204				  -	      ERR
      6  f204					      ENDIF
      7  f204
      8  f204					      IF	.CYCLES & 1
      9  f204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f204		       04 00		      nop	0
     11  f206				  -	      ELSE
     12  f206				  -	      bit	VSYNC
     13  f206					      ENDIF
     14  f206				   .CYCLES    SET	.CYCLES - 3
     15  f206					      ENDIF
     16  f206
     17  f206					      REPEAT	.CYCLES / 2
     18  f206		       ea		      nop
     17  f206					      REPEND
     18  f207		       ea		      nop
     19  f208					      REPEND
    818  f208					      endif
    819  f208					      endif
    820  f208							; cycle 0
    821  f208				   beginscore
    822  f208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f20e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f212		       9a		      txs
    828  f213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f215				  -	      ifconst	scorefade
    830  f215				  -	      lda	stack2
    831  f215					      else
      0  f215					      sleep	3
      1  f215				   .CYCLES    SET	3
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217				  -	      REPEAT	.CYCLES / 2
     18  f217				  -	      nop
     19  f217					      REPEND
    833  f217					      endif
    834  f217
    835  f217				  -	      ifconst	pfscore
    836  f217				  -	      lda	pfscore2
    837  f217				  -	      sta	PF1
    838  f217					      else
    839  f217				  -	      ifconst	scorefade
    840  f217				  -	      sta	COLUP0
    841  f217				  -	      sta	COLUP1
    842  f217					      else
      0  f217					      sleep	6
      1  f217				   .CYCLES    SET	6
      2  f217
      3  f217				  -	      IF	.CYCLES < 2
      4  f217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f217				  -	      ERR
      6  f217					      ENDIF
      7  f217
      8  f217				  -	      IF	.CYCLES & 1
      9  f217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f217				  -	      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217				  -	      ENDIF
     14  f217				  -.CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     17  f218					      REPEND
     18  f219		       ea		      nop
     19  f21a					      REPEND
    844  f21a					      endif
    845  f21a					      endif
    846  f21a
    847  f21a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f21e		       ba		      tsx
    850  f21f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f225		       88		      dey
    854  f226		       10 d8		      bpl	loop2	;+2 60 180
    855  f228
    856  f228		       a6 f6		      ldx	stack1
    857  f22a		       9a		      txs
    858  f22b							; lda scorepointers+1
    859  f22b		       a4 9c		      ldy	temp1
    860  f22d							; sta temp1
    861  f22d		       84 97		      sty	scorepointers+1
    862  f22f
    863  f22f		       a9 00		      LDA	#0
    864  f231		       85 0e		      sta	PF1
    865  f233		       85 1b		      STA	GRP0
    866  f235		       85 1c		      STA	GRP1
    867  f237		       85 25		      STA	VDELP0
    868  f239		       85 26		      STA	VDELP1	;do we need these
    869  f23b		       85 04		      STA	NUSIZ0
    870  f23d		       85 05		      STA	NUSIZ1
    871  f23f
    872  f23f							; lda scorepointers+3
    873  f23f		       a4 9e		      ldy	temp3
    874  f241							; sta temp3
    875  f241		       84 99		      sty	scorepointers+3
    876  f243
    877  f243							; lda scorepointers+5
    878  f243		       a4 a0		      ldy	temp5
    879  f245							; sta temp5
    880  f245		       84 9b		      sty	scorepointers+5
    881  f247					      endif		;noscore
    882  f247				  -	      ifconst	readpaddle
    883  f247				  -	      lda	#%11000010
    884  f247					      else
    885  f247				  -	      ifconst	qtcontroller
    886  f247				  -	      lda	qtcontroller
    887  f247				  -	      lsr		; bit 0 in carry
    888  f247				  -	      lda	#4
    889  f247				  -	      ror		; carry into top of A
    890  f247					      else
    891  f247		       a9 02		      lda	#2
    892  f249					      endif		; qtcontroller
    893  f249					      endif		; readpaddle
    894  f249		       85 02		      sta	WSYNC
    895  f24b		       85 01		      sta	VBLANK
      0  f24d					      RETURN
      1  f24d					      ifnconst	bankswitch
      2  f24d		       60		      rts
      3  f24e				  -	      else
      4  f24e				  -	      jmp	BS_return
      5  f24e					      endif
    897  f24e				  -	      ifconst	shakescreen
    898  f24e				  -doshakescreen
    899  f24e				  -	      bit	shakescreen
    900  f24e				  -	      bmi	noshakescreen
    901  f24e				  -	      sta	WSYNC
    902  f24e				  -noshakescreen
    903  f24e				  -	      ldx	missile0height
    904  f24e				  -	      inx
    905  f24e				  -	      rts
    906  f24e					      endif
    907  f24e
    908  f24e							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f24e
    910  f24e							; playfield drawing routines
    911  f24e							; you get a 32x12 bitmapped display in a single color :)
    912  f24e							; 0-31 and 0-11
    913  f24e
    914  f24e				   pfclear		; clears playfield - or fill with pattern
    915  f24e				  -	      ifconst	pfres
    916  f24e				  -	      ldx	#pfres*pfwidth-1
    917  f24e					      else
    918  f24e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f250					      endif
    920  f250				   pfclear_loop
    921  f250					      ifnconst	superchip
    922  f250		       95 a4		      sta	playfield,x
    923  f252				  -	      else
    924  f252				  -	      sta	playfield-128,x
    925  f252					      endif
    926  f252		       ca		      dex
    927  f253		       10 fb		      bpl	pfclear_loop
      0  f255					      RETURN
      1  f255					      ifnconst	bankswitch
      2  f255		       60		      rts
      3  f256				  -	      else
      4  f256				  -	      jmp	BS_return
      5  f256					      endif
    929  f256
    930  f256				   setuppointers
    931  f256		       86 9d		      stx	temp2	; store on.off.flip value
    932  f258		       aa		      tax		; put x-value in x 
    933  f259		       4a		      lsr
    934  f25a		       4a		      lsr
    935  f25b		       4a		      lsr		; divide x pos by 8 
    936  f25c		       85 9c		      sta	temp1
    937  f25e		       98		      tya
    938  f25f		       0a		      asl
    939  f260					      if	pfwidth=4
    940  f260		       0a		      asl		; multiply y pos by 4
    941  f261					      endif		; else multiply by 2
    942  f261		       18		      clc
    943  f262		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f264		       a8		      tay		; put the value in y
    945  f265		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f267		       60		      rts
    947  f268
    948  f268				   pfread
    949  f268							;x=xvalue, y=yvalue
    950  f268		       20 56 f2 	      jsr	setuppointers
    951  f26b		       bd d0 f2 	      lda	setbyte,x
    952  f26e		       39 a4 00 	      and	playfield,y
    953  f271		       5d d0 f2 	      eor	setbyte,x
    954  f274							; beq readzero
    955  f274							; lda #1
    956  f274							; readzero
      0  f274					      RETURN
      1  f274					      ifnconst	bankswitch
      2  f274		       60		      rts
      3  f275				  -	      else
      4  f275				  -	      jmp	BS_return
      5  f275					      endif
    958  f275
    959  f275				   pfpixel
    960  f275							;x=xvalue, y=yvalue, a=0,1,2
    961  f275		       20 56 f2 	      jsr	setuppointers
    962  f278
    963  f278				  -	      ifconst	bankswitch
    964  f278				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f278				  -	      beq	pixelon_r	; if "on" go to on
    966  f278				  -	      lsr
    967  f278				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f278				  -	      lda	playfield,y	; if here, it's "flip"
    969  f278				  -	      eor	setbyte,x
    970  f278				  -	      ifconst	superchip
    971  f278				  -	      sta	playfield-128,y
    972  f278				  -	      else
    973  f278				  -	      sta	playfield,y
    974  f278				  -	      endif
    975  f278				  -	      RETURN
    976  f278				  -pixelon_r
    977  f278				  -	      lda	playfield,y
    978  f278				  -	      ora	setbyte,x
    979  f278				  -	      ifconst	superchip
    980  f278				  -	      sta	playfield-128,y
    981  f278				  -	      else
    982  f278				  -	      sta	playfield,y
    983  f278				  -	      endif
    984  f278				  -	      RETURN
    985  f278				  -pixeloff_r
    986  f278				  -	      lda	setbyte,x
    987  f278				  -	      eor	#$ff
    988  f278				  -	      and	playfield,y
    989  f278				  -	      ifconst	superchip
    990  f278				  -	      sta	playfield-128,y
    991  f278				  -	      else
    992  f278				  -	      sta	playfield,y
    993  f278				  -	      endif
    994  f278				  -	      RETURN
    995  f278				  -
    996  f278					      else
    997  f278		       4c a9 f2 	      jmp	plotpoint
    998  f27b					      endif
    999  f27b
   1000  f27b				   pfhline
   1001  f27b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27b		       20 56 f2 	      jsr	setuppointers
   1003  f27e		       4c 88 f2 	      jmp	noinc
   1004  f281				   keepgoing
   1005  f281		       e8		      inx
   1006  f282		       8a		      txa
   1007  f283		       29 07		      and	#7
   1008  f285		       d0 01		      bne	noinc
   1009  f287		       c8		      iny
   1010  f288				   noinc
   1011  f288		       20 a9 f2 	      jsr	plotpoint
   1012  f28b		       e4 9e		      cpx	temp3
   1013  f28d		       30 f2		      bmi	keepgoing
      0  f28f					      RETURN
      1  f28f					      ifnconst	bankswitch
      2  f28f		       60		      rts
      3  f290				  -	      else
      4  f290				  -	      jmp	BS_return
      5  f290					      endif
   1015  f290
   1016  f290				   pfvline
   1017  f290							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f290		       20 56 f2 	      jsr	setuppointers
   1019  f293		       84 9c		      sty	temp1	; store memory location offset
   1020  f295		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f297		       a5 9e		      lda	temp3
   1022  f299		       0a		      asl
   1023  f29a					      if	pfwidth=4
   1024  f29a		       0a		      asl		; multiply by 4
   1025  f29b					      endif		; else multiply by 2
   1026  f29b		       85 9e		      sta	temp3	; store it
   1027  f29d							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f29d							; right now, temp1=y=starting memory location, temp3=final
   1029  f29d							; x should equal original x value
   1030  f29d				   keepgoingy
   1031  f29d		       20 a9 f2 	      jsr	plotpoint
   1032  f2a0		       c8		      iny
   1033  f2a1		       c8		      iny
   1034  f2a2					      if	pfwidth=4
   1035  f2a2		       c8		      iny
   1036  f2a3		       c8		      iny
   1037  f2a4					      endif
   1038  f2a4		       c4 9e		      cpy	temp3
   1039  f2a6		       30 f5		      bmi	keepgoingy
      0  f2a8					      RETURN
      1  f2a8					      ifnconst	bankswitch
      2  f2a8		       60		      rts
      3  f2a9				  -	      else
      4  f2a9				  -	      jmp	BS_return
      5  f2a9					      endif
   1041  f2a9
   1042  f2a9				   plotpoint
   1043  f2a9		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ab		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2ad		       4a		      lsr
   1046  f2ae		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b0		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b3		       5d d0 f2 	      eor	setbyte,x
   1049  f2b6				  -	      ifconst	superchip
   1050  f2b6				  -	      sta	playfield-128,y
   1051  f2b6					      else
   1052  f2b6		       99 a4 00 	      sta	playfield,y
   1053  f2b9					      endif
   1054  f2b9		       60		      rts
   1055  f2ba				   pixelon
   1056  f2ba		       b9 a4 00 	      lda	playfield,y
   1057  f2bd		       1d d0 f2 	      ora	setbyte,x
   1058  f2c0				  -	      ifconst	superchip
   1059  f2c0				  -	      sta	playfield-128,y
   1060  f2c0					      else
   1061  f2c0		       99 a4 00 	      sta	playfield,y
   1062  f2c3					      endif
   1063  f2c3		       60		      rts
   1064  f2c4				   pixeloff
   1065  f2c4		       bd d0 f2 	      lda	setbyte,x
   1066  f2c7		       49 ff		      eor	#$ff
   1067  f2c9		       39 a4 00 	      and	playfield,y
   1068  f2cc				  -	      ifconst	superchip
   1069  f2cc				  -	      sta	playfield-128,y
   1070  f2cc					      else
   1071  f2cc		       99 a4 00 	      sta	playfield,y
   1072  f2cf					      endif
   1073  f2cf		       60		      rts
   1074  f2d0
   1075  f2d0				   setbyte
   1076  f2d0					      ifnconst	pfcenter
   1077  f2d0		       80		      .byte.b	$80
   1078  f2d1		       40		      .byte.b	$40
   1079  f2d2		       20		      .byte.b	$20
   1080  f2d3		       10		      .byte.b	$10
   1081  f2d4		       08		      .byte.b	$08
   1082  f2d5		       04		      .byte.b	$04
   1083  f2d6		       02		      .byte.b	$02
   1084  f2d7		       01		      .byte.b	$01
   1085  f2d8					      endif
   1086  f2d8		       01		      .byte.b	$01
   1087  f2d9		       02		      .byte.b	$02
   1088  f2da		       04		      .byte.b	$04
   1089  f2db		       08		      .byte.b	$08
   1090  f2dc		       10		      .byte.b	$10
   1091  f2dd		       20		      .byte.b	$20
   1092  f2de		       40		      .byte.b	$40
   1093  f2df		       80		      .byte.b	$80
   1094  f2e0		       80		      .byte.b	$80
   1095  f2e1		       40		      .byte.b	$40
   1096  f2e2		       20		      .byte.b	$20
   1097  f2e3		       10		      .byte.b	$10
   1098  f2e4		       08		      .byte.b	$08
   1099  f2e5		       04		      .byte.b	$04
   1100  f2e6		       02		      .byte.b	$02
   1101  f2e7		       01		      .byte.b	$01
   1102  f2e8		       01		      .byte.b	$01
   1103  f2e9		       02		      .byte.b	$02
   1104  f2ea		       04		      .byte.b	$04
   1105  f2eb		       08		      .byte.b	$08
   1106  f2ec		       10		      .byte.b	$10
   1107  f2ed		       20		      .byte.b	$20
   1108  f2ee		       40		      .byte.b	$40
   1109  f2ef		       80		      .byte.b	$80
   1110  f2f0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f0
   1112  f2f0				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f0		       d0 13		      bne	notleft
   1114  f2f2							;left
   1115  f2f2				  -	      ifconst	pfres
   1116  f2f2				  -	      ldx	#pfres*4
   1117  f2f2					      else
   1118  f2f2		       a2 30		      ldx	#48
   1119  f2f4					      endif
   1120  f2f4				   leftloop
   1121  f2f4		       b5 a3		      lda	playfield-1,x
   1122  f2f6		       4a		      lsr
   1123  f2f7
   1124  f2f7				  -	      ifconst	superchip
   1125  f2f7				  -	      lda	playfield-2,x
   1126  f2f7				  -	      rol
   1127  f2f7				  -	      sta	playfield-130,x
   1128  f2f7				  -	      lda	playfield-3,x
   1129  f2f7				  -	      ror
   1130  f2f7				  -	      sta	playfield-131,x
   1131  f2f7				  -	      lda	playfield-4,x
   1132  f2f7				  -	      rol
   1133  f2f7				  -	      sta	playfield-132,x
   1134  f2f7				  -	      lda	playfield-1,x
   1135  f2f7				  -	      ror
   1136  f2f7				  -	      sta	playfield-129,x
   1137  f2f7					      else
   1138  f2f7		       36 a2		      rol	playfield-2,x
   1139  f2f9		       76 a1		      ror	playfield-3,x
   1140  f2fb		       36 a0		      rol	playfield-4,x
   1141  f2fd		       76 a3		      ror	playfield-1,x
   1142  f2ff					      endif
   1143  f2ff
   1144  f2ff		       8a		      txa
   1145  f300		       cb 04		      sbx	#4
   1146  f302		       d0 f0		      bne	leftloop
      0  f304					      RETURN
      1  f304					      ifnconst	bankswitch
      2  f304		       60		      rts
      3  f305				  -	      else
      4  f305				  -	      jmp	BS_return
      5  f305					      endif
   1148  f305
   1149  f305				   notleft
   1150  f305		       4a		      lsr
   1151  f306		       90 13		      bcc	notright
   1152  f308							;right
   1153  f308
   1154  f308				  -	      ifconst	pfres
   1155  f308				  -	      ldx	#pfres*4
   1156  f308					      else
   1157  f308		       a2 30		      ldx	#48
   1158  f30a					      endif
   1159  f30a				   rightloop
   1160  f30a		       b5 a0		      lda	playfield-4,x
   1161  f30c		       4a		      lsr
   1162  f30d				  -	      ifconst	superchip
   1163  f30d				  -	      lda	playfield-3,x
   1164  f30d				  -	      rol
   1165  f30d				  -	      sta	playfield-131,x
   1166  f30d				  -	      lda	playfield-2,x
   1167  f30d				  -	      ror
   1168  f30d				  -	      sta	playfield-130,x
   1169  f30d				  -	      lda	playfield-1,x
   1170  f30d				  -	      rol
   1171  f30d				  -	      sta	playfield-129,x
   1172  f30d				  -	      lda	playfield-4,x
   1173  f30d				  -	      ror
   1174  f30d				  -	      sta	playfield-132,x
   1175  f30d					      else
   1176  f30d		       36 a1		      rol	playfield-3,x
   1177  f30f		       76 a2		      ror	playfield-2,x
   1178  f311		       36 a3		      rol	playfield-1,x
   1179  f313		       76 a0		      ror	playfield-4,x
   1180  f315					      endif
   1181  f315		       8a		      txa
   1182  f316		       cb 04		      sbx	#4
   1183  f318		       d0 f0		      bne	rightloop
      0  f31a					      RETURN
      1  f31a					      ifnconst	bankswitch
      2  f31a		       60		      rts
      3  f31b				  -	      else
      4  f31b				  -	      jmp	BS_return
      5  f31b					      endif
   1185  f31b
   1186  f31b				   notright
   1187  f31b		       4a		      lsr
   1188  f31c		       90 49		      bcc	notup
   1189  f31e							;up
   1190  f31e		       4a		      lsr
   1191  f31f		       90 02		      bcc	onedecup
   1192  f321		       c6 ef		      dec	playfieldpos
   1193  f323				   onedecup
   1194  f323		       c6 ef		      dec	playfieldpos
   1195  f325		       f0 02		      beq	shiftdown
   1196  f327		       10 3d		      bpl	noshiftdown2
   1197  f329				   shiftdown
   1198  f329				  -	      ifconst	pfrowheight
   1199  f329				  -	      lda	#pfrowheight
   1200  f329					      else
   1201  f329					      ifnconst	pfres
   1202  f329		       a9 08		      lda	#8
   1203  f32b				  -	      else
   1204  f32b				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32b					      endif
   1206  f32b					      endif
   1207  f32b
   1208  f32b		       85 ef		      sta	playfieldpos
   1209  f32d		       a5 a7		      lda	playfield+3
   1210  f32f		       85 9f		      sta	temp4
   1211  f331		       a5 a6		      lda	playfield+2
   1212  f333		       85 9e		      sta	temp3
   1213  f335		       a5 a5		      lda	playfield+1
   1214  f337		       85 9d		      sta	temp2
   1215  f339		       a5 a4		      lda	playfield
   1216  f33b		       85 9c		      sta	temp1
   1217  f33d		       a2 00		      ldx	#0
   1218  f33f				   up2
   1219  f33f		       b5 a8		      lda	playfield+4,x
   1220  f341				  -	      ifconst	superchip
   1221  f341				  -	      sta	playfield-128,x
   1222  f341				  -	      lda	playfield+5,x
   1223  f341				  -	      sta	playfield-127,x
   1224  f341				  -	      lda	playfield+6,x
   1225  f341				  -	      sta	playfield-126,x
   1226  f341				  -	      lda	playfield+7,x
   1227  f341				  -	      sta	playfield-125,x
   1228  f341					      else
   1229  f341		       95 a4		      sta	playfield,x
   1230  f343		       b5 a9		      lda	playfield+5,x
   1231  f345		       95 a5		      sta	playfield+1,x
   1232  f347		       b5 aa		      lda	playfield+6,x
   1233  f349		       95 a6		      sta	playfield+2,x
   1234  f34b		       b5 ab		      lda	playfield+7,x
   1235  f34d		       95 a7		      sta	playfield+3,x
   1236  f34f					      endif
   1237  f34f		       8a		      txa
   1238  f350		       cb fc		      sbx	#252
   1239  f352				  -	      ifconst	pfres
   1240  f352				  -	      cpx	#(pfres-1)*4
   1241  f352					      else
   1242  f352		       e0 2c		      cpx	#44
   1243  f354					      endif
   1244  f354		       d0 e9		      bne	up2
   1245  f356
   1246  f356		       a5 9f		      lda	temp4
   1247  f358
   1248  f358				  -	      ifconst	superchip
   1249  f358				  -	      ifconst	pfres
   1250  f358				  -	      sta	playfield+pfres*4-129
   1251  f358				  -	      lda	temp3
   1252  f358				  -	      sta	playfield+pfres*4-130
   1253  f358				  -	      lda	temp2
   1254  f358				  -	      sta	playfield+pfres*4-131
   1255  f358				  -	      lda	temp1
   1256  f358				  -	      sta	playfield+pfres*4-132
   1257  f358				  -	      else
   1258  f358				  -	      sta	playfield+47-128
   1259  f358				  -	      lda	temp3
   1260  f358				  -	      sta	playfield+46-128
   1261  f358				  -	      lda	temp2
   1262  f358				  -	      sta	playfield+45-128
   1263  f358				  -	      lda	temp1
   1264  f358				  -	      sta	playfield+44-128
   1265  f358				  -	      endif
   1266  f358					      else
   1267  f358				  -	      ifconst	pfres
   1268  f358				  -	      sta	playfield+pfres*4-1
   1269  f358				  -	      lda	temp3
   1270  f358				  -	      sta	playfield+pfres*4-2
   1271  f358				  -	      lda	temp2
   1272  f358				  -	      sta	playfield+pfres*4-3
   1273  f358				  -	      lda	temp1
   1274  f358				  -	      sta	playfield+pfres*4-4
   1275  f358					      else
   1276  f358		       85 d3		      sta	playfield+47
   1277  f35a		       a5 9e		      lda	temp3
   1278  f35c		       85 d2		      sta	playfield+46
   1279  f35e		       a5 9d		      lda	temp2
   1280  f360		       85 d1		      sta	playfield+45
   1281  f362		       a5 9c		      lda	temp1
   1282  f364		       85 d0		      sta	playfield+44
   1283  f366					      endif
   1284  f366					      endif
   1285  f366				   noshiftdown2
      0  f366					      RETURN
      1  f366					      ifnconst	bankswitch
      2  f366		       60		      rts
      3  f367				  -	      else
      4  f367				  -	      jmp	BS_return
      5  f367					      endif
   1287  f367
   1288  f367
   1289  f367				   notup
   1290  f367							;down
   1291  f367		       4a		      lsr
   1292  f368		       b0 02		      bcs	oneincup
   1293  f36a		       e6 ef		      inc	playfieldpos
   1294  f36c				   oneincup
   1295  f36c		       e6 ef		      inc	playfieldpos
   1296  f36e		       a5 ef		      lda	playfieldpos
   1297  f370
   1298  f370				  -	      ifconst	pfrowheight
   1299  f370				  -	      cmp	#pfrowheight+1
   1300  f370					      else
   1301  f370					      ifnconst	pfres
   1302  f370		       c9 09		      cmp	#9
   1303  f372				  -	      else
   1304  f372				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f372					      endif
   1306  f372					      endif
   1307  f372
   1308  f372		       90 3b		      bcc	noshiftdown
   1309  f374		       a9 01		      lda	#1
   1310  f376		       85 ef		      sta	playfieldpos
   1311  f378
   1312  f378				  -	      ifconst	pfres
   1313  f378				  -	      lda	playfield+pfres*4-1
   1314  f378				  -	      sta	temp4
   1315  f378				  -	      lda	playfield+pfres*4-2
   1316  f378				  -	      sta	temp3
   1317  f378				  -	      lda	playfield+pfres*4-3
   1318  f378				  -	      sta	temp2
   1319  f378				  -	      lda	playfield+pfres*4-4
   1320  f378					      else
   1321  f378		       a5 d3		      lda	playfield+47
   1322  f37a		       85 9f		      sta	temp4
   1323  f37c		       a5 d2		      lda	playfield+46
   1324  f37e		       85 9e		      sta	temp3
   1325  f380		       a5 d1		      lda	playfield+45
   1326  f382		       85 9d		      sta	temp2
   1327  f384		       a5 d0		      lda	playfield+44
   1328  f386					      endif
   1329  f386
   1330  f386		       85 9c		      sta	temp1
   1331  f388
   1332  f388				  -	      ifconst	pfres
   1333  f388				  -	      ldx	#(pfres-1)*4
   1334  f388					      else
   1335  f388		       a2 2c		      ldx	#44
   1336  f38a					      endif
   1337  f38a				   down2
   1338  f38a		       b5 a3		      lda	playfield-1,x
   1339  f38c				  -	      ifconst	superchip
   1340  f38c				  -	      sta	playfield-125,x
   1341  f38c				  -	      lda	playfield-2,x
   1342  f38c				  -	      sta	playfield-126,x
   1343  f38c				  -	      lda	playfield-3,x
   1344  f38c				  -	      sta	playfield-127,x
   1345  f38c				  -	      lda	playfield-4,x
   1346  f38c				  -	      sta	playfield-128,x
   1347  f38c					      else
   1348  f38c		       95 a7		      sta	playfield+3,x
   1349  f38e		       b5 a2		      lda	playfield-2,x
   1350  f390		       95 a6		      sta	playfield+2,x
   1351  f392		       b5 a1		      lda	playfield-3,x
   1352  f394		       95 a5		      sta	playfield+1,x
   1353  f396		       b5 a0		      lda	playfield-4,x
   1354  f398		       95 a4		      sta	playfield,x
   1355  f39a					      endif
   1356  f39a		       8a		      txa
   1357  f39b		       cb 04		      sbx	#4
   1358  f39d		       d0 eb		      bne	down2
   1359  f39f
   1360  f39f		       a5 9f		      lda	temp4
   1361  f3a1				  -	      ifconst	superchip
   1362  f3a1				  -	      sta	playfield-125
   1363  f3a1				  -	      lda	temp3
   1364  f3a1				  -	      sta	playfield-126
   1365  f3a1				  -	      lda	temp2
   1366  f3a1				  -	      sta	playfield-127
   1367  f3a1				  -	      lda	temp1
   1368  f3a1				  -	      sta	playfield-128
   1369  f3a1					      else
   1370  f3a1		       85 a7		      sta	playfield+3
   1371  f3a3		       a5 9e		      lda	temp3
   1372  f3a5		       85 a6		      sta	playfield+2
   1373  f3a7		       a5 9d		      lda	temp2
   1374  f3a9		       85 a5		      sta	playfield+1
   1375  f3ab		       a5 9c		      lda	temp1
   1376  f3ad		       85 a4		      sta	playfield
   1377  f3af					      endif
   1378  f3af				   noshiftdown
      0  f3af					      RETURN
      1  f3af					      ifnconst	bankswitch
      2  f3af		       60		      rts
      3  f3b0				  -	      else
      4  f3b0				  -	      jmp	BS_return
      5  f3b0					      endif
   1380  f3b0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b0
   1382  f3b0							;standard routines needed for pretty much all games
   1383  f3b0							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b0							; repositioning code and score pointer setup moved to overscan
   1385  f3b0							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b0
   1387  f3b0				   randomize
   1388  f3b0		       a5 a2		      lda	rand
   1389  f3b2		       4a		      lsr
   1390  f3b3				  -	      ifconst	rand16
   1391  f3b3				  -	      rol	rand16
   1392  f3b3					      endif
   1393  f3b3		       90 02		      bcc	noeor
   1394  f3b5		       49 b4		      eor	#$B4
   1395  f3b7				   noeor
   1396  f3b7		       85 a2		      sta	rand
   1397  f3b9				  -	      ifconst	rand16
   1398  f3b9				  -	      eor	rand16
   1399  f3b9					      endif
      0  f3b9					      RETURN
      1  f3b9					      ifnconst	bankswitch
      2  f3b9		       60		      rts
      3  f3ba				  -	      else
      4  f3ba				  -	      jmp	BS_return
      5  f3ba					      endif
   1401  f3ba							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3ba
   1403  f3ba				   drawscreen
   1404  f3ba				  -	      ifconst	debugscore
   1405  f3ba				  -	      ldx	#14
   1406  f3ba				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3ba				  -
   1408  f3ba				  -	      ifconst	mincycles
   1409  f3ba				  -	      lda	mincycles
   1410  f3ba				  -	      cmp	INTIM
   1411  f3ba				  -	      lda	mincycles
   1412  f3ba				  -	      bcc	nochange
   1413  f3ba				  -	      lda	INTIM
   1414  f3ba				  -	      sta	mincycles
   1415  f3ba				  -nochange
   1416  f3ba				  -	      endif
   1417  f3ba				  -
   1418  f3ba				  -			; cmp #$2B
   1419  f3ba				  -			; bcs no_cycles_left
   1420  f3ba				  -	      bmi	cycles_left
   1421  f3ba				  -	      ldx	#64
   1422  f3ba				  -	      eor	#$ff	;make negative
   1423  f3ba				  -cycles_left
   1424  f3ba				  -	      stx	scorecolor
   1425  f3ba				  -	      and	#$7f	; clear sign bit
   1426  f3ba				  -	      tax
   1427  f3ba				  -	      lda	scorebcd,x
   1428  f3ba				  -	      sta	score+2
   1429  f3ba				  -	      lda	scorebcd1,x
   1430  f3ba				  -	      sta	score+1
   1431  f3ba				  -	      jmp	done_debugscore
   1432  f3ba				  -scorebcd
   1433  f3ba				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3ba				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3ba				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3ba				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3ba				  -scorebcd1
   1438  f3ba				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3ba				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3ba				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3ba				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3ba				  -done_debugscore
   1443  f3ba					      endif
   1444  f3ba
   1445  f3ba				  -	      ifconst	debugcycles
   1446  f3ba				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3ba				  -			; cmp #$2B
   1448  f3ba				  -			; BCC overscan
   1449  f3ba				  -	      bmi	overscan
   1450  f3ba				  -	      sta	COLUBK
   1451  f3ba				  -	      bcs	doneoverscan
   1452  f3ba					      endif
   1453  f3ba
   1454  f3ba				   overscan
   1455  f3ba				  -	      ifconst	interlaced
   1456  f3ba				  -	      PHP
   1457  f3ba				  -	      PLA
   1458  f3ba				  -	      EOR	#4	; flip interrupt bit
   1459  f3ba				  -	      PHA
   1460  f3ba				  -	      PLP
   1461  f3ba				  -	      AND	#4	; isolate the interrupt bit
   1462  f3ba				  -	      TAX		; save it for later
   1463  f3ba					      endif
   1464  f3ba
   1465  f3ba				   overscanloop
   1466  f3ba		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3bd		       30 fb		      bmi	overscanloop
   1468  f3bf				   doneoverscan
   1469  f3bf
   1470  f3bf							;do VSYNC
   1471  f3bf
   1472  f3bf				  -	      ifconst	interlaced
   1473  f3bf				  -	      CPX	#4
   1474  f3bf				  -	      BNE	oddframevsync
   1475  f3bf					      endif
   1476  f3bf
   1477  f3bf		       a9 02		      lda	#2
   1478  f3c1		       85 02		      sta	WSYNC
   1479  f3c3		       85 00		      sta	VSYNC
   1480  f3c5		       85 02		      STA	WSYNC
   1481  f3c7		       85 02		      STA	WSYNC
   1482  f3c9		       4a		      lsr
   1483  f3ca		       85 02		      STA	WSYNC
   1484  f3cc		       85 00		      STA	VSYNC
   1485  f3ce		       85 01		      sta	VBLANK
   1486  f3d0					      ifnconst	overscan_time
   1487  f3d0		       a9 a5		      lda	#37+128
   1488  f3d2				  -	      else
   1489  f3d2				  -	      lda	#overscan_time+128
   1490  f3d2					      endif
   1491  f3d2		       8d 96 02 	      sta	TIM64T
   1492  f3d5
   1493  f3d5				  -	      ifconst	interlaced
   1494  f3d5				  -	      jmp	postsync
   1495  f3d5				  -
   1496  f3d5				  -oddframevsync
   1497  f3d5				  -	      sta	WSYNC
   1498  f3d5				  -
   1499  f3d5				  -	      LDA	($80,X)	; 11 waste
   1500  f3d5				  -	      LDA	($80,X)	; 11 waste
   1501  f3d5				  -	      LDA	($80,X)	; 11 waste
   1502  f3d5				  -
   1503  f3d5				  -	      lda	#2
   1504  f3d5				  -	      sta	VSYNC
   1505  f3d5				  -	      sta	WSYNC
   1506  f3d5				  -	      sta	WSYNC
   1507  f3d5				  -	      sta	WSYNC
   1508  f3d5				  -
   1509  f3d5				  -	      LDA	($80,X)	; 11 waste
   1510  f3d5				  -	      LDA	($80,X)	; 11 waste
   1511  f3d5				  -	      LDA	($80,X)	; 11 waste
   1512  f3d5				  -
   1513  f3d5				  -	      lda	#0
   1514  f3d5				  -	      sta	VSYNC
   1515  f3d5				  -	      sta	VBLANK
   1516  f3d5				  -	      ifnconst	overscan_time
   1517  f3d5				  -	      lda	#37+128
   1518  f3d5				  -	      else
   1519  f3d5				  -	      lda	#overscan_time+128
   1520  f3d5				  -	      endif
   1521  f3d5				  -	      sta	TIM64T
   1522  f3d5				  -
   1523  f3d5				  -postsync
   1524  f3d5					      endif
   1525  f3d5
   1526  f3d5				  -	      ifconst	legacy
   1527  f3d5				  -	      if	legacy < 100
   1528  f3d5				  -	      ldx	#4
   1529  f3d5				  -adjustloop
   1530  f3d5				  -	      lda	player0x,x
   1531  f3d5				  -	      sec
   1532  f3d5				  -	      sbc	#14	;?
   1533  f3d5				  -	      sta	player0x,x
   1534  f3d5				  -	      dex
   1535  f3d5				  -	      bpl	adjustloop
   1536  f3d5				  -	      endif
   1537  f3d5					      endif
   1538  f3d5				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d5				  -	      repeat	($fa-(<*))
   1540  f3d5				  -	      nop
   1541  f3d5				  -	      repend
   1542  f3d5					      endif
   1543  f3d5		       85 02		      sta	WSYNC
   1544  f3d7		       a2 04		      ldx	#4
      0  f3d9					      SLEEP	3
      1  f3d9				   .CYCLES    SET	3
      2  f3d9
      3  f3d9				  -	      IF	.CYCLES < 2
      4  f3d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3d9				  -	      ERR
      6  f3d9					      ENDIF
      7  f3d9
      8  f3d9					      IF	.CYCLES & 1
      9  f3d9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3d9		       04 00		      nop	0
     11  f3db				  -	      ELSE
     12  f3db				  -	      bit	VSYNC
     13  f3db					      ENDIF
     14  f3db				   .CYCLES    SET	.CYCLES - 3
     15  f3db					      ENDIF
     16  f3db
     17  f3db				  -	      REPEAT	.CYCLES / 2
     18  f3db				  -	      nop
     19  f3db					      REPEND
   1546  f3db				   HorPosLoop		; 5
   1547  f3db		       b5 80		      lda	player0x,X	;+4 9
   1548  f3dd		       38		      sec		;+2 11
   1549  f3de				   DivideLoop
   1550  f3de		       e9 0f		      sbc	#15
   1551  f3e0		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e2		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e4		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e6		       85 02		      sta	WSYNC
   1555  f3e8		       ca		      dex
   1556  f3e9		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3eb							; 4
   1558  f3eb
   1559  f3eb		       a2 04		      ldx	#4
   1560  f3ed		       b4 9c		      ldy	temp1,X
   1561  f3ef		       b9 4b f3 	      lda	repostable-256,Y
   1562  f3f2		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f4
   1564  f3f4		       ca		      dex
   1565  f3f5		       b4 9c		      ldy	temp1,X
   1566  f3f7		       b9 4b f3 	      lda	repostable-256,Y
   1567  f3fa		       95 20		      sta	HMP0,X	;+14 32
   1568  f3fc
   1569  f3fc		       ca		      dex
   1570  f3fd		       b4 9c		      ldy	temp1,X
   1571  f3ff		       b9 4b f3 	      lda	repostable-256,Y
   1572  f402		       95 20		      sta	HMP0,X	;+14 46
   1573  f404
   1574  f404		       ca		      dex
   1575  f405		       b4 9c		      ldy	temp1,X
   1576  f407		       b9 4b f3 	      lda	repostable-256,Y
   1577  f40a		       95 20		      sta	HMP0,X	;+14 60
   1578  f40c
   1579  f40c		       ca		      dex
   1580  f40d		       b4 9c		      ldy	temp1,X
   1581  f40f		       b9 4b f3 	      lda	repostable-256,Y
   1582  f412		       95 20		      sta	HMP0,X	;+14 74
   1583  f414
   1584  f414		       85 02		      sta	WSYNC
   1585  f416
   1586  f416		       85 2a		      sta	HMOVE	;+3 3
   1587  f418
   1588  f418
   1589  f418				  -	      ifconst	legacy
   1590  f418				  -	      if	legacy < 100
   1591  f418				  -	      ldx	#4
   1592  f418				  -adjustloop2
   1593  f418				  -	      lda	player0x,x
   1594  f418				  -	      clc
   1595  f418				  -	      adc	#14	;?
   1596  f418				  -	      sta	player0x,x
   1597  f418				  -	      dex
   1598  f418				  -	      bpl	adjustloop2
   1599  f418				  -	      endif
   1600  f418					      endif
   1601  f418
   1602  f418
   1603  f418
   1604  f418
   1605  f418							;set score pointers
   1606  f418		       a7 95		      lax	score+2
   1607  f41a		       20 4b f4 	      jsr	scorepointerset
   1608  f41d		       84 9b		      sty	scorepointers+5
   1609  f41f		       86 98		      stx	scorepointers+2
   1610  f421		       a7 94		      lax	score+1
   1611  f423		       20 4b f4 	      jsr	scorepointerset
   1612  f426		       84 9a		      sty	scorepointers+4
   1613  f428		       86 97		      stx	scorepointers+1
   1614  f42a		       a7 93		      lax	score
   1615  f42c		       20 4b f4 	      jsr	scorepointerset
   1616  f42f		       84 99		      sty	scorepointers+3
   1617  f431		       86 96		      stx	scorepointers
   1618  f433
   1619  f433				   vblk
   1620  f433							; run possible vblank bB code
   1621  f433				  -	      ifconst	vblank_bB_code
   1622  f433				  -	      jsr	vblank_bB_code
   1623  f433					      endif
   1624  f433				   vblk2
   1625  f433		       ad 84 02 	      LDA	INTIM
   1626  f436		       30 fb		      bmi	vblk2
   1627  f438		       4c 34 f0 	      jmp	kernel
   1628  f43b
   1629  f43b
   1630  f43b		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f444		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44b				   repostable
   1633  f44b
   1634  f44b				   scorepointerset
   1635  f44b		       29 0f		      and	#$0F
   1636  f44d		       0a		      asl
   1637  f44e		       0a		      asl
   1638  f44f		       0a		      asl
   1639  f450		       69 9c		      adc	#<scoretable
   1640  f452		       a8		      tay
   1641  f453		       8a		      txa
   1642  f454							; and #$F0
   1643  f454							; lsr
   1644  f454		       4b f0		      asr	#$F0
   1645  f456		       69 9c		      adc	#<scoretable
   1646  f458		       aa		      tax
   1647  f459		       60		      rts
   1648  f45a				   game
   1649  f45a				   .
   1650  f45a							; 
   1651  f45a
   1652  f45a				   .
   1653  f45a							; 
   1654  f45a
   1655  f45a				   .
   1656  f45a							; 
   1657  f45a
   1658  f45a				   .
   1659  f45a							; 
   1660  f45a
   1661  f45a				   .
   1662  f45a							; 
   1663  f45a
   1664  f45a				   .
   1665  f45a							; 
   1666  f45a
   1667  f45a				   .
   1668  f45a							; 
   1669  f45a
   1670  f45a				   .
   1671  f45a							; 
   1672  f45a
   1673  f45a				   .
   1674  f45a							; 
   1675  f45a
   1676  f45a				   .
   1677  f45a							; 
   1678  f45a
   1679  f45a				   .
   1680  f45a							; 
   1681  f45a
   1682  f45a				   .
   1683  f45a							; 
   1684  f45a
   1685  f45a				   .
   1686  f45a							; 
   1687  f45a
   1688  f45a				   .
   1689  f45a							; 
   1690  f45a
   1691  f45a				   .
   1692  f45a							; 
   1693  f45a
   1694  f45a				   .
   1695  f45a							; 
   1696  f45a
   1697  f45a				   .
   1698  f45a							; 
   1699  f45a
   1700  f45a				   .
   1701  f45a							; 
   1702  f45a
   1703  f45a				   .
   1704  f45a							; 
   1705  f45a
   1706  f45a				   .
   1707  f45a							; 
   1708  f45a
   1709  f45a				   .
   1710  f45a							; 
   1711  f45a
   1712  f45a				   .
   1713  f45a							; 
   1714  f45a
   1715  f45a				   .
   1716  f45a							; 
   1717  f45a
   1718  f45a				   .
   1719  f45a							; 
   1720  f45a
   1721  f45a				   .L00 		;  set kernel_options player1colors
   1722  f45a
   1723  f45a				   .
   1724  f45a							; 
   1725  f45a
   1726  f45a				   .
   1727  f45a							; 
   1728  f45a
   1729  f45a				   .
   1730  f45a							; 
   1731  f45a
   1732  f45a				   .
   1733  f45a							; 
   1734  f45a
   1735  f45a				   .
   1736  f45a							; 
   1737  f45a
   1738  f45a				   .
   1739  f45a							; 
   1740  f45a
   1741  f45a				   .
   1742  f45a							; 
   1743  f45a
   1744  f45a				   .
   1745  f45a							; 
   1746  f45a
   1747  f45a				   .
   1748  f45a							; 
   1749  f45a
   1750  f45a				   .
   1751  f45a							; 
   1752  f45a
   1753  f45a				   .
   1754  f45a							; 
   1755  f45a
   1756  f45a				   .
   1757  f45a							; 
   1758  f45a
   1759  f45a				   .
   1760  f45a							; 
   1761  f45a
   1762  f45a				   .
   1763  f45a							; 
   1764  f45a
   1765  f45a				   .
   1766  f45a							; 
   1767  f45a
   1768  f45a				   .
   1769  f45a							; 
   1770  f45a
   1771  f45a				   .
   1772  f45a							; 
   1773  f45a
   1774  f45a				   .
   1775  f45a							; 
   1776  f45a
   1777  f45a				   .
   1778  f45a							; 
   1779  f45a
   1780  f45a				   .
   1781  f45a							; 
   1782  f45a
   1783  f45a				   .
   1784  f45a							; 
   1785  f45a
   1786  f45a				   .
   1787  f45a							; 
   1788  f45a
   1789  f45a				   .
   1790  f45a							; 
   1791  f45a
   1792  f45a				   .
   1793  f45a							; 
   1794  f45a
   1795  f45a				   .
   1796  f45a							; 
   1797  f45a
   1798  f45a				   .
   1799  f45a							; 
   1800  f45a
   1801  f45a				   .
   1802  f45a							; 
   1803  f45a
   1804  f45a				   .
   1805  f45a							; 
   1806  f45a
   1807  f45a				   .
   1808  f45a							; 
   1809  f45a
   1810  f45a				   .L01 		;  dim _P1_Left_Right	=  player1x.a
   1811  f45a
   1812  f45a				   .
   1813  f45a							; 
   1814  f45a
   1815  f45a				   .
   1816  f45a							; 
   1817  f45a
   1818  f45a				   .
   1819  f45a							; 
   1820  f45a
   1821  f45a				   .
   1822  f45a							; 
   1823  f45a
   1824  f45a				   .L02 		;  dim _Jump_Gravity_Counter  =  b
   1825  f45a
   1826  f45a				   .
   1827  f45a							; 
   1828  f45a
   1829  f45a				   .
   1830  f45a							; 
   1831  f45a
   1832  f45a				   .
   1833  f45a							; 
   1834  f45a
   1835  f45a				   .
   1836  f45a							; 
   1837  f45a
   1838  f45a				   .L03 		;  dim _Fall_Gravity_Counter  =  c
   1839  f45a
   1840  f45a				   .
   1841  f45a							; 
   1842  f45a
   1843  f45a				   .
   1844  f45a							; 
   1845  f45a
   1846  f45a				   .
   1847  f45a							; 
   1848  f45a
   1849  f45a				   .
   1850  f45a							; 
   1851  f45a
   1852  f45a				   .L04 		;  dim _Master_Counter  =  d
   1853  f45a
   1854  f45a				   .
   1855  f45a							; 
   1856  f45a
   1857  f45a				   .
   1858  f45a							; 
   1859  f45a
   1860  f45a				   .
   1861  f45a							; 
   1862  f45a
   1863  f45a				   .
   1864  f45a							; 
   1865  f45a
   1866  f45a				   .L05 		;  dim _Frame_Counter	=  e
   1867  f45a
   1868  f45a				   .
   1869  f45a							; 
   1870  f45a
   1871  f45a				   .
   1872  f45a							; 
   1873  f45a
   1874  f45a				   .
   1875  f45a							; 
   1876  f45a
   1877  f45a				   .
   1878  f45a							; 
   1879  f45a
   1880  f45a				   .L06 		;  dim _Ch0_Sound  =  f
   1881  f45a
   1882  f45a				   .L07 		;  dim _Ch0_Duration  =  g
   1883  f45a
   1884  f45a				   .L08 		;  dim _Ch0_Counter  =  h
   1885  f45a
   1886  f45a				   .
   1887  f45a							; 
   1888  f45a
   1889  f45a				   .
   1890  f45a							; 
   1891  f45a
   1892  f45a				   .
   1893  f45a							; 
   1894  f45a
   1895  f45a				   .
   1896  f45a							; 
   1897  f45a
   1898  f45a				   .
   1899  f45a							; 
   1900  f45a
   1901  f45a				   .L09 		;  dim _BitOp_01  =  y
   1902  f45a
   1903  f45a				   .L010		;  dim _Bit2_Fall_in_Progress	=  y
   1904  f45a
   1905  f45a				   .L011		;  dim _Bit3_FireB_Restrainer	=  y
   1906  f45a
   1907  f45a				   .L012		;  dim _Bit4_Flip_P1  =  y
   1908  f45a
   1909  f45a				   .L013		;  dim _Bit5_LR_Joy_Movement  =  y
   1910  f45a
   1911  f45a				   .L014		;  dim _Bit6_Duck_in_Progress	=  y
   1912  f45a
   1913  f45a				   .L015		;  dim _Bit7_Reset_Restrainer	=  y
   1914  f45a
   1915  f45a				   .
   1916  f45a							; 
   1917  f45a
   1918  f45a				   .
   1919  f45a							; 
   1920  f45a
   1921  f45a				   .
   1922  f45a							; 
   1923  f45a
   1924  f45a				   .
   1925  f45a							; 
   1926  f45a
   1927  f45a				   .
   1928  f45a							; 
   1929  f45a
   1930  f45a				   .
   1931  f45a							; 
   1932  f45a
   1933  f45a				   .
   1934  f45a							; 
   1935  f45a
   1936  f45a				   .
   1937  f45a							; 
   1938  f45a
   1939  f45a				   .L016		;  const _c_Jump_Sound  =  1
   1940  f45a
   1941  f45a				   .
   1942  f45a							; 
   1943  f45a
   1944  f45a				   .
   1945  f45a							; 
   1946  f45a
   1947  f45a				   .
   1948  f45a							; 
   1949  f45a
   1950  f45a				   .
   1951  f45a							; 
   1952  f45a
   1953  f45a				   .
   1954  f45a							; 
   1955  f45a
   1956  f45a				   .
   1957  f45a							; 
   1958  f45a
   1959  f45a				   .
   1960  f45a							; 
   1961  f45a
   1962  f45a				   .
   1963  f45a							; 
   1964  f45a
   1965  f45a				   .
   1966  f45a							; 
   1967  f45a
   1968  f45a				   .
   1969  f45a							; 
   1970  f45a
   1971  f45a				   .
   1972  f45a							; 
   1973  f45a
   1974  f45a				   .
   1975  f45a							; 
   1976  f45a
   1977  f45a				   .L017		;  const _00  =  $00
   1978  f45a
   1979  f45a				   .L018		;  const _02  =  $02
   1980  f45a
   1981  f45a				   .L019		;  const _04  =  $04
   1982  f45a
   1983  f45a				   .L020		;  const _06  =  $06
   1984  f45a
   1985  f45a				   .L021		;  const _08  =  $08
   1986  f45a
   1987  f45a				   .L022		;  const _0A  =  $0A
   1988  f45a
   1989  f45a				   .L023		;  const _0C  =  $0C
   1990  f45a
   1991  f45a				   .L024		;  const _0E  =  $0E
   1992  f45a
   1993  f45a				   .L025		;  const _10  =  $10
   1994  f45a
   1995  f45a				   .L026		;  const _12  =  $12
   1996  f45a
   1997  f45a				   .L027		;  const _14  =  $14
   1998  f45a
   1999  f45a				   .L028		;  const _16  =  $16
   2000  f45a
   2001  f45a				   .L029		;  const _18  =  $18
   2002  f45a
   2003  f45a				   .L030		;  const _1A  =  $1A
   2004  f45a
   2005  f45a				   .L031		;  const _1C  =  $1C
   2006  f45a
   2007  f45a				   .L032		;  const _1E  =  $1E
   2008  f45a
   2009  f45a				   .L033		;  const _20  =  $20
   2010  f45a
   2011  f45a				   .L034		;  const _22  =  $22
   2012  f45a
   2013  f45a				   .L035		;  const _24  =  $24
   2014  f45a
   2015  f45a				   .L036		;  const _26  =  $26
   2016  f45a
   2017  f45a				   .L037		;  const _28  =  $28
   2018  f45a
   2019  f45a				   .L038		;  const _2A  =  $2A
   2020  f45a
   2021  f45a				   .L039		;  const _2C  =  $2C
   2022  f45a
   2023  f45a				   .L040		;  const _2E  =  $2E
   2024  f45a
   2025  f45a				   .L041		;  const _30  =  $30
   2026  f45a
   2027  f45a				   .L042		;  const _32  =  $32
   2028  f45a
   2029  f45a				   .L043		;  const _34  =  $34
   2030  f45a
   2031  f45a				   .L044		;  const _36  =  $36
   2032  f45a
   2033  f45a				   .L045		;  const _38  =  $38
   2034  f45a
   2035  f45a				   .L046		;  const _3A  =  $3A
   2036  f45a
   2037  f45a				   .L047		;  const _3C  =  $3C
   2038  f45a
   2039  f45a				   .L048		;  const _3E  =  $3E
   2040  f45a
   2041  f45a				   .L049		;  const _40  =  $40
   2042  f45a
   2043  f45a				   .L050		;  const _42  =  $42
   2044  f45a
   2045  f45a				   .L051		;  const _44  =  $44
   2046  f45a
   2047  f45a				   .L052		;  const _46  =  $46
   2048  f45a
   2049  f45a				   .L053		;  const _48  =  $48
   2050  f45a
   2051  f45a				   .L054		;  const _4A  =  $4A
   2052  f45a
   2053  f45a				   .L055		;  const _4C  =  $4C
   2054  f45a
   2055  f45a				   .L056		;  const _4E  =  $4E
   2056  f45a
   2057  f45a				   .L057		;  const _50  =  $50
   2058  f45a
   2059  f45a				   .L058		;  const _52  =  $52
   2060  f45a
   2061  f45a				   .L059		;  const _54  =  $54
   2062  f45a
   2063  f45a				   .L060		;  const _56  =  $56
   2064  f45a
   2065  f45a				   .L061		;  const _58  =  $58
   2066  f45a
   2067  f45a				   .L062		;  const _5A  =  $5A
   2068  f45a
   2069  f45a				   .L063		;  const _5C  =  $5C
   2070  f45a
   2071  f45a				   .L064		;  const _5E  =  $5E
   2072  f45a
   2073  f45a				   .L065		;  const _60  =  $60
   2074  f45a
   2075  f45a				   .L066		;  const _62  =  $62
   2076  f45a
   2077  f45a				   .L067		;  const _64  =  $64
   2078  f45a
   2079  f45a				   .L068		;  const _66  =  $66
   2080  f45a
   2081  f45a				   .L069		;  const _68  =  $68
   2082  f45a
   2083  f45a				   .L070		;  const _6A  =  $6A
   2084  f45a
   2085  f45a				   .L071		;  const _6C  =  $6C
   2086  f45a
   2087  f45a				   .L072		;  const _6E  =  $6E
   2088  f45a
   2089  f45a				   .L073		;  const _70  =  $70
   2090  f45a
   2091  f45a				   .L074		;  const _72  =  $72
   2092  f45a
   2093  f45a				   .L075		;  const _74  =  $74
   2094  f45a
   2095  f45a				   .L076		;  const _76  =  $76
   2096  f45a
   2097  f45a				   .L077		;  const _78  =  $78
   2098  f45a
   2099  f45a				   .L078		;  const _7A  =  $7A
   2100  f45a
   2101  f45a				   .L079		;  const _7C  =  $7C
   2102  f45a
   2103  f45a				   .L080		;  const _7E  =  $7E
   2104  f45a
   2105  f45a				   .L081		;  const _80  =  $80
   2106  f45a
   2107  f45a				   .L082		;  const _82  =  $82
   2108  f45a
   2109  f45a				   .L083		;  const _84  =  $84
   2110  f45a
   2111  f45a				   .L084		;  const _86  =  $86
   2112  f45a
   2113  f45a				   .L085		;  const _88  =  $88
   2114  f45a
   2115  f45a				   .L086		;  const _8A  =  $8A
   2116  f45a
   2117  f45a				   .L087		;  const _8C  =  $8C
   2118  f45a
   2119  f45a				   .L088		;  const _8E  =  $8E
   2120  f45a
   2121  f45a				   .L089		;  const _90  =  $90
   2122  f45a
   2123  f45a				   .L090		;  const _92  =  $92
   2124  f45a
   2125  f45a				   .L091		;  const _94  =  $94
   2126  f45a
   2127  f45a				   .L092		;  const _96  =  $96
   2128  f45a
   2129  f45a				   .L093		;  const _98  =  $98
   2130  f45a
   2131  f45a				   .L094		;  const _9A  =  $9A
   2132  f45a
   2133  f45a				   .L095		;  const _9C  =  $9C
   2134  f45a
   2135  f45a				   .L096		;  const _9E  =  $9E
   2136  f45a
   2137  f45a				   .L097		;  const _A0  =  $A0
   2138  f45a
   2139  f45a				   .L098		;  const _A2  =  $A2
   2140  f45a
   2141  f45a				   .L099		;  const _A4  =  $A4
   2142  f45a
   2143  f45a				   .L0100		;  const _A6  =  $A6
   2144  f45a
   2145  f45a				   .L0101		;  const _A8  =  $A8
   2146  f45a
   2147  f45a				   .L0102		;  const _AA  =  $AA
   2148  f45a
   2149  f45a				   .L0103		;  const _AC  =  $AC
   2150  f45a
   2151  f45a				   .L0104		;  const _AE  =  $AE
   2152  f45a
   2153  f45a				   .L0105		;  const _B0  =  $B0
   2154  f45a
   2155  f45a				   .L0106		;  const _B2  =  $B2
   2156  f45a
   2157  f45a				   .L0107		;  const _B4  =  $B4
   2158  f45a
   2159  f45a				   .L0108		;  const _B6  =  $B6
   2160  f45a
   2161  f45a				   .L0109		;  const _B8  =  $B8
   2162  f45a
   2163  f45a				   .L0110		;  const _BA  =  $BA
   2164  f45a
   2165  f45a				   .L0111		;  const _BC  =  $BC
   2166  f45a
   2167  f45a				   .L0112		;  const _BE  =  $BE
   2168  f45a
   2169  f45a				   .L0113		;  const _C0  =  $C0
   2170  f45a
   2171  f45a				   .L0114		;  const _C2  =  $C2
   2172  f45a
   2173  f45a				   .L0115		;  const _C4  =  $C4
   2174  f45a
   2175  f45a				   .L0116		;  const _C6  =  $C6
   2176  f45a
   2177  f45a				   .L0117		;  const _C8  =  $C8
   2178  f45a
   2179  f45a				   .L0118		;  const _CA  =  $CA
   2180  f45a
   2181  f45a				   .L0119		;  const _CC  =  $CC
   2182  f45a
   2183  f45a				   .L0120		;  const _CE  =  $CE
   2184  f45a
   2185  f45a				   .L0121		;  const _D0  =  $D0
   2186  f45a
   2187  f45a				   .L0122		;  const _D2  =  $D2
   2188  f45a
   2189  f45a				   .L0123		;  const _D4  =  $D4
   2190  f45a
   2191  f45a				   .L0124		;  const _D6  =  $D6
   2192  f45a
   2193  f45a				   .L0125		;  const _D8  =  $D8
   2194  f45a
   2195  f45a				   .L0126		;  const _DA  =  $DA
   2196  f45a
   2197  f45a				   .L0127		;  const _DC  =  $DC
   2198  f45a
   2199  f45a				   .L0128		;  const _DE  =  $DE
   2200  f45a
   2201  f45a				   .L0129		;  const _E0  =  $E0
   2202  f45a
   2203  f45a				   .L0130		;  const _E2  =  $E2
   2204  f45a
   2205  f45a				   .L0131		;  const _E4  =  $E4
   2206  f45a
   2207  f45a				   .L0132		;  const _E6  =  $E6
   2208  f45a
   2209  f45a				   .L0133		;  const _E8  =  $E8
   2210  f45a
   2211  f45a				   .L0134		;  const _EA  =  $EA
   2212  f45a
   2213  f45a				   .L0135		;  const _EC  =  $EC
   2214  f45a
   2215  f45a				   .L0136		;  const _EE  =  $EE
   2216  f45a
   2217  f45a				   .L0137		;  const _F0  =  $F0
   2218  f45a
   2219  f45a				   .L0138		;  const _F2  =  $F2
   2220  f45a
   2221  f45a				   .L0139		;  const _F4  =  $F4
   2222  f45a
   2223  f45a				   .L0140		;  const _F6  =  $F6
   2224  f45a
   2225  f45a				   .L0141		;  const _F8  =  $F8
   2226  f45a
   2227  f45a				   .L0142		;  const _FA  =  $FA
   2228  f45a
   2229  f45a				   .L0143		;  const _FC  =  $FC
   2230  f45a
   2231  f45a				   .L0144		;  const _FE  =  $FE
   2232  f45a
   2233  f45a				   .
   2234  f45a							; 
   2235  f45a
   2236  f45a				   .
   2237  f45a							; 
   2238  f45a
   2239  f45a				   .
   2240  f45a							; 
   2241  f45a
   2242  f45a				   .
   2243  f45a							; 
   2244  f45a
   2245  f45a				   .
   2246  f45a							; 
   2247  f45a
   2248  f45a				   .
   2249  f45a							; 
   2250  f45a
   2251  f45a				   .
   2252  f45a							; 
   2253  f45a
   2254  f45a				   .
   2255  f45a							; 
   2256  f45a
   2257  f45a				   .
   2258  f45a							; 
   2259  f45a
   2260  f45a				   .
   2261  f45a							; 
   2262  f45a
   2263  f45a				   .
   2264  f45a							; 
   2265  f45a
   2266  f45a				   .
   2267  f45a							; 
   2268  f45a
   2269  f45a				   .__Start_Restart
   2270  f45a							; __Start_Restart
   2271  f45a
   2272  f45a				   .
   2273  f45a							; 
   2274  f45a
   2275  f45a				   .
   2276  f45a							; 
   2277  f45a
   2278  f45a				   .
   2279  f45a							; 
   2280  f45a
   2281  f45a				   .
   2282  f45a							; 
   2283  f45a
   2284  f45a				   .
   2285  f45a							; 
   2286  f45a
   2287  f45a				   .
   2288  f45a							; 
   2289  f45a
   2290  f45a				   .L0145		;  AUDV0  =  0  :  AUDV1  =  0
   2291  f45a
   2292  f45a		       a9 00		      LDA	#0
   2293  f45c		       85 19		      STA	AUDV0
   2294  f45e		       85 1a		      STA	AUDV1
   2295  f460				   .
   2296  f460							; 
   2297  f460
   2298  f460				   .
   2299  f460							; 
   2300  f460
   2301  f460				   .
   2302  f460							; 
   2303  f460
   2304  f460				   .
   2305  f460							; 
   2306  f460
   2307  f460				   .
   2308  f460							; 
   2309  f460
   2310  f460				   .
   2311  f460							; 
   2312  f460
   2313  f460				   .L0146		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2314  f460
   2315  f460		       a9 00		      LDA	#0
   2316  f462		       85 d4		      STA	a
   2317  f464		       85 d5		      STA	b
   2318  f466		       85 d6		      STA	c
   2319  f468		       85 d7		      STA	d
   2320  f46a		       85 d8		      STA	e
   2321  f46c		       85 d9		      STA	f
   2322  f46e		       85 da		      STA	g
   2323  f470		       85 db		      STA	h
   2324  f472		       85 dc		      STA	i
   2325  f474				   .L0147		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2326  f474
   2327  f474		       a9 00		      LDA	#0
   2328  f476		       85 dd		      STA	j
   2329  f478		       85 de		      STA	k
   2330  f47a		       85 df		      STA	l
   2331  f47c		       85 e0		      STA	m
   2332  f47e		       85 e1		      STA	n
   2333  f480		       85 e2		      STA	o
   2334  f482		       85 e3		      STA	p
   2335  f484		       85 e4		      STA	q
   2336  f486		       85 e5		      STA	r
   2337  f488				   .L0148		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   2338  f488
   2339  f488		       a9 00		      LDA	#0
   2340  f48a		       85 e6		      STA	s
   2341  f48c		       85 e7		      STA	t
   2342  f48e		       85 e8		      STA	u
   2343  f490		       85 e9		      STA	v
   2344  f492		       85 ea		      STA	w
   2345  f494		       85 eb		      STA	x
   2346  f496		       85 ec		      STA	y
   2347  f498		       85 ed		      STA	z
   2348  f49a				   .
   2349  f49a							; 
   2350  f49a
   2351  f49a				   .
   2352  f49a							; 
   2353  f49a
   2354  f49a				   .
   2355  f49a							; 
   2356  f49a
   2357  f49a				   .
   2358  f49a							; 
   2359  f49a
   2360  f49a				   .
   2361  f49a							; 
   2362  f49a
   2363  f49a				   .
   2364  f49a							; 
   2365  f49a
   2366  f49a				   .
   2367  f49a							; 
   2368  f49a
   2369  f49a				   .
   2370  f49a							; 
   2371  f49a
   2372  f49a				   .
   2373  f49a							; 
   2374  f49a
   2375  f49a				   .
   2376  f49a							; 
   2377  f49a
   2378  f49a				   .
   2379  f49a							; 
   2380  f49a
   2381  f49a				   .__Main_Loop_Setup
   2382  f49a							; __Main_Loop_Setup
   2383  f49a
   2384  f49a				   .
   2385  f49a							; 
   2386  f49a
   2387  f49a				   .
   2388  f49a							; 
   2389  f49a
   2390  f49a				   .
   2391  f49a							; 
   2392  f49a
   2393  f49a				   .
   2394  f49a							; 
   2395  f49a
   2396  f49a				   .
   2397  f49a							; 
   2398  f49a
   2399  f49a				   .
   2400  f49a							; 
   2401  f49a
   2402  f49a				   .L0149		;  player1x  =  79  :	player1y  =  79
   2403  f49a
   2404  f49a		       a9 4f		      LDA	#79
   2405  f49c		       85 81		      STA	player1x
   2406  f49e		       85 86		      STA	player1y
   2407  f4a0				   .
   2408  f4a0							; 
   2409  f4a0
   2410  f4a0				   .
   2411  f4a0							; 
   2412  f4a0
   2413  f4a0				   .
   2414  f4a0							; 
   2415  f4a0
   2416  f4a0				   .
   2417  f4a0							; 
   2418  f4a0
   2419  f4a0				   .
   2420  f4a0							; 
   2421  f4a0
   2422  f4a0				   .
   2423  f4a0							; 
   2424  f4a0
   2425  f4a0				   .
   2426  f4a0							; 
   2427  f4a0
   2428  f4a0				   .
   2429  f4a0							; 
   2430  f4a0
   2431  f4a0				   .
   2432  f4a0							; 
   2433  f4a0
   2434  f4a0				   .L0150		;  _Bit7_Reset_Restrainer{7}  =  1
   2435  f4a0
   2436  f4a0		       a5 ec		      LDA	_Bit7_Reset_Restrainer
   2437  f4a2		       09 80		      ORA	#128
   2438  f4a4		       85 ec		      STA	_Bit7_Reset_Restrainer
   2439  f4a6				   .
   2440  f4a6							; 
   2441  f4a6
   2442  f4a6				   .
   2443  f4a6							; 
   2444  f4a6
   2445  f4a6				   .
   2446  f4a6							; 
   2447  f4a6
   2448  f4a6				   .
   2449  f4a6							; 
   2450  f4a6
   2451  f4a6				   .
   2452  f4a6							; 
   2453  f4a6
   2454  f4a6				   .
   2455  f4a6							; 
   2456  f4a6
   2457  f4a6				   .L0151		;  playfield:
   2458  f4a6
   2459  f4a6				  -	      ifconst	pfres
   2460  f4a6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2461  f4a6					      else
   2462  f4a6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2463  f4a8					      endif
   2464  f4a8		       4c d7 f4 	      jmp	pflabel0
   2465  f4ab				   PF_data0
   2466  f4ab		       00 00		      .byte.b	%00000000, %00000000
   2467  f4ad					      if	(pfwidth>2)
   2468  f4ad		       00 00		      .byte.b	%00000000, %00000000
   2469  f4af					      endif
   2470  f4af		       00 00		      .byte.b	%00000000, %00000000
   2471  f4b1					      if	(pfwidth>2)
   2472  f4b1		       00 00		      .byte.b	%00000000, %00000000
   2473  f4b3					      endif
   2474  f4b3		       00 00		      .byte.b	%00000000, %00000000
   2475  f4b5					      if	(pfwidth>2)
   2476  f4b5		       00 00		      .byte.b	%00000000, %00000000
   2477  f4b7					      endif
   2478  f4b7		       00 00		      .byte.b	%00000000, %00000000
   2479  f4b9					      if	(pfwidth>2)
   2480  f4b9		       00 00		      .byte.b	%00000000, %00000000
   2481  f4bb					      endif
   2482  f4bb		       00 00		      .byte.b	%00000000, %00000000
   2483  f4bd					      if	(pfwidth>2)
   2484  f4bd		       00 00		      .byte.b	%00000000, %00000000
   2485  f4bf					      endif
   2486  f4bf		       00 00		      .byte.b	%00000000, %00000000
   2487  f4c1					      if	(pfwidth>2)
   2488  f4c1		       00 00		      .byte.b	%00000000, %00000000
   2489  f4c3					      endif
   2490  f4c3		       00 00		      .byte.b	%00000000, %00000000
   2491  f4c5					      if	(pfwidth>2)
   2492  f4c5		       00 00		      .byte.b	%00000000, %00000000
   2493  f4c7					      endif
   2494  f4c7		       00 00		      .byte.b	%00000000, %00000000
   2495  f4c9					      if	(pfwidth>2)
   2496  f4c9		       00 00		      .byte.b	%00000000, %00000000
   2497  f4cb					      endif
   2498  f4cb		       00 00		      .byte.b	%00000000, %00000000
   2499  f4cd					      if	(pfwidth>2)
   2500  f4cd		       00 00		      .byte.b	%00000000, %00000000
   2501  f4cf					      endif
   2502  f4cf		       00 00		      .byte.b	%00000000, %00000000
   2503  f4d1					      if	(pfwidth>2)
   2504  f4d1		       00 00		      .byte.b	%00000000, %00000000
   2505  f4d3					      endif
   2506  f4d3		       ff ff		      .byte.b	%11111111, %11111111
   2507  f4d5					      if	(pfwidth>2)
   2508  f4d5		       ff ff		      .byte.b	%11111111, %11111111
   2509  f4d7					      endif
   2510  f4d7				   pflabel0
   2511  f4d7		       bd ab f4 	      lda	PF_data0,x
   2512  f4da		       95 a4		      sta	playfield,x
   2513  f4dc		       ca		      dex
   2514  f4dd		       10 f8		      bpl	pflabel0
   2515  f4df				   .
   2516  f4df							; 
   2517  f4df
   2518  f4df				   .
   2519  f4df							; 
   2520  f4df
   2521  f4df				   .
   2522  f4df							; 
   2523  f4df
   2524  f4df				   .
   2525  f4df							; 
   2526  f4df
   2527  f4df				   .
   2528  f4df							; 
   2529  f4df
   2530  f4df				   .
   2531  f4df							; 
   2532  f4df
   2533  f4df				   .
   2534  f4df							; 
   2535  f4df
   2536  f4df				   .
   2537  f4df							; 
   2538  f4df
   2539  f4df				   .
   2540  f4df							; 
   2541  f4df
   2542  f4df				   .
   2543  f4df							; 
   2544  f4df
   2545  f4df				   .
   2546  f4df							; 
   2547  f4df
   2548  f4df				   .__Main_Loop
   2549  f4df							; __Main_Loop
   2550  f4df
   2551  f4df				   .
   2552  f4df							; 
   2553  f4df
   2554  f4df				   .
   2555  f4df							; 
   2556  f4df
   2557  f4df				   .
   2558  f4df							; 
   2559  f4df
   2560  f4df				   .
   2561  f4df							; 
   2562  f4df
   2563  f4df				   .
   2564  f4df							; 
   2565  f4df
   2566  f4df				   .
   2567  f4df							; 
   2568  f4df
   2569  f4df				   .
   2570  f4df							; 
   2571  f4df
   2572  f4df				   .L0152		;  COLUPF  =  _C4  :  COLUBK  =  _00
   2573  f4df
   2574  f4df		       a9 c4		      LDA	#_C4
   2575  f4e1		       85 08		      STA	COLUPF
   2576  f4e3		       a9 00		      LDA	#_00
   2577  f4e5		       85 09		      STA	COLUBK
   2578  f4e7				   .
   2579  f4e7							; 
   2580  f4e7
   2581  f4e7				   .
   2582  f4e7							; 
   2583  f4e7
   2584  f4e7				   .
   2585  f4e7							; 
   2586  f4e7
   2587  f4e7				   .
   2588  f4e7							; 
   2589  f4e7
   2590  f4e7				   .
   2591  f4e7							; 
   2592  f4e7
   2593  f4e7				   .
   2594  f4e7							; 
   2595  f4e7
   2596  f4e7				   .
   2597  f4e7							; 
   2598  f4e7
   2599  f4e7				   .L0153		;  _Master_Counter  =	_Master_Counter  +  1
   2600  f4e7
   2601  f4e7		       e6 d7		      INC	_Master_Counter
   2602  f4e9				   .
   2603  f4e9							; 
   2604  f4e9
   2605  f4e9				   .L0154		;  if _Master_Counter	<  4 then goto __Skip_Frame_Counter
   2606  f4e9
   2607  f4e9		       a5 d7		      LDA	_Master_Counter
   2608  f4eb		       c9 04		      CMP	#4
   2609  f4ed		       b0 03		      BCS	.skipL0154
   2610  f4ef				   .condpart0
   2611  f4ef		       4c 02 f5 	      jmp	.__Skip_Frame_Counter
   2612  f4f2
   2613  f4f2				   .skipL0154
   2614  f4f2				   .
   2615  f4f2							; 
   2616  f4f2
   2617  f4f2				   .L0155		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2618  f4f2
   2619  f4f2		       e6 d8		      INC	_Frame_Counter
   2620  f4f4		       a9 00		      LDA	#0
   2621  f4f6		       85 d7		      STA	_Master_Counter
   2622  f4f8				   .
   2623  f4f8							; 
   2624  f4f8
   2625  f4f8				   .L0156		;  if _Frame_Counter  =  4 then _Frame_Counter  =  0
   2626  f4f8
   2627  f4f8		       a5 d8		      LDA	_Frame_Counter
   2628  f4fa		       c9 04		      CMP	#4
   2629  f4fc		       d0 04		      BNE	.skipL0156
   2630  f4fe				   .condpart1
   2631  f4fe		       a9 00		      LDA	#0
   2632  f500		       85 d8		      STA	_Frame_Counter
   2633  f502				   .skipL0156
   2634  f502				   .
   2635  f502							; 
   2636  f502
   2637  f502				   .__Skip_Frame_Counter
   2638  f502							; __Skip_Frame_Counter
   2639  f502
   2640  f502				   .
   2641  f502							; 
   2642  f502
   2643  f502				   .
   2644  f502							; 
   2645  f502
   2646  f502				   .
   2647  f502							; 
   2648  f502
   2649  f502				   .
   2650  f502							; 
   2651  f502
   2652  f502				   .
   2653  f502							; 
   2654  f502
   2655  f502				   .
   2656  f502							; 
   2657  f502
   2658  f502				   .
   2659  f502							; 
   2660  f502
   2661  f502				   .L0157		;  player1color:
   2662  f502
   2663  f502		       a2 00		      LDX	#<playercolorL0157_1
   2664  f504		       86 87		      STX	player1color
   2665  f506		       a9 f8		      LDA	#>playercolorL0157_1
   2666  f508		       85 88		      STA	player1color+1
   2667  f50a				   .
   2668  f50a							; 
   2669  f50a
   2670  f50a				   .L0158		;  player1:
   2671  f50a
   2672  f50a		       a2 0a		      LDX	#<playerL0158_1
   2673  f50c		       86 8c		      STX	player1pointerlo
   2674  f50e		       a9 f8		      LDA	#>playerL0158_1
   2675  f510		       85 8d		      STA	player1pointerhi
   2676  f512		       a9 09		      LDA	#9
   2677  f514		       85 8f		      STA	player1height
   2678  f516				   .
   2679  f516							; 
   2680  f516
   2681  f516				   .
   2682  f516							; 
   2683  f516
   2684  f516				   .
   2685  f516							; 
   2686  f516
   2687  f516				   .
   2688  f516							; 
   2689  f516
   2690  f516				   .
   2691  f516							; 
   2692  f516
   2693  f516				   .
   2694  f516							; 
   2695  f516
   2696  f516				   .
   2697  f516							; 
   2698  f516
   2699  f516				   .
   2700  f516							; 
   2701  f516
   2702  f516				   .
   2703  f516							; 
   2704  f516
   2705  f516				   .
   2706  f516							; 
   2707  f516
   2708  f516				   .L0159		;  if !joy0fire then _Jump_Gravity_Counter  =	0  :  _Bit3_FireB_Restrainer{3}  =  0  :  goto __Skip_Jump
   2709  f516
   2710  f516		       24 0c		      bit	INPT4
   2711  f518		       10 0d		      BPL	.skipL0159
   2712  f51a				   .condpart2
   2713  f51a		       a9 00		      LDA	#0
   2714  f51c		       85 d5		      STA	_Jump_Gravity_Counter
   2715  f51e		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2716  f520		       29 f7		      AND	#247
   2717  f522		       85 ec		      STA	_Bit3_FireB_Restrainer
   2718  f524		       4c d0 f5 	      jmp	.__Skip_Jump
   2719  f527
   2720  f527				   .skipL0159
   2721  f527				   .
   2722  f527							; 
   2723  f527
   2724  f527				   .
   2725  f527							; 
   2726  f527
   2727  f527				   .
   2728  f527							; 
   2729  f527
   2730  f527				   .
   2731  f527							; 
   2732  f527
   2733  f527				   .L0160		;  if !_Bit3_FireB_Restrainer{3} then player1:
   2734  f527
   2735  f527		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2736  f529		       29 08		      AND	#8
   2737  f52b		       d0 0c		      BNE	.skipL0160
   2738  f52d				   .condpart3
   2739  f52d		       a2 14		      LDX	#<player3then_1
   2740  f52f		       86 8c		      STX	player1pointerlo
   2741  f531		       a9 f8		      LDA	#>player3then_1
   2742  f533		       85 8d		      STA	player1pointerhi
   2743  f535		       a9 09		      LDA	#9
   2744  f537		       85 8f		      STA	player1height
   2745  f539				   .skipL0160
   2746  f539				   .
   2747  f539							; 
   2748  f539
   2749  f539				   .
   2750  f539							; 
   2751  f539
   2752  f539				   .
   2753  f539							; 
   2754  f539
   2755  f539				   .
   2756  f539							; 
   2757  f539
   2758  f539				   .L0161		;  if !joy0left  &&  !joy0right  &&  !_Bit3_FireB_Restrainer{3} then player1:
   2759  f539
   2760  f539		       2c 80 02 	      bit	SWCHA
   2761  f53c		       50 17		      BVC	.skipL0161
   2762  f53e				   .condpart4
   2763  f53e		       2c 80 02 	      bit	SWCHA
   2764  f541		       10 12		      BPL	.skip4then
   2765  f543				   .condpart5
   2766  f543		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2767  f545		       29 08		      AND	#8
   2768  f547		       d0 0c		      BNE	.skip5then
   2769  f549				   .condpart6
   2770  f549		       a2 1e		      LDX	#<player6then_1
   2771  f54b		       86 8c		      STX	player1pointerlo
   2772  f54d		       a9 f8		      LDA	#>player6then_1
   2773  f54f		       85 8d		      STA	player1pointerhi
   2774  f551		       a9 09		      LDA	#9
   2775  f553		       85 8f		      STA	player1height
   2776  f555				   .skip5then
   2777  f555				   .skip4then
   2778  f555				   .skipL0161
   2779  f555				   .
   2780  f555							; 
   2781  f555
   2782  f555				   .
   2783  f555							; 
   2784  f555
   2785  f555				   .
   2786  f555							; 
   2787  f555
   2788  f555				   .
   2789  f555							; 
   2790  f555
   2791  f555				   .L0162		;  if _Bit2_Fall_in_Progress{2} then goto __Skip_Jump
   2792  f555
   2793  f555		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   2794  f557		       29 04		      AND	#4
   2795  f559		       f0 03		      BEQ	.skipL0162
   2796  f55b				   .condpart7
   2797  f55b		       4c d0 f5 	      jmp	.__Skip_Jump
   2798  f55e
   2799  f55e				   .skipL0162
   2800  f55e				   .
   2801  f55e							; 
   2802  f55e
   2803  f55e				   .
   2804  f55e							; 
   2805  f55e
   2806  f55e				   .
   2807  f55e							; 
   2808  f55e
   2809  f55e				   .
   2810  f55e							; 
   2811  f55e
   2812  f55e				   .
   2813  f55e							; 
   2814  f55e
   2815  f55e				   .
   2816  f55e							; 
   2817  f55e
   2818  f55e				   .L0163		;  if _Bit3_FireB_Restrainer{3}  &&  !_Bit2_Fall_in_Progress{2}  &&  !_Jump_Gravity_Counter then goto __Skip_Jump
   2819  f55e
   2820  f55e		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2821  f560		       29 08		      AND	#8
   2822  f562		       f0 0d		      BEQ	.skipL0163
   2823  f564				   .condpart8
   2824  f564		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   2825  f566		       29 04		      AND	#4
   2826  f568		       d0 07		      BNE	.skip8then
   2827  f56a				   .condpart9
   2828  f56a		       a5 d5		      LDA	_Jump_Gravity_Counter
   2829  f56c		       d0 03		      BNE	.skip9then
   2830  f56e				   .condpart10
   2831  f56e		       4c d0 f5 	      jmp	.__Skip_Jump
   2832  f571
   2833  f571				   .skip9then
   2834  f571				   .skip8then
   2835  f571				   .skipL0163
   2836  f571				   .
   2837  f571							; 
   2838  f571
   2839  f571				   .
   2840  f571							; 
   2841  f571
   2842  f571				   .
   2843  f571							; 
   2844  f571
   2845  f571				   .
   2846  f571							; 
   2847  f571
   2848  f571				   .L0164		;  if !_Jump_Gravity_Counter then _Ch0_Sound  =  _c_Jump_Sound  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2849  f571
   2850  f571		       a5 d5		      LDA	_Jump_Gravity_Counter
   2851  f573		       d0 0c		      BNE	.skipL0164
   2852  f575				   .condpart11
   2853  f575		       a9 01		      LDA	#_c_Jump_Sound
   2854  f577		       85 d9		      STA	_Ch0_Sound
   2855  f579		       a9 01		      LDA	#1
   2856  f57b		       85 da		      STA	_Ch0_Duration
   2857  f57d		       a9 00		      LDA	#0
   2858  f57f		       85 db		      STA	_Ch0_Counter
   2859  f581				   .skipL0164
   2860  f581				   .
   2861  f581							; 
   2862  f581
   2863  f581				   .
   2864  f581							; 
   2865  f581
   2866  f581				   .
   2867  f581							; 
   2868  f581
   2869  f581				   .
   2870  f581							; 
   2871  f581
   2872  f581				   .L0165		;  _Bit3_FireB_Restrainer{3}  =  1
   2873  f581
   2874  f581		       a5 ec		      LDA	_Bit3_FireB_Restrainer
   2875  f583		       09 08		      ORA	#8
   2876  f585		       85 ec		      STA	_Bit3_FireB_Restrainer
   2877  f587				   .
   2878  f587							; 
   2879  f587
   2880  f587				   .
   2881  f587							; 
   2882  f587
   2883  f587				   .
   2884  f587							; 
   2885  f587
   2886  f587				   .
   2887  f587							; 
   2888  f587
   2889  f587				   .L0166		;  _Jump_Gravity_Counter  =  _Jump_Gravity_Counter  +	1
   2890  f587
   2891  f587		       e6 d5		      INC	_Jump_Gravity_Counter
   2892  f589				   .
   2893  f589							; 
   2894  f589
   2895  f589				   .
   2896  f589							; 
   2897  f589
   2898  f589				   .
   2899  f589							; 
   2900  f589
   2901  f589				   .
   2902  f589							; 
   2903  f589
   2904  f589				   .
   2905  f589							; 
   2906  f589
   2907  f589				   .L0167		;  if _Jump_Gravity_Counter  >  12 then _Jump_Gravity_Counter	=  0  :  _Bit2_Fall_in_Progress{2}  =  1  :  goto __Skip_Jump
   2908  f589
   2909  f589		       a9 0c		      LDA	#12
   2910  f58b		       c5 d5		      CMP	_Jump_Gravity_Counter
   2911  f58d		       b0 0d		      BCS	.skipL0167
   2912  f58f				   .condpart12
   2913  f58f		       a9 00		      LDA	#0
   2914  f591		       85 d5		      STA	_Jump_Gravity_Counter
   2915  f593		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   2916  f595		       09 04		      ORA	#4
   2917  f597		       85 ec		      STA	_Bit2_Fall_in_Progress
   2918  f599		       4c d0 f5 	      jmp	.__Skip_Jump
   2919  f59c
   2920  f59c				   .skipL0167
   2921  f59c				   .
   2922  f59c							; 
   2923  f59c
   2924  f59c				   .
   2925  f59c							; 
   2926  f59c
   2927  f59c				   .
   2928  f59c							; 
   2929  f59c
   2930  f59c				   .
   2931  f59c							; 
   2932  f59c
   2933  f59c				   .
   2934  f59c							; 
   2935  f59c
   2936  f59c				   .
   2937  f59c							; 
   2938  f59c
   2939  f59c				   .L0168		;  if player1y  <  13 then goto __Skip_Jump
   2940  f59c
   2941  f59c		       a5 86		      LDA	player1y
   2942  f59e		       c9 0d		      CMP	#13
   2943  f5a0		       b0 03		      BCS	.skipL0168
   2944  f5a2				   .condpart13
   2945  f5a2		       4c d0 f5 	      jmp	.__Skip_Jump
   2946  f5a5
   2947  f5a5				   .skipL0168
   2948  f5a5				   .
   2949  f5a5							; 
   2950  f5a5
   2951  f5a5				   .
   2952  f5a5							; 
   2953  f5a5
   2954  f5a5				   .
   2955  f5a5							; 
   2956  f5a5
   2957  f5a5				   .
   2958  f5a5							; 
   2959  f5a5
   2960  f5a5				   .
   2961  f5a5							; 
   2962  f5a5
   2963  f5a5				   .L0169		;  if _Jump_Gravity_Counter  <=  7 then temp6	=  3
   2964  f5a5
   2965  f5a5		       a9 07		      LDA	#7
   2966  f5a7		       c5 d5		      CMP	_Jump_Gravity_Counter
   2967  f5a9		       90 04		      BCC	.skipL0169
   2968  f5ab				   .condpart14
   2969  f5ab		       a9 03		      LDA	#3
   2970  f5ad		       85 a1		      STA	temp6
   2971  f5af				   .skipL0169
   2972  f5af				   .L0170		;  if _Jump_Gravity_Counter  >  7  &&	_Jump_Gravity_Counter  <=  10 then temp6  =  2
   2973  f5af
   2974  f5af		       a9 07		      LDA	#7
   2975  f5b1		       c5 d5		      CMP	_Jump_Gravity_Counter
   2976  f5b3		       b0 0a		      BCS	.skipL0170
   2977  f5b5				   .condpart15
   2978  f5b5		       a9 0a		      LDA	#10
   2979  f5b7		       c5 d5		      CMP	_Jump_Gravity_Counter
   2980  f5b9		       90 04		      BCC	.skip15then
   2981  f5bb				   .condpart16
   2982  f5bb		       a9 02		      LDA	#2
   2983  f5bd		       85 a1		      STA	temp6
   2984  f5bf				   .skip15then
   2985  f5bf				   .skipL0170
   2986  f5bf				   .L0171		;  if _Jump_Gravity_Counter  >  10 then temp6	=  1
   2987  f5bf
   2988  f5bf		       a9 0a		      LDA	#10
   2989  f5c1		       c5 d5		      CMP	_Jump_Gravity_Counter
   2990  f5c3		       b0 04		      BCS	.skipL0171
   2991  f5c5				   .condpart17
   2992  f5c5		       a9 01		      LDA	#1
   2993  f5c7		       85 a1		      STA	temp6
   2994  f5c9				   .skipL0171
   2995  f5c9				   .
   2996  f5c9							; 
   2997  f5c9
   2998  f5c9				   .
   2999  f5c9							; 
   3000  f5c9
   3001  f5c9				   .
   3002  f5c9							; 
   3003  f5c9
   3004  f5c9				   .
   3005  f5c9							; 
   3006  f5c9
   3007  f5c9				   .L0172		;  player1y  =  player1y  -  temp6
   3008  f5c9
   3009  f5c9		       a5 86		      LDA	player1y
   3010  f5cb		       38		      SEC
   3011  f5cc		       e5 a1		      SBC	temp6
   3012  f5ce		       85 86		      STA	player1y
   3013  f5d0				   .
   3014  f5d0							; 
   3015  f5d0
   3016  f5d0				   .__Skip_Jump
   3017  f5d0							; __Skip_Jump
   3018  f5d0
   3019  f5d0				   .
   3020  f5d0							; 
   3021  f5d0
   3022  f5d0				   .
   3023  f5d0							; 
   3024  f5d0
   3025  f5d0				   .
   3026  f5d0							; 
   3027  f5d0
   3028  f5d0				   .
   3029  f5d0							; 
   3030  f5d0
   3031  f5d0				   .
   3032  f5d0							; 
   3033  f5d0
   3034  f5d0				   .
   3035  f5d0							; 
   3036  f5d0
   3037  f5d0				   .
   3038  f5d0							; 
   3039  f5d0
   3040  f5d0				   .
   3041  f5d0							; 
   3042  f5d0
   3043  f5d0				   .
   3044  f5d0							; 
   3045  f5d0
   3046  f5d0				   .
   3047  f5d0							; 
   3048  f5d0
   3049  f5d0				   .L0173		;  if _Jump_Gravity_Counter then goto __Skip_Fall_01
   3050  f5d0
   3051  f5d0		       a5 d5		      LDA	_Jump_Gravity_Counter
   3052  f5d2		       f0 03		      BEQ	.skipL0173
   3053  f5d4				   .condpart18
   3054  f5d4		       4c 56 f6 	      jmp	.__Skip_Fall_01
   3055  f5d7
   3056  f5d7				   .skipL0173
   3057  f5d7				   .
   3058  f5d7							; 
   3059  f5d7
   3060  f5d7				   .
   3061  f5d7							; 
   3062  f5d7
   3063  f5d7				   .
   3064  f5d7							; 
   3065  f5d7
   3066  f5d7				   .
   3067  f5d7							; 
   3068  f5d7
   3069  f5d7				   .L0174		;  if player1y  >=  79 then player1y  =  80  :  goto __Skip_Fall_01
   3070  f5d7
   3071  f5d7		       a5 86		      LDA	player1y
   3072  f5d9		       c9 4f		      CMP	#79
   3073  f5db		       90 07		      BCC	.skipL0174
   3074  f5dd				   .condpart19
   3075  f5dd		       a9 50		      LDA	#80
   3076  f5df		       85 86		      STA	player1y
   3077  f5e1		       4c 56 f6 	      jmp	.__Skip_Fall_01
   3078  f5e4
   3079  f5e4				   .skipL0174
   3080  f5e4				   .
   3081  f5e4							; 
   3082  f5e4
   3083  f5e4				   .
   3084  f5e4							; 
   3085  f5e4
   3086  f5e4				   .
   3087  f5e4							; 
   3088  f5e4
   3089  f5e4				   .
   3090  f5e4							; 
   3091  f5e4
   3092  f5e4				   .L0175		;  player1:
   3093  f5e4
   3094  f5e4		       a2 28		      LDX	#<playerL0175_1
   3095  f5e6		       86 8c		      STX	player1pointerlo
   3096  f5e8		       a9 f8		      LDA	#>playerL0175_1
   3097  f5ea		       85 8d		      STA	player1pointerhi
   3098  f5ec		       a9 09		      LDA	#9
   3099  f5ee		       85 8f		      STA	player1height
   3100  f5f0				   .
   3101  f5f0							; 
   3102  f5f0
   3103  f5f0				   .
   3104  f5f0							; 
   3105  f5f0
   3106  f5f0				   .
   3107  f5f0							; 
   3108  f5f0
   3109  f5f0				   .
   3110  f5f0							; 
   3111  f5f0
   3112  f5f0				   .L0176		;  if !joy0left  &&  !joy0right then player1:
   3113  f5f0
   3114  f5f0		       2c 80 02 	      bit	SWCHA
   3115  f5f3		       50 11		      BVC	.skipL0176
   3116  f5f5				   .condpart20
   3117  f5f5		       2c 80 02 	      bit	SWCHA
   3118  f5f8		       10 0c		      BPL	.skip20then
   3119  f5fa				   .condpart21
   3120  f5fa		       a2 32		      LDX	#<player21then_1
   3121  f5fc		       86 8c		      STX	player1pointerlo
   3122  f5fe		       a9 f8		      LDA	#>player21then_1
   3123  f600		       85 8d		      STA	player1pointerhi
   3124  f602		       a9 09		      LDA	#9
   3125  f604		       85 8f		      STA	player1height
   3126  f606				   .skip20then
   3127  f606				   .skipL0176
   3128  f606				   .
   3129  f606							; 
   3130  f606
   3131  f606				   .
   3132  f606							; 
   3133  f606
   3134  f606				   .
   3135  f606							; 
   3136  f606
   3137  f606				   .
   3138  f606							; 
   3139  f606
   3140  f606				   .L0177		;  _Fall_Gravity_Counter  =  _Fall_Gravity_Counter  +	1
   3141  f606
   3142  f606		       e6 d6		      INC	_Fall_Gravity_Counter
   3143  f608				   .
   3144  f608							; 
   3145  f608
   3146  f608				   .
   3147  f608							; 
   3148  f608
   3149  f608				   .
   3150  f608							; 
   3151  f608
   3152  f608				   .
   3153  f608							; 
   3154  f608
   3155  f608				   .L0178		;  temp6  =  0
   3156  f608
   3157  f608		       a9 00		      LDA	#0
   3158  f60a		       85 a1		      STA	temp6
   3159  f60c				   .L0179		;  if _Fall_Gravity_Counter  >  8  &&	_Jump_Gravity_Counter  <=  16 then temp6  =  1
   3160  f60c
   3161  f60c		       a9 08		      LDA	#8
   3162  f60e		       c5 d6		      CMP	_Fall_Gravity_Counter
   3163  f610		       b0 0a		      BCS	.skipL0179
   3164  f612				   .condpart22
   3165  f612		       a9 10		      LDA	#16
   3166  f614		       c5 d5		      CMP	_Jump_Gravity_Counter
   3167  f616		       90 04		      BCC	.skip22then
   3168  f618				   .condpart23
   3169  f618		       a9 01		      LDA	#1
   3170  f61a		       85 a1		      STA	temp6
   3171  f61c				   .skip22then
   3172  f61c				   .skipL0179
   3173  f61c				   .L0180		;  if _Fall_Gravity_Counter  >  16  &&  _Jump_Gravity_Counter	<=  24 then temp6  =  2
   3174  f61c
   3175  f61c		       a9 10		      LDA	#16
   3176  f61e		       c5 d6		      CMP	_Fall_Gravity_Counter
   3177  f620		       b0 0a		      BCS	.skipL0180
   3178  f622				   .condpart24
   3179  f622		       a9 18		      LDA	#24
   3180  f624		       c5 d5		      CMP	_Jump_Gravity_Counter
   3181  f626		       90 04		      BCC	.skip24then
   3182  f628				   .condpart25
   3183  f628		       a9 02		      LDA	#2
   3184  f62a		       85 a1		      STA	temp6
   3185  f62c				   .skip24then
   3186  f62c				   .skipL0180
   3187  f62c				   .L0181		;  if _Fall_Gravity_Counter  >  24  &&  _Jump_Gravity_Counter	<=  32 then temp6  =  3
   3188  f62c
   3189  f62c		       a9 18		      LDA	#24
   3190  f62e		       c5 d6		      CMP	_Fall_Gravity_Counter
   3191  f630		       b0 0a		      BCS	.skipL0181
   3192  f632				   .condpart26
   3193  f632		       a9 20		      LDA	#32
   3194  f634		       c5 d5		      CMP	_Jump_Gravity_Counter
   3195  f636		       90 04		      BCC	.skip26then
   3196  f638				   .condpart27
   3197  f638		       a9 03		      LDA	#3
   3198  f63a		       85 a1		      STA	temp6
   3199  f63c				   .skip26then
   3200  f63c				   .skipL0181
   3201  f63c				   .L0182		;  if _Fall_Gravity_Counter  >  32 then temp6	=  4
   3202  f63c
   3203  f63c		       a9 20		      LDA	#32
   3204  f63e		       c5 d6		      CMP	_Fall_Gravity_Counter
   3205  f640		       b0 04		      BCS	.skipL0182
   3206  f642				   .condpart28
   3207  f642		       a9 04		      LDA	#4
   3208  f644		       85 a1		      STA	temp6
   3209  f646				   .skipL0182
   3210  f646				   .
   3211  f646							; 
   3212  f646
   3213  f646				   .
   3214  f646							; 
   3215  f646
   3216  f646				   .
   3217  f646							; 
   3218  f646
   3219  f646				   .
   3220  f646							; 
   3221  f646
   3222  f646				   .L0183		;  player1y  =  player1y  +  temp6
   3223  f646
   3224  f646		       a5 86		      LDA	player1y
   3225  f648		       18		      CLC
   3226  f649		       65 a1		      ADC	temp6
   3227  f64b		       85 86		      STA	player1y
   3228  f64d				   .
   3229  f64d							; 
   3230  f64d
   3231  f64d				   .
   3232  f64d							; 
   3233  f64d
   3234  f64d				   .
   3235  f64d							; 
   3236  f64d
   3237  f64d				   .
   3238  f64d							; 
   3239  f64d
   3240  f64d				   .L0184		;  _Bit2_Fall_in_Progress{2}  =  1
   3241  f64d
   3242  f64d		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   3243  f64f		       09 04		      ORA	#4
   3244  f651		       85 ec		      STA	_Bit2_Fall_in_Progress
   3245  f653				   .
   3246  f653							; 
   3247  f653
   3248  f653				   .L0185		;  goto __Skip_Fall_02
   3249  f653
   3250  f653		       4c 60 f6 	      jmp	.__Skip_Fall_02
   3251  f656
   3252  f656				   .
   3253  f656							; 
   3254  f656
   3255  f656				   .__Skip_Fall_01
   3256  f656							; __Skip_Fall_01
   3257  f656
   3258  f656				   .
   3259  f656							; 
   3260  f656
   3261  f656				   .
   3262  f656							; 
   3263  f656
   3264  f656				   .
   3265  f656							; 
   3266  f656
   3267  f656				   .
   3268  f656							; 
   3269  f656
   3270  f656				   .L0186		;  _Bit2_Fall_in_Progress{2}  =  0  :	_Fall_Gravity_Counter  =  0
   3271  f656
   3272  f656		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   3273  f658		       29 fb		      AND	#251
   3274  f65a		       85 ec		      STA	_Bit2_Fall_in_Progress
   3275  f65c		       a9 00		      LDA	#0
   3276  f65e		       85 d6		      STA	_Fall_Gravity_Counter
   3277  f660				   .
   3278  f660							; 
   3279  f660
   3280  f660				   .__Skip_Fall_02
   3281  f660							; __Skip_Fall_02
   3282  f660
   3283  f660				   .
   3284  f660							; 
   3285  f660
   3286  f660				   .
   3287  f660							; 
   3288  f660
   3289  f660				   .
   3290  f660							; 
   3291  f660
   3292  f660				   .
   3293  f660							; 
   3294  f660
   3295  f660				   .
   3296  f660							; 
   3297  f660
   3298  f660				   .
   3299  f660							; 
   3300  f660
   3301  f660				   .
   3302  f660							; 
   3303  f660
   3304  f660				   .L0187		;  _Bit5_LR_Joy_Movement{5}  =  0
   3305  f660
   3306  f660		       a5 ec		      LDA	_Bit5_LR_Joy_Movement
   3307  f662		       29 df		      AND	#223
   3308  f664		       85 ec		      STA	_Bit5_LR_Joy_Movement
   3309  f666				   .
   3310  f666							; 
   3311  f666
   3312  f666				   .
   3313  f666							; 
   3314  f666
   3315  f666				   .
   3316  f666							; 
   3317  f666
   3318  f666				   .
   3319  f666							; 
   3320  f666
   3321  f666				   .
   3322  f666							; 
   3323  f666
   3324  f666				   .
   3325  f666							; 
   3326  f666
   3327  f666				   .
   3328  f666							; 
   3329  f666
   3330  f666				   .
   3331  f666							; 
   3332  f666
   3333  f666				   .
   3334  f666							; 
   3335  f666
   3336  f666				   .
   3337  f666							; 
   3338  f666
   3339  f666				   .L0188		;  if !joy0left then goto __Skip_Joy0Left
   3340  f666
   3341  f666		       2c 80 02 	      bit	SWCHA
   3342  f669		       50 03		      BVC	.skipL0188
   3343  f66b				   .condpart29
   3344  f66b		       4c 8d f6 	      jmp	.__Skip_Joy0Left
   3345  f66e
   3346  f66e				   .skipL0188
   3347  f66e				   .
   3348  f66e							; 
   3349  f66e
   3350  f66e				   .
   3351  f66e							; 
   3352  f66e
   3353  f66e				   .
   3354  f66e							; 
   3355  f66e
   3356  f66e				   .
   3357  f66e							; 
   3358  f66e
   3359  f66e				   .L0189		;  _Bit5_LR_Joy_Movement{5}  =  1
   3360  f66e
   3361  f66e		       a5 ec		      LDA	_Bit5_LR_Joy_Movement
   3362  f670		       09 20		      ORA	#32
   3363  f672		       85 ec		      STA	_Bit5_LR_Joy_Movement
   3364  f674				   .
   3365  f674							; 
   3366  f674
   3367  f674				   .
   3368  f674							; 
   3369  f674
   3370  f674				   .
   3371  f674							; 
   3372  f674
   3373  f674				   .
   3374  f674							; 
   3375  f674
   3376  f674				   .L0190		;  if player1x  >  17 then _P1_Left_Right  =  _P1_Left_Right  -  1.38
   3377  f674
   3378  f674		       a9 11		      LDA	#17
   3379  f676		       c5 81		      CMP	player1x
   3380  f678		       b0 0d		      BCS	.skipL0190
   3381  f67a				   .condpart30
   3382  f67a		       a5 d4		      LDA	a
   3383  f67c		       38		      SEC
   3384  f67d		       e9 61		      SBC	#97
   3385  f67f		       85 d4		      STA	a
   3386  f681		       a5 81		      LDA	_P1_Left_Right
   3387  f683		       e9 01		      SBC	#1
   3388  f685		       85 81		      STA	_P1_Left_Right
   3389  f687				   .skipL0190
   3390  f687				   .
   3391  f687							; 
   3392  f687
   3393  f687				   .
   3394  f687							; 
   3395  f687
   3396  f687				   .
   3397  f687							; 
   3398  f687
   3399  f687				   .
   3400  f687							; 
   3401  f687
   3402  f687				   .L0191		;  _Bit4_Flip_P1{4}  =  0
   3403  f687
   3404  f687		       a5 ec		      LDA	_Bit4_Flip_P1
   3405  f689		       29 ef		      AND	#239
   3406  f68b		       85 ec		      STA	_Bit4_Flip_P1
   3407  f68d				   .
   3408  f68d							; 
   3409  f68d
   3410  f68d				   .__Skip_Joy0Left
   3411  f68d							; __Skip_Joy0Left
   3412  f68d
   3413  f68d				   .
   3414  f68d							; 
   3415  f68d
   3416  f68d				   .
   3417  f68d							; 
   3418  f68d
   3419  f68d				   .
   3420  f68d							; 
   3421  f68d
   3422  f68d				   .
   3423  f68d							; 
   3424  f68d
   3425  f68d				   .
   3426  f68d							; 
   3427  f68d
   3428  f68d				   .
   3429  f68d							; 
   3430  f68d
   3431  f68d				   .
   3432  f68d							; 
   3433  f68d
   3434  f68d				   .
   3435  f68d							; 
   3436  f68d
   3437  f68d				   .
   3438  f68d							; 
   3439  f68d
   3440  f68d				   .
   3441  f68d							; 
   3442  f68d
   3443  f68d				   .L0192		;  if !joy0right then goto __Skip_Joy0Right
   3444  f68d
   3445  f68d		       2c 80 02 	      bit	SWCHA
   3446  f690		       10 03		      BPL	.skipL0192
   3447  f692				   .condpart31
   3448  f692		       4c b4 f6 	      jmp	.__Skip_Joy0Right
   3449  f695
   3450  f695				   .skipL0192
   3451  f695				   .
   3452  f695							; 
   3453  f695
   3454  f695				   .
   3455  f695							; 
   3456  f695
   3457  f695				   .
   3458  f695							; 
   3459  f695
   3460  f695				   .
   3461  f695							; 
   3462  f695
   3463  f695				   .L0193		;  _Bit5_LR_Joy_Movement{5}  =  1
   3464  f695
   3465  f695		       a5 ec		      LDA	_Bit5_LR_Joy_Movement
   3466  f697		       09 20		      ORA	#32
   3467  f699		       85 ec		      STA	_Bit5_LR_Joy_Movement
   3468  f69b				   .
   3469  f69b							; 
   3470  f69b
   3471  f69b				   .
   3472  f69b							; 
   3473  f69b
   3474  f69b				   .
   3475  f69b							; 
   3476  f69b
   3477  f69b				   .
   3478  f69b							; 
   3479  f69b
   3480  f69b				   .L0194		;  if player1x  <  137 then _P1_Left_Right  =	_P1_Left_Right	+  1.38
   3481  f69b
   3482  f69b		       a5 81		      LDA	player1x
   3483  f69d		       c9 89		      CMP	#137
   3484  f69f		       b0 0d		      BCS	.skipL0194
   3485  f6a1				   .condpart32
   3486  f6a1		       a5 d4		      LDA	a
   3487  f6a3		       18		      CLC
   3488  f6a4		       69 61		      ADC	#97
   3489  f6a6		       85 d4		      STA	a
   3490  f6a8		       a5 81		      LDA	_P1_Left_Right
   3491  f6aa		       69 01		      ADC	#1
   3492  f6ac		       85 81		      STA	_P1_Left_Right
   3493  f6ae				   .skipL0194
   3494  f6ae				   .
   3495  f6ae							; 
   3496  f6ae
   3497  f6ae				   .
   3498  f6ae							; 
   3499  f6ae
   3500  f6ae				   .
   3501  f6ae							; 
   3502  f6ae
   3503  f6ae				   .
   3504  f6ae							; 
   3505  f6ae
   3506  f6ae				   .L0195		;  _Bit4_Flip_P1{4}  =  1
   3507  f6ae
   3508  f6ae		       a5 ec		      LDA	_Bit4_Flip_P1
   3509  f6b0		       09 10		      ORA	#16
   3510  f6b2		       85 ec		      STA	_Bit4_Flip_P1
   3511  f6b4				   .
   3512  f6b4							; 
   3513  f6b4
   3514  f6b4				   .__Skip_Joy0Right
   3515  f6b4							; __Skip_Joy0Right
   3516  f6b4
   3517  f6b4				   .
   3518  f6b4							; 
   3519  f6b4
   3520  f6b4				   .
   3521  f6b4							; 
   3522  f6b4
   3523  f6b4				   .
   3524  f6b4							; 
   3525  f6b4
   3526  f6b4				   .
   3527  f6b4							; 
   3528  f6b4
   3529  f6b4				   .
   3530  f6b4							; 
   3531  f6b4
   3532  f6b4				   .
   3533  f6b4							; 
   3534  f6b4
   3535  f6b4				   .
   3536  f6b4							; 
   3537  f6b4
   3538  f6b4				   .
   3539  f6b4							; 
   3540  f6b4
   3541  f6b4				   .
   3542  f6b4							; 
   3543  f6b4
   3544  f6b4				   .
   3545  f6b4							; 
   3546  f6b4
   3547  f6b4				   .L0196		;  if !_Bit5_LR_Joy_Movement{5} then goto __Done_Anim_jump
   3548  f6b4
   3549  f6b4		       a5 ec		      LDA	_Bit5_LR_Joy_Movement
   3550  f6b6		       29 20		      AND	#32
   3551  f6b8		       d0 03		      BNE	.skipL0196
   3552  f6ba				   .condpart33
   3553  f6ba		       4c fa f6 	      jmp	.__Done_Anim_jump
   3554  f6bd
   3555  f6bd				   .skipL0196
   3556  f6bd				   .
   3557  f6bd							; 
   3558  f6bd
   3559  f6bd				   .
   3560  f6bd							; 
   3561  f6bd
   3562  f6bd				   .
   3563  f6bd							; 
   3564  f6bd
   3565  f6bd				   .
   3566  f6bd							; 
   3567  f6bd
   3568  f6bd				   .L0197		;  if _Jump_Gravity_Counter  ||  _Bit2_Fall_in_Progress{2} then goto __Done_Anim_jump
   3569  f6bd
   3570  f6bd		       a5 d5		      LDA	_Jump_Gravity_Counter
   3571  f6bf		       f0 03		      BEQ	.skipL0197
   3572  f6c1				   .condpart34
   3573  f6c1		       4c ca f6 	      jmp	.condpart35
   3574  f6c4				   .skipL0197
   3575  f6c4		       a5 ec		      LDA	_Bit2_Fall_in_Progress
   3576  f6c6		       29 04		      AND	#4
   3577  f6c8		       f0 03		      BEQ	.skip9OR
   3578  f6ca				   .condpart35
   3579  f6ca		       4c fa f6 	      jmp	.__Done_Anim_jump
   3580  f6cd
   3581  f6cd				   .skip9OR
   3582  f6cd				   .
   3583  f6cd							; 
   3584  f6cd
   3585  f6cd				   .
   3586  f6cd							; 
   3587  f6cd
   3588  f6cd				   .
   3589  f6cd							; 
   3590  f6cd
   3591  f6cd				   .
   3592  f6cd							; 
   3593  f6cd
   3594  f6cd				   .L0198		;  if player1x  <  18	||  player1x  >  136 then goto __Done_Anim_jump
   3595  f6cd
   3596  f6cd		       a5 81		      LDA	player1x
   3597  f6cf		       c9 12		      CMP	#18
   3598  f6d1		       b0 03		      BCS	.skipL0198
   3599  f6d3				   .condpart36
   3600  f6d3		       4c dc f6 	      jmp	.condpart37
   3601  f6d6				   .skipL0198
   3602  f6d6		       a9 88		      LDA	#136
   3603  f6d8		       c5 81		      CMP	player1x
   3604  f6da		       b0 03		      BCS	.skip10OR
   3605  f6dc				   .condpart37
   3606  f6dc		       4c fa f6 	      jmp	.__Done_Anim_jump
   3607  f6df
   3608  f6df				   .skip10OR
   3609  f6df				   .
   3610  f6df							; 
   3611  f6df
   3612  f6df				   .
   3613  f6df							; 
   3614  f6df
   3615  f6df				   .
   3616  f6df							; 
   3617  f6df
   3618  f6df				   .
   3619  f6df							; 
   3620  f6df
   3621  f6df				   .L0199		;  player1color:
   3622  f6df
   3623  f6df		       a2 3c		      LDX	#<playercolorL0199_1
   3624  f6e1		       86 87		      STX	player1color
   3625  f6e3		       a9 f8		      LDA	#>playercolorL0199_1
   3626  f6e5		       85 88		      STA	player1color+1
   3627  f6e7				   .
   3628  f6e7							; 
   3629  f6e7
   3630  f6e7				   .
   3631  f6e7							; 
   3632  f6e7
   3633  f6e7				   .
   3634  f6e7							; 
   3635  f6e7
   3636  f6e7				   .
   3637  f6e7							; 
   3638  f6e7
   3639  f6e7				   .L0200		;  on _Frame_Counter goto __Frame0 __Frame1 __Frame0 __Frame2
   3640  f6e7
   3641  f6e7		       a6 d8		      LDX	_Frame_Counter
   3642  f6e9		       bd f2 f6 	      LDA	.L0200jumptablehi,x
   3643  f6ec		       48		      PHA
   3644  f6ed		       bd f6 f6 	      LDA	.L0200jumptablelo,x
   3645  f6f0		       48		      PHA
   3646  f6f1		       60		      RTS
   3647  f6f2				   .L0200jumptablehi
   3648  f6f2		       f7		      .byte.b	>(.__Frame0-1)
   3649  f6f3		       f7		      .byte.b	>(.__Frame1-1)
   3650  f6f4		       f7		      .byte.b	>(.__Frame0-1)
   3651  f6f5		       f7		      .byte.b	>(.__Frame2-1)
   3652  f6f6				   .L0200jumptablelo
   3653  f6f6		       d2		      .byte.b	<(.__Frame0-1)
   3654  f6f7		       e1		      .byte.b	<(.__Frame1-1)
   3655  f6f8		       d2		      .byte.b	<(.__Frame0-1)
   3656  f6f9		       f0		      .byte.b	<(.__Frame2-1)
   3657  f6fa				   .
   3658  f6fa							; 
   3659  f6fa
   3660  f6fa				   .__Done_Anim_jump
   3661  f6fa							; __Done_Anim_jump
   3662  f6fa
   3663  f6fa				   .
   3664  f6fa							; 
   3665  f6fa
   3666  f6fa				   .
   3667  f6fa							; 
   3668  f6fa
   3669  f6fa				   .
   3670  f6fa							; 
   3671  f6fa
   3672  f6fa				   .
   3673  f6fa							; 
   3674  f6fa
   3675  f6fa				   .
   3676  f6fa							; 
   3677  f6fa
   3678  f6fa				   .
   3679  f6fa							; 
   3680  f6fa
   3681  f6fa				   .
   3682  f6fa							; 
   3683  f6fa
   3684  f6fa				   .L0201		;  if _Bit4_Flip_P1{4} then REFP1  =  8
   3685  f6fa
   3686  f6fa		       a5 ec		      LDA	_Bit4_Flip_P1
   3687  f6fc		       29 10		      AND	#16
   3688  f6fe		       f0 04		      BEQ	.skipL0201
   3689  f700				   .condpart38
   3690  f700		       a9 08		      LDA	#8
   3691  f702		       85 0c		      STA	REFP1
   3692  f704				   .skipL0201
   3693  f704				   .
   3694  f704							; 
   3695  f704
   3696  f704				   .
   3697  f704							; 
   3698  f704
   3699  f704				   .
   3700  f704							; 
   3701  f704
   3702  f704				   .
   3703  f704							; 
   3704  f704
   3705  f704				   .
   3706  f704							; 
   3707  f704
   3708  f704				   .
   3709  f704							; 
   3710  f704
   3711  f704				   .
   3712  f704							; 
   3713  f704
   3714  f704				   .
   3715  f704							; 
   3716  f704
   3717  f704				   .
   3718  f704							; 
   3719  f704
   3720  f704				   .
   3721  f704							; 
   3722  f704
   3723  f704				   .L0202		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3724  f704
   3725  f704		       a5 d9		      LDA	_Ch0_Sound
   3726  f706		       d0 03		      BNE	.skipL0202
   3727  f708				   .condpart39
   3728  f708		       4c 62 f7 	      jmp	.__Skip_Ch_0
   3729  f70b
   3730  f70b				   .skipL0202
   3731  f70b				   .
   3732  f70b							; 
   3733  f70b
   3734  f70b				   .
   3735  f70b							; 
   3736  f70b
   3737  f70b				   .
   3738  f70b							; 
   3739  f70b
   3740  f70b				   .
   3741  f70b							; 
   3742  f70b
   3743  f70b				   .L0203		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3744  f70b
   3745  f70b		       c6 da		      DEC	_Ch0_Duration
   3746  f70d				   .
   3747  f70d							; 
   3748  f70d
   3749  f70d				   .
   3750  f70d							; 
   3751  f70d
   3752  f70d				   .
   3753  f70d							; 
   3754  f70d
   3755  f70d				   .
   3756  f70d							; 
   3757  f70d
   3758  f70d				   .
   3759  f70d							; 
   3760  f70d
   3761  f70d				   .L0204		;  if _Ch0_Duration then goto __Skip_Ch_0
   3762  f70d
   3763  f70d		       a5 da		      LDA	_Ch0_Duration
   3764  f70f		       f0 03		      BEQ	.skipL0204
   3765  f711				   .condpart40
   3766  f711		       4c 62 f7 	      jmp	.__Skip_Ch_0
   3767  f714
   3768  f714				   .skipL0204
   3769  f714				   .
   3770  f714							; 
   3771  f714
   3772  f714				   .
   3773  f714							; 
   3774  f714
   3775  f714				   .
   3776  f714							; 
   3777  f714
   3778  f714				   .
   3779  f714							; 
   3780  f714
   3781  f714				   .
   3782  f714							; 
   3783  f714
   3784  f714				   .
   3785  f714							; 
   3786  f714
   3787  f714				   .
   3788  f714							; 
   3789  f714
   3790  f714				   .
   3791  f714							; 
   3792  f714
   3793  f714				   .
   3794  f714							; 
   3795  f714
   3796  f714				   .
   3797  f714							; 
   3798  f714
   3799  f714				   .
   3800  f714							; 
   3801  f714
   3802  f714				   .
   3803  f714							; 
   3804  f714
   3805  f714				   .L0205		;  if _Ch0_Sound  <>  _c_Jump_Sound then goto __Skip_Ch0_Sound_001
   3806  f714
   3807  f714		       a5 d9		      LDA	_Ch0_Sound
   3808  f716		       c9 01		      CMP	#_c_Jump_Sound
   3809  f718		       f0 03		      BEQ	.skipL0205
   3810  f71a				   .condpart41
   3811  f71a		       4c 59 f7 	      jmp	.__Skip_Ch0_Sound_001
   3812  f71d
   3813  f71d				   .skipL0205
   3814  f71d				   .
   3815  f71d							; 
   3816  f71d
   3817  f71d				   .
   3818  f71d							; 
   3819  f71d
   3820  f71d				   .
   3821  f71d							; 
   3822  f71d
   3823  f71d				   .
   3824  f71d							; 
   3825  f71d
   3826  f71d				   .L0206		;  temp4  =  _SD_Jump[_Ch0_Counter]
   3827  f71d
   3828  f71d		       a6 db		      LDX	_Ch0_Counter
   3829  f71f		       bd 82 f7 	      LDA	_SD_Jump,x
   3830  f722		       85 9f		      STA	temp4
   3831  f724				   .
   3832  f724							; 
   3833  f724
   3834  f724				   .
   3835  f724							; 
   3836  f724
   3837  f724				   .
   3838  f724							; 
   3839  f724
   3840  f724				   .
   3841  f724							; 
   3842  f724
   3843  f724				   .L0207		;  if temp4  =  255 then goto __Clear_Ch_0
   3844  f724
   3845  f724		       a5 9f		      LDA	temp4
   3846  f726		       c9 ff		      CMP	#255
   3847  f728		       d0 03		      BNE	.skipL0207
   3848  f72a				   .condpart42
   3849  f72a		       4c 5c f7 	      jmp	.__Clear_Ch_0
   3850  f72d
   3851  f72d				   .skipL0207
   3852  f72d				   .
   3853  f72d							; 
   3854  f72d
   3855  f72d				   .
   3856  f72d							; 
   3857  f72d
   3858  f72d				   .
   3859  f72d							; 
   3860  f72d
   3861  f72d				   .
   3862  f72d							; 
   3863  f72d
   3864  f72d				   .L0208		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3865  f72d
   3866  f72d		       e6 db		      INC	_Ch0_Counter
   3867  f72f				   .L0209		;  temp5  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   3868  f72f
   3869  f72f		       a6 db		      LDX	_Ch0_Counter
   3870  f731		       bd 82 f7 	      LDA	_SD_Jump,x
   3871  f734		       85 a0		      STA	temp5
   3872  f736		       e6 db		      INC	_Ch0_Counter
   3873  f738				   .L0210		;  temp6  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   3874  f738
   3875  f738		       a6 db		      LDX	_Ch0_Counter
   3876  f73a		       bd 82 f7 	      LDA	_SD_Jump,x
   3877  f73d		       85 a1		      STA	temp6
   3878  f73f		       e6 db		      INC	_Ch0_Counter
   3879  f741				   .
   3880  f741							; 
   3881  f741
   3882  f741				   .
   3883  f741							; 
   3884  f741
   3885  f741				   .
   3886  f741							; 
   3887  f741
   3888  f741				   .
   3889  f741							; 
   3890  f741
   3891  f741				   .L0211		;  AUDV0  =  temp4
   3892  f741
   3893  f741		       a5 9f		      LDA	temp4
   3894  f743		       85 19		      STA	AUDV0
   3895  f745				   .L0212		;  AUDC0  =  temp5
   3896  f745
   3897  f745		       a5 a0		      LDA	temp5
   3898  f747		       85 15		      STA	AUDC0
   3899  f749				   .L0213		;  AUDF0  =  temp6
   3900  f749
   3901  f749		       a5 a1		      LDA	temp6
   3902  f74b		       85 17		      STA	AUDF0
   3903  f74d				   .
   3904  f74d							; 
   3905  f74d
   3906  f74d				   .
   3907  f74d							; 
   3908  f74d
   3909  f74d				   .
   3910  f74d							; 
   3911  f74d
   3912  f74d				   .
   3913  f74d							; 
   3914  f74d
   3915  f74d				   .L0214		;  _Ch0_Duration  =  _SD_Jump[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter	+  1
   3916  f74d
   3917  f74d		       a6 db		      LDX	_Ch0_Counter
   3918  f74f		       bd 82 f7 	      LDA	_SD_Jump,x
   3919  f752		       85 da		      STA	_Ch0_Duration
   3920  f754		       e6 db		      INC	_Ch0_Counter
   3921  f756				   .
   3922  f756							; 
   3923  f756
   3924  f756				   .
   3925  f756							; 
   3926  f756
   3927  f756				   .
   3928  f756							; 
   3929  f756
   3930  f756				   .
   3931  f756							; 
   3932  f756
   3933  f756				   .L0215		;  goto __Skip_Ch_0
   3934  f756
   3935  f756		       4c 62 f7 	      jmp	.__Skip_Ch_0
   3936  f759
   3937  f759				   .
   3938  f759							; 
   3939  f759
   3940  f759				   .__Skip_Ch0_Sound_001
   3941  f759							; __Skip_Ch0_Sound_001
   3942  f759
   3943  f759				   .
   3944  f759							; 
   3945  f759
   3946  f759				   .
   3947  f759							; 
   3948  f759
   3949  f759				   .
   3950  f759							; 
   3951  f759
   3952  f759				   .
   3953  f759							; 
   3954  f759
   3955  f759				   .
   3956  f759							; 
   3957  f759
   3958  f759				   .
   3959  f759							; 
   3960  f759
   3961  f759				   .
   3962  f759							; 
   3963  f759
   3964  f759				   .
   3965  f759							; 
   3966  f759
   3967  f759				   .
   3968  f759							; 
   3969  f759
   3970  f759				   .
   3971  f759							; 
   3972  f759
   3973  f759				   .
   3974  f759							; 
   3975  f759
   3976  f759				   .
   3977  f759							; 
   3978  f759
   3979  f759				   .
   3980  f759							; 
   3981  f759
   3982  f759				   .
   3983  f759							; 
   3984  f759
   3985  f759				   .
   3986  f759							; 
   3987  f759
   3988  f759				   .
   3989  f759							; 
   3990  f759
   3991  f759				   .
   3992  f759							; 
   3993  f759
   3994  f759				   .L0216		;  goto __Skip_Ch_0
   3995  f759
   3996  f759		       4c 62 f7 	      jmp	.__Skip_Ch_0
   3997  f75c
   3998  f75c				   .
   3999  f75c							; 
   4000  f75c
   4001  f75c				   .
   4002  f75c							; 
   4003  f75c
   4004  f75c				   .
   4005  f75c							; 
   4006  f75c
   4007  f75c				   .
   4008  f75c							; 
   4009  f75c
   4010  f75c				   .
   4011  f75c							; 
   4012  f75c
   4013  f75c				   .
   4014  f75c							; 
   4015  f75c
   4016  f75c				   .
   4017  f75c							; 
   4018  f75c
   4019  f75c				   .__Clear_Ch_0
   4020  f75c							; __Clear_Ch_0
   4021  f75c
   4022  f75c				   .
   4023  f75c							; 
   4024  f75c
   4025  f75c				   .L0217		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4026  f75c
   4027  f75c		       a9 00		      LDA	#0
   4028  f75e		       85 d9		      STA	_Ch0_Sound
   4029  f760		       85 19		      STA	AUDV0
   4030  f762				   .
   4031  f762							; 
   4032  f762
   4033  f762				   .
   4034  f762							; 
   4035  f762
   4036  f762				   .
   4037  f762							; 
   4038  f762
   4039  f762				   .
   4040  f762							; 
   4041  f762
   4042  f762				   .
   4043  f762							; 
   4044  f762
   4045  f762				   .
   4046  f762							; 
   4047  f762
   4048  f762				   .
   4049  f762							; 
   4050  f762
   4051  f762				   .__Skip_Ch_0
   4052  f762							; __Skip_Ch_0
   4053  f762
   4054  f762				   .
   4055  f762							; 
   4056  f762
   4057  f762				   .
   4058  f762							; 
   4059  f762
   4060  f762				   .
   4061  f762							; 
   4062  f762
   4063  f762				   .
   4064  f762							; 
   4065  f762
   4066  f762				   .
   4067  f762							; 
   4068  f762
   4069  f762				   .
   4070  f762							; 
   4071  f762
   4072  f762				   .
   4073  f762							; 
   4074  f762
   4075  f762				   .L0218		;  drawscreen
   4076  f762
   4077  f762		       20 ba f3 	      jsr	drawscreen
   4078  f765				   .
   4079  f765							; 
   4080  f765
   4081  f765				   .
   4082  f765							; 
   4083  f765
   4084  f765				   .
   4085  f765							; 
   4086  f765
   4087  f765				   .
   4088  f765							; 
   4089  f765
   4090  f765				   .
   4091  f765							; 
   4092  f765
   4093  f765				   .
   4094  f765							; 
   4095  f765
   4096  f765				   .
   4097  f765							; 
   4098  f765
   4099  f765				   .
   4100  f765							; 
   4101  f765
   4102  f765				   .
   4103  f765							; 
   4104  f765
   4105  f765				   .
   4106  f765							; 
   4107  f765
   4108  f765				   .
   4109  f765							; 
   4110  f765
   4111  f765				   .
   4112  f765							; 
   4113  f765
   4114  f765				   .
   4115  f765							; 
   4116  f765
   4117  f765				   .
   4118  f765							; 
   4119  f765
   4120  f765				   .
   4121  f765							; 
   4122  f765
   4123  f765				   .L0219		;  if !switchreset then _Bit7_Reset_Restrainer{7}  =  0  :  goto __Main_Loop
   4124  f765
   4125  f765		       a9 01		      lda	#1
   4126  f767		       2c 82 02 	      bit	SWCHB
   4127  f76a		       f0 09		      BEQ	.skipL0219
   4128  f76c				   .condpart43
   4129  f76c		       a5 ec		      LDA	_Bit7_Reset_Restrainer
   4130  f76e		       29 7f		      AND	#127
   4131  f770		       85 ec		      STA	_Bit7_Reset_Restrainer
   4132  f772		       4c df f4 	      jmp	.__Main_Loop
   4133  f775
   4134  f775				   .skipL0219
   4135  f775				   .
   4136  f775							; 
   4137  f775
   4138  f775				   .
   4139  f775							; 
   4140  f775
   4141  f775				   .
   4142  f775							; 
   4143  f775
   4144  f775				   .
   4145  f775							; 
   4146  f775
   4147  f775				   .
   4148  f775							; 
   4149  f775
   4150  f775				   .L0220		;  if _Bit7_Reset_Restrainer{7} then goto __Main_Loop
   4151  f775
   4152  f775		       24 ec		      BIT	_Bit7_Reset_Restrainer
   4153  f777		       10 03		      BPL	.skipL0220
   4154  f779				   .condpart44
   4155  f779		       4c df f4 	      jmp	.__Main_Loop
   4156  f77c
   4157  f77c				   .skipL0220
   4158  f77c				   .
   4159  f77c							; 
   4160  f77c
   4161  f77c				   .
   4162  f77c							; 
   4163  f77c
   4164  f77c				   .
   4165  f77c							; 
   4166  f77c
   4167  f77c				   .
   4168  f77c							; 
   4169  f77c
   4170  f77c				   .L0221		;  goto __Start_Restart
   4171  f77c
   4172  f77c		       4c 5a f4 	      jmp	.__Start_Restart
   4173  f77f
   4174  f77f				   .
   4175  f77f							; 
   4176  f77f
   4177  f77f				   .
   4178  f77f							; 
   4179  f77f
   4180  f77f				   .
   4181  f77f							; 
   4182  f77f
   4183  f77f				   .
   4184  f77f							; 
   4185  f77f
   4186  f77f				   .
   4187  f77f							; 
   4188  f77f
   4189  f77f				   .
   4190  f77f							; 
   4191  f77f
   4192  f77f				   .
   4193  f77f							; 
   4194  f77f
   4195  f77f				   .
   4196  f77f							; 
   4197  f77f
   4198  f77f				   .
   4199  f77f							; 
   4200  f77f
   4201  f77f				   .
   4202  f77f							; 
   4203  f77f
   4204  f77f				   .
   4205  f77f							; 
   4206  f77f
   4207  f77f				   .
   4208  f77f							; 
   4209  f77f
   4210  f77f				   .
   4211  f77f							; 
   4212  f77f
   4213  f77f				   .
   4214  f77f							; 
   4215  f77f
   4216  f77f				   .
   4217  f77f							; 
   4218  f77f
   4219  f77f				   .
   4220  f77f							; 
   4221  f77f
   4222  f77f				   .
   4223  f77f							; 
   4224  f77f
   4225  f77f				   .
   4226  f77f							; 
   4227  f77f
   4228  f77f				   .
   4229  f77f							; 
   4230  f77f
   4231  f77f				   .
   4232  f77f							; 
   4233  f77f
   4234  f77f				   .
   4235  f77f							; 
   4236  f77f
   4237  f77f				   .
   4238  f77f							; 
   4239  f77f
   4240  f77f				   .
   4241  f77f							; 
   4242  f77f
   4243  f77f				   .
   4244  f77f							; 
   4245  f77f
   4246  f77f				   .
   4247  f77f							; 
   4248  f77f
   4249  f77f				   .L0222		;  data _SD_Jump
   4250  f77f
   4251  f77f		       4c d3 f7 	      JMP	.skipL0222
   4252  f782				   _SD_Jump
   4253  f782		       01 0c 1f 	      .byte.b	1,12,31
   4254  f785
   4255  f785		       01		      .byte.b	1
   4256  f786
   4257  f786		       08 0c 1f 	      .byte.b	8,12,31
   4258  f789
   4259  f789		       01		      .byte.b	1
   4260  f78a
   4261  f78a		       06 0c 1f 	      .byte.b	6,12,31
   4262  f78d
   4263  f78d		       01		      .byte.b	1
   4264  f78e
   4265  f78e		       08 0c 1f 	      .byte.b	8,12,31
   4266  f791
   4267  f791		       01		      .byte.b	1
   4268  f792
   4269  f792		       08 0c 1e 	      .byte.b	8,12,30
   4270  f795
   4271  f795		       01		      .byte.b	1
   4272  f796
   4273  f796		       08 0c 1d 	      .byte.b	8,12,29
   4274  f799
   4275  f799		       01		      .byte.b	1
   4276  f79a
   4277  f79a		       08 0c 1c 	      .byte.b	8,12,28
   4278  f79d
   4279  f79d		       01		      .byte.b	1
   4280  f79e
   4281  f79e		       08 0c 1b 	      .byte.b	8,12,27
   4282  f7a1
   4283  f7a1		       01		      .byte.b	1
   4284  f7a2
   4285  f7a2		       08 0c 1a 	      .byte.b	8,12,26
   4286  f7a5
   4287  f7a5		       01		      .byte.b	1
   4288  f7a6
   4289  f7a6		       08 0c 19 	      .byte.b	8,12,25
   4290  f7a9
   4291  f7a9		       01		      .byte.b	1
   4292  f7aa
   4293  f7aa		       08 0c 18 	      .byte.b	8,12,24
   4294  f7ad
   4295  f7ad		       01		      .byte.b	1
   4296  f7ae
   4297  f7ae		       08 0c 17 	      .byte.b	8,12,23
   4298  f7b1
   4299  f7b1		       01		      .byte.b	1
   4300  f7b2
   4301  f7b2		       08 0c 16 	      .byte.b	8,12,22
   4302  f7b5
   4303  f7b5		       01		      .byte.b	1
   4304  f7b6
   4305  f7b6		       08 0c 15 	      .byte.b	8,12,21
   4306  f7b9
   4307  f7b9		       01		      .byte.b	1
   4308  f7ba
   4309  f7ba		       08 0c 14 	      .byte.b	8,12,20
   4310  f7bd
   4311  f7bd		       01		      .byte.b	1
   4312  f7be
   4313  f7be		       08 0c 13 	      .byte.b	8,12,19
   4314  f7c1
   4315  f7c1		       01		      .byte.b	1
   4316  f7c2
   4317  f7c2		       06 0c 12 	      .byte.b	6,12,18
   4318  f7c5
   4319  f7c5		       01		      .byte.b	1
   4320  f7c6
   4321  f7c6		       04 0c 11 	      .byte.b	4,12,17
   4322  f7c9
   4323  f7c9		       01		      .byte.b	1
   4324  f7ca
   4325  f7ca		       02 0c 10 	      .byte.b	2,12,16
   4326  f7cd
   4327  f7cd		       02		      .byte.b	2
   4328  f7ce
   4329  f7ce		       00 00 00 	      .byte.b	0,0,0
   4330  f7d1
   4331  f7d1		       08		      .byte.b	8
   4332  f7d2
   4333  f7d2		       ff		      .byte.b	255
   4334  f7d3
   4335  f7d3				   .skipL0222
   4336  f7d3				   .
   4337  f7d3							; 
   4338  f7d3
   4339  f7d3				   .
   4340  f7d3							; 
   4341  f7d3
   4342  f7d3				   .
   4343  f7d3							; 
   4344  f7d3
   4345  f7d3				   .
   4346  f7d3							; 
   4347  f7d3
   4348  f7d3				   .
   4349  f7d3							; 
   4350  f7d3
   4351  f7d3				   .
   4352  f7d3							; 
   4353  f7d3
   4354  f7d3				   .
   4355  f7d3							; 
   4356  f7d3
   4357  f7d3				   .
   4358  f7d3							; 
   4359  f7d3
   4360  f7d3				   .
   4361  f7d3							; 
   4362  f7d3
   4363  f7d3				   .
   4364  f7d3							; 
   4365  f7d3
   4366  f7d3				   .__Frame0
   4367  f7d3							; __Frame0
   4368  f7d3
   4369  f7d3				   .L0223		;  player1:
   4370  f7d3
   4371  f7d3		       a2 46		      LDX	#<playerL0223_1
   4372  f7d5		       86 8c		      STX	player1pointerlo
   4373  f7d7		       a9 f8		      LDA	#>playerL0223_1
   4374  f7d9		       85 8d		      STA	player1pointerhi
   4375  f7db		       a9 09		      LDA	#9
   4376  f7dd		       85 8f		      STA	player1height
   4377  f7df				   .
   4378  f7df							; 
   4379  f7df
   4380  f7df				   .L0224		;  goto __Done_Anim_jump
   4381  f7df
   4382  f7df		       4c fa f6 	      jmp	.__Done_Anim_jump
   4383  f7e2
   4384  f7e2				   .
   4385  f7e2							; 
   4386  f7e2
   4387  f7e2				   .
   4388  f7e2							; 
   4389  f7e2
   4390  f7e2				   .__Frame1
   4391  f7e2							; __Frame1
   4392  f7e2
   4393  f7e2				   .L0225		;  player1:
   4394  f7e2
   4395  f7e2		       a2 50		      LDX	#<playerL0225_1
   4396  f7e4		       86 8c		      STX	player1pointerlo
   4397  f7e6		       a9 f8		      LDA	#>playerL0225_1
   4398  f7e8		       85 8d		      STA	player1pointerhi
   4399  f7ea		       a9 09		      LDA	#9
   4400  f7ec		       85 8f		      STA	player1height
   4401  f7ee				   .
   4402  f7ee							; 
   4403  f7ee
   4404  f7ee				   .L0226		;  goto __Done_Anim_jump
   4405  f7ee
   4406  f7ee		       4c fa f6 	      jmp	.__Done_Anim_jump
   4407  f7f1
   4408  f7f1				   .
   4409  f7f1							; 
   4410  f7f1
   4411  f7f1				   .
   4412  f7f1							; 
   4413  f7f1
   4414  f7f1				   .__Frame2
   4415  f7f1							; __Frame2
   4416  f7f1
   4417  f7f1				   .L0227		;  player1:
   4418  f7f1
   4419  f7f1		       a2 5a		      LDX	#<playerL0227_1
   4420  f7f3		       86 8c		      STX	player1pointerlo
   4421  f7f5		       a9 f8		      LDA	#>playerL0227_1
   4422  f7f7		       85 8d		      STA	player1pointerhi
   4423  f7f9		       a9 09		      LDA	#9
   4424  f7fb		       85 8f		      STA	player1height
   4425  f7fd				   .
   4426  f7fd							; 
   4427  f7fd
   4428  f7fd				   .L0228		;  goto __Done_Anim_jump
   4429  f7fd		       4c fa f6 	      jmp	.__Done_Anim_jump
   4430  f800				  -	      if	(<*) > (<(*+9))
   4431  f800				  -	      repeat	($100-<*)
   4432  f800				  -	      .byte	0
   4433  f800				  -	      repend
   4434  f800					      endif
   4435  f800				   playercolorL0157_1
   4436  f800		       26		      .byte.b	_26
   4437  f801		       9c		      .byte.b	_9C
   4438  f802		       9c		      .byte.b	_9C
   4439  f803		       9c		      .byte.b	_9C
   4440  f804		       da		      .byte.b	_DA
   4441  f805		       da		      .byte.b	_DA
   4442  f806		       3c		      .byte.b	_3C
   4443  f807		       3c		      .byte.b	_3C
   4444  f808		       3c		      .byte.b	_3C
   4445  f809		       26		      .byte.b	_26
   4446  f80a				  -	      if	(<*) > (<(*+9))
   4447  f80a				  -	      repeat	($100-<*)
   4448  f80a				  -	      .byte	0
   4449  f80a				  -	      repend
   4450  f80a					      endif
   4451  f80a				   playerL0158_1
   4452  f80a		       66		      .byte.b	%01100110
   4453  f80b		       24		      .byte.b	%00100100
   4454  f80c		       3c		      .byte.b	%00111100
   4455  f80d		       18		      .byte.b	%00011000
   4456  f80e		       5a		      .byte.b	%01011010
   4457  f80f		       3c		      .byte.b	%00111100
   4458  f810		       18		      .byte.b	%00011000
   4459  f811		       3c		      .byte.b	%00111100
   4460  f812		       3c		      .byte.b	%00111100
   4461  f813		       18		      .byte.b	%00011000
   4462  f814				  -	      if	(<*) > (<(*+9))
   4463  f814				  -	      repeat	($100-<*)
   4464  f814				  -	      .byte	0
   4465  f814				  -	      repend
   4466  f814					      endif
   4467  f814				   player3then_1
   4468  f814		       c3		      .byte.b	%11000011
   4469  f815		       63		      .byte.b	%01100011
   4470  f816		       3e		      .byte.b	%00111110
   4471  f817		       1c		      .byte.b	%00011100
   4472  f818		       3d		      .byte.b	%00111101
   4473  f819		       5e		      .byte.b	%01011110
   4474  f81a		       18		      .byte.b	%00011000
   4475  f81b		       3c		      .byte.b	%00111100
   4476  f81c		       3c		      .byte.b	%00111100
   4477  f81d		       18		      .byte.b	%00011000
   4478  f81e				  -	      if	(<*) > (<(*+9))
   4479  f81e				  -	      repeat	($100-<*)
   4480  f81e				  -	      .byte	0
   4481  f81e				  -	      repend
   4482  f81e					      endif
   4483  f81e				   player6then_1
   4484  f81e		       66		      .byte.b	%01100110
   4485  f81f		       24		      .byte.b	%00100100
   4486  f820		       3c		      .byte.b	%00111100
   4487  f821		       18		      .byte.b	%00011000
   4488  f822		       18		      .byte.b	%00011000
   4489  f823		       7e		      .byte.b	%01111110
   4490  f824		       99		      .byte.b	%10011001
   4491  f825		       3c		      .byte.b	%00111100
   4492  f826		       3c		      .byte.b	%00111100
   4493  f827		       18		      .byte.b	%00011000
   4494  f828				  -	      if	(<*) > (<(*+9))
   4495  f828				  -	      repeat	($100-<*)
   4496  f828				  -	      .byte	0
   4497  f828				  -	      repend
   4498  f828					      endif
   4499  f828				   playerL0175_1
   4500  f828		       c3		      .byte.b	%11000011
   4501  f829		       63		      .byte.b	%01100011
   4502  f82a		       3e		      .byte.b	%00111110
   4503  f82b		       1c		      .byte.b	%00011100
   4504  f82c		       3d		      .byte.b	%00111101
   4505  f82d		       5e		      .byte.b	%01011110
   4506  f82e		       18		      .byte.b	%00011000
   4507  f82f		       3c		      .byte.b	%00111100
   4508  f830		       3c		      .byte.b	%00111100
   4509  f831		       18		      .byte.b	%00011000
   4510  f832				  -	      if	(<*) > (<(*+9))
   4511  f832				  -	      repeat	($100-<*)
   4512  f832				  -	      .byte	0
   4513  f832				  -	      repend
   4514  f832					      endif
   4515  f832				   player21then_1
   4516  f832		       66		      .byte.b	%01100110
   4517  f833		       24		      .byte.b	%00100100
   4518  f834		       3c		      .byte.b	%00111100
   4519  f835		       18		      .byte.b	%00011000
   4520  f836		       18		      .byte.b	%00011000
   4521  f837		       7e		      .byte.b	%01111110
   4522  f838		       99		      .byte.b	%10011001
   4523  f839		       3c		      .byte.b	%00111100
   4524  f83a		       3c		      .byte.b	%00111100
   4525  f83b		       18		      .byte.b	%00011000
   4526  f83c				  -	      if	(<*) > (<(*+9))
   4527  f83c				  -	      repeat	($100-<*)
   4528  f83c				  -	      .byte	0
   4529  f83c				  -	      repend
   4530  f83c					      endif
   4531  f83c				   playercolorL0199_1
   4532  f83c		       26		      .byte.b	_26
   4533  f83d		       9c		      .byte.b	_9C
   4534  f83e		       9c		      .byte.b	_9C
   4535  f83f		       9c		      .byte.b	_9C
   4536  f840		       da		      .byte.b	_DA
   4537  f841		       da		      .byte.b	_DA
   4538  f842		       3c		      .byte.b	_3C
   4539  f843		       3c		      .byte.b	_3C
   4540  f844		       3c		      .byte.b	_3C
   4541  f845		       26		      .byte.b	_26
   4542  f846				  -	      if	(<*) > (<(*+9))
   4543  f846				  -	      repeat	($100-<*)
   4544  f846				  -	      .byte	0
   4545  f846				  -	      repend
   4546  f846					      endif
   4547  f846				   playerL0223_1
   4548  f846		       66		      .byte.b	%01100110
   4549  f847		       26		      .byte.b	%00100110
   4550  f848		       3c		      .byte.b	%00111100
   4551  f849		       1c		      .byte.b	%00011100
   4552  f84a		       3c		      .byte.b	%00111100
   4553  f84b		       1c		      .byte.b	%00011100
   4554  f84c		       18		      .byte.b	%00011000
   4555  f84d		       3c		      .byte.b	%00111100
   4556  f84e		       3c		      .byte.b	%00111100
   4557  f84f		       18		      .byte.b	%00011000
   4558  f850				  -	      if	(<*) > (<(*+9))
   4559  f850				  -	      repeat	($100-<*)
   4560  f850				  -	      .byte	0
   4561  f850				  -	      repend
   4562  f850					      endif
   4563  f850				   playerL0225_1
   4564  f850		       c3		      .byte.b	%11000011
   4565  f851		       63		      .byte.b	%01100011
   4566  f852		       3e		      .byte.b	%00111110
   4567  f853		       1c		      .byte.b	%00011100
   4568  f854		       3c		      .byte.b	%00111100
   4569  f855		       5e		      .byte.b	%01011110
   4570  f856		       18		      .byte.b	%00011000
   4571  f857		       3c		      .byte.b	%00111100
   4572  f858		       3c		      .byte.b	%00111100
   4573  f859		       18		      .byte.b	%00011000
   4574  f85a				  -	      if	(<*) > (<(*+9))
   4575  f85a				  -	      repeat	($100-<*)
   4576  f85a				  -	      .byte	0
   4577  f85a				  -	      repend
   4578  f85a					      endif
   4579  f85a				   playerL0227_1
   4580  f85a		       3c		      .byte.b	%00111100
   4581  f85b		       1c		      .byte.b	%00011100
   4582  f85c		       1c		      .byte.b	%00011100
   4583  f85d		       1c		      .byte.b	%00011100
   4584  f85e		       1c		      .byte.b	%00011100
   4585  f85f		       1c		      .byte.b	%00011100
   4586  f860		       18		      .byte.b	%00011000
   4587  f861		       3c		      .byte.b	%00111100
   4588  f862		       3c		      .byte.b	%00111100
   4589  f863		       18		      .byte.b	%00011000
   4590  f864					      if	ECHOFIRST
      1848 bytes of ROM space left
   4591  f864					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4592  f864					      endif
   4593  f864		       00 01	   ECHOFIRST  =	1
   4594  f864
   4595  f864
   4596  f864
   4597  f864							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4598  f864
   4599  f864							; feel free to modify the score graphics - just keep each digit 8 high
   4600  f864							; and keep the conditional compilation stuff intact
   4601  f864				  -	      ifconst	ROM2k
   4602  f864				  -	      ORG	$F7AC-8
   4603  f864					      else
   4604  f864				  -	      ifconst	bankswitch
   4605  f864				  -	      if	bankswitch == 8
   4606  f864				  -	      ORG	$2F94-bscode_length
   4607  f864				  -	      RORG	$FF94-bscode_length
   4608  f864				  -	      endif
   4609  f864				  -	      if	bankswitch == 16
   4610  f864				  -	      ORG	$4F94-bscode_length
   4611  f864				  -	      RORG	$FF94-bscode_length
   4612  f864				  -	      endif
   4613  f864				  -	      if	bankswitch == 32
   4614  f864				  -	      ORG	$8F94-bscode_length
   4615  f864				  -	      RORG	$FF94-bscode_length
   4616  f864				  -	      endif
   4617  f864				  -	      if	bankswitch == 64
   4618  f864				  -	      ORG	$10F80-bscode_length
   4619  f864				  -	      RORG	$1FF80-bscode_length
   4620  f864				  -	      endif
   4621  f864					      else
   4622  ff9c					      ORG	$FF9C
   4623  ff9c					      endif
   4624  ff9c					      endif
   4625  ff9c
   4626  ff9c							; font equates
   4627  ff9c		       00 01	   .21stcentury =	1
   4628  ff9c		       00 02	   alarmclock =	2
   4629  ff9c		       00 03	   handwritten =	3
   4630  ff9c		       00 04	   interrupted =	4
   4631  ff9c		       00 05	   retroputer =	5
   4632  ff9c		       00 06	   whimsey    =	6
   4633  ff9c		       00 07	   tiny       =	7
   4634  ff9c		       00 08	   hex	      =	8
   4635  ff9c
   4636  ff9c				  -	      ifconst	font
   4637  ff9c				  -	      if	font == hex
   4638  ff9c				  -	      ORG	. - 48
   4639  ff9c				  -	      endif
   4640  ff9c					      endif
   4641  ff9c
   4642  ff9c				   scoretable
   4643  ff9c
   4644  ff9c				  -	      ifconst	font
   4645  ff9c				  -	      if	font == .21stcentury
   4646  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4647  ff9c				  -	      endif
   4648  ff9c				  -	      if	font == alarmclock
   4649  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4650  ff9c				  -	      endif
   4651  ff9c				  -	      if	font == handwritten
   4652  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4653  ff9c				  -	      endif
   4654  ff9c				  -	      if	font == interrupted
   4655  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4656  ff9c				  -	      endif
   4657  ff9c				  -	      if	font == retroputer
   4658  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4659  ff9c				  -	      endif
   4660  ff9c				  -	      if	font == whimsey
   4661  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4662  ff9c				  -	      endif
   4663  ff9c				  -	      if	font == tiny
   4664  ff9c				  -	      include	"score_graphics.asm.tiny"
   4665  ff9c				  -	      endif
   4666  ff9c				  -	      if	font == hex
   4667  ff9c				  -	      include	"score_graphics.asm.hex"
   4668  ff9c				  -	      endif
   4669  ff9c					      else		; default font
   4670  ff9c
   4671  ff9c		       3c		      .byte.b	%00111100
   4672  ff9d		       66		      .byte.b	%01100110
   4673  ff9e		       66		      .byte.b	%01100110
   4674  ff9f		       66		      .byte.b	%01100110
   4675  ffa0		       66		      .byte.b	%01100110
   4676  ffa1		       66		      .byte.b	%01100110
   4677  ffa2		       66		      .byte.b	%01100110
   4678  ffa3		       3c		      .byte.b	%00111100
   4679  ffa4
   4680  ffa4		       7e		      .byte.b	%01111110
   4681  ffa5		       18		      .byte.b	%00011000
   4682  ffa6		       18		      .byte.b	%00011000
   4683  ffa7		       18		      .byte.b	%00011000
   4684  ffa8		       18		      .byte.b	%00011000
   4685  ffa9		       38		      .byte.b	%00111000
   4686  ffaa		       18		      .byte.b	%00011000
   4687  ffab		       08		      .byte.b	%00001000
   4688  ffac
   4689  ffac		       7e		      .byte.b	%01111110
   4690  ffad		       60		      .byte.b	%01100000
   4691  ffae		       60		      .byte.b	%01100000
   4692  ffaf		       3c		      .byte.b	%00111100
   4693  ffb0		       06		      .byte.b	%00000110
   4694  ffb1		       06		      .byte.b	%00000110
   4695  ffb2		       46		      .byte.b	%01000110
   4696  ffb3		       3c		      .byte.b	%00111100
   4697  ffb4
   4698  ffb4		       3c		      .byte.b	%00111100
   4699  ffb5		       46		      .byte.b	%01000110
   4700  ffb6		       06		      .byte.b	%00000110
   4701  ffb7		       06		      .byte.b	%00000110
   4702  ffb8		       1c		      .byte.b	%00011100
   4703  ffb9		       06		      .byte.b	%00000110
   4704  ffba		       46		      .byte.b	%01000110
   4705  ffbb		       3c		      .byte.b	%00111100
   4706  ffbc
   4707  ffbc		       0c		      .byte.b	%00001100
   4708  ffbd		       0c		      .byte.b	%00001100
   4709  ffbe		       7e		      .byte.b	%01111110
   4710  ffbf		       4c		      .byte.b	%01001100
   4711  ffc0		       4c		      .byte.b	%01001100
   4712  ffc1		       2c		      .byte.b	%00101100
   4713  ffc2		       1c		      .byte.b	%00011100
   4714  ffc3		       0c		      .byte.b	%00001100
   4715  ffc4
   4716  ffc4		       3c		      .byte.b	%00111100
   4717  ffc5		       46		      .byte.b	%01000110
   4718  ffc6		       06		      .byte.b	%00000110
   4719  ffc7		       06		      .byte.b	%00000110
   4720  ffc8		       3c		      .byte.b	%00111100
   4721  ffc9		       60		      .byte.b	%01100000
   4722  ffca		       60		      .byte.b	%01100000
   4723  ffcb		       7e		      .byte.b	%01111110
   4724  ffcc
   4725  ffcc		       3c		      .byte.b	%00111100
   4726  ffcd		       66		      .byte.b	%01100110
   4727  ffce		       66		      .byte.b	%01100110
   4728  ffcf		       66		      .byte.b	%01100110
   4729  ffd0		       7c		      .byte.b	%01111100
   4730  ffd1		       60		      .byte.b	%01100000
   4731  ffd2		       62		      .byte.b	%01100010
   4732  ffd3		       3c		      .byte.b	%00111100
   4733  ffd4
   4734  ffd4		       30		      .byte.b	%00110000
   4735  ffd5		       30		      .byte.b	%00110000
   4736  ffd6		       30		      .byte.b	%00110000
   4737  ffd7		       18		      .byte.b	%00011000
   4738  ffd8		       0c		      .byte.b	%00001100
   4739  ffd9		       06		      .byte.b	%00000110
   4740  ffda		       42		      .byte.b	%01000010
   4741  ffdb		       3e		      .byte.b	%00111110
   4742  ffdc
   4743  ffdc		       3c		      .byte.b	%00111100
   4744  ffdd		       66		      .byte.b	%01100110
   4745  ffde		       66		      .byte.b	%01100110
   4746  ffdf		       66		      .byte.b	%01100110
   4747  ffe0		       3c		      .byte.b	%00111100
   4748  ffe1		       66		      .byte.b	%01100110
   4749  ffe2		       66		      .byte.b	%01100110
   4750  ffe3		       3c		      .byte.b	%00111100
   4751  ffe4
   4752  ffe4		       3c		      .byte.b	%00111100
   4753  ffe5		       46		      .byte.b	%01000110
   4754  ffe6		       06		      .byte.b	%00000110
   4755  ffe7		       3e		      .byte.b	%00111110
   4756  ffe8		       66		      .byte.b	%01100110
   4757  ffe9		       66		      .byte.b	%01100110
   4758  ffea		       66		      .byte.b	%01100110
   4759  ffeb		       3c		      .byte.b	%00111100
   4760  ffec
   4761  ffec					      ifnconst	DPC_kernel_options
   4762  ffec
   4763  ffec		       00		      .byte.b	%00000000
   4764  ffed		       00		      .byte.b	%00000000
   4765  ffee		       00		      .byte.b	%00000000
   4766  ffef		       00		      .byte.b	%00000000
   4767  fff0		       00		      .byte.b	%00000000
   4768  fff1		       00		      .byte.b	%00000000
   4769  fff2		       00		      .byte.b	%00000000
   4770  fff3		       00		      .byte.b	%00000000
   4771  fff4
   4772  fff4					      endif
   4773  fff4
   4774  fff4					      endif
   4775  fff4
   4776  fff4				  -	      ifconst	ROM2k
   4777  fff4				  -	      ORG	$F7FC
   4778  fff4					      else
   4779  fff4				  -	      ifconst	bankswitch
   4780  fff4				  -	      if	bankswitch == 8
   4781  fff4				  -	      ORG	$2FF4-bscode_length
   4782  fff4				  -	      RORG	$FFF4-bscode_length
   4783  fff4				  -	      endif
   4784  fff4				  -	      if	bankswitch == 16
   4785  fff4				  -	      ORG	$4FF4-bscode_length
   4786  fff4				  -	      RORG	$FFF4-bscode_length
   4787  fff4				  -	      endif
   4788  fff4				  -	      if	bankswitch == 32
   4789  fff4				  -	      ORG	$8FF4-bscode_length
   4790  fff4				  -	      RORG	$FFF4-bscode_length
   4791  fff4				  -	      endif
   4792  fff4				  -	      if	bankswitch == 64
   4793  fff4				  -	      ORG	$10FE0-bscode_length
   4794  fff4				  -	      RORG	$1FFE0-bscode_length
   4795  fff4				  -	      endif
   4796  fff4					      else
   4797  fffc					      ORG	$FFFC
   4798  fffc					      endif
   4799  fffc					      endif
   4800  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4801  fffc
   4802  fffc				  -	      ifconst	bankswitch
   4803  fffc				  -	      if	bankswitch == 8
   4804  fffc				  -	      ORG	$2FFC
   4805  fffc				  -	      RORG	$FFFC
   4806  fffc				  -	      endif
   4807  fffc				  -	      if	bankswitch == 16
   4808  fffc				  -	      ORG	$4FFC
   4809  fffc				  -	      RORG	$FFFC
   4810  fffc				  -	      endif
   4811  fffc				  -	      if	bankswitch == 32
   4812  fffc				  -	      ORG	$8FFC
   4813  fffc				  -	      RORG	$FFFC
   4814  fffc				  -	      endif
   4815  fffc				  -	      if	bankswitch == 64
   4816  fffc				  -	      ORG	$10FF0
   4817  fffc				  -	      RORG	$1FFF0
   4818  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4819  fffc				  -	      ORG	$10FF8
   4820  fffc				  -	      RORG	$1FFF8
   4821  fffc				  -	      ifconst	superchip
   4822  fffc				  -	      .byte	"E","F","S","C"
   4823  fffc				  -	      else
   4824  fffc				  -	      .byte	"E","F","E","F"
   4825  fffc				  -	      endif
   4826  fffc				  -	      ORG	$10FFC
   4827  fffc				  -	      RORG	$1FFFC
   4828  fffc				  -	      endif
   4829  fffc					      else
   4830  fffc				  -	      ifconst	ROM2k
   4831  fffc				  -	      ORG	$F7FC
   4832  fffc					      else
   4833  fffc					      ORG	$FFFC
   4834  fffc					      endif
   4835  fffc					      endif
   4836  fffc		       00 f0		      .word.w	(start & $ffff)
   4837  fffe		       00 f0		      .word.w	(start & $ffff)

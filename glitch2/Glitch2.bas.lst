------- FILE C:\Users\jefma\OneDrive\Desktop\glitch2\Glitch2.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\Users\jefma\OneDrive\Desktop\glitch2\Glitch2.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\Users\jefma\OneDrive\Desktop\glitch2\Glitch2.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 07	    shiftPostions0_length =	.skipL026-shiftPostions0
      4  10000 ????
      5  10000 ????		00 ed	    currentPreview =	z
      6  10000 ????
      7  10000 ????		00 ec	    editing    =	y
      8  10000 ????
      9  10000 ????		00 eb	    buttonPressed =	x
     10  10000 ????
     11  10000 ????		00 e3	    moveAmount =	p
     12  10000 ????		00 e1	    _missile1shift =	n
     13  10000 ????		00 df	    _missile0shift =	l
     14  10000 ????		00 dd	    _ballShift =	j
     15  10000 ????		00 db	    _player1shift =	h
     16  10000 ????		00 d9	    _player0shift =	f
     17  10000 ????		00 84	    _ballx     =	ballx
     18  10000 ????		00 83	    _missile1x =	missile1x
     19  10000 ????		00 82	    _missile0x =	missile0x
     20  10000 ????		00 81	    _player1x  =	player1x
     21  10000 ????		00 80	    _player0x  =	player0x
     22  10000 ????		00 95	    _sc3       =	score + 2
     23  10000 ????
     24  10000 ????		00 94	    _sc2       =	score + 1
     25  10000 ????
     26  10000 ????		00 93	    _sc1       =	score
     27  10000 ????
     28  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\Users\jefma\OneDrive\Desktop\glitch2\Glitch2.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 07	    shiftPostions0_length =	.skipL026-shiftPostions0
      4  10000 ????
      5  10000 ????		00 ed	    currentPreview =	z
      6  10000 ????
      7  10000 ????		00 ec	    editing    =	y
      8  10000 ????
      9  10000 ????		00 eb	    buttonPressed =	x
     10  10000 ????
     11  10000 ????		00 e3	    moveAmount =	p
     12  10000 ????		00 e1	    _missile1shift =	n
     13  10000 ????		00 df	    _missile0shift =	l
     14  10000 ????		00 dd	    _ballShift =	j
     15  10000 ????		00 db	    _player1shift =	h
     16  10000 ????		00 d9	    _player0shift =	f
     17  10000 ????		00 84	    _ballx     =	ballx
     18  10000 ????		00 83	    _missile1x =	missile1x
     19  10000 ????		00 82	    _missile0x =	missile0x
     20  10000 ????		00 81	    _player1x  =	player1x
     21  10000 ????		00 80	    _player0x  =	player0x
     22  10000 ????		00 95	    _sc3       =	score + 2
     23  10000 ????
     24  10000 ????		00 94	    _sc2       =	score + 1
     25  10000 ????
     26  10000 ????		00 93	    _sc1       =	score
     27  10000 ????
     28  10000 ????		00 01	    no_blank_lines =	1
------- FILE C:\Users\jefma\OneDrive\Desktop\glitch2\Glitch2.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c e6 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7				  -	      ifconst	minikernel
    730  f1b7				  -	      jsr	minikernel
    731  f1b7					      endif
    732  f1b7
    733  f1b7							; now reassign temp vars for score pointers
    734  f1b7
    735  f1b7							; score pointers contain:
    736  f1b7							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b7							; swap lo2->temp1
    738  f1b7							; swap lo4->temp3
    739  f1b7							; swap lo6->temp5
    740  f1b7					      ifnconst	noscore
    741  f1b7		       a5 97		      lda	scorepointers+1
    742  f1b9							; ldy temp1
    743  f1b9		       85 9c		      sta	temp1
    744  f1bb							; sty scorepointers+1
    745  f1bb
    746  f1bb		       a5 99		      lda	scorepointers+3
    747  f1bd							; ldy temp3
    748  f1bd		       85 9e		      sta	temp3
    749  f1bf							; sty scorepointers+3
    750  f1bf
    751  f1bf
    752  f1bf		       85 2b		      sta	HMCLR
    753  f1c1		       ba		      tsx
    754  f1c2		       86 f6		      stx	stack1
    755  f1c4		       a2 e0		      ldx	#$E0
    756  f1c6		       86 20		      stx	HMP0
    757  f1c8
    758  f1c8		       a5 a3		      LDA	scorecolor
    759  f1ca		       85 06		      STA	COLUP0
    760  f1cc		       85 07		      STA	COLUP1
    761  f1ce				  -	      ifconst	scorefade
    762  f1ce				  -	      STA	stack2
    763  f1ce					      endif
    764  f1ce				  -	      ifconst	pfscore
    765  f1ce				  -	      lda	pfscorecolor
    766  f1ce				  -	      sta	COLUPF
    767  f1ce					      endif
    768  f1ce		       85 02		      sta	WSYNC
    769  f1d0		       a2 00		      ldx	#0
    770  f1d2		       86 1b		      STx	GRP0
    771  f1d4		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d6
    773  f1d6		       a5 9b		      lda	scorepointers+5
    774  f1d8							; ldy temp5
    775  f1d8		       95 a0		      sta	temp5,x
    776  f1da							; sty scorepointers+5
    777  f1da		       a9 ff		      lda	#>scoretable
    778  f1dc		       85 97		      sta	scorepointers+1
    779  f1de		       85 99		      sta	scorepointers+3
    780  f1e0		       85 9b		      sta	scorepointers+5
    781  f1e2		       85 9d		      sta	temp2
    782  f1e4		       85 9f		      sta	temp4
    783  f1e6		       85 a1		      sta	temp6
    784  f1e8		       a0 07		      LDY	#7
    785  f1ea		       84 25		      STY	VDELP0
    786  f1ec		       85 10		      STA	RESP0
    787  f1ee		       85 11		      STA	RESP1
    788  f1f0
    789  f1f0
    790  f1f0		       a9 03		      LDA	#$03
    791  f1f2		       85 04		      STA	NUSIZ0
    792  f1f4		       85 05		      STA	NUSIZ1
    793  f1f6		       85 26		      STA	VDELP1
    794  f1f8		       a9 f0		      LDA	#$F0
    795  f1fa		       85 21		      STA	HMP1
    796  f1fc		       b1 96		      lda	(scorepointers),y
    797  f1fe		       85 1b		      sta	GRP0
    798  f200		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f202		       4c 0d f2 	      jmp	beginscore
    800  f205
    801  f205
    802  f205				  -	      if	((<*)>$d4)
    803  f205				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f205					      endif
    805  f205
    806  f205				   loop2
    807  f205		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f207		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f209				  -	      ifconst	pfscore
    810  f209				  -	      lda.w	pfscore1
    811  f209				  -	      sta	PF1
    812  f209					      else
    813  f209				  -	      ifconst	scorefade
    814  f209				  -	      sleep	2
    815  f209				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f209					      else
      0  f209					      sleep	7
      1  f209				   .CYCLES    SET	7
      2  f209
      3  f209				  -	      IF	.CYCLES < 2
      4  f209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f209				  -	      ERR
      6  f209					      ENDIF
      7  f209
      8  f209					      IF	.CYCLES & 1
      9  f209					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f209		       04 00		      nop	0
     11  f20b				  -	      ELSE
     12  f20b				  -	      bit	VSYNC
     13  f20b					      ENDIF
     14  f20b				   .CYCLES    SET	.CYCLES - 3
     15  f20b					      ENDIF
     16  f20b
     17  f20b					      REPEAT	.CYCLES / 2
     18  f20b		       ea		      nop
     17  f20b					      REPEND
     18  f20c		       ea		      nop
     19  f20d					      REPEND
    818  f20d					      endif
    819  f20d					      endif
    820  f20d							; cycle 0
    821  f20d				   beginscore
    822  f20d		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20f		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f211		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f213		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f215		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f217		       9a		      txs
    828  f218		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21a				  -	      ifconst	scorefade
    830  f21a				  -	      lda	stack2
    831  f21a					      else
      0  f21a					      sleep	3
      1  f21a				   .CYCLES    SET	3
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a					      IF	.CYCLES & 1
      9  f21a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a		       04 00		      nop	0
     11  f21c				  -	      ELSE
     12  f21c				  -	      bit	VSYNC
     13  f21c					      ENDIF
     14  f21c				   .CYCLES    SET	.CYCLES - 3
     15  f21c					      ENDIF
     16  f21c
     17  f21c				  -	      REPEAT	.CYCLES / 2
     18  f21c				  -	      nop
     19  f21c					      REPEND
    833  f21c					      endif
    834  f21c
    835  f21c				  -	      ifconst	pfscore
    836  f21c				  -	      lda	pfscore2
    837  f21c				  -	      sta	PF1
    838  f21c					      else
    839  f21c				  -	      ifconst	scorefade
    840  f21c				  -	      sta	COLUP0
    841  f21c				  -	      sta	COLUP1
    842  f21c					      else
      0  f21c					      sleep	6
      1  f21c				   .CYCLES    SET	6
      2  f21c
      3  f21c				  -	      IF	.CYCLES < 2
      4  f21c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21c				  -	      ERR
      6  f21c					      ENDIF
      7  f21c
      8  f21c				  -	      IF	.CYCLES & 1
      9  f21c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21c				  -	      nop	0
     11  f21c				  -	      ELSE
     12  f21c				  -	      bit	VSYNC
     13  f21c				  -	      ENDIF
     14  f21c				  -.CYCLES    SET	.CYCLES - 3
     15  f21c					      ENDIF
     16  f21c
     17  f21c					      REPEAT	.CYCLES / 2
     18  f21c		       ea		      nop
     17  f21c					      REPEND
     18  f21d		       ea		      nop
     17  f21d					      REPEND
     18  f21e		       ea		      nop
     19  f21f					      REPEND
    844  f21f					      endif
    845  f21f					      endif
    846  f21f
    847  f21f		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f221		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f223		       ba		      tsx
    850  f224		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f226		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f228		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22a		       88		      dey
    854  f22b		       10 d8		      bpl	loop2	;+2 60 180
    855  f22d
    856  f22d		       a6 f6		      ldx	stack1
    857  f22f		       9a		      txs
    858  f230							; lda scorepointers+1
    859  f230		       a4 9c		      ldy	temp1
    860  f232							; sta temp1
    861  f232		       84 97		      sty	scorepointers+1
    862  f234
    863  f234		       a9 00		      LDA	#0
    864  f236		       85 0e		      sta	PF1
    865  f238		       85 1b		      STA	GRP0
    866  f23a		       85 1c		      STA	GRP1
    867  f23c		       85 25		      STA	VDELP0
    868  f23e		       85 26		      STA	VDELP1	;do we need these
    869  f240		       85 04		      STA	NUSIZ0
    870  f242		       85 05		      STA	NUSIZ1
    871  f244
    872  f244							; lda scorepointers+3
    873  f244		       a4 9e		      ldy	temp3
    874  f246							; sta temp3
    875  f246		       84 99		      sty	scorepointers+3
    876  f248
    877  f248							; lda scorepointers+5
    878  f248		       a4 a0		      ldy	temp5
    879  f24a							; sta temp5
    880  f24a		       84 9b		      sty	scorepointers+5
    881  f24c					      endif		;noscore
    882  f24c				  -	      ifconst	readpaddle
    883  f24c				  -	      lda	#%11000010
    884  f24c					      else
    885  f24c				  -	      ifconst	qtcontroller
    886  f24c				  -	      lda	qtcontroller
    887  f24c				  -	      lsr		; bit 0 in carry
    888  f24c				  -	      lda	#4
    889  f24c				  -	      ror		; carry into top of A
    890  f24c					      else
    891  f24c		       a9 02		      lda	#2
    892  f24e					      endif		; qtcontroller
    893  f24e					      endif		; readpaddle
    894  f24e		       85 02		      sta	WSYNC
    895  f250		       85 01		      sta	VBLANK
      0  f252					      RETURN
      1  f252					      ifnconst	bankswitch
      2  f252		       60		      rts
      3  f253				  -	      else
      4  f253				  -	      jmp	BS_return
      5  f253					      endif
    897  f253				  -	      ifconst	shakescreen
    898  f253				  -doshakescreen
    899  f253				  -	      bit	shakescreen
    900  f253				  -	      bmi	noshakescreen
    901  f253				  -	      sta	WSYNC
    902  f253				  -noshakescreen
    903  f253				  -	      ldx	missile0height
    904  f253				  -	      inx
    905  f253				  -	      rts
    906  f253					      endif
    907  f253
    908  f253							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f253
    910  f253							; playfield drawing routines
    911  f253							; you get a 32x12 bitmapped display in a single color :)
    912  f253							; 0-31 and 0-11
    913  f253
    914  f253				   pfclear		; clears playfield - or fill with pattern
    915  f253				  -	      ifconst	pfres
    916  f253				  -	      ldx	#pfres*pfwidth-1
    917  f253					      else
    918  f253		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f255					      endif
    920  f255				   pfclear_loop
    921  f255					      ifnconst	superchip
    922  f255		       95 a4		      sta	playfield,x
    923  f257				  -	      else
    924  f257				  -	      sta	playfield-128,x
    925  f257					      endif
    926  f257		       ca		      dex
    927  f258		       10 fb		      bpl	pfclear_loop
      0  f25a					      RETURN
      1  f25a					      ifnconst	bankswitch
      2  f25a		       60		      rts
      3  f25b				  -	      else
      4  f25b				  -	      jmp	BS_return
      5  f25b					      endif
    929  f25b
    930  f25b				   setuppointers
    931  f25b		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25d		       aa		      tax		; put x-value in x 
    933  f25e		       4a		      lsr
    934  f25f		       4a		      lsr
    935  f260		       4a		      lsr		; divide x pos by 8 
    936  f261		       85 9c		      sta	temp1
    937  f263		       98		      tya
    938  f264		       0a		      asl
    939  f265					      if	pfwidth=4
    940  f265		       0a		      asl		; multiply y pos by 4
    941  f266					      endif		; else multiply by 2
    942  f266		       18		      clc
    943  f267		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f269		       a8		      tay		; put the value in y
    945  f26a		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26c		       60		      rts
    947  f26d
    948  f26d				   pfread
    949  f26d							;x=xvalue, y=yvalue
    950  f26d		       20 5b f2 	      jsr	setuppointers
    951  f270		       bd d5 f2 	      lda	setbyte,x
    952  f273		       39 a4 00 	      and	playfield,y
    953  f276		       5d d5 f2 	      eor	setbyte,x
    954  f279							; beq readzero
    955  f279							; lda #1
    956  f279							; readzero
      0  f279					      RETURN
      1  f279					      ifnconst	bankswitch
      2  f279		       60		      rts
      3  f27a				  -	      else
      4  f27a				  -	      jmp	BS_return
      5  f27a					      endif
    958  f27a
    959  f27a				   pfpixel
    960  f27a							;x=xvalue, y=yvalue, a=0,1,2
    961  f27a		       20 5b f2 	      jsr	setuppointers
    962  f27d
    963  f27d				  -	      ifconst	bankswitch
    964  f27d				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27d				  -	      beq	pixelon_r	; if "on" go to on
    966  f27d				  -	      lsr
    967  f27d				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27d				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27d				  -	      eor	setbyte,x
    970  f27d				  -	      ifconst	superchip
    971  f27d				  -	      sta	playfield-128,y
    972  f27d				  -	      else
    973  f27d				  -	      sta	playfield,y
    974  f27d				  -	      endif
    975  f27d				  -	      RETURN
    976  f27d				  -pixelon_r
    977  f27d				  -	      lda	playfield,y
    978  f27d				  -	      ora	setbyte,x
    979  f27d				  -	      ifconst	superchip
    980  f27d				  -	      sta	playfield-128,y
    981  f27d				  -	      else
    982  f27d				  -	      sta	playfield,y
    983  f27d				  -	      endif
    984  f27d				  -	      RETURN
    985  f27d				  -pixeloff_r
    986  f27d				  -	      lda	setbyte,x
    987  f27d				  -	      eor	#$ff
    988  f27d				  -	      and	playfield,y
    989  f27d				  -	      ifconst	superchip
    990  f27d				  -	      sta	playfield-128,y
    991  f27d				  -	      else
    992  f27d				  -	      sta	playfield,y
    993  f27d				  -	      endif
    994  f27d				  -	      RETURN
    995  f27d				  -
    996  f27d					      else
    997  f27d		       4c ae f2 	      jmp	plotpoint
    998  f280					      endif
    999  f280
   1000  f280				   pfhline
   1001  f280							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f280		       20 5b f2 	      jsr	setuppointers
   1003  f283		       4c 8d f2 	      jmp	noinc
   1004  f286				   keepgoing
   1005  f286		       e8		      inx
   1006  f287		       8a		      txa
   1007  f288		       29 07		      and	#7
   1008  f28a		       d0 01		      bne	noinc
   1009  f28c		       c8		      iny
   1010  f28d				   noinc
   1011  f28d		       20 ae f2 	      jsr	plotpoint
   1012  f290		       e4 9e		      cpx	temp3
   1013  f292		       30 f2		      bmi	keepgoing
      0  f294					      RETURN
      1  f294					      ifnconst	bankswitch
      2  f294		       60		      rts
      3  f295				  -	      else
      4  f295				  -	      jmp	BS_return
      5  f295					      endif
   1015  f295
   1016  f295				   pfvline
   1017  f295							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f295		       20 5b f2 	      jsr	setuppointers
   1019  f298		       84 9c		      sty	temp1	; store memory location offset
   1020  f29a		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29c		       a5 9e		      lda	temp3
   1022  f29e		       0a		      asl
   1023  f29f					      if	pfwidth=4
   1024  f29f		       0a		      asl		; multiply by 4
   1025  f2a0					      endif		; else multiply by 2
   1026  f2a0		       85 9e		      sta	temp3	; store it
   1027  f2a2							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a2							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a2							; x should equal original x value
   1030  f2a2				   keepgoingy
   1031  f2a2		       20 ae f2 	      jsr	plotpoint
   1032  f2a5		       c8		      iny
   1033  f2a6		       c8		      iny
   1034  f2a7					      if	pfwidth=4
   1035  f2a7		       c8		      iny
   1036  f2a8		       c8		      iny
   1037  f2a9					      endif
   1038  f2a9		       c4 9e		      cpy	temp3
   1039  f2ab		       30 f5		      bmi	keepgoingy
      0  f2ad					      RETURN
      1  f2ad					      ifnconst	bankswitch
      2  f2ad		       60		      rts
      3  f2ae				  -	      else
      4  f2ae				  -	      jmp	BS_return
      5  f2ae					      endif
   1041  f2ae
   1042  f2ae				   plotpoint
   1043  f2ae		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b0		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b2		       4a		      lsr
   1046  f2b3		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b8		       5d d5 f2 	      eor	setbyte,x
   1049  f2bb				  -	      ifconst	superchip
   1050  f2bb				  -	      sta	playfield-128,y
   1051  f2bb					      else
   1052  f2bb		       99 a4 00 	      sta	playfield,y
   1053  f2be					      endif
   1054  f2be		       60		      rts
   1055  f2bf				   pixelon
   1056  f2bf		       b9 a4 00 	      lda	playfield,y
   1057  f2c2		       1d d5 f2 	      ora	setbyte,x
   1058  f2c5				  -	      ifconst	superchip
   1059  f2c5				  -	      sta	playfield-128,y
   1060  f2c5					      else
   1061  f2c5		       99 a4 00 	      sta	playfield,y
   1062  f2c8					      endif
   1063  f2c8		       60		      rts
   1064  f2c9				   pixeloff
   1065  f2c9		       bd d5 f2 	      lda	setbyte,x
   1066  f2cc		       49 ff		      eor	#$ff
   1067  f2ce		       39 a4 00 	      and	playfield,y
   1068  f2d1				  -	      ifconst	superchip
   1069  f2d1				  -	      sta	playfield-128,y
   1070  f2d1					      else
   1071  f2d1		       99 a4 00 	      sta	playfield,y
   1072  f2d4					      endif
   1073  f2d4		       60		      rts
   1074  f2d5
   1075  f2d5				   setbyte
   1076  f2d5					      ifnconst	pfcenter
   1077  f2d5		       80		      .byte.b	$80
   1078  f2d6		       40		      .byte.b	$40
   1079  f2d7		       20		      .byte.b	$20
   1080  f2d8		       10		      .byte.b	$10
   1081  f2d9		       08		      .byte.b	$08
   1082  f2da		       04		      .byte.b	$04
   1083  f2db		       02		      .byte.b	$02
   1084  f2dc		       01		      .byte.b	$01
   1085  f2dd					      endif
   1086  f2dd		       01		      .byte.b	$01
   1087  f2de		       02		      .byte.b	$02
   1088  f2df		       04		      .byte.b	$04
   1089  f2e0		       08		      .byte.b	$08
   1090  f2e1		       10		      .byte.b	$10
   1091  f2e2		       20		      .byte.b	$20
   1092  f2e3		       40		      .byte.b	$40
   1093  f2e4		       80		      .byte.b	$80
   1094  f2e5		       80		      .byte.b	$80
   1095  f2e6		       40		      .byte.b	$40
   1096  f2e7		       20		      .byte.b	$20
   1097  f2e8		       10		      .byte.b	$10
   1098  f2e9		       08		      .byte.b	$08
   1099  f2ea		       04		      .byte.b	$04
   1100  f2eb		       02		      .byte.b	$02
   1101  f2ec		       01		      .byte.b	$01
   1102  f2ed		       01		      .byte.b	$01
   1103  f2ee		       02		      .byte.b	$02
   1104  f2ef		       04		      .byte.b	$04
   1105  f2f0		       08		      .byte.b	$08
   1106  f2f1		       10		      .byte.b	$10
   1107  f2f2		       20		      .byte.b	$20
   1108  f2f3		       40		      .byte.b	$40
   1109  f2f4		       80		      .byte.b	$80
   1110  f2f5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f5
   1112  f2f5				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f5		       d0 13		      bne	notleft
   1114  f2f7							;left
   1115  f2f7				  -	      ifconst	pfres
   1116  f2f7				  -	      ldx	#pfres*4
   1117  f2f7					      else
   1118  f2f7		       a2 30		      ldx	#48
   1119  f2f9					      endif
   1120  f2f9				   leftloop
   1121  f2f9		       b5 a3		      lda	playfield-1,x
   1122  f2fb		       4a		      lsr
   1123  f2fc
   1124  f2fc				  -	      ifconst	superchip
   1125  f2fc				  -	      lda	playfield-2,x
   1126  f2fc				  -	      rol
   1127  f2fc				  -	      sta	playfield-130,x
   1128  f2fc				  -	      lda	playfield-3,x
   1129  f2fc				  -	      ror
   1130  f2fc				  -	      sta	playfield-131,x
   1131  f2fc				  -	      lda	playfield-4,x
   1132  f2fc				  -	      rol
   1133  f2fc				  -	      sta	playfield-132,x
   1134  f2fc				  -	      lda	playfield-1,x
   1135  f2fc				  -	      ror
   1136  f2fc				  -	      sta	playfield-129,x
   1137  f2fc					      else
   1138  f2fc		       36 a2		      rol	playfield-2,x
   1139  f2fe		       76 a1		      ror	playfield-3,x
   1140  f300		       36 a0		      rol	playfield-4,x
   1141  f302		       76 a3		      ror	playfield-1,x
   1142  f304					      endif
   1143  f304
   1144  f304		       8a		      txa
   1145  f305		       cb 04		      sbx	#4
   1146  f307		       d0 f0		      bne	leftloop
      0  f309					      RETURN
      1  f309					      ifnconst	bankswitch
      2  f309		       60		      rts
      3  f30a				  -	      else
      4  f30a				  -	      jmp	BS_return
      5  f30a					      endif
   1148  f30a
   1149  f30a				   notleft
   1150  f30a		       4a		      lsr
   1151  f30b		       90 13		      bcc	notright
   1152  f30d							;right
   1153  f30d
   1154  f30d				  -	      ifconst	pfres
   1155  f30d				  -	      ldx	#pfres*4
   1156  f30d					      else
   1157  f30d		       a2 30		      ldx	#48
   1158  f30f					      endif
   1159  f30f				   rightloop
   1160  f30f		       b5 a0		      lda	playfield-4,x
   1161  f311		       4a		      lsr
   1162  f312				  -	      ifconst	superchip
   1163  f312				  -	      lda	playfield-3,x
   1164  f312				  -	      rol
   1165  f312				  -	      sta	playfield-131,x
   1166  f312				  -	      lda	playfield-2,x
   1167  f312				  -	      ror
   1168  f312				  -	      sta	playfield-130,x
   1169  f312				  -	      lda	playfield-1,x
   1170  f312				  -	      rol
   1171  f312				  -	      sta	playfield-129,x
   1172  f312				  -	      lda	playfield-4,x
   1173  f312				  -	      ror
   1174  f312				  -	      sta	playfield-132,x
   1175  f312					      else
   1176  f312		       36 a1		      rol	playfield-3,x
   1177  f314		       76 a2		      ror	playfield-2,x
   1178  f316		       36 a3		      rol	playfield-1,x
   1179  f318		       76 a0		      ror	playfield-4,x
   1180  f31a					      endif
   1181  f31a		       8a		      txa
   1182  f31b		       cb 04		      sbx	#4
   1183  f31d		       d0 f0		      bne	rightloop
      0  f31f					      RETURN
      1  f31f					      ifnconst	bankswitch
      2  f31f		       60		      rts
      3  f320				  -	      else
      4  f320				  -	      jmp	BS_return
      5  f320					      endif
   1185  f320
   1186  f320				   notright
   1187  f320		       4a		      lsr
   1188  f321		       90 49		      bcc	notup
   1189  f323							;up
   1190  f323		       4a		      lsr
   1191  f324		       90 02		      bcc	onedecup
   1192  f326		       c6 ef		      dec	playfieldpos
   1193  f328				   onedecup
   1194  f328		       c6 ef		      dec	playfieldpos
   1195  f32a		       f0 02		      beq	shiftdown
   1196  f32c		       10 3d		      bpl	noshiftdown2
   1197  f32e				   shiftdown
   1198  f32e				  -	      ifconst	pfrowheight
   1199  f32e				  -	      lda	#pfrowheight
   1200  f32e					      else
   1201  f32e					      ifnconst	pfres
   1202  f32e		       a9 08		      lda	#8
   1203  f330				  -	      else
   1204  f330				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f330					      endif
   1206  f330					      endif
   1207  f330
   1208  f330		       85 ef		      sta	playfieldpos
   1209  f332		       a5 a7		      lda	playfield+3
   1210  f334		       85 9f		      sta	temp4
   1211  f336		       a5 a6		      lda	playfield+2
   1212  f338		       85 9e		      sta	temp3
   1213  f33a		       a5 a5		      lda	playfield+1
   1214  f33c		       85 9d		      sta	temp2
   1215  f33e		       a5 a4		      lda	playfield
   1216  f340		       85 9c		      sta	temp1
   1217  f342		       a2 00		      ldx	#0
   1218  f344				   up2
   1219  f344		       b5 a8		      lda	playfield+4,x
   1220  f346				  -	      ifconst	superchip
   1221  f346				  -	      sta	playfield-128,x
   1222  f346				  -	      lda	playfield+5,x
   1223  f346				  -	      sta	playfield-127,x
   1224  f346				  -	      lda	playfield+6,x
   1225  f346				  -	      sta	playfield-126,x
   1226  f346				  -	      lda	playfield+7,x
   1227  f346				  -	      sta	playfield-125,x
   1228  f346					      else
   1229  f346		       95 a4		      sta	playfield,x
   1230  f348		       b5 a9		      lda	playfield+5,x
   1231  f34a		       95 a5		      sta	playfield+1,x
   1232  f34c		       b5 aa		      lda	playfield+6,x
   1233  f34e		       95 a6		      sta	playfield+2,x
   1234  f350		       b5 ab		      lda	playfield+7,x
   1235  f352		       95 a7		      sta	playfield+3,x
   1236  f354					      endif
   1237  f354		       8a		      txa
   1238  f355		       cb fc		      sbx	#252
   1239  f357				  -	      ifconst	pfres
   1240  f357				  -	      cpx	#(pfres-1)*4
   1241  f357					      else
   1242  f357		       e0 2c		      cpx	#44
   1243  f359					      endif
   1244  f359		       d0 e9		      bne	up2
   1245  f35b
   1246  f35b		       a5 9f		      lda	temp4
   1247  f35d
   1248  f35d				  -	      ifconst	superchip
   1249  f35d				  -	      ifconst	pfres
   1250  f35d				  -	      sta	playfield+pfres*4-129
   1251  f35d				  -	      lda	temp3
   1252  f35d				  -	      sta	playfield+pfres*4-130
   1253  f35d				  -	      lda	temp2
   1254  f35d				  -	      sta	playfield+pfres*4-131
   1255  f35d				  -	      lda	temp1
   1256  f35d				  -	      sta	playfield+pfres*4-132
   1257  f35d				  -	      else
   1258  f35d				  -	      sta	playfield+47-128
   1259  f35d				  -	      lda	temp3
   1260  f35d				  -	      sta	playfield+46-128
   1261  f35d				  -	      lda	temp2
   1262  f35d				  -	      sta	playfield+45-128
   1263  f35d				  -	      lda	temp1
   1264  f35d				  -	      sta	playfield+44-128
   1265  f35d				  -	      endif
   1266  f35d					      else
   1267  f35d				  -	      ifconst	pfres
   1268  f35d				  -	      sta	playfield+pfres*4-1
   1269  f35d				  -	      lda	temp3
   1270  f35d				  -	      sta	playfield+pfres*4-2
   1271  f35d				  -	      lda	temp2
   1272  f35d				  -	      sta	playfield+pfres*4-3
   1273  f35d				  -	      lda	temp1
   1274  f35d				  -	      sta	playfield+pfres*4-4
   1275  f35d					      else
   1276  f35d		       85 d3		      sta	playfield+47
   1277  f35f		       a5 9e		      lda	temp3
   1278  f361		       85 d2		      sta	playfield+46
   1279  f363		       a5 9d		      lda	temp2
   1280  f365		       85 d1		      sta	playfield+45
   1281  f367		       a5 9c		      lda	temp1
   1282  f369		       85 d0		      sta	playfield+44
   1283  f36b					      endif
   1284  f36b					      endif
   1285  f36b				   noshiftdown2
      0  f36b					      RETURN
      1  f36b					      ifnconst	bankswitch
      2  f36b		       60		      rts
      3  f36c				  -	      else
      4  f36c				  -	      jmp	BS_return
      5  f36c					      endif
   1287  f36c
   1288  f36c
   1289  f36c				   notup
   1290  f36c							;down
   1291  f36c		       4a		      lsr
   1292  f36d		       b0 02		      bcs	oneincup
   1293  f36f		       e6 ef		      inc	playfieldpos
   1294  f371				   oneincup
   1295  f371		       e6 ef		      inc	playfieldpos
   1296  f373		       a5 ef		      lda	playfieldpos
   1297  f375
   1298  f375				  -	      ifconst	pfrowheight
   1299  f375				  -	      cmp	#pfrowheight+1
   1300  f375					      else
   1301  f375					      ifnconst	pfres
   1302  f375		       c9 09		      cmp	#9
   1303  f377				  -	      else
   1304  f377				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f377					      endif
   1306  f377					      endif
   1307  f377
   1308  f377		       90 3b		      bcc	noshiftdown
   1309  f379		       a9 01		      lda	#1
   1310  f37b		       85 ef		      sta	playfieldpos
   1311  f37d
   1312  f37d				  -	      ifconst	pfres
   1313  f37d				  -	      lda	playfield+pfres*4-1
   1314  f37d				  -	      sta	temp4
   1315  f37d				  -	      lda	playfield+pfres*4-2
   1316  f37d				  -	      sta	temp3
   1317  f37d				  -	      lda	playfield+pfres*4-3
   1318  f37d				  -	      sta	temp2
   1319  f37d				  -	      lda	playfield+pfres*4-4
   1320  f37d					      else
   1321  f37d		       a5 d3		      lda	playfield+47
   1322  f37f		       85 9f		      sta	temp4
   1323  f381		       a5 d2		      lda	playfield+46
   1324  f383		       85 9e		      sta	temp3
   1325  f385		       a5 d1		      lda	playfield+45
   1326  f387		       85 9d		      sta	temp2
   1327  f389		       a5 d0		      lda	playfield+44
   1328  f38b					      endif
   1329  f38b
   1330  f38b		       85 9c		      sta	temp1
   1331  f38d
   1332  f38d				  -	      ifconst	pfres
   1333  f38d				  -	      ldx	#(pfres-1)*4
   1334  f38d					      else
   1335  f38d		       a2 2c		      ldx	#44
   1336  f38f					      endif
   1337  f38f				   down2
   1338  f38f		       b5 a3		      lda	playfield-1,x
   1339  f391				  -	      ifconst	superchip
   1340  f391				  -	      sta	playfield-125,x
   1341  f391				  -	      lda	playfield-2,x
   1342  f391				  -	      sta	playfield-126,x
   1343  f391				  -	      lda	playfield-3,x
   1344  f391				  -	      sta	playfield-127,x
   1345  f391				  -	      lda	playfield-4,x
   1346  f391				  -	      sta	playfield-128,x
   1347  f391					      else
   1348  f391		       95 a7		      sta	playfield+3,x
   1349  f393		       b5 a2		      lda	playfield-2,x
   1350  f395		       95 a6		      sta	playfield+2,x
   1351  f397		       b5 a1		      lda	playfield-3,x
   1352  f399		       95 a5		      sta	playfield+1,x
   1353  f39b		       b5 a0		      lda	playfield-4,x
   1354  f39d		       95 a4		      sta	playfield,x
   1355  f39f					      endif
   1356  f39f		       8a		      txa
   1357  f3a0		       cb 04		      sbx	#4
   1358  f3a2		       d0 eb		      bne	down2
   1359  f3a4
   1360  f3a4		       a5 9f		      lda	temp4
   1361  f3a6				  -	      ifconst	superchip
   1362  f3a6				  -	      sta	playfield-125
   1363  f3a6				  -	      lda	temp3
   1364  f3a6				  -	      sta	playfield-126
   1365  f3a6				  -	      lda	temp2
   1366  f3a6				  -	      sta	playfield-127
   1367  f3a6				  -	      lda	temp1
   1368  f3a6				  -	      sta	playfield-128
   1369  f3a6					      else
   1370  f3a6		       85 a7		      sta	playfield+3
   1371  f3a8		       a5 9e		      lda	temp3
   1372  f3aa		       85 a6		      sta	playfield+2
   1373  f3ac		       a5 9d		      lda	temp2
   1374  f3ae		       85 a5		      sta	playfield+1
   1375  f3b0		       a5 9c		      lda	temp1
   1376  f3b2		       85 a4		      sta	playfield
   1377  f3b4					      endif
   1378  f3b4				   noshiftdown
      0  f3b4					      RETURN
      1  f3b4					      ifnconst	bankswitch
      2  f3b4		       60		      rts
      3  f3b5				  -	      else
      4  f3b5				  -	      jmp	BS_return
      5  f3b5					      endif
   1380  f3b5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b5
   1382  f3b5							;standard routines needed for pretty much all games
   1383  f3b5							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b5							; repositioning code and score pointer setup moved to overscan
   1385  f3b5							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b5
   1387  f3b5				   randomize
   1388  f3b5		       a5 a2		      lda	rand
   1389  f3b7		       4a		      lsr
   1390  f3b8				  -	      ifconst	rand16
   1391  f3b8				  -	      rol	rand16
   1392  f3b8					      endif
   1393  f3b8		       90 02		      bcc	noeor
   1394  f3ba		       49 b4		      eor	#$B4
   1395  f3bc				   noeor
   1396  f3bc		       85 a2		      sta	rand
   1397  f3be				  -	      ifconst	rand16
   1398  f3be				  -	      eor	rand16
   1399  f3be					      endif
      0  f3be					      RETURN
      1  f3be					      ifnconst	bankswitch
      2  f3be		       60		      rts
      3  f3bf				  -	      else
      4  f3bf				  -	      jmp	BS_return
      5  f3bf					      endif
   1401  f3bf							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3bf
   1403  f3bf				   drawscreen
   1404  f3bf				  -	      ifconst	debugscore
   1405  f3bf				  -	      ldx	#14
   1406  f3bf				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3bf				  -
   1408  f3bf				  -	      ifconst	mincycles
   1409  f3bf				  -	      lda	mincycles
   1410  f3bf				  -	      cmp	INTIM
   1411  f3bf				  -	      lda	mincycles
   1412  f3bf				  -	      bcc	nochange
   1413  f3bf				  -	      lda	INTIM
   1414  f3bf				  -	      sta	mincycles
   1415  f3bf				  -nochange
   1416  f3bf				  -	      endif
   1417  f3bf				  -
   1418  f3bf				  -			; cmp #$2B
   1419  f3bf				  -			; bcs no_cycles_left
   1420  f3bf				  -	      bmi	cycles_left
   1421  f3bf				  -	      ldx	#64
   1422  f3bf				  -	      eor	#$ff	;make negative
   1423  f3bf				  -cycles_left
   1424  f3bf				  -	      stx	scorecolor
   1425  f3bf				  -	      and	#$7f	; clear sign bit
   1426  f3bf				  -	      tax
   1427  f3bf				  -	      lda	scorebcd,x
   1428  f3bf				  -	      sta	score+2
   1429  f3bf				  -	      lda	scorebcd1,x
   1430  f3bf				  -	      sta	score+1
   1431  f3bf				  -	      jmp	done_debugscore
   1432  f3bf				  -scorebcd
   1433  f3bf				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3bf				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3bf				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3bf				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3bf				  -scorebcd1
   1438  f3bf				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3bf				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3bf				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3bf				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3bf				  -done_debugscore
   1443  f3bf					      endif
   1444  f3bf
   1445  f3bf				  -	      ifconst	debugcycles
   1446  f3bf				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3bf				  -			; cmp #$2B
   1448  f3bf				  -			; BCC overscan
   1449  f3bf				  -	      bmi	overscan
   1450  f3bf				  -	      sta	COLUBK
   1451  f3bf				  -	      bcs	doneoverscan
   1452  f3bf					      endif
   1453  f3bf
   1454  f3bf				   overscan
   1455  f3bf				  -	      ifconst	interlaced
   1456  f3bf				  -	      PHP
   1457  f3bf				  -	      PLA
   1458  f3bf				  -	      EOR	#4	; flip interrupt bit
   1459  f3bf				  -	      PHA
   1460  f3bf				  -	      PLP
   1461  f3bf				  -	      AND	#4	; isolate the interrupt bit
   1462  f3bf				  -	      TAX		; save it for later
   1463  f3bf					      endif
   1464  f3bf
   1465  f3bf				   overscanloop
   1466  f3bf		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c2		       30 fb		      bmi	overscanloop
   1468  f3c4				   doneoverscan
   1469  f3c4
   1470  f3c4							;do VSYNC
   1471  f3c4
   1472  f3c4				  -	      ifconst	interlaced
   1473  f3c4				  -	      CPX	#4
   1474  f3c4				  -	      BNE	oddframevsync
   1475  f3c4					      endif
   1476  f3c4
   1477  f3c4		       a9 02		      lda	#2
   1478  f3c6		       85 02		      sta	WSYNC
   1479  f3c8		       85 00		      sta	VSYNC
   1480  f3ca		       85 02		      STA	WSYNC
   1481  f3cc		       85 02		      STA	WSYNC
   1482  f3ce		       4a		      lsr
   1483  f3cf		       85 02		      STA	WSYNC
   1484  f3d1		       85 00		      STA	VSYNC
   1485  f3d3		       85 01		      sta	VBLANK
   1486  f3d5					      ifnconst	overscan_time
   1487  f3d5		       a9 a5		      lda	#37+128
   1488  f3d7				  -	      else
   1489  f3d7				  -	      lda	#overscan_time+128
   1490  f3d7					      endif
   1491  f3d7		       8d 96 02 	      sta	TIM64T
   1492  f3da
   1493  f3da				  -	      ifconst	interlaced
   1494  f3da				  -	      jmp	postsync
   1495  f3da				  -
   1496  f3da				  -oddframevsync
   1497  f3da				  -	      sta	WSYNC
   1498  f3da				  -
   1499  f3da				  -	      LDA	($80,X)	; 11 waste
   1500  f3da				  -	      LDA	($80,X)	; 11 waste
   1501  f3da				  -	      LDA	($80,X)	; 11 waste
   1502  f3da				  -
   1503  f3da				  -	      lda	#2
   1504  f3da				  -	      sta	VSYNC
   1505  f3da				  -	      sta	WSYNC
   1506  f3da				  -	      sta	WSYNC
   1507  f3da				  -	      sta	WSYNC
   1508  f3da				  -
   1509  f3da				  -	      LDA	($80,X)	; 11 waste
   1510  f3da				  -	      LDA	($80,X)	; 11 waste
   1511  f3da				  -	      LDA	($80,X)	; 11 waste
   1512  f3da				  -
   1513  f3da				  -	      lda	#0
   1514  f3da				  -	      sta	VSYNC
   1515  f3da				  -	      sta	VBLANK
   1516  f3da				  -	      ifnconst	overscan_time
   1517  f3da				  -	      lda	#37+128
   1518  f3da				  -	      else
   1519  f3da				  -	      lda	#overscan_time+128
   1520  f3da				  -	      endif
   1521  f3da				  -	      sta	TIM64T
   1522  f3da				  -
   1523  f3da				  -postsync
   1524  f3da					      endif
   1525  f3da
   1526  f3da				  -	      ifconst	legacy
   1527  f3da				  -	      if	legacy < 100
   1528  f3da				  -	      ldx	#4
   1529  f3da				  -adjustloop
   1530  f3da				  -	      lda	player0x,x
   1531  f3da				  -	      sec
   1532  f3da				  -	      sbc	#14	;?
   1533  f3da				  -	      sta	player0x,x
   1534  f3da				  -	      dex
   1535  f3da				  -	      bpl	adjustloop
   1536  f3da				  -	      endif
   1537  f3da					      endif
   1538  f3da				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3da				  -	      repeat	($fa-(<*))
   1540  f3da				  -	      nop
   1541  f3da				  -	      repend
   1542  f3da					      endif
   1543  f3da		       85 02		      sta	WSYNC
   1544  f3dc		       a2 04		      ldx	#4
      0  f3de					      SLEEP	3
      1  f3de				   .CYCLES    SET	3
      2  f3de
      3  f3de				  -	      IF	.CYCLES < 2
      4  f3de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3de				  -	      ERR
      6  f3de					      ENDIF
      7  f3de
      8  f3de					      IF	.CYCLES & 1
      9  f3de					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3de		       04 00		      nop	0
     11  f3e0				  -	      ELSE
     12  f3e0				  -	      bit	VSYNC
     13  f3e0					      ENDIF
     14  f3e0				   .CYCLES    SET	.CYCLES - 3
     15  f3e0					      ENDIF
     16  f3e0
     17  f3e0				  -	      REPEAT	.CYCLES / 2
     18  f3e0				  -	      nop
     19  f3e0					      REPEND
   1546  f3e0				   HorPosLoop		; 5
   1547  f3e0		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e2		       38		      sec		;+2 11
   1549  f3e3				   DivideLoop
   1550  f3e3		       e9 0f		      sbc	#15
   1551  f3e5		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e7		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e9		       95 10		      sta	RESP0,X	;+4 23
   1554  f3eb		       85 02		      sta	WSYNC
   1555  f3ed		       ca		      dex
   1556  f3ee		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f0							; 4
   1558  f3f0
   1559  f3f0		       a2 04		      ldx	#4
   1560  f3f2		       b4 9c		      ldy	temp1,X
   1561  f3f4		       b9 53 f3 	      lda	repostable-256,Y
   1562  f3f7		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f9
   1564  f3f9		       ca		      dex
   1565  f3fa		       b4 9c		      ldy	temp1,X
   1566  f3fc		       b9 53 f3 	      lda	repostable-256,Y
   1567  f3ff		       95 20		      sta	HMP0,X	;+14 32
   1568  f401
   1569  f401		       ca		      dex
   1570  f402		       b4 9c		      ldy	temp1,X
   1571  f404		       b9 53 f3 	      lda	repostable-256,Y
   1572  f407		       95 20		      sta	HMP0,X	;+14 46
   1573  f409
   1574  f409		       ca		      dex
   1575  f40a		       b4 9c		      ldy	temp1,X
   1576  f40c		       b9 53 f3 	      lda	repostable-256,Y
   1577  f40f		       95 20		      sta	HMP0,X	;+14 60
   1578  f411
   1579  f411		       ca		      dex
   1580  f412		       b4 9c		      ldy	temp1,X
   1581  f414		       b9 53 f3 	      lda	repostable-256,Y
   1582  f417		       95 20		      sta	HMP0,X	;+14 74
   1583  f419
   1584  f419		       85 02		      sta	WSYNC
   1585  f41b
   1586  f41b		       85 2a		      sta	HMOVE	;+3 3
   1587  f41d
   1588  f41d
   1589  f41d				  -	      ifconst	legacy
   1590  f41d				  -	      if	legacy < 100
   1591  f41d				  -	      ldx	#4
   1592  f41d				  -adjustloop2
   1593  f41d				  -	      lda	player0x,x
   1594  f41d				  -	      clc
   1595  f41d				  -	      adc	#14	;?
   1596  f41d				  -	      sta	player0x,x
   1597  f41d				  -	      dex
   1598  f41d				  -	      bpl	adjustloop2
   1599  f41d				  -	      endif
   1600  f41d					      endif
   1601  f41d
   1602  f41d
   1603  f41d
   1604  f41d
   1605  f41d							;set score pointers
   1606  f41d		       a7 95		      lax	score+2
   1607  f41f		       20 53 f4 	      jsr	scorepointerset
   1608  f422		       84 9b		      sty	scorepointers+5
   1609  f424		       86 98		      stx	scorepointers+2
   1610  f426		       a7 94		      lax	score+1
   1611  f428		       20 53 f4 	      jsr	scorepointerset
   1612  f42b		       84 9a		      sty	scorepointers+4
   1613  f42d		       86 97		      stx	scorepointers+1
   1614  f42f		       a7 93		      lax	score
   1615  f431		       20 53 f4 	      jsr	scorepointerset
   1616  f434		       84 99		      sty	scorepointers+3
   1617  f436		       86 96		      stx	scorepointers
   1618  f438
   1619  f438				   vblk
   1620  f438							; run possible vblank bB code
   1621  f438					      ifconst	vblank_bB_code
   1622  f438		       20 4f f9 	      jsr	vblank_bB_code
   1623  f43b					      endif
   1624  f43b				   vblk2
   1625  f43b		       ad 84 02 	      LDA	INTIM
   1626  f43e		       30 fb		      bmi	vblk2
   1627  f440		       4c 34 f0 	      jmp	kernel
   1628  f443
   1629  f443
   1630  f443		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f44c		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f453				   repostable
   1633  f453
   1634  f453				   scorepointerset
   1635  f453		       29 0f		      and	#$0F
   1636  f455		       0a		      asl
   1637  f456		       0a		      asl
   1638  f457		       0a		      asl
   1639  f458		       69 9c		      adc	#<scoretable
   1640  f45a		       a8		      tay
   1641  f45b		       8a		      txa
   1642  f45c							; and #$F0
   1643  f45c							; lsr
   1644  f45c		       4b f0		      asr	#$F0
   1645  f45e		       69 9c		      adc	#<scoretable
   1646  f460		       aa		      tax
   1647  f461		       60		      rts
   1648  f462							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1649  f462
   1650  f462							; Fixed point math routines - created by AtariAge member djmips
   1651  f462							; some changes by Fred Quimby
   1652  f462
   1653  f462							;assignment from 8.8 to 4.4
   1654  f462
   1655  f462				   Assign88to44
   1656  f462
   1657  f462							; A(4.4) = A,X(8.8)
   1658  f462
   1659  f462		       86 9c		      stx	temp1
   1660  f464		       26 9c		      rol	temp1
   1661  f466		       0a		      asl
   1662  f467		       26 9c		      rol	temp1
   1663  f469		       0a		      asl
   1664  f46a		       26 9c		      rol	temp1
   1665  f46c		       0a		      asl
   1666  f46d		       26 9c		      rol	temp1
   1667  f46f		       0a		      asl
   1668  f470		       60		      rts
   1669  f471
   1670  f471							;assignment from 4.4 to 8.8
   1671  f471							;
   1672  f471
   1673  f471				   Assign44to88
   1674  f471
   1675  f471							; A,X(8.8) = A(4.4)
   1676  f471
   1677  f471		       85 9c		      sta	temp1
   1678  f473		       a9 00		      lda	#0
   1679  f475		       06 9c		      asl	temp1
   1680  f477		       e9 00		      sbc	#0	;
   1681  f479		       49 ff		      eor	#$ff	; do sign extend
   1682  f47b		       2a		      rol
   1683  f47c		       06 9c		      asl	temp1
   1684  f47e		       2a		      rol
   1685  f47f		       06 9c		      asl	temp1
   1686  f481		       2a		      rol
   1687  f482		       06 9c		      asl	temp1
   1688  f484		       2a		      rol
   1689  f485		       a6 9c		      ldx	temp1
   1690  f487		       60		      rts
   1691  f488
   1692  f488				  -	      ifconst	bankswitch
   1693  f488				  -Assign88to44bs
   1694  f488				  -
   1695  f488				  -			; A(4.4) = A,X(8.8)
   1696  f488				  -
   1697  f488				  -	      stx	temp1
   1698  f488				  -	      rol	temp1
   1699  f488				  -	      asl
   1700  f488				  -	      rol	temp1
   1701  f488				  -	      asl
   1702  f488				  -	      rol	temp1
   1703  f488				  -	      asl
   1704  f488				  -	      rol	temp1
   1705  f488				  -	      asl
   1706  f488				  -	      RETURN
   1707  f488				  -
   1708  f488				  -			;assignment from 4.4 to 8.8
   1709  f488				  -			;
   1710  f488				  -
   1711  f488				  -Assign44to88bs
   1712  f488				  -
   1713  f488				  -			; A,X(8.8) = A(4.4)
   1714  f488				  -
   1715  f488				  -	      sta	temp1
   1716  f488				  -	      lda	#0
   1717  f488				  -	      asl	temp1
   1718  f488				  -	      sbc	#0	;
   1719  f488				  -	      eor	#$ff	; do sign extend
   1720  f488				  -	      rol
   1721  f488				  -	      asl	temp1
   1722  f488				  -	      rol
   1723  f488				  -	      asl	temp1
   1724  f488				  -	      rol
   1725  f488				  -	      asl	temp1
   1726  f488				  -	      rol
   1727  f488				  -	      ldx	temp1
   1728  f488				  -	      RETURN
   1729  f488					      endif
   1730  f488
   1731  f488							;
   1732  f488							;Addition/subtraction asm procedures:
   1733  f488
   1734  f488							;add/sub 8.8 to/from 4.4
   1735  f488
   1736  f488				   Add88to44
   1737  f488
   1738  f488							; A(4.4) = A,X(8.8) + Y(4.4)
   1739  f488
   1740  f488		       20 62 f4 	      jsr	Assign88to44
   1741  f48b		       84 9c		      sty	temp1
   1742  f48d		       18		      clc
   1743  f48e		       65 9c		      adc	temp1
   1744  f490		       60		      rts
   1745  f491
   1746  f491				   Sub88from44
   1747  f491
   1748  f491							; A(4.4) = A,X(8.8) - Y(4.4)
   1749  f491
   1750  f491		       20 62 f4 	      jsr	Assign88to44
   1751  f494		       84 9c		      sty	temp1
   1752  f496		       38		      sec
   1753  f497		       e5 9c		      sbc	temp1
   1754  f499		       60		      rts
   1755  f49a
   1756  f49a
   1757  f49a				   Add44to88
   1758  f49a
   1759  f49a							; A,X(8.8) = A,X(8.8) + Y(4.4)
   1760  f49a
   1761  f49a		       85 9d		      sta	temp2
   1762  f49c		       86 9e		      stx	temp3
   1763  f49e		       98		      tya
   1764  f49f		       20 71 f4 	      jsr	Assign44to88
   1765  f4a2		       18		      clc
   1766  f4a3		       85 9c		      sta	temp1
   1767  f4a5		       8a		      txa
   1768  f4a6		       65 9e		      adc	temp3
   1769  f4a8		       aa		      tax
   1770  f4a9		       a5 9c		      lda	temp1
   1771  f4ab		       65 9d		      adc	temp2
   1772  f4ad		       60		      rts
   1773  f4ae
   1774  f4ae
   1775  f4ae				   Sub44from88
   1776  f4ae
   1777  f4ae							; A,X(8.8) = A,X(8.8) - Y(4.4)
   1778  f4ae
   1779  f4ae		       85 9d		      sta	temp2
   1780  f4b0		       86 9e		      stx	temp3
   1781  f4b2		       98		      tya
   1782  f4b3		       20 71 f4 	      jsr	Assign44to88
   1783  f4b6		       38		      sec
   1784  f4b7		       85 9c		      sta	temp1
   1785  f4b9		       a5 9e		      lda	temp3
   1786  f4bb		       86 9e		      stx	temp3
   1787  f4bd		       e5 9e		      sbc	temp3
   1788  f4bf		       aa		      tax
   1789  f4c0		       a5 9d		      lda	temp2
   1790  f4c2		       e5 9c		      sbc	temp1
   1791  f4c4		       60		      rts
   1792  f4c5
   1793  f4c5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1794  f4c5
   1795  f4c5							; y and a contain multiplicands, result in a
   1796  f4c5
   1797  f4c5				   mul8
   1798  f4c5		       84 9c		      sty	temp1
   1799  f4c7		       85 9d		      sta	temp2
   1800  f4c9		       a9 00		      lda	#0
   1801  f4cb				   reptmul8
   1802  f4cb		       46 9d		      lsr	temp2
   1803  f4cd		       90 03		      bcc	skipmul8
   1804  f4cf		       18		      clc
   1805  f4d0		       65 9c		      adc	temp1
   1806  f4d2							;bcs donemul8 might save cycles?
   1807  f4d2				   skipmul8
   1808  f4d2							;beq donemul8 might save cycles?
   1809  f4d2		       06 9c		      asl	temp1
   1810  f4d4		       d0 f5		      bne	reptmul8
   1811  f4d6				   donemul8
      0  f4d6					      RETURN
      1  f4d6					      ifnconst	bankswitch
      2  f4d6		       60		      rts
      3  f4d7				  -	      else
      4  f4d7				  -	      jmp	BS_return
      5  f4d7					      endif
   1813  f4d7
   1814  f4d7				   div8
   1815  f4d7							; a=numerator y=denominator, result in a
   1816  f4d7		       c0 02		      cpy	#2
   1817  f4d9		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   1818  f4db		       84 9c		      sty	temp1
   1819  f4dd		       a0 ff		      ldy	#$ff
   1820  f4df				   div8loop
   1821  f4df		       e5 9c		      sbc	temp1
   1822  f4e1		       c8		      iny
   1823  f4e2		       b0 fb		      bcs	div8loop
   1824  f4e4				   div8end
   1825  f4e4		       98		      tya
   1826  f4e5							; result in a
      0  f4e5					      RETURN
      1  f4e5					      ifnconst	bankswitch
      2  f4e5		       60		      rts
      3  f4e6				  -	      else
      4  f4e6				  -	      jmp	BS_return
      5  f4e6					      endif
   1828  f4e6
   1829  f4e6				   game
   1830  f4e6				   .L00 		;  include fixed_point_math.asm
   1831  f4e6
   1832  f4e6				   .L01 		;  include div_mul.asm
   1833  f4e6
   1834  f4e6				   .L02 		;  set kernel_options no_blank_lines
   1835  f4e6
   1836  f4e6				   .
   1837  f4e6							; 
   1838  f4e6
   1839  f4e6				   .L03 		;  dim _sc1  =  score
   1840  f4e6
   1841  f4e6				   .L04 		;  dim _sc2  =  score + 1
   1842  f4e6
   1843  f4e6				   .L05 		;  dim _sc3  =  score + 2
   1844  f4e6
   1845  f4e6				   .
   1846  f4e6							; 
   1847  f4e6
   1848  f4e6				   .L06 		;  rem Setup 8.8 fixed point variables for smooth movement
   1849  f4e6
   1850  f4e6				   .L07 		;  dim _player0x = player0x.a
   1851  f4e6
   1852  f4e6				   .L08 		;  dim _player1x = player1x.b
   1853  f4e6
   1854  f4e6				   .L09 		;  dim _missile0x =  missile0x.c
   1855  f4e6
   1856  f4e6				   .L010		;  dim _missile1x =  missile1x.d
   1857  f4e6
   1858  f4e6				   .L011		;  dim _ballx = ballx.e
   1859  f4e6
   1860  f4e6				   .
   1861  f4e6							; 
   1862  f4e6
   1863  f4e6				   .L012		;  dim _player0shift = f.g
   1864  f4e6
   1865  f4e6				   .L013		;  dim _player1shift = h.i
   1866  f4e6
   1867  f4e6				   .L014		;  dim _ballShift = j.k
   1868  f4e6
   1869  f4e6				   .L015		;  dim _missile0shift = l.m
   1870  f4e6
   1871  f4e6				   .L016		;  dim _missile1shift = n.o
   1872  f4e6
   1873  f4e6				   .L017		;  dim moveAmount = p.q
   1874  f4e6
   1875  f4e6				   .
   1876  f4e6							; 
   1877  f4e6
   1878  f4e6				   .
   1879  f4e6							; 
   1880  f4e6
   1881  f4e6				   .L018		;  dim buttonPressed = x
   1882  f4e6
   1883  f4e6				   .L019		;  dim editing = y
   1884  f4e6
   1885  f4e6				   .L020		;  dim currentPreview = z
   1886  f4e6
   1887  f4e6				   .
   1888  f4e6							; 
   1889  f4e6
   1890  f4e6				   .
   1891  f4e6							; 
   1892  f4e6
   1893  f4e6				   .L021		;  gosub getPlayers
   1894  f4e6
   1895  f4e6		       20 74 f9 	      jsr	.getPlayers
   1896  f4e9
   1897  f4e9				   .L022		;  rem This is the smallest amount that a fraction of 8.8 can be moved
   1898  f4e9
   1899  f4e9				   .L023		;  moveAmount = 0.003921
   1900  f4e9
   1901  f4e9		       a2 01		      LDX	#1
   1902  f4eb		       86 e4		      STX	q
   1903  f4ed		       a9 00		      LDA	#0
   1904  f4ef		       85 e3		      STA	moveAmount
   1905  f4f1				   .
   1906  f4f1							; 
   1907  f4f1
   1908  f4f1				   .L024		;  rem The 2 data arrays hold the visual preset positions
   1909  f4f1
   1910  f4f1				   .L025		;  rem Even numbers are the whole and odd the fractions
   1911  f4f1
   1912  f4f1				   .L026		;  data shiftPostions0
   1913  f4f1
   1914  f4f1		       4c fb f4 	      JMP	.skipL026
   1915  f4f4				   shiftPostions0
   1916  f4f4		       01		      .byte.b	1
   1917  f4f5
   1918  f4f5		       10		      .byte.b	16
   1919  f4f6
   1920  f4f6		       11		      .byte.b	17
   1921  f4f7
   1922  f4f7		       ee		      .byte.b	238
   1923  f4f8
   1924  f4f8		       ef		      .byte.b	239
   1925  f4f9
   1926  f4f9		       f0		      .byte.b	240
   1927  f4fa
   1928  f4fa		       ff		      .byte.b	255
   1929  f4fb
   1930  f4fb				   .skipL026
   1931  f4fb				   .
   1932  f4fb							; 
   1933  f4fb
   1934  f4fb				   .
   1935  f4fb							; 
   1936  f4fb
   1937  f4fb				   .
   1938  f4fb							; 
   1939  f4fb
   1940  f4fb				   .L027		;  rem 
   1941  f4fb
   1942  f4fb				   .L028		;  rem  player0:
   1943  f4fb
   1944  f4fb				   .L029		;  rem  %00011000
   1945  f4fb
   1946  f4fb				   .L030		;  rem  %01100110
   1947  f4fb
   1948  f4fb				   .L031		;  rem  %01100110
   1949  f4fb
   1950  f4fb				   .L032		;  rem  %00111100
   1951  f4fb
   1952  f4fb				   .L033		;  rem  %00111100
   1953  f4fb
   1954  f4fb				   .L034		;  rem  %01011010
   1955  f4fb
   1956  f4fb				   .L035		;  rem  %01100110
   1957  f4fb
   1958  f4fb				   .L036		;  rem  %00011000
   1959  f4fb
   1960  f4fb				   .L037		;  rem end
   1961  f4fb
   1962  f4fb				   .
   1963  f4fb							; 
   1964  f4fb
   1965  f4fb				   .resetPoint
   1966  f4fb							; resetPoint
   1967  f4fb
   1968  f4fb				   .L038		;  rem Read data for movement
   1969  f4fb
   1970  f4fb				   .L039		;  f = shiftPostions0[currentPreview]
   1971  f4fb
   1972  f4fb		       a6 ed		      LDX	currentPreview
   1973  f4fd		       bd f4 f4 	      LDA	shiftPostions0,x
   1974  f500		       85 d9		      STA	f
   1975  f502				   .L040		;  h = shiftPostions0[currentPreview]
   1976  f502
   1977  f502		       a6 ed		      LDX	currentPreview
   1978  f504		       bd f4 f4 	      LDA	shiftPostions0,x
   1979  f507		       85 db		      STA	h
   1980  f509				   .L041		;  j = shiftPostions0[currentPreview]
   1981  f509
   1982  f509		       a6 ed		      LDX	currentPreview
   1983  f50b		       bd f4 f4 	      LDA	shiftPostions0,x
   1984  f50e		       85 dd		      STA	j
   1985  f510				   .L042		;  l = shiftPostions0[currentPreview]
   1986  f510
   1987  f510		       a6 ed		      LDX	currentPreview
   1988  f512		       bd f4 f4 	      LDA	shiftPostions0,x
   1989  f515		       85 df		      STA	l
   1990  f517				   .L043		;  n = shiftPostions0[currentPreview]
   1991  f517
   1992  f517		       a6 ed		      LDX	currentPreview
   1993  f519		       bd f4 f4 	      LDA	shiftPostions0,x
   1994  f51c		       85 e1		      STA	n
   1995  f51e				   .L044		;  temp3 = currentPreview + 1
   1996  f51e
   1997  f51e		       a5 ed		      LDA	currentPreview
   1998  f520		       18		      CLC
   1999  f521		       69 01		      ADC	#1
   2000  f523		       85 9e		      STA	temp3
   2001  f525				   .
   2002  f525							; 
   2003  f525
   2004  f525				   .L045		;  g = 0
   2005  f525
   2006  f525		       a9 00		      LDA	#0
   2007  f527		       85 da		      STA	g
   2008  f529				   .L046		;  i = 50
   2009  f529
   2010  f529		       a9 32		      LDA	#50
   2011  f52b		       85 dc		      STA	i
   2012  f52d				   .L047		;  k = 100
   2013  f52d
   2014  f52d		       a9 64		      LDA	#100
   2015  f52f		       85 de		      STA	k
   2016  f531				   .L048		;  m = 150
   2017  f531
   2018  f531		       a9 96		      LDA	#150
   2019  f533		       85 e0		      STA	m
   2020  f535				   .L049		;  o = 200
   2021  f535
   2022  f535		       a9 c8		      LDA	#200
   2023  f537		       85 e2		      STA	o
   2024  f539				   .L050		;  currentPreview = temp3
   2025  f539
   2026  f539		       a5 9e		      LDA	temp3
   2027  f53b		       85 ed		      STA	currentPreview
   2028  f53d				   .
   2029  f53d							; 
   2030  f53d
   2031  f53d				   .L051		;  if currentPreview = shiftPostions0_length then currentPreview = 0
   2032  f53d
   2033  f53d		       a5 ed		      LDA	currentPreview
   2034  f53f		       c9 07		      CMP	#shiftPostions0_length
   2035  f541		       d0 04		      BNE	.skipL051
   2036  f543				   .condpart0
   2037  f543		       a9 00		      LDA	#0
   2038  f545		       85 ed		      STA	currentPreview
   2039  f547				   .skipL051
   2040  f547				   .
   2041  f547							; 
   2042  f547
   2043  f547				   .L052		;  editing = 4
   2044  f547
   2045  f547		       a9 04		      LDA	#4
   2046  f549		       85 ec		      STA	editing
   2047  f54b				   .L053		;  gosub changeEdit
   2048  f54b
   2049  f54b		       20 a3 f6 	      jsr	.changeEdit
   2050  f54e
   2051  f54e				   .main
   2052  f54e							; main
   2053  f54e
   2054  f54e				   .L054		;  ENAM0 = 2
   2055  f54e
   2056  f54e		       a9 02		      LDA	#2
   2057  f550		       85 1d		      STA	ENAM0
   2058  f552				   .L055		;  missile1height = 0
   2059  f552
   2060  f552		       a9 00		      LDA	#0
   2061  f554		       85 87		      STA	missile1height
   2062  f556				   .L056		;  ballheight = 255
   2063  f556
   2064  f556		       a9 ff		      LDA	#255
   2065  f558		       85 92		      STA	ballheight
   2066  f55a				   .
   2067  f55a							; 
   2068  f55a
   2069  f55a				   .L057		;  CTRLPF = $01
   2070  f55a
   2071  f55a		       a9 01		      LDA	#$01
   2072  f55c		       85 0a		      STA	CTRLPF
   2073  f55e				   .
   2074  f55e							; 
   2075  f55e
   2076  f55e				   .
   2077  f55e							; 
   2078  f55e
   2079  f55e				   .L058		;  player0height = 255
   2080  f55e
   2081  f55e		       a9 ff		      LDA	#255
   2082  f560		       85 8e		      STA	player0height
   2083  f562				   .L059		;  player1height = 255
   2084  f562
   2085  f562		       a9 ff		      LDA	#255
   2086  f564		       85 8f		      STA	player1height
   2087  f566				   .
   2088  f566							; 
   2089  f566
   2090  f566				   .L060		;  missile0height = 10
   2091  f566
   2092  f566		       a9 0a		      LDA	#10
   2093  f568		       85 90		      STA	missile0height
   2094  f56a				   .L061		;  rem By making missile1height 255 it was able to wrap around the whole screen
   2095  f56a
   2096  f56a				   .
   2097  f56a							; 
   2098  f56a
   2099  f56a				   .L062		;  COLUP0 = 196
   2100  f56a
   2101  f56a		       a9 c4		      LDA	#196
   2102  f56c		       85 06		      STA	COLUP0
   2103  f56e				   .L063		;  COLUP1  =  64
   2104  f56e
   2105  f56e		       a9 40		      LDA	#64
   2106  f570		       85 07		      STA	COLUP1
   2107  f572				   .L064		;  COLUBK  =  00
   2108  f572
   2109  f572		       a9 00		      LDA	#00
   2110  f574		       85 09		      STA	COLUBK
   2111  f576				   .L065		;  COLUPF = 132
   2112  f576
   2113  f576		       a9 84		      LDA	#132
   2114  f578		       85 08		      STA	COLUPF
   2115  f57a				   .
   2116  f57a							; 
   2117  f57a
   2118  f57a				   .L066		;  rem Changes whether you're editing the green or red missile
   2119  f57a
   2120  f57a				   .L067		;  if joy0fire  &&  buttonPressed = 0 then gosub changeEdit
   2121  f57a
   2122  f57a		       24 0c		      bit	INPT4
   2123  f57c		       30 09		      BMI	.skipL067
   2124  f57e				   .condpart1
   2125  f57e		       a5 eb		      LDA	buttonPressed
   2126  f580		       c9 00		      CMP	#0
   2127  f582		       d0 03		      BNE	.skip1then
   2128  f584				   .condpart2
   2129  f584		       20 a3 f6 	      jsr	.changeEdit
   2130  f587
   2131  f587				   .skip1then
   2132  f587				   .skipL067
   2133  f587				   .L068		;  if editing = 0 then goto checkInput0
   2134  f587
   2135  f587		       a5 ec		      LDA	editing
   2136  f589		       c9 00		      CMP	#0
   2137  f58b		       d0 03		      BNE	.skipL068
   2138  f58d				   .condpart3
   2139  f58d		       4c e6 f6 	      jmp	.checkInput0
   2140  f590
   2141  f590				   .skipL068
   2142  f590				   .L069		;  if editing = 1 then goto checkInput1
   2143  f590
   2144  f590		       a5 ec		      LDA	editing
   2145  f592		       c9 01		      CMP	#1
   2146  f594		       d0 03		      BNE	.skipL069
   2147  f596				   .condpart4
   2148  f596		       4c 1f f7 	      jmp	.checkInput1
   2149  f599
   2150  f599				   .skipL069
   2151  f599				   .L070		;  if editing = 2 then goto checkInput2
   2152  f599
   2153  f599		       a5 ec		      LDA	editing
   2154  f59b		       c9 02		      CMP	#2
   2155  f59d		       d0 03		      BNE	.skipL070
   2156  f59f				   .condpart5
   2157  f59f		       4c 58 f7 	      jmp	.checkInput2
   2158  f5a2
   2159  f5a2				   .skipL070
   2160  f5a2				   .L071		;  if editing = 3 then goto checkInput3
   2161  f5a2
   2162  f5a2		       a5 ec		      LDA	editing
   2163  f5a4		       c9 03		      CMP	#3
   2164  f5a6		       d0 03		      BNE	.skipL071
   2165  f5a8				   .condpart6
   2166  f5a8		       4c 91 f7 	      jmp	.checkInput3
   2167  f5ab
   2168  f5ab				   .skipL071
   2169  f5ab				   .L072		;  if editing = 4 then goto checkInput4
   2170  f5ab
   2171  f5ab		       a5 ec		      LDA	editing
   2172  f5ad		       c9 04		      CMP	#4
   2173  f5af		       d0 03		      BNE	.skipL072
   2174  f5b1				   .condpart7
   2175  f5b1		       4c ca f7 	      jmp	.checkInput4
   2176  f5b4
   2177  f5b4				   .skipL072
   2178  f5b4				   .checkedInput
   2179  f5b4							; checkedInput
   2180  f5b4
   2181  f5b4				   .L073		;  rem Update positions and check limits
   2182  f5b4
   2183  f5b4				   .L074		;  _player0x = _player0x + _player0shift
   2184  f5b4
   2185  f5b4		       a5 d4		      LDA	a
   2186  f5b6		       18		      CLC
   2187  f5b7		       65 da		      ADC	g
   2188  f5b9		       85 d4		      STA	a
   2189  f5bb		       a5 80		      LDA	_player0x
   2190  f5bd		       65 d9		      ADC	_player0shift
   2191  f5bf		       85 80		      STA	_player0x
   2192  f5c1				   .L075		;  _player1x = _player1x + _player1shift
   2193  f5c1
   2194  f5c1		       a5 d5		      LDA	b
   2195  f5c3		       18		      CLC
   2196  f5c4		       65 dc		      ADC	i
   2197  f5c6		       85 d5		      STA	b
   2198  f5c8		       a5 81		      LDA	_player1x
   2199  f5ca		       65 db		      ADC	_player1shift
   2200  f5cc		       85 81		      STA	_player1x
   2201  f5ce				   .L076		;  _ballx = _ballx + _ballShift
   2202  f5ce
   2203  f5ce		       a5 d8		      LDA	e
   2204  f5d0		       18		      CLC
   2205  f5d1		       65 de		      ADC	k
   2206  f5d3		       85 d8		      STA	e
   2207  f5d5		       a5 84		      LDA	_ballx
   2208  f5d7		       65 dd		      ADC	_ballShift
   2209  f5d9		       85 84		      STA	_ballx
   2210  f5db				   .L077		;  _missile0x = _missile0x + _missile0shift
   2211  f5db
   2212  f5db		       a5 d6		      LDA	c
   2213  f5dd		       18		      CLC
   2214  f5de		       65 e0		      ADC	m
   2215  f5e0		       85 d6		      STA	c
   2216  f5e2		       a5 82		      LDA	_missile0x
   2217  f5e4		       65 df		      ADC	_missile0shift
   2218  f5e6		       85 82		      STA	_missile0x
   2219  f5e8				   .L078		;  _missile1x = _missile1x + _missile1shift
   2220  f5e8
   2221  f5e8		       a5 d7		      LDA	d
   2222  f5ea		       18		      CLC
   2223  f5eb		       65 e2		      ADC	o
   2224  f5ed		       85 d7		      STA	d
   2225  f5ef		       a5 83		      LDA	_missile1x
   2226  f5f1		       65 e1		      ADC	_missile1shift
   2227  f5f3		       85 83		      STA	_missile1x
   2228  f5f5				   .
   2229  f5f5							; 
   2230  f5f5
   2231  f5f5				   .L079		;  if player0x > 200 then player0x = player0x + 160
   2232  f5f5
   2233  f5f5		       a9 c8		      LDA	#200
   2234  f5f7		       c5 80		      CMP	player0x
   2235  f5f9		       b0 07		      BCS	.skipL079
   2236  f5fb				   .condpart8
   2237  f5fb		       a5 80		      LDA	player0x
   2238  f5fd		       18		      CLC
   2239  f5fe		       69 a0		      ADC	#160
   2240  f600		       85 80		      STA	player0x
   2241  f602				   .skipL079
   2242  f602				   .L080		;  if player0x > 159 then player0x = player0x - 160
   2243  f602
   2244  f602		       a9 9f		      LDA	#159
   2245  f604		       c5 80		      CMP	player0x
   2246  f606		       b0 07		      BCS	.skipL080
   2247  f608				   .condpart9
   2248  f608		       a5 80		      LDA	player0x
   2249  f60a		       38		      SEC
   2250  f60b		       e9 a0		      SBC	#160
   2251  f60d		       85 80		      STA	player0x
   2252  f60f				   .skipL080
   2253  f60f				   .
   2254  f60f							; 
   2255  f60f
   2256  f60f				   .L081		;  if player1x > 200 then player1x = player1x + 160
   2257  f60f
   2258  f60f		       a9 c8		      LDA	#200
   2259  f611		       c5 81		      CMP	player1x
   2260  f613		       b0 07		      BCS	.skipL081
   2261  f615				   .condpart10
   2262  f615		       a5 81		      LDA	player1x
   2263  f617		       18		      CLC
   2264  f618		       69 a0		      ADC	#160
   2265  f61a		       85 81		      STA	player1x
   2266  f61c				   .skipL081
   2267  f61c				   .L082		;  if player1x > 159 then player1x = player1x - 160
   2268  f61c
   2269  f61c		       a9 9f		      LDA	#159
   2270  f61e		       c5 81		      CMP	player1x
   2271  f620		       b0 07		      BCS	.skipL082
   2272  f622				   .condpart11
   2273  f622		       a5 81		      LDA	player1x
   2274  f624		       38		      SEC
   2275  f625		       e9 a0		      SBC	#160
   2276  f627		       85 81		      STA	player1x
   2277  f629				   .skipL082
   2278  f629				   .
   2279  f629							; 
   2280  f629
   2281  f629				   .
   2282  f629							; 
   2283  f629
   2284  f629				   .L083		;  if missile0x > 200 then missile0x = missile0x + 160
   2285  f629
   2286  f629		       a9 c8		      LDA	#200
   2287  f62b		       c5 82		      CMP	missile0x
   2288  f62d		       b0 07		      BCS	.skipL083
   2289  f62f				   .condpart12
   2290  f62f		       a5 82		      LDA	missile0x
   2291  f631		       18		      CLC
   2292  f632		       69 a0		      ADC	#160
   2293  f634		       85 82		      STA	missile0x
   2294  f636				   .skipL083
   2295  f636				   .L084		;  if missile0x > 159 then missile0x = missile0x - 160
   2296  f636
   2297  f636		       a9 9f		      LDA	#159
   2298  f638		       c5 82		      CMP	missile0x
   2299  f63a		       b0 07		      BCS	.skipL084
   2300  f63c				   .condpart13
   2301  f63c		       a5 82		      LDA	missile0x
   2302  f63e		       38		      SEC
   2303  f63f		       e9 a0		      SBC	#160
   2304  f641		       85 82		      STA	missile0x
   2305  f643				   .skipL084
   2306  f643				   .
   2307  f643							; 
   2308  f643
   2309  f643				   .L085		;  if missile1x > 200 then missile1x = missile1x + 160
   2310  f643
   2311  f643		       a9 c8		      LDA	#200
   2312  f645		       c5 83		      CMP	missile1x
   2313  f647		       b0 07		      BCS	.skipL085
   2314  f649				   .condpart14
   2315  f649		       a5 83		      LDA	missile1x
   2316  f64b		       18		      CLC
   2317  f64c		       69 a0		      ADC	#160
   2318  f64e		       85 83		      STA	missile1x
   2319  f650				   .skipL085
   2320  f650				   .L086		;  if missile1x > 159 then missile1x = missile1x - 160
   2321  f650
   2322  f650		       a9 9f		      LDA	#159
   2323  f652		       c5 83		      CMP	missile1x
   2324  f654		       b0 07		      BCS	.skipL086
   2325  f656				   .condpart15
   2326  f656		       a5 83		      LDA	missile1x
   2327  f658		       38		      SEC
   2328  f659		       e9 a0		      SBC	#160
   2329  f65b		       85 83		      STA	missile1x
   2330  f65d				   .skipL086
   2331  f65d				   .
   2332  f65d							; 
   2333  f65d
   2334  f65d				   .L087		;  if ballx > 200 then ballx = ballx + 160
   2335  f65d
   2336  f65d		       a9 c8		      LDA	#200
   2337  f65f		       c5 84		      CMP	ballx
   2338  f661		       b0 07		      BCS	.skipL087
   2339  f663				   .condpart16
   2340  f663		       a5 84		      LDA	ballx
   2341  f665		       18		      CLC
   2342  f666		       69 a0		      ADC	#160
   2343  f668		       85 84		      STA	ballx
   2344  f66a				   .skipL087
   2345  f66a				   .L088		;  if ballx > 159 then ballx = ballx - 160
   2346  f66a
   2347  f66a		       a9 9f		      LDA	#159
   2348  f66c		       c5 84		      CMP	ballx
   2349  f66e		       b0 07		      BCS	.skipL088
   2350  f670				   .condpart17
   2351  f670		       a5 84		      LDA	ballx
   2352  f672		       38		      SEC
   2353  f673		       e9 a0		      SBC	#160
   2354  f675		       85 84		      STA	ballx
   2355  f677				   .skipL088
   2356  f677				   .
   2357  f677							; 
   2358  f677
   2359  f677				   .L089		;  gosub trace
   2360  f677
   2361  f677		       20 03 f8 	      jsr	.trace
   2362  f67a
   2363  f67a				   .L090		;  drawscreen
   2364  f67a
   2365  f67a		       20 bf f3 	      jsr	drawscreen
   2366  f67d				   .
   2367  f67d							; 
   2368  f67d
   2369  f67d				   .L091		;  rem When reset it will pick the next preset visual
   2370  f67d
   2371  f67d				   .L092		;  if switchreset  &&	buttonPressed = 0 then buttonPressed = 1 :  goto resetPoint
   2372  f67d
   2373  f67d		       a9 01		      lda	#1
   2374  f67f		       2c 82 02 	      bit	SWCHB
   2375  f682		       d0 0d		      BNE	.skipL092
   2376  f684				   .condpart18
   2377  f684		       a5 eb		      LDA	buttonPressed
   2378  f686		       c9 00		      CMP	#0
   2379  f688		       d0 07		      BNE	.skip18then
   2380  f68a				   .condpart19
   2381  f68a		       a9 01		      LDA	#1
   2382  f68c		       85 eb		      STA	buttonPressed
   2383  f68e		       4c fb f4 	      jmp	.resetPoint
   2384  f691
   2385  f691				   .skip18then
   2386  f691				   .skipL092
   2387  f691				   .L093		;  if !joy0fire  &&  !switchreset then buttonPressed = 0
   2388  f691
   2389  f691		       24 0c		      bit	INPT4
   2390  f693		       10 0b		      BPL	.skipL093
   2391  f695				   .condpart20
   2392  f695		       a9 01		      lda	#1
   2393  f697		       2c 82 02 	      bit	SWCHB
   2394  f69a		       f0 04		      BEQ	.skip20then
   2395  f69c				   .condpart21
   2396  f69c		       a9 00		      LDA	#0
   2397  f69e		       85 eb		      STA	buttonPressed
   2398  f6a0				   .skip20then
   2399  f6a0				   .skipL093
   2400  f6a0				   .
   2401  f6a0							; 
   2402  f6a0
   2403  f6a0				   .L094		;  goto main
   2404  f6a0
   2405  f6a0		       4c 4e f5 	      jmp	.main
   2406  f6a3
   2407  f6a3				   .
   2408  f6a3							; 
   2409  f6a3
   2410  f6a3				   .changeEdit
   2411  f6a3							; changeEdit
   2412  f6a3
   2413  f6a3				   .L095		;  rem Picks what colour you're editing
   2414  f6a3
   2415  f6a3				   .L096		;  buttonPressed = 1
   2416  f6a3
   2417  f6a3		       a9 01		      LDA	#1
   2418  f6a5		       85 eb		      STA	buttonPressed
   2419  f6a7				   .L097		;  editing = editing + 1 :  if editing > 4 then editing = 0
   2420  f6a7
   2421  f6a7		       e6 ec		      INC	editing
   2422  f6a9		       a9 04		      LDA	#4
   2423  f6ab		       c5 ec		      CMP	editing
   2424  f6ad		       b0 04		      BCS	.skipL097
   2425  f6af				   .condpart22
   2426  f6af		       a9 00		      LDA	#0
   2427  f6b1		       85 ec		      STA	editing
   2428  f6b3				   .skipL097
   2429  f6b3				   .L098		;  if editing = 0 then scorecolor = 196
   2430  f6b3
   2431  f6b3		       a5 ec		      LDA	editing
   2432  f6b5		       c9 00		      CMP	#0
   2433  f6b7		       d0 04		      BNE	.skipL098
   2434  f6b9				   .condpart23
   2435  f6b9		       a9 c4		      LDA	#196
   2436  f6bb		       85 a3		      STA	scorecolor
   2437  f6bd				   .skipL098
   2438  f6bd				   .L099		;  if editing = 1 then scorecolor = 64
   2439  f6bd
   2440  f6bd		       a5 ec		      LDA	editing
   2441  f6bf		       c9 01		      CMP	#1
   2442  f6c1		       d0 04		      BNE	.skipL099
   2443  f6c3				   .condpart24
   2444  f6c3		       a9 40		      LDA	#64
   2445  f6c5		       85 a3		      STA	scorecolor
   2446  f6c7				   .skipL099
   2447  f6c7				   .L0100		;  if editing = 2 then scorecolor = 132
   2448  f6c7
   2449  f6c7		       a5 ec		      LDA	editing
   2450  f6c9		       c9 02		      CMP	#2
   2451  f6cb		       d0 04		      BNE	.skipL0100
   2452  f6cd				   .condpart25
   2453  f6cd		       a9 84		      LDA	#132
   2454  f6cf		       85 a3		      STA	scorecolor
   2455  f6d1				   .skipL0100
   2456  f6d1				   .L0101		;  if editing = 3 then scorecolor = 196
   2457  f6d1
   2458  f6d1		       a5 ec		      LDA	editing
   2459  f6d3		       c9 03		      CMP	#3
   2460  f6d5		       d0 04		      BNE	.skipL0101
   2461  f6d7				   .condpart26
   2462  f6d7		       a9 c4		      LDA	#196
   2463  f6d9		       85 a3		      STA	scorecolor
   2464  f6db				   .skipL0101
   2465  f6db				   .L0102		;  if editing = 4 then scorecolor = 64
   2466  f6db
   2467  f6db		       a5 ec		      LDA	editing
   2468  f6dd		       c9 04		      CMP	#4
   2469  f6df		       d0 04		      BNE	.skipL0102
   2470  f6e1				   .condpart27
   2471  f6e1		       a9 40		      LDA	#64
   2472  f6e3		       85 a3		      STA	scorecolor
   2473  f6e5				   .skipL0102
   2474  f6e5				   .L0103		;  return
   2475  f6e5
   2476  f6e5		       60		      RTS
   2477  f6e6				   .
   2478  f6e6							; 
   2479  f6e6
   2480  f6e6				   .L0104		;  rem Up and down control the whole number and left and right the fraction
   2481  f6e6
   2482  f6e6				   .
   2483  f6e6							; 
   2484  f6e6
   2485  f6e6				   .checkInput0
   2486  f6e6							; checkInput0
   2487  f6e6
   2488  f6e6				   .L0105		;  if joy0up then _player0shift = _player0shift + 1
   2489  f6e6
   2490  f6e6		       a9 10		      lda	#$10
   2491  f6e8		       2c 80 02 	      bit	SWCHA
   2492  f6eb		       d0 02		      BNE	.skipL0105
   2493  f6ed				   .condpart28
   2494  f6ed		       e6 d9		      INC	_player0shift
   2495  f6ef				   .skipL0105
   2496  f6ef				   .L0106		;  if joy0down then _player0shift = _player0shift - 1
   2497  f6ef
   2498  f6ef		       a9 20		      lda	#$20
   2499  f6f1		       2c 80 02 	      bit	SWCHA
   2500  f6f4		       d0 02		      BNE	.skipL0106
   2501  f6f6				   .condpart29
   2502  f6f6		       c6 d9		      DEC	_player0shift
   2503  f6f8				   .skipL0106
   2504  f6f8				   .L0107		;  if joy0right then _player0shift = _player0shift  + moveAmount
   2505  f6f8
   2506  f6f8		       2c 80 02 	      bit	SWCHA
   2507  f6fb		       30 0d		      BMI	.skipL0107
   2508  f6fd				   .condpart30
   2509  f6fd		       a5 da		      LDA	g
   2510  f6ff		       18		      CLC
   2511  f700		       65 e4		      ADC	q
   2512  f702		       85 da		      STA	g
   2513  f704		       a5 d9		      LDA	_player0shift
   2514  f706		       65 e3		      ADC	moveAmount
   2515  f708		       85 d9		      STA	_player0shift
   2516  f70a				   .skipL0107
   2517  f70a				   .L0108		;  if joy0left then _player0shift = _player0shift  - moveAmount
   2518  f70a
   2519  f70a		       2c 80 02 	      bit	SWCHA
   2520  f70d		       70 0d		      BVS	.skipL0108
   2521  f70f				   .condpart31
   2522  f70f		       a5 da		      LDA	g
   2523  f711		       38		      SEC
   2524  f712		       e5 e4		      SBC	q
   2525  f714		       85 da		      STA	g
   2526  f716		       a5 d9		      LDA	_player0shift
   2527  f718		       e5 e3		      SBC	moveAmount
   2528  f71a		       85 d9		      STA	_player0shift
   2529  f71c				   .skipL0108
   2530  f71c				   .L0109		;  goto checkedInput
   2531  f71c
   2532  f71c		       4c b4 f5 	      jmp	.checkedInput
   2533  f71f
   2534  f71f				   .
   2535  f71f							; 
   2536  f71f
   2537  f71f				   .checkInput1
   2538  f71f							; checkInput1
   2539  f71f
   2540  f71f				   .L0110		;  if joy0up then _player1shift = _player1shift + 1
   2541  f71f
   2542  f71f		       a9 10		      lda	#$10
   2543  f721		       2c 80 02 	      bit	SWCHA
   2544  f724		       d0 02		      BNE	.skipL0110
   2545  f726				   .condpart32
   2546  f726		       e6 db		      INC	_player1shift
   2547  f728				   .skipL0110
   2548  f728				   .L0111		;  if joy0down then _player1shift = _player1shift - 1
   2549  f728
   2550  f728		       a9 20		      lda	#$20
   2551  f72a		       2c 80 02 	      bit	SWCHA
   2552  f72d		       d0 02		      BNE	.skipL0111
   2553  f72f				   .condpart33
   2554  f72f		       c6 db		      DEC	_player1shift
   2555  f731				   .skipL0111
   2556  f731				   .L0112		;  if joy0right then _player1shift = _player1shift  + moveAmount
   2557  f731
   2558  f731		       2c 80 02 	      bit	SWCHA
   2559  f734		       30 0d		      BMI	.skipL0112
   2560  f736				   .condpart34
   2561  f736		       a5 dc		      LDA	i
   2562  f738		       18		      CLC
   2563  f739		       65 e4		      ADC	q
   2564  f73b		       85 dc		      STA	i
   2565  f73d		       a5 db		      LDA	_player1shift
   2566  f73f		       65 e3		      ADC	moveAmount
   2567  f741		       85 db		      STA	_player1shift
   2568  f743				   .skipL0112
   2569  f743				   .L0113		;  if joy0left then _player1shift = _player1shift  - moveAmount
   2570  f743
   2571  f743		       2c 80 02 	      bit	SWCHA
   2572  f746		       70 0d		      BVS	.skipL0113
   2573  f748				   .condpart35
   2574  f748		       a5 dc		      LDA	i
   2575  f74a		       38		      SEC
   2576  f74b		       e5 e4		      SBC	q
   2577  f74d		       85 dc		      STA	i
   2578  f74f		       a5 db		      LDA	_player1shift
   2579  f751		       e5 e3		      SBC	moveAmount
   2580  f753		       85 db		      STA	_player1shift
   2581  f755				   .skipL0113
   2582  f755				   .L0114		;  goto checkedInput
   2583  f755
   2584  f755		       4c b4 f5 	      jmp	.checkedInput
   2585  f758
   2586  f758				   .
   2587  f758							; 
   2588  f758
   2589  f758				   .checkInput2
   2590  f758							; checkInput2
   2591  f758
   2592  f758				   .L0115		;  if joy0up then _ballShift = _ballShift + 1
   2593  f758
   2594  f758		       a9 10		      lda	#$10
   2595  f75a		       2c 80 02 	      bit	SWCHA
   2596  f75d		       d0 02		      BNE	.skipL0115
   2597  f75f				   .condpart36
   2598  f75f		       e6 dd		      INC	_ballShift
   2599  f761				   .skipL0115
   2600  f761				   .L0116		;  if joy0down then _ballShift = _ballShift - 1
   2601  f761
   2602  f761		       a9 20		      lda	#$20
   2603  f763		       2c 80 02 	      bit	SWCHA
   2604  f766		       d0 02		      BNE	.skipL0116
   2605  f768				   .condpart37
   2606  f768		       c6 dd		      DEC	_ballShift
   2607  f76a				   .skipL0116
   2608  f76a				   .L0117		;  if joy0right then _ballShift = _ballShift + moveAmount
   2609  f76a
   2610  f76a		       2c 80 02 	      bit	SWCHA
   2611  f76d		       30 0d		      BMI	.skipL0117
   2612  f76f				   .condpart38
   2613  f76f		       a5 de		      LDA	k
   2614  f771		       18		      CLC
   2615  f772		       65 e4		      ADC	q
   2616  f774		       85 de		      STA	k
   2617  f776		       a5 dd		      LDA	_ballShift
   2618  f778		       65 e3		      ADC	moveAmount
   2619  f77a		       85 dd		      STA	_ballShift
   2620  f77c				   .skipL0117
   2621  f77c				   .L0118		;  if joy0left then _ballShift = _ballShift - moveAmount
   2622  f77c
   2623  f77c		       2c 80 02 	      bit	SWCHA
   2624  f77f		       70 0d		      BVS	.skipL0118
   2625  f781				   .condpart39
   2626  f781		       a5 de		      LDA	k
   2627  f783		       38		      SEC
   2628  f784		       e5 e4		      SBC	q
   2629  f786		       85 de		      STA	k
   2630  f788		       a5 dd		      LDA	_ballShift
   2631  f78a		       e5 e3		      SBC	moveAmount
   2632  f78c		       85 dd		      STA	_ballShift
   2633  f78e				   .skipL0118
   2634  f78e				   .L0119		;  goto checkedInput
   2635  f78e
   2636  f78e		       4c b4 f5 	      jmp	.checkedInput
   2637  f791
   2638  f791				   .
   2639  f791							; 
   2640  f791
   2641  f791				   .checkInput3
   2642  f791							; checkInput3
   2643  f791
   2644  f791				   .L0120		;  if joy0up then _missile0shift = _missile0shift + 1
   2645  f791
   2646  f791		       a9 10		      lda	#$10
   2647  f793		       2c 80 02 	      bit	SWCHA
   2648  f796		       d0 02		      BNE	.skipL0120
   2649  f798				   .condpart40
   2650  f798		       e6 df		      INC	_missile0shift
   2651  f79a				   .skipL0120
   2652  f79a				   .L0121		;  if joy0down then _missile0shift = _missile0shift - 1
   2653  f79a
   2654  f79a		       a9 20		      lda	#$20
   2655  f79c		       2c 80 02 	      bit	SWCHA
   2656  f79f		       d0 02		      BNE	.skipL0121
   2657  f7a1				   .condpart41
   2658  f7a1		       c6 df		      DEC	_missile0shift
   2659  f7a3				   .skipL0121
   2660  f7a3				   .L0122		;  if joy0right then _missile0shift = _missile0shift  + moveAmount
   2661  f7a3
   2662  f7a3		       2c 80 02 	      bit	SWCHA
   2663  f7a6		       30 0d		      BMI	.skipL0122
   2664  f7a8				   .condpart42
   2665  f7a8		       a5 e0		      LDA	m
   2666  f7aa		       18		      CLC
   2667  f7ab		       65 e4		      ADC	q
   2668  f7ad		       85 e0		      STA	m
   2669  f7af		       a5 df		      LDA	_missile0shift
   2670  f7b1		       65 e3		      ADC	moveAmount
   2671  f7b3		       85 df		      STA	_missile0shift
   2672  f7b5				   .skipL0122
   2673  f7b5				   .L0123		;  if joy0left then _missile0shift = _missile0shift  - moveAmount
   2674  f7b5
   2675  f7b5		       2c 80 02 	      bit	SWCHA
   2676  f7b8		       70 0d		      BVS	.skipL0123
   2677  f7ba				   .condpart43
   2678  f7ba		       a5 e0		      LDA	m
   2679  f7bc		       38		      SEC
   2680  f7bd		       e5 e4		      SBC	q
   2681  f7bf		       85 e0		      STA	m
   2682  f7c1		       a5 df		      LDA	_missile0shift
   2683  f7c3		       e5 e3		      SBC	moveAmount
   2684  f7c5		       85 df		      STA	_missile0shift
   2685  f7c7				   .skipL0123
   2686  f7c7				   .L0124		;  goto checkedInput
   2687  f7c7
   2688  f7c7		       4c b4 f5 	      jmp	.checkedInput
   2689  f7ca
   2690  f7ca				   .
   2691  f7ca							; 
   2692  f7ca
   2693  f7ca				   .checkInput4
   2694  f7ca							; checkInput4
   2695  f7ca
   2696  f7ca				   .L0125		;  if joy0up then _missile1shift = _missile1shift + 1
   2697  f7ca
   2698  f7ca		       a9 10		      lda	#$10
   2699  f7cc		       2c 80 02 	      bit	SWCHA
   2700  f7cf		       d0 02		      BNE	.skipL0125
   2701  f7d1				   .condpart44
   2702  f7d1		       e6 e1		      INC	_missile1shift
   2703  f7d3				   .skipL0125
   2704  f7d3				   .L0126		;  if joy0down then _missile1shift = _missile1shift - 1
   2705  f7d3
   2706  f7d3		       a9 20		      lda	#$20
   2707  f7d5		       2c 80 02 	      bit	SWCHA
   2708  f7d8		       d0 02		      BNE	.skipL0126
   2709  f7da				   .condpart45
   2710  f7da		       c6 e1		      DEC	_missile1shift
   2711  f7dc				   .skipL0126
   2712  f7dc				   .L0127		;  if joy0right then _missile1shift = _missile1shift  + moveAmount
   2713  f7dc
   2714  f7dc		       2c 80 02 	      bit	SWCHA
   2715  f7df		       30 0d		      BMI	.skipL0127
   2716  f7e1				   .condpart46
   2717  f7e1		       a5 e2		      LDA	o
   2718  f7e3		       18		      CLC
   2719  f7e4		       65 e4		      ADC	q
   2720  f7e6		       85 e2		      STA	o
   2721  f7e8		       a5 e1		      LDA	_missile1shift
   2722  f7ea		       65 e3		      ADC	moveAmount
   2723  f7ec		       85 e1		      STA	_missile1shift
   2724  f7ee				   .skipL0127
   2725  f7ee				   .L0128		;  if joy0left then _missile1shift = _missile1shift  - moveAmount
   2726  f7ee
   2727  f7ee		       2c 80 02 	      bit	SWCHA
   2728  f7f1		       70 0d		      BVS	.skipL0128
   2729  f7f3				   .condpart47
   2730  f7f3		       a5 e2		      LDA	o
   2731  f7f5		       38		      SEC
   2732  f7f6		       e5 e4		      SBC	q
   2733  f7f8		       85 e2		      STA	o
   2734  f7fa		       a5 e1		      LDA	_missile1shift
   2735  f7fc		       e5 e3		      SBC	moveAmount
   2736  f7fe		       85 e1		      STA	_missile1shift
   2737  f800				   .skipL0128
   2738  f800				   .L0129		;  goto checkedInput
   2739  f800
   2740  f800		       4c b4 f5 	      jmp	.checkedInput
   2741  f803
   2742  f803				   .
   2743  f803							; 
   2744  f803
   2745  f803				   .
   2746  f803							; 
   2747  f803
   2748  f803				   .
   2749  f803							; 
   2750  f803
   2751  f803				   .L0130		;  rem Original code by Random Terrain from ex_multisprite_9_objects.bas
   2752  f803
   2753  f803				   .L0131		;  rem Uses score to display an 8.8 fixed point variable 
   2754  f803
   2755  f803				   .L0132		;  rem First 3 digits are the whole number and the second 3 digits the fraction 
   2756  f803
   2757  f803				   .
   2758  f803							; 
   2759  f803
   2760  f803				   .trace
   2761  f803							; trace
   2762  f803
   2763  f803				   .L0133		;  if editing = 0 then temp4 = f :  temp5 = g
   2764  f803
   2765  f803		       a5 ec		      LDA	editing
   2766  f805		       c9 00		      CMP	#0
   2767  f807		       d0 08		      BNE	.skipL0133
   2768  f809				   .condpart48
   2769  f809		       a5 d9		      LDA	f
   2770  f80b		       85 9f		      STA	temp4
   2771  f80d		       a5 da		      LDA	g
   2772  f80f		       85 a0		      STA	temp5
   2773  f811				   .skipL0133
   2774  f811				   .L0134		;  if editing = 1 then temp4 = h :  temp5 = i
   2775  f811
   2776  f811		       a5 ec		      LDA	editing
   2777  f813		       c9 01		      CMP	#1
   2778  f815		       d0 08		      BNE	.skipL0134
   2779  f817				   .condpart49
   2780  f817		       a5 db		      LDA	h
   2781  f819		       85 9f		      STA	temp4
   2782  f81b		       a5 dc		      LDA	i
   2783  f81d		       85 a0		      STA	temp5
   2784  f81f				   .skipL0134
   2785  f81f				   .L0135		;  if editing = 2 then temp4 = j :  temp5 = k
   2786  f81f
   2787  f81f		       a5 ec		      LDA	editing
   2788  f821		       c9 02		      CMP	#2
   2789  f823		       d0 08		      BNE	.skipL0135
   2790  f825				   .condpart50
   2791  f825		       a5 dd		      LDA	j
   2792  f827		       85 9f		      STA	temp4
   2793  f829		       a5 de		      LDA	k
   2794  f82b		       85 a0		      STA	temp5
   2795  f82d				   .skipL0135
   2796  f82d				   .L0136		;  if editing = 3 then temp4 = l :  temp5 = m
   2797  f82d
   2798  f82d		       a5 ec		      LDA	editing
   2799  f82f		       c9 03		      CMP	#3
   2800  f831		       d0 08		      BNE	.skipL0136
   2801  f833				   .condpart51
   2802  f833		       a5 df		      LDA	l
   2803  f835		       85 9f		      STA	temp4
   2804  f837		       a5 e0		      LDA	m
   2805  f839		       85 a0		      STA	temp5
   2806  f83b				   .skipL0136
   2807  f83b				   .L0137		;  if editing = 4 then temp4 = n :  temp5 = o
   2808  f83b
   2809  f83b		       a5 ec		      LDA	editing
   2810  f83d		       c9 04		      CMP	#4
   2811  f83f		       d0 08		      BNE	.skipL0137
   2812  f841				   .condpart52
   2813  f841		       a5 e1		      LDA	n
   2814  f843		       85 9f		      STA	temp4
   2815  f845		       a5 e2		      LDA	o
   2816  f847		       85 a0		      STA	temp5
   2817  f849				   .skipL0137
   2818  f849				   .
   2819  f849							; 
   2820  f849
   2821  f849				   .L0138		;  _sc1  =  0	:  _sc2  =  _sc2  &  15
   2822  f849
   2823  f849		       a9 00		      LDA	#0
   2824  f84b		       85 93		      STA	_sc1
   2825  f84d		       a5 94		      LDA	_sc2
   2826  f84f		       29 0f		      AND	#15
   2827  f851		       85 94		      STA	_sc2
   2828  f853				   .L0139		;  if temp4  >=  100 then _sc1  =  _sc1  +  16  :  temp4  =  temp4  -	100
   2829  f853
   2830  f853		       a5 9f		      LDA	temp4
   2831  f855		       c9 64		      CMP	#100
   2832  f857		       90 0e		      BCC	.skipL0139
   2833  f859				   .condpart53
   2834  f859		       a5 93		      LDA	_sc1
   2835  f85b		       18		      CLC
   2836  f85c		       69 10		      ADC	#16
   2837  f85e		       85 93		      STA	_sc1
   2838  f860		       a5 9f		      LDA	temp4
   2839  f862		       38		      SEC
   2840  f863		       e9 64		      SBC	#100
   2841  f865		       85 9f		      STA	temp4
   2842  f867				   .skipL0139
   2843  f867				   .L0140		;  if temp4  >=  100 then _sc1  =  _sc1  +  16  :  temp4  =  temp4  -	100
   2844  f867
   2845  f867		       a5 9f		      LDA	temp4
   2846  f869		       c9 64		      CMP	#100
   2847  f86b		       90 0e		      BCC	.skipL0140
   2848  f86d				   .condpart54
   2849  f86d		       a5 93		      LDA	_sc1
   2850  f86f		       18		      CLC
   2851  f870		       69 10		      ADC	#16
   2852  f872		       85 93		      STA	_sc1
   2853  f874		       a5 9f		      LDA	temp4
   2854  f876		       38		      SEC
   2855  f877		       e9 64		      SBC	#100
   2856  f879		       85 9f		      STA	temp4
   2857  f87b				   .skipL0140
   2858  f87b				   .L0141		;  if temp4  >=  50 then _sc1	=  _sc1  +  5  :  temp4  =  temp4  -  50
   2859  f87b
   2860  f87b		       a5 9f		      LDA	temp4
   2861  f87d		       c9 32		      CMP	#50
   2862  f87f		       90 0e		      BCC	.skipL0141
   2863  f881				   .condpart55
   2864  f881		       a5 93		      LDA	_sc1
   2865  f883		       18		      CLC
   2866  f884		       69 05		      ADC	#5
   2867  f886		       85 93		      STA	_sc1
   2868  f888		       a5 9f		      LDA	temp4
   2869  f88a		       38		      SEC
   2870  f88b		       e9 32		      SBC	#50
   2871  f88d		       85 9f		      STA	temp4
   2872  f88f				   .skipL0141
   2873  f88f				   .L0142		;  if temp4  >=  30 then _sc1	=  _sc1  +  3  :  temp4  =  temp4  -  30
   2874  f88f
   2875  f88f		       a5 9f		      LDA	temp4
   2876  f891		       c9 1e		      CMP	#30
   2877  f893		       90 0e		      BCC	.skipL0142
   2878  f895				   .condpart56
   2879  f895		       a5 93		      LDA	_sc1
   2880  f897		       18		      CLC
   2881  f898		       69 03		      ADC	#3
   2882  f89a		       85 93		      STA	_sc1
   2883  f89c		       a5 9f		      LDA	temp4
   2884  f89e		       38		      SEC
   2885  f89f		       e9 1e		      SBC	#30
   2886  f8a1		       85 9f		      STA	temp4
   2887  f8a3				   .skipL0142
   2888  f8a3				   .L0143		;  if temp4  >=  20 then _sc1	=  _sc1  +  2  :  temp4  =  temp4  -  20
   2889  f8a3
   2890  f8a3		       a5 9f		      LDA	temp4
   2891  f8a5		       c9 14		      CMP	#20
   2892  f8a7		       90 0e		      BCC	.skipL0143
   2893  f8a9				   .condpart57
   2894  f8a9		       a5 93		      LDA	_sc1
   2895  f8ab		       18		      CLC
   2896  f8ac		       69 02		      ADC	#2
   2897  f8ae		       85 93		      STA	_sc1
   2898  f8b0		       a5 9f		      LDA	temp4
   2899  f8b2		       38		      SEC
   2900  f8b3		       e9 14		      SBC	#20
   2901  f8b5		       85 9f		      STA	temp4
   2902  f8b7				   .skipL0143
   2903  f8b7				   .L0144		;  if temp4  >=  10 then _sc1	=  _sc1  +  1  :  temp4  =  temp4  -  10
   2904  f8b7
   2905  f8b7		       a5 9f		      LDA	temp4
   2906  f8b9		       c9 0a		      CMP	#10
   2907  f8bb		       90 09		      BCC	.skipL0144
   2908  f8bd				   .condpart58
   2909  f8bd		       e6 93		      INC	_sc1
   2910  f8bf		       a5 9f		      LDA	temp4
   2911  f8c1		       38		      SEC
   2912  f8c2		       e9 0a		      SBC	#10
   2913  f8c4		       85 9f		      STA	temp4
   2914  f8c6				   .skipL0144
   2915  f8c6				   .L0145		;  _sc2  =   ( temp4  *  4  *	4 )   |  _sc2
   2916  f8c6
   2917  f8c6							; complex statement detected
   2918  f8c6		       a5 9f		      LDA	temp4
   2919  f8c8		       0a		      asl
   2920  f8c9		       0a		      asl
   2921  f8ca		       0a		      asl
   2922  f8cb		       0a		      asl
   2923  f8cc		       05 94		      ORA	_sc2
   2924  f8ce		       85 94		      STA	_sc2
   2925  f8d0				   .
   2926  f8d0							; 
   2927  f8d0
   2928  f8d0				   .L0146		;  _sc2  =  _sc2  &  240  :  _sc3  =  0
   2929  f8d0
   2930  f8d0		       a5 94		      LDA	_sc2
   2931  f8d2		       29 f0		      AND	#240
   2932  f8d4		       85 94		      STA	_sc2
   2933  f8d6		       a9 00		      LDA	#0
   2934  f8d8		       85 95		      STA	_sc3
   2935  f8da				   .L0147		;  if temp5  >=  100 then _sc2  =  _sc2  +  1	:  temp5  =  temp5  -  100
   2936  f8da
   2937  f8da		       a5 a0		      LDA	temp5
   2938  f8dc		       c9 64		      CMP	#100
   2939  f8de		       90 09		      BCC	.skipL0147
   2940  f8e0				   .condpart59
   2941  f8e0		       e6 94		      INC	_sc2
   2942  f8e2		       a5 a0		      LDA	temp5
   2943  f8e4		       38		      SEC
   2944  f8e5		       e9 64		      SBC	#100
   2945  f8e7		       85 a0		      STA	temp5
   2946  f8e9				   .skipL0147
   2947  f8e9				   .L0148		;  if temp5  >=  100 then _sc2  =  _sc2  +  1	:  temp5  =  temp5  -  100
   2948  f8e9
   2949  f8e9		       a5 a0		      LDA	temp5
   2950  f8eb		       c9 64		      CMP	#100
   2951  f8ed		       90 09		      BCC	.skipL0148
   2952  f8ef				   .condpart60
   2953  f8ef		       e6 94		      INC	_sc2
   2954  f8f1		       a5 a0		      LDA	temp5
   2955  f8f3		       38		      SEC
   2956  f8f4		       e9 64		      SBC	#100
   2957  f8f6		       85 a0		      STA	temp5
   2958  f8f8				   .skipL0148
   2959  f8f8				   .L0149		;  if temp5  >=  50 then _sc3	=  _sc3  +  80	:  temp5  =  temp5  -  50
   2960  f8f8
   2961  f8f8		       a5 a0		      LDA	temp5
   2962  f8fa		       c9 32		      CMP	#50
   2963  f8fc		       90 0e		      BCC	.skipL0149
   2964  f8fe				   .condpart61
   2965  f8fe		       a5 95		      LDA	_sc3
   2966  f900		       18		      CLC
   2967  f901		       69 50		      ADC	#80
   2968  f903		       85 95		      STA	_sc3
   2969  f905		       a5 a0		      LDA	temp5
   2970  f907		       38		      SEC
   2971  f908		       e9 32		      SBC	#50
   2972  f90a		       85 a0		      STA	temp5
   2973  f90c				   .skipL0149
   2974  f90c				   .L0150		;  if temp5  >=  30 then _sc3	=  _sc3  +  48	:  temp5  =  temp5  -  30
   2975  f90c
   2976  f90c		       a5 a0		      LDA	temp5
   2977  f90e		       c9 1e		      CMP	#30
   2978  f910		       90 0e		      BCC	.skipL0150
   2979  f912				   .condpart62
   2980  f912		       a5 95		      LDA	_sc3
   2981  f914		       18		      CLC
   2982  f915		       69 30		      ADC	#48
   2983  f917		       85 95		      STA	_sc3
   2984  f919		       a5 a0		      LDA	temp5
   2985  f91b		       38		      SEC
   2986  f91c		       e9 1e		      SBC	#30
   2987  f91e		       85 a0		      STA	temp5
   2988  f920				   .skipL0150
   2989  f920				   .L0151		;  if temp5  >=  20 then _sc3	=  _sc3  +  32	:  temp5  =  temp5  -  20
   2990  f920
   2991  f920		       a5 a0		      LDA	temp5
   2992  f922		       c9 14		      CMP	#20
   2993  f924		       90 0e		      BCC	.skipL0151
   2994  f926				   .condpart63
   2995  f926		       a5 95		      LDA	_sc3
   2996  f928		       18		      CLC
   2997  f929		       69 20		      ADC	#32
   2998  f92b		       85 95		      STA	_sc3
   2999  f92d		       a5 a0		      LDA	temp5
   3000  f92f		       38		      SEC
   3001  f930		       e9 14		      SBC	#20
   3002  f932		       85 a0		      STA	temp5
   3003  f934				   .skipL0151
   3004  f934				   .L0152		;  if temp5  >=  10 then _sc3	=  _sc3  +  16	:  temp5  =  temp5  -  10
   3005  f934
   3006  f934		       a5 a0		      LDA	temp5
   3007  f936		       c9 0a		      CMP	#10
   3008  f938		       90 0e		      BCC	.skipL0152
   3009  f93a				   .condpart64
   3010  f93a		       a5 95		      LDA	_sc3
   3011  f93c		       18		      CLC
   3012  f93d		       69 10		      ADC	#16
   3013  f93f		       85 95		      STA	_sc3
   3014  f941		       a5 a0		      LDA	temp5
   3015  f943		       38		      SEC
   3016  f944		       e9 0a		      SBC	#10
   3017  f946		       85 a0		      STA	temp5
   3018  f948				   .skipL0152
   3019  f948				   .L0153		;  _sc3  =  _sc3  |  temp5
   3020  f948
   3021  f948		       a5 95		      LDA	_sc3
   3022  f94a		       05 a0		      ORA	temp5
   3023  f94c		       85 95		      STA	_sc3
   3024  f94e				   .L0154		;  return
   3025  f94e
   3026  f94e		       60		      RTS
   3027  f94f				   .
   3028  f94f							; 
   3029  f94f
   3030  f94f				   .L0155		;  rem Enable the TIA bug
   3031  f94f
   3032  f94f				   .
   3033  f94f							; 
   3034  f94f
   3035  f94f				   .
   3036  f94f							; 
   3037  f94f
   3038  f94f				   .L0156		;  vblank
   3039  f94f
   3040  f94f				   vblank_bB_code
   3041  f94f				   .
   3042  f94f							; 
   3043  f94f
   3044  f94f				   .L0157		;  HMP0 = 255 :  HMP1 = 255 :	HMM0  =  255 :	HMM1  =  100 :	HMBL = 100
   3045  f94f
   3046  f94f		       a9 ff		      LDA	#255
   3047  f951		       85 20		      STA	HMP0
   3048  f953		       85 21		      STA	HMP1
   3049  f955		       85 22		      STA	HMM0
   3050  f957		       a9 64		      LDA	#100
   3051  f959		       85 23		      STA	HMM1
   3052  f95b		       85 24		      STA	HMBL
   3053  f95d				   .
   3054  f95d							; 
   3055  f95d
   3056  f95d				   .L0158		;  WSYNC = 255
   3057  f95d
   3058  f95d		       a9 ff		      LDA	#255
   3059  f95f		       85 02		      STA	WSYNC
   3060  f961				   .L0159		;  HMOVE  =  255
   3061  f961
   3062  f961		       a9 ff		      LDA	#255
   3063  f963		       85 2a		      STA	HMOVE
   3064  f965				   .
   3065  f965							; 
   3066  f965
   3067  f965				   .L0160		;  HMP0  = 144 :  HMP1  = 144 :  HMM0	=  144 :  HMM1 = 255 :	HMBL  =  255
   3068  f965
   3069  f965		       a9 90		      LDA	#144
   3070  f967		       85 20		      STA	HMP0
   3071  f969		       85 21		      STA	HMP1
   3072  f96b		       85 22		      STA	HMM0
   3073  f96d		       a9 ff		      LDA	#255
   3074  f96f		       85 23		      STA	HMM1
   3075  f971		       85 24		      STA	HMBL
   3076  f973				   .
   3077  f973							; 
   3078  f973
   3079  f973				   .L0161		;  return
   3080  f973
   3081  f973		       60		      RTS
   3082  f974				   .
   3083  f974							; 
   3084  f974
   3085  f974				   .
   3086  f974							; 
   3087  f974
   3088  f974				   .
   3089  f974							; 
   3090  f974
   3091  f974				   .
   3092  f974							; 
   3093  f974
   3094  f974				   .
   3095  f974							; 
   3096  f974
   3097  f974				   .L0162		;  rem order top ball-m0-m1
   3098  f974
   3099  f974				   .L0163		;  rem order bottom m1-m0-ball
   3100  f974
   3101  f974				   .
   3102  f974							; 
   3103  f974
   3104  f974				   .
   3105  f974							; 
   3106  f974
   3107  f974				   .getPlayers
   3108  f974							; getPlayers
   3109  f974
   3110  f974				   .L0164		;  player0:
   3111  f974
   3112  f974		       a2 00		      LDX	#<playerL0164_0
   3113  f976		       86 8a		      STX	player0pointerlo
   3114  f978		       a9 fa		      LDA	#>playerL0164_0
   3115  f97a		       85 8b		      STA	player0pointerhi
   3116  f97c		       a9 fe		      LDA	#254
   3117  f97e		       85 8e		      STA	player0height
   3118  f980				   .
   3119  f980							; 
   3120  f980
   3121  f980				   .L0165		;  player1:
   3122  f980
   3123  f980		       a2 00		      LDX	#<playerL0165_1
   3124  f982		       86 8c		      STX	player1pointerlo
   3125  f984		       a9 fb		      LDA	#>playerL0165_1
   3126  f986		       85 8d		      STA	player1pointerhi
   3127  f988		       a9 fe		      LDA	#254
   3128  f98a		       85 8f		      STA	player1height
   3129  f98c				   .
   3130  f98c							; 
   3131  f98c
   3132  f98c				   .
   3133  f98c							; 
   3134  f98c
   3135  f98c				   .L0166		;  return
   3136  f98c
   3137  f98c		       60		      RTS
   3138  f98d				   .
   3139  f98d							; 
   3140  f98d
   3141  f98d				   .
   3142  f98d							; 
   3143  f98d
   3144  f98d				   .
   3145  f98d							; 
   3146  f98d
   3147  f98d				   .
   3148  f98d							; 
   3149  f98d
   3150  f98d					      if	(<*) > (<(*+254))
   3151  f98d					      repeat	($100-<*)
   3152  f98d		       00		      .byte.b	0
   3151  f98d					      repend
   3152  f98e		       00		      .byte.b	0
   3151  f98e					      repend
   3152  f98f		       00		      .byte.b	0
   3151  f98f					      repend
   3152  f990		       00		      .byte.b	0
   3151  f990					      repend
   3152  f991		       00		      .byte.b	0
   3151  f991					      repend
   3152  f992		       00		      .byte.b	0
   3151  f992					      repend
   3152  f993		       00		      .byte.b	0
   3151  f993					      repend
   3152  f994		       00		      .byte.b	0
   3151  f994					      repend
   3152  f995		       00		      .byte.b	0
   3151  f995					      repend
   3152  f996		       00		      .byte.b	0
   3151  f996					      repend
   3152  f997		       00		      .byte.b	0
   3151  f997					      repend
   3152  f998		       00		      .byte.b	0
   3151  f998					      repend
   3152  f999		       00		      .byte.b	0
   3151  f999					      repend
   3152  f99a		       00		      .byte.b	0
   3151  f99a					      repend
   3152  f99b		       00		      .byte.b	0
   3151  f99b					      repend
   3152  f99c		       00		      .byte.b	0
   3151  f99c					      repend
   3152  f99d		       00		      .byte.b	0
   3151  f99d					      repend
   3152  f99e		       00		      .byte.b	0
   3151  f99e					      repend
   3152  f99f		       00		      .byte.b	0
   3151  f99f					      repend
   3152  f9a0		       00		      .byte.b	0
   3151  f9a0					      repend
   3152  f9a1		       00		      .byte.b	0
   3151  f9a1					      repend
   3152  f9a2		       00		      .byte.b	0
   3151  f9a2					      repend
   3152  f9a3		       00		      .byte.b	0
   3151  f9a3					      repend
   3152  f9a4		       00		      .byte.b	0
   3151  f9a4					      repend
   3152  f9a5		       00		      .byte.b	0
   3151  f9a5					      repend
   3152  f9a6		       00		      .byte.b	0
   3151  f9a6					      repend
   3152  f9a7		       00		      .byte.b	0
   3151  f9a7					      repend
   3152  f9a8		       00		      .byte.b	0
   3151  f9a8					      repend
   3152  f9a9		       00		      .byte.b	0
   3151  f9a9					      repend
   3152  f9aa		       00		      .byte.b	0
   3151  f9aa					      repend
   3152  f9ab		       00		      .byte.b	0
   3151  f9ab					      repend
   3152  f9ac		       00		      .byte.b	0
   3151  f9ac					      repend
   3152  f9ad		       00		      .byte.b	0
   3151  f9ad					      repend
   3152  f9ae		       00		      .byte.b	0
   3151  f9ae					      repend
   3152  f9af		       00		      .byte.b	0
   3151  f9af					      repend
   3152  f9b0		       00		      .byte.b	0
   3151  f9b0					      repend
   3152  f9b1		       00		      .byte.b	0
   3151  f9b1					      repend
   3152  f9b2		       00		      .byte.b	0
   3151  f9b2					      repend
   3152  f9b3		       00		      .byte.b	0
   3151  f9b3					      repend
   3152  f9b4		       00		      .byte.b	0
   3151  f9b4					      repend
   3152  f9b5		       00		      .byte.b	0
   3151  f9b5					      repend
   3152  f9b6		       00		      .byte.b	0
   3151  f9b6					      repend
   3152  f9b7		       00		      .byte.b	0
   3151  f9b7					      repend
   3152  f9b8		       00		      .byte.b	0
   3151  f9b8					      repend
   3152  f9b9		       00		      .byte.b	0
   3151  f9b9					      repend
   3152  f9ba		       00		      .byte.b	0
   3151  f9ba					      repend
   3152  f9bb		       00		      .byte.b	0
   3151  f9bb					      repend
   3152  f9bc		       00		      .byte.b	0
   3151  f9bc					      repend
   3152  f9bd		       00		      .byte.b	0
   3151  f9bd					      repend
   3152  f9be		       00		      .byte.b	0
   3151  f9be					      repend
   3152  f9bf		       00		      .byte.b	0
   3151  f9bf					      repend
   3152  f9c0		       00		      .byte.b	0
   3151  f9c0					      repend
   3152  f9c1		       00		      .byte.b	0
   3151  f9c1					      repend
   3152  f9c2		       00		      .byte.b	0
   3151  f9c2					      repend
   3152  f9c3		       00		      .byte.b	0
   3151  f9c3					      repend
   3152  f9c4		       00		      .byte.b	0
   3151  f9c4					      repend
   3152  f9c5		       00		      .byte.b	0
   3151  f9c5					      repend
   3152  f9c6		       00		      .byte.b	0
   3151  f9c6					      repend
   3152  f9c7		       00		      .byte.b	0
   3151  f9c7					      repend
   3152  f9c8		       00		      .byte.b	0
   3151  f9c8					      repend
   3152  f9c9		       00		      .byte.b	0
   3151  f9c9					      repend
   3152  f9ca		       00		      .byte.b	0
   3151  f9ca					      repend
   3152  f9cb		       00		      .byte.b	0
   3151  f9cb					      repend
   3152  f9cc		       00		      .byte.b	0
   3151  f9cc					      repend
   3152  f9cd		       00		      .byte.b	0
   3151  f9cd					      repend
   3152  f9ce		       00		      .byte.b	0
   3151  f9ce					      repend
   3152  f9cf		       00		      .byte.b	0
   3151  f9cf					      repend
   3152  f9d0		       00		      .byte.b	0
   3151  f9d0					      repend
   3152  f9d1		       00		      .byte.b	0
   3151  f9d1					      repend
   3152  f9d2		       00		      .byte.b	0
   3151  f9d2					      repend
   3152  f9d3		       00		      .byte.b	0
   3151  f9d3					      repend
   3152  f9d4		       00		      .byte.b	0
   3151  f9d4					      repend
   3152  f9d5		       00		      .byte.b	0
   3151  f9d5					      repend
   3152  f9d6		       00		      .byte.b	0
   3151  f9d6					      repend
   3152  f9d7		       00		      .byte.b	0
   3151  f9d7					      repend
   3152  f9d8		       00		      .byte.b	0
   3151  f9d8					      repend
   3152  f9d9		       00		      .byte.b	0
   3151  f9d9					      repend
   3152  f9da		       00		      .byte.b	0
   3151  f9da					      repend
   3152  f9db		       00		      .byte.b	0
   3151  f9db					      repend
   3152  f9dc		       00		      .byte.b	0
   3151  f9dc					      repend
   3152  f9dd		       00		      .byte.b	0
   3151  f9dd					      repend
   3152  f9de		       00		      .byte.b	0
   3151  f9de					      repend
   3152  f9df		       00		      .byte.b	0
   3151  f9df					      repend
   3152  f9e0		       00		      .byte.b	0
   3151  f9e0					      repend
   3152  f9e1		       00		      .byte.b	0
   3151  f9e1					      repend
   3152  f9e2		       00		      .byte.b	0
   3151  f9e2					      repend
   3152  f9e3		       00		      .byte.b	0
   3151  f9e3					      repend
   3152  f9e4		       00		      .byte.b	0
   3151  f9e4					      repend
   3152  f9e5		       00		      .byte.b	0
   3151  f9e5					      repend
   3152  f9e6		       00		      .byte.b	0
   3151  f9e6					      repend
   3152  f9e7		       00		      .byte.b	0
   3151  f9e7					      repend
   3152  f9e8		       00		      .byte.b	0
   3151  f9e8					      repend
   3152  f9e9		       00		      .byte.b	0
   3151  f9e9					      repend
   3152  f9ea		       00		      .byte.b	0
   3151  f9ea					      repend
   3152  f9eb		       00		      .byte.b	0
   3151  f9eb					      repend
   3152  f9ec		       00		      .byte.b	0
   3151  f9ec					      repend
   3152  f9ed		       00		      .byte.b	0
   3151  f9ed					      repend
   3152  f9ee		       00		      .byte.b	0
   3151  f9ee					      repend
   3152  f9ef		       00		      .byte.b	0
   3151  f9ef					      repend
   3152  f9f0		       00		      .byte.b	0
   3151  f9f0					      repend
   3152  f9f1		       00		      .byte.b	0
   3151  f9f1					      repend
   3152  f9f2		       00		      .byte.b	0
   3151  f9f2					      repend
   3152  f9f3		       00		      .byte.b	0
   3151  f9f3					      repend
   3152  f9f4		       00		      .byte.b	0
   3151  f9f4					      repend
   3152  f9f5		       00		      .byte.b	0
   3151  f9f5					      repend
   3152  f9f6		       00		      .byte.b	0
   3151  f9f6					      repend
   3152  f9f7		       00		      .byte.b	0
   3151  f9f7					      repend
   3152  f9f8		       00		      .byte.b	0
   3151  f9f8					      repend
   3152  f9f9		       00		      .byte.b	0
   3151  f9f9					      repend
   3152  f9fa		       00		      .byte.b	0
   3151  f9fa					      repend
   3152  f9fb		       00		      .byte.b	0
   3151  f9fb					      repend
   3152  f9fc		       00		      .byte.b	0
   3151  f9fc					      repend
   3152  f9fd		       00		      .byte.b	0
   3151  f9fd					      repend
   3152  f9fe		       00		      .byte.b	0
   3151  f9fe					      repend
   3152  f9ff		       00		      .byte.b	0
   3153  fa00					      repend
   3154  fa00					      endif
   3155  fa00				   playerL0164_0
   3156  fa00		       02		      .byte.b	%10
   3157  fa01		       02		      .byte.b	%10
   3158  fa02		       02		      .byte.b	%10
   3159  fa03		       02		      .byte.b	%10
   3160  fa04		       02		      .byte.b	%10
   3161  fa05		       02		      .byte.b	%10
   3162  fa06		       02		      .byte.b	%10
   3163  fa07		       02		      .byte.b	%10
   3164  fa08		       02		      .byte.b	%10
   3165  fa09		       02		      .byte.b	%10
   3166  fa0a		       02		      .byte.b	%10
   3167  fa0b		       02		      .byte.b	%10
   3168  fa0c		       02		      .byte.b	%10
   3169  fa0d		       02		      .byte.b	%10
   3170  fa0e		       02		      .byte.b	%10
   3171  fa0f		       02		      .byte.b	%10
   3172  fa10		       02		      .byte.b	%10
   3173  fa11		       02		      .byte.b	%10
   3174  fa12		       02		      .byte.b	%10
   3175  fa13		       02		      .byte.b	%10
   3176  fa14		       02		      .byte.b	%10
   3177  fa15		       02		      .byte.b	%10
   3178  fa16		       02		      .byte.b	%10
   3179  fa17		       02		      .byte.b	%10
   3180  fa18		       02		      .byte.b	%10
   3181  fa19		       02		      .byte.b	%10
   3182  fa1a		       02		      .byte.b	%10
   3183  fa1b		       02		      .byte.b	%10
   3184  fa1c		       02		      .byte.b	%10
   3185  fa1d		       02		      .byte.b	%10
   3186  fa1e		       02		      .byte.b	%10
   3187  fa1f		       02		      .byte.b	%10
   3188  fa20		       02		      .byte.b	%10
   3189  fa21		       02		      .byte.b	%10
   3190  fa22		       02		      .byte.b	%10
   3191  fa23		       02		      .byte.b	%10
   3192  fa24		       02		      .byte.b	%10
   3193  fa25		       02		      .byte.b	%10
   3194  fa26		       02		      .byte.b	%10
   3195  fa27		       02		      .byte.b	%10
   3196  fa28		       02		      .byte.b	%10
   3197  fa29		       02		      .byte.b	%10
   3198  fa2a		       02		      .byte.b	%10
   3199  fa2b		       02		      .byte.b	%10
   3200  fa2c		       02		      .byte.b	%10
   3201  fa2d		       02		      .byte.b	%10
   3202  fa2e		       02		      .byte.b	%10
   3203  fa2f		       02		      .byte.b	%10
   3204  fa30		       02		      .byte.b	%10
   3205  fa31		       02		      .byte.b	%10
   3206  fa32		       02		      .byte.b	%10
   3207  fa33		       02		      .byte.b	%10
   3208  fa34		       02		      .byte.b	%10
   3209  fa35		       02		      .byte.b	%10
   3210  fa36		       02		      .byte.b	%10
   3211  fa37		       02		      .byte.b	%10
   3212  fa38		       02		      .byte.b	%10
   3213  fa39		       02		      .byte.b	%10
   3214  fa3a		       02		      .byte.b	%10
   3215  fa3b		       02		      .byte.b	%10
   3216  fa3c		       02		      .byte.b	%10
   3217  fa3d		       02		      .byte.b	%10
   3218  fa3e		       02		      .byte.b	%10
   3219  fa3f		       02		      .byte.b	%10
   3220  fa40		       02		      .byte.b	%10
   3221  fa41		       02		      .byte.b	%10
   3222  fa42		       02		      .byte.b	%10
   3223  fa43		       02		      .byte.b	%10
   3224  fa44		       02		      .byte.b	%10
   3225  fa45		       02		      .byte.b	%10
   3226  fa46		       02		      .byte.b	%10
   3227  fa47		       02		      .byte.b	%10
   3228  fa48		       02		      .byte.b	%10
   3229  fa49		       02		      .byte.b	%10
   3230  fa4a		       02		      .byte.b	%10
   3231  fa4b		       02		      .byte.b	%10
   3232  fa4c		       02		      .byte.b	%10
   3233  fa4d		       02		      .byte.b	%10
   3234  fa4e		       02		      .byte.b	%10
   3235  fa4f		       02		      .byte.b	%10
   3236  fa50		       02		      .byte.b	%10
   3237  fa51		       02		      .byte.b	%10
   3238  fa52		       02		      .byte.b	%10
   3239  fa53		       02		      .byte.b	%10
   3240  fa54		       02		      .byte.b	%10
   3241  fa55		       02		      .byte.b	%10
   3242  fa56		       02		      .byte.b	%10
   3243  fa57		       02		      .byte.b	%10
   3244  fa58		       02		      .byte.b	%10
   3245  fa59		       02		      .byte.b	%10
   3246  fa5a		       02		      .byte.b	%10
   3247  fa5b		       02		      .byte.b	%10
   3248  fa5c		       02		      .byte.b	%10
   3249  fa5d		       02		      .byte.b	%10
   3250  fa5e		       02		      .byte.b	%10
   3251  fa5f		       02		      .byte.b	%10
   3252  fa60		       02		      .byte.b	%10
   3253  fa61		       02		      .byte.b	%10
   3254  fa62		       02		      .byte.b	%10
   3255  fa63		       02		      .byte.b	%10
   3256  fa64		       02		      .byte.b	%10
   3257  fa65		       02		      .byte.b	%10
   3258  fa66		       02		      .byte.b	%10
   3259  fa67		       02		      .byte.b	%10
   3260  fa68		       02		      .byte.b	%10
   3261  fa69		       02		      .byte.b	%10
   3262  fa6a		       02		      .byte.b	%10
   3263  fa6b		       02		      .byte.b	%10
   3264  fa6c		       02		      .byte.b	%10
   3265  fa6d		       02		      .byte.b	%10
   3266  fa6e		       02		      .byte.b	%10
   3267  fa6f		       02		      .byte.b	%10
   3268  fa70		       02		      .byte.b	%10
   3269  fa71		       02		      .byte.b	%10
   3270  fa72		       02		      .byte.b	%10
   3271  fa73		       02		      .byte.b	%10
   3272  fa74		       02		      .byte.b	%10
   3273  fa75		       02		      .byte.b	%10
   3274  fa76		       02		      .byte.b	%10
   3275  fa77		       02		      .byte.b	%10
   3276  fa78		       02		      .byte.b	%10
   3277  fa79		       02		      .byte.b	%10
   3278  fa7a		       02		      .byte.b	%10
   3279  fa7b		       02		      .byte.b	%10
   3280  fa7c		       02		      .byte.b	%10
   3281  fa7d		       02		      .byte.b	%10
   3282  fa7e		       02		      .byte.b	%10
   3283  fa7f		       02		      .byte.b	%10
   3284  fa80		       02		      .byte.b	%10
   3285  fa81		       02		      .byte.b	%10
   3286  fa82		       02		      .byte.b	%10
   3287  fa83		       02		      .byte.b	%10
   3288  fa84		       02		      .byte.b	%10
   3289  fa85		       02		      .byte.b	%10
   3290  fa86		       02		      .byte.b	%10
   3291  fa87		       02		      .byte.b	%10
   3292  fa88		       02		      .byte.b	%10
   3293  fa89		       02		      .byte.b	%10
   3294  fa8a		       02		      .byte.b	%10
   3295  fa8b		       02		      .byte.b	%10
   3296  fa8c		       02		      .byte.b	%10
   3297  fa8d		       02		      .byte.b	%10
   3298  fa8e		       02		      .byte.b	%10
   3299  fa8f		       02		      .byte.b	%10
   3300  fa90		       02		      .byte.b	%10
   3301  fa91		       02		      .byte.b	%10
   3302  fa92		       02		      .byte.b	%10
   3303  fa93		       02		      .byte.b	%10
   3304  fa94		       02		      .byte.b	%10
   3305  fa95		       02		      .byte.b	%10
   3306  fa96		       02		      .byte.b	%10
   3307  fa97		       02		      .byte.b	%10
   3308  fa98		       02		      .byte.b	%10
   3309  fa99		       02		      .byte.b	%10
   3310  fa9a		       02		      .byte.b	%10
   3311  fa9b		       02		      .byte.b	%10
   3312  fa9c		       02		      .byte.b	%10
   3313  fa9d		       02		      .byte.b	%10
   3314  fa9e		       02		      .byte.b	%10
   3315  fa9f		       02		      .byte.b	%10
   3316  faa0		       02		      .byte.b	%10
   3317  faa1		       02		      .byte.b	%10
   3318  faa2		       02		      .byte.b	%10
   3319  faa3		       02		      .byte.b	%10
   3320  faa4		       02		      .byte.b	%10
   3321  faa5		       02		      .byte.b	%10
   3322  faa6		       02		      .byte.b	%10
   3323  faa7		       02		      .byte.b	%10
   3324  faa8		       02		      .byte.b	%10
   3325  faa9		       02		      .byte.b	%10
   3326  faaa		       02		      .byte.b	%10
   3327  faab		       02		      .byte.b	%10
   3328  faac		       02		      .byte.b	%10
   3329  faad		       02		      .byte.b	%10
   3330  faae		       02		      .byte.b	%10
   3331  faaf		       02		      .byte.b	%10
   3332  fab0		       02		      .byte.b	%10
   3333  fab1		       02		      .byte.b	%10
   3334  fab2		       02		      .byte.b	%10
   3335  fab3		       02		      .byte.b	%10
   3336  fab4		       02		      .byte.b	%10
   3337  fab5		       02		      .byte.b	%10
   3338  fab6		       02		      .byte.b	%10
   3339  fab7		       02		      .byte.b	%10
   3340  fab8		       02		      .byte.b	%10
   3341  fab9		       02		      .byte.b	%10
   3342  faba		       02		      .byte.b	%10
   3343  fabb		       02		      .byte.b	%10
   3344  fabc		       02		      .byte.b	%10
   3345  fabd		       02		      .byte.b	%10
   3346  fabe		       02		      .byte.b	%10
   3347  fabf		       02		      .byte.b	%10
   3348  fac0		       02		      .byte.b	%10
   3349  fac1		       02		      .byte.b	%10
   3350  fac2		       02		      .byte.b	%10
   3351  fac3		       02		      .byte.b	%10
   3352  fac4		       02		      .byte.b	%10
   3353  fac5		       02		      .byte.b	%10
   3354  fac6		       02		      .byte.b	%10
   3355  fac7		       02		      .byte.b	%10
   3356  fac8		       02		      .byte.b	%10
   3357  fac9		       02		      .byte.b	%10
   3358  faca		       02		      .byte.b	%10
   3359  facb		       02		      .byte.b	%10
   3360  facc		       02		      .byte.b	%10
   3361  facd		       02		      .byte.b	%10
   3362  face		       02		      .byte.b	%10
   3363  facf		       02		      .byte.b	%10
   3364  fad0		       02		      .byte.b	%10
   3365  fad1		       02		      .byte.b	%10
   3366  fad2		       02		      .byte.b	%10
   3367  fad3		       02		      .byte.b	%10
   3368  fad4		       02		      .byte.b	%10
   3369  fad5		       02		      .byte.b	%10
   3370  fad6		       02		      .byte.b	%10
   3371  fad7		       02		      .byte.b	%10
   3372  fad8		       02		      .byte.b	%10
   3373  fad9		       02		      .byte.b	%10
   3374  fada		       02		      .byte.b	%10
   3375  fadb		       02		      .byte.b	%10
   3376  fadc		       02		      .byte.b	%10
   3377  fadd		       02		      .byte.b	%10
   3378  fade		       02		      .byte.b	%10
   3379  fadf		       02		      .byte.b	%10
   3380  fae0		       02		      .byte.b	%10
   3381  fae1		       02		      .byte.b	%10
   3382  fae2		       02		      .byte.b	%10
   3383  fae3		       02		      .byte.b	%10
   3384  fae4		       02		      .byte.b	%10
   3385  fae5		       02		      .byte.b	%10
   3386  fae6		       02		      .byte.b	%10
   3387  fae7		       02		      .byte.b	%10
   3388  fae8		       02		      .byte.b	%10
   3389  fae9		       02		      .byte.b	%10
   3390  faea		       02		      .byte.b	%10
   3391  faeb		       02		      .byte.b	%10
   3392  faec		       02		      .byte.b	%10
   3393  faed		       02		      .byte.b	%10
   3394  faee		       02		      .byte.b	%10
   3395  faef		       02		      .byte.b	%10
   3396  faf0		       02		      .byte.b	%10
   3397  faf1		       02		      .byte.b	%10
   3398  faf2		       02		      .byte.b	%10
   3399  faf3		       02		      .byte.b	%10
   3400  faf4		       02		      .byte.b	%10
   3401  faf5		       02		      .byte.b	%10
   3402  faf6		       02		      .byte.b	%10
   3403  faf7		       02		      .byte.b	%10
   3404  faf8		       02		      .byte.b	%10
   3405  faf9		       02		      .byte.b	%10
   3406  fafa		       02		      .byte.b	%10
   3407  fafb		       02		      .byte.b	%10
   3408  fafc		       02		      .byte.b	%10
   3409  fafd		       02		      .byte.b	%10
   3410  fafe		       02		      .byte.b	%10
   3411  faff					      if	(<*) > (<(*+254))
   3412  faff					      repeat	($100-<*)
   3413  faff		       00		      .byte.b	0
   3414  fb00					      repend
   3415  fb00					      endif
   3416  fb00				   playerL0165_1
   3417  fb00		       02		      .byte.b	%10
   3418  fb01		       02		      .byte.b	%10
   3419  fb02		       02		      .byte.b	%10
   3420  fb03		       02		      .byte.b	%10
   3421  fb04		       02		      .byte.b	%10
   3422  fb05		       02		      .byte.b	%10
   3423  fb06		       02		      .byte.b	%10
   3424  fb07		       02		      .byte.b	%10
   3425  fb08		       02		      .byte.b	%10
   3426  fb09		       02		      .byte.b	%10
   3427  fb0a		       02		      .byte.b	%10
   3428  fb0b		       02		      .byte.b	%10
   3429  fb0c		       02		      .byte.b	%10
   3430  fb0d		       02		      .byte.b	%10
   3431  fb0e		       02		      .byte.b	%10
   3432  fb0f		       02		      .byte.b	%10
   3433  fb10		       02		      .byte.b	%10
   3434  fb11		       02		      .byte.b	%10
   3435  fb12		       02		      .byte.b	%10
   3436  fb13		       02		      .byte.b	%10
   3437  fb14		       02		      .byte.b	%10
   3438  fb15		       02		      .byte.b	%10
   3439  fb16		       02		      .byte.b	%10
   3440  fb17		       02		      .byte.b	%10
   3441  fb18		       02		      .byte.b	%10
   3442  fb19		       02		      .byte.b	%10
   3443  fb1a		       02		      .byte.b	%10
   3444  fb1b		       02		      .byte.b	%10
   3445  fb1c		       02		      .byte.b	%10
   3446  fb1d		       02		      .byte.b	%10
   3447  fb1e		       02		      .byte.b	%10
   3448  fb1f		       02		      .byte.b	%10
   3449  fb20		       02		      .byte.b	%10
   3450  fb21		       02		      .byte.b	%10
   3451  fb22		       02		      .byte.b	%10
   3452  fb23		       02		      .byte.b	%10
   3453  fb24		       02		      .byte.b	%10
   3454  fb25		       02		      .byte.b	%10
   3455  fb26		       02		      .byte.b	%10
   3456  fb27		       02		      .byte.b	%10
   3457  fb28		       02		      .byte.b	%10
   3458  fb29		       02		      .byte.b	%10
   3459  fb2a		       02		      .byte.b	%10
   3460  fb2b		       02		      .byte.b	%10
   3461  fb2c		       02		      .byte.b	%10
   3462  fb2d		       02		      .byte.b	%10
   3463  fb2e		       02		      .byte.b	%10
   3464  fb2f		       02		      .byte.b	%10
   3465  fb30		       02		      .byte.b	%10
   3466  fb31		       02		      .byte.b	%10
   3467  fb32		       02		      .byte.b	%10
   3468  fb33		       02		      .byte.b	%10
   3469  fb34		       02		      .byte.b	%10
   3470  fb35		       02		      .byte.b	%10
   3471  fb36		       02		      .byte.b	%10
   3472  fb37		       02		      .byte.b	%10
   3473  fb38		       02		      .byte.b	%10
   3474  fb39		       02		      .byte.b	%10
   3475  fb3a		       02		      .byte.b	%10
   3476  fb3b		       02		      .byte.b	%10
   3477  fb3c		       02		      .byte.b	%10
   3478  fb3d		       02		      .byte.b	%10
   3479  fb3e		       02		      .byte.b	%10
   3480  fb3f		       02		      .byte.b	%10
   3481  fb40		       02		      .byte.b	%10
   3482  fb41		       02		      .byte.b	%10
   3483  fb42		       02		      .byte.b	%10
   3484  fb43		       02		      .byte.b	%10
   3485  fb44		       02		      .byte.b	%10
   3486  fb45		       02		      .byte.b	%10
   3487  fb46		       02		      .byte.b	%10
   3488  fb47		       02		      .byte.b	%10
   3489  fb48		       02		      .byte.b	%10
   3490  fb49		       02		      .byte.b	%10
   3491  fb4a		       02		      .byte.b	%10
   3492  fb4b		       02		      .byte.b	%10
   3493  fb4c		       02		      .byte.b	%10
   3494  fb4d		       02		      .byte.b	%10
   3495  fb4e		       02		      .byte.b	%10
   3496  fb4f		       02		      .byte.b	%10
   3497  fb50		       02		      .byte.b	%10
   3498  fb51		       02		      .byte.b	%10
   3499  fb52		       02		      .byte.b	%10
   3500  fb53		       02		      .byte.b	%10
   3501  fb54		       02		      .byte.b	%10
   3502  fb55		       02		      .byte.b	%10
   3503  fb56		       02		      .byte.b	%10
   3504  fb57		       02		      .byte.b	%10
   3505  fb58		       02		      .byte.b	%10
   3506  fb59		       02		      .byte.b	%10
   3507  fb5a		       02		      .byte.b	%10
   3508  fb5b		       02		      .byte.b	%10
   3509  fb5c		       02		      .byte.b	%10
   3510  fb5d		       02		      .byte.b	%10
   3511  fb5e		       02		      .byte.b	%10
   3512  fb5f		       02		      .byte.b	%10
   3513  fb60		       02		      .byte.b	%10
   3514  fb61		       02		      .byte.b	%10
   3515  fb62		       02		      .byte.b	%10
   3516  fb63		       02		      .byte.b	%10
   3517  fb64		       02		      .byte.b	%10
   3518  fb65		       02		      .byte.b	%10
   3519  fb66		       02		      .byte.b	%10
   3520  fb67		       02		      .byte.b	%10
   3521  fb68		       02		      .byte.b	%10
   3522  fb69		       02		      .byte.b	%10
   3523  fb6a		       02		      .byte.b	%10
   3524  fb6b		       02		      .byte.b	%10
   3525  fb6c		       02		      .byte.b	%10
   3526  fb6d		       02		      .byte.b	%10
   3527  fb6e		       02		      .byte.b	%10
   3528  fb6f		       02		      .byte.b	%10
   3529  fb70		       02		      .byte.b	%10
   3530  fb71		       02		      .byte.b	%10
   3531  fb72		       02		      .byte.b	%10
   3532  fb73		       02		      .byte.b	%10
   3533  fb74		       02		      .byte.b	%10
   3534  fb75		       02		      .byte.b	%10
   3535  fb76		       02		      .byte.b	%10
   3536  fb77		       02		      .byte.b	%10
   3537  fb78		       02		      .byte.b	%10
   3538  fb79		       02		      .byte.b	%10
   3539  fb7a		       02		      .byte.b	%10
   3540  fb7b		       02		      .byte.b	%10
   3541  fb7c		       02		      .byte.b	%10
   3542  fb7d		       02		      .byte.b	%10
   3543  fb7e		       02		      .byte.b	%10
   3544  fb7f		       02		      .byte.b	%10
   3545  fb80		       02		      .byte.b	%10
   3546  fb81		       02		      .byte.b	%10
   3547  fb82		       02		      .byte.b	%10
   3548  fb83		       02		      .byte.b	%10
   3549  fb84		       02		      .byte.b	%10
   3550  fb85		       02		      .byte.b	%10
   3551  fb86		       02		      .byte.b	%10
   3552  fb87		       02		      .byte.b	%10
   3553  fb88		       02		      .byte.b	%10
   3554  fb89		       02		      .byte.b	%10
   3555  fb8a		       02		      .byte.b	%10
   3556  fb8b		       02		      .byte.b	%10
   3557  fb8c		       02		      .byte.b	%10
   3558  fb8d		       02		      .byte.b	%10
   3559  fb8e		       02		      .byte.b	%10
   3560  fb8f		       02		      .byte.b	%10
   3561  fb90		       02		      .byte.b	%10
   3562  fb91		       02		      .byte.b	%10
   3563  fb92		       02		      .byte.b	%10
   3564  fb93		       02		      .byte.b	%10
   3565  fb94		       02		      .byte.b	%10
   3566  fb95		       02		      .byte.b	%10
   3567  fb96		       02		      .byte.b	%10
   3568  fb97		       02		      .byte.b	%10
   3569  fb98		       02		      .byte.b	%10
   3570  fb99		       02		      .byte.b	%10
   3571  fb9a		       02		      .byte.b	%10
   3572  fb9b		       02		      .byte.b	%10
   3573  fb9c		       02		      .byte.b	%10
   3574  fb9d		       02		      .byte.b	%10
   3575  fb9e		       02		      .byte.b	%10
   3576  fb9f		       02		      .byte.b	%10
   3577  fba0		       02		      .byte.b	%10
   3578  fba1		       02		      .byte.b	%10
   3579  fba2		       02		      .byte.b	%10
   3580  fba3		       02		      .byte.b	%10
   3581  fba4		       02		      .byte.b	%10
   3582  fba5		       02		      .byte.b	%10
   3583  fba6		       02		      .byte.b	%10
   3584  fba7		       02		      .byte.b	%10
   3585  fba8		       02		      .byte.b	%10
   3586  fba9		       02		      .byte.b	%10
   3587  fbaa		       02		      .byte.b	%10
   3588  fbab		       02		      .byte.b	%10
   3589  fbac		       02		      .byte.b	%10
   3590  fbad		       02		      .byte.b	%10
   3591  fbae		       02		      .byte.b	%10
   3592  fbaf		       02		      .byte.b	%10
   3593  fbb0		       02		      .byte.b	%10
   3594  fbb1		       02		      .byte.b	%10
   3595  fbb2		       02		      .byte.b	%10
   3596  fbb3		       02		      .byte.b	%10
   3597  fbb4		       02		      .byte.b	%10
   3598  fbb5		       02		      .byte.b	%10
   3599  fbb6		       02		      .byte.b	%10
   3600  fbb7		       02		      .byte.b	%10
   3601  fbb8		       02		      .byte.b	%10
   3602  fbb9		       02		      .byte.b	%10
   3603  fbba		       02		      .byte.b	%10
   3604  fbbb		       02		      .byte.b	%10
   3605  fbbc		       02		      .byte.b	%10
   3606  fbbd		       02		      .byte.b	%10
   3607  fbbe		       02		      .byte.b	%10
   3608  fbbf		       02		      .byte.b	%10
   3609  fbc0		       02		      .byte.b	%10
   3610  fbc1		       02		      .byte.b	%10
   3611  fbc2		       02		      .byte.b	%10
   3612  fbc3		       02		      .byte.b	%10
   3613  fbc4		       02		      .byte.b	%10
   3614  fbc5		       02		      .byte.b	%10
   3615  fbc6		       02		      .byte.b	%10
   3616  fbc7		       02		      .byte.b	%10
   3617  fbc8		       02		      .byte.b	%10
   3618  fbc9		       02		      .byte.b	%10
   3619  fbca		       02		      .byte.b	%10
   3620  fbcb		       02		      .byte.b	%10
   3621  fbcc		       02		      .byte.b	%10
   3622  fbcd		       02		      .byte.b	%10
   3623  fbce		       02		      .byte.b	%10
   3624  fbcf		       02		      .byte.b	%10
   3625  fbd0		       02		      .byte.b	%10
   3626  fbd1		       02		      .byte.b	%10
   3627  fbd2		       02		      .byte.b	%10
   3628  fbd3		       02		      .byte.b	%10
   3629  fbd4		       02		      .byte.b	%10
   3630  fbd5		       02		      .byte.b	%10
   3631  fbd6		       02		      .byte.b	%10
   3632  fbd7		       02		      .byte.b	%10
   3633  fbd8		       02		      .byte.b	%10
   3634  fbd9		       02		      .byte.b	%10
   3635  fbda		       02		      .byte.b	%10
   3636  fbdb		       02		      .byte.b	%10
   3637  fbdc		       02		      .byte.b	%10
   3638  fbdd		       02		      .byte.b	%10
   3639  fbde		       02		      .byte.b	%10
   3640  fbdf		       02		      .byte.b	%10
   3641  fbe0		       02		      .byte.b	%10
   3642  fbe1		       02		      .byte.b	%10
   3643  fbe2		       02		      .byte.b	%10
   3644  fbe3		       02		      .byte.b	%10
   3645  fbe4		       02		      .byte.b	%10
   3646  fbe5		       02		      .byte.b	%10
   3647  fbe6		       02		      .byte.b	%10
   3648  fbe7		       02		      .byte.b	%10
   3649  fbe8		       02		      .byte.b	%10
   3650  fbe9		       02		      .byte.b	%10
   3651  fbea		       02		      .byte.b	%10
   3652  fbeb		       02		      .byte.b	%10
   3653  fbec		       02		      .byte.b	%10
   3654  fbed		       02		      .byte.b	%10
   3655  fbee		       02		      .byte.b	%10
   3656  fbef		       02		      .byte.b	%10
   3657  fbf0		       02		      .byte.b	%10
   3658  fbf1		       02		      .byte.b	%10
   3659  fbf2		       02		      .byte.b	%10
   3660  fbf3		       02		      .byte.b	%10
   3661  fbf4		       02		      .byte.b	%10
   3662  fbf5		       02		      .byte.b	%10
   3663  fbf6		       02		      .byte.b	%10
   3664  fbf7		       02		      .byte.b	%10
   3665  fbf8		       02		      .byte.b	%10
   3666  fbf9		       02		      .byte.b	%10
   3667  fbfa		       02		      .byte.b	%10
   3668  fbfb		       02		      .byte.b	%10
   3669  fbfc		       02		      .byte.b	%10
   3670  fbfd		       02		      .byte.b	%10
   3671  fbfe		       02		      .byte.b	%10
   3672  fbff					      if	ECHOFIRST
      925 bytes of ROM space left
   3673  fbff					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3674  fbff					      endif
   3675  fbff		       00 01	   ECHOFIRST  =	1
   3676  fbff
   3677  fbff
   3678  fbff
   3679  fbff							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3680  fbff
   3681  fbff							; feel free to modify the score graphics - just keep each digit 8 high
   3682  fbff							; and keep the conditional compilation stuff intact
   3683  fbff				  -	      ifconst	ROM2k
   3684  fbff				  -	      ORG	$F7AC-8
   3685  fbff					      else
   3686  fbff				  -	      ifconst	bankswitch
   3687  fbff				  -	      if	bankswitch == 8
   3688  fbff				  -	      ORG	$2F94-bscode_length
   3689  fbff				  -	      RORG	$FF94-bscode_length
   3690  fbff				  -	      endif
   3691  fbff				  -	      if	bankswitch == 16
   3692  fbff				  -	      ORG	$4F94-bscode_length
   3693  fbff				  -	      RORG	$FF94-bscode_length
   3694  fbff				  -	      endif
   3695  fbff				  -	      if	bankswitch == 32
   3696  fbff				  -	      ORG	$8F94-bscode_length
   3697  fbff				  -	      RORG	$FF94-bscode_length
   3698  fbff				  -	      endif
   3699  fbff				  -	      if	bankswitch == 64
   3700  fbff				  -	      ORG	$10F80-bscode_length
   3701  fbff				  -	      RORG	$1FF80-bscode_length
   3702  fbff				  -	      endif
   3703  fbff					      else
   3704  ff9c					      ORG	$FF9C
   3705  ff9c					      endif
   3706  ff9c					      endif
   3707  ff9c
   3708  ff9c							; font equates
   3709  ff9c		       00 01	   .21stcentury =	1
   3710  ff9c		       00 02	   alarmclock =	2
   3711  ff9c		       00 03	   handwritten =	3
   3712  ff9c		       00 04	   interrupted =	4
   3713  ff9c		       00 05	   retroputer =	5
   3714  ff9c		       00 06	   whimsey    =	6
   3715  ff9c		       00 07	   tiny       =	7
   3716  ff9c		       00 08	   hex	      =	8
   3717  ff9c
   3718  ff9c				  -	      ifconst	font
   3719  ff9c				  -	      if	font == hex
   3720  ff9c				  -	      ORG	. - 48
   3721  ff9c				  -	      endif
   3722  ff9c					      endif
   3723  ff9c
   3724  ff9c				   scoretable
   3725  ff9c
   3726  ff9c				  -	      ifconst	font
   3727  ff9c				  -	      if	font == .21stcentury
   3728  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3729  ff9c				  -	      endif
   3730  ff9c				  -	      if	font == alarmclock
   3731  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3732  ff9c				  -	      endif
   3733  ff9c				  -	      if	font == handwritten
   3734  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3735  ff9c				  -	      endif
   3736  ff9c				  -	      if	font == interrupted
   3737  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3738  ff9c				  -	      endif
   3739  ff9c				  -	      if	font == retroputer
   3740  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3741  ff9c				  -	      endif
   3742  ff9c				  -	      if	font == whimsey
   3743  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3744  ff9c				  -	      endif
   3745  ff9c				  -	      if	font == tiny
   3746  ff9c				  -	      include	"score_graphics.asm.tiny"
   3747  ff9c				  -	      endif
   3748  ff9c				  -	      if	font == hex
   3749  ff9c				  -	      include	"score_graphics.asm.hex"
   3750  ff9c				  -	      endif
   3751  ff9c					      else		; default font
   3752  ff9c
   3753  ff9c		       3c		      .byte.b	%00111100
   3754  ff9d		       66		      .byte.b	%01100110
   3755  ff9e		       66		      .byte.b	%01100110
   3756  ff9f		       66		      .byte.b	%01100110
   3757  ffa0		       66		      .byte.b	%01100110
   3758  ffa1		       66		      .byte.b	%01100110
   3759  ffa2		       66		      .byte.b	%01100110
   3760  ffa3		       3c		      .byte.b	%00111100
   3761  ffa4
   3762  ffa4		       7e		      .byte.b	%01111110
   3763  ffa5		       18		      .byte.b	%00011000
   3764  ffa6		       18		      .byte.b	%00011000
   3765  ffa7		       18		      .byte.b	%00011000
   3766  ffa8		       18		      .byte.b	%00011000
   3767  ffa9		       38		      .byte.b	%00111000
   3768  ffaa		       18		      .byte.b	%00011000
   3769  ffab		       08		      .byte.b	%00001000
   3770  ffac
   3771  ffac		       7e		      .byte.b	%01111110
   3772  ffad		       60		      .byte.b	%01100000
   3773  ffae		       60		      .byte.b	%01100000
   3774  ffaf		       3c		      .byte.b	%00111100
   3775  ffb0		       06		      .byte.b	%00000110
   3776  ffb1		       06		      .byte.b	%00000110
   3777  ffb2		       46		      .byte.b	%01000110
   3778  ffb3		       3c		      .byte.b	%00111100
   3779  ffb4
   3780  ffb4		       3c		      .byte.b	%00111100
   3781  ffb5		       46		      .byte.b	%01000110
   3782  ffb6		       06		      .byte.b	%00000110
   3783  ffb7		       06		      .byte.b	%00000110
   3784  ffb8		       1c		      .byte.b	%00011100
   3785  ffb9		       06		      .byte.b	%00000110
   3786  ffba		       46		      .byte.b	%01000110
   3787  ffbb		       3c		      .byte.b	%00111100
   3788  ffbc
   3789  ffbc		       0c		      .byte.b	%00001100
   3790  ffbd		       0c		      .byte.b	%00001100
   3791  ffbe		       7e		      .byte.b	%01111110
   3792  ffbf		       4c		      .byte.b	%01001100
   3793  ffc0		       4c		      .byte.b	%01001100
   3794  ffc1		       2c		      .byte.b	%00101100
   3795  ffc2		       1c		      .byte.b	%00011100
   3796  ffc3		       0c		      .byte.b	%00001100
   3797  ffc4
   3798  ffc4		       3c		      .byte.b	%00111100
   3799  ffc5		       46		      .byte.b	%01000110
   3800  ffc6		       06		      .byte.b	%00000110
   3801  ffc7		       06		      .byte.b	%00000110
   3802  ffc8		       3c		      .byte.b	%00111100
   3803  ffc9		       60		      .byte.b	%01100000
   3804  ffca		       60		      .byte.b	%01100000
   3805  ffcb		       7e		      .byte.b	%01111110
   3806  ffcc
   3807  ffcc		       3c		      .byte.b	%00111100
   3808  ffcd		       66		      .byte.b	%01100110
   3809  ffce		       66		      .byte.b	%01100110
   3810  ffcf		       66		      .byte.b	%01100110
   3811  ffd0		       7c		      .byte.b	%01111100
   3812  ffd1		       60		      .byte.b	%01100000
   3813  ffd2		       62		      .byte.b	%01100010
   3814  ffd3		       3c		      .byte.b	%00111100
   3815  ffd4
   3816  ffd4		       30		      .byte.b	%00110000
   3817  ffd5		       30		      .byte.b	%00110000
   3818  ffd6		       30		      .byte.b	%00110000
   3819  ffd7		       18		      .byte.b	%00011000
   3820  ffd8		       0c		      .byte.b	%00001100
   3821  ffd9		       06		      .byte.b	%00000110
   3822  ffda		       42		      .byte.b	%01000010
   3823  ffdb		       3e		      .byte.b	%00111110
   3824  ffdc
   3825  ffdc		       3c		      .byte.b	%00111100
   3826  ffdd		       66		      .byte.b	%01100110
   3827  ffde		       66		      .byte.b	%01100110
   3828  ffdf		       66		      .byte.b	%01100110
   3829  ffe0		       3c		      .byte.b	%00111100
   3830  ffe1		       66		      .byte.b	%01100110
   3831  ffe2		       66		      .byte.b	%01100110
   3832  ffe3		       3c		      .byte.b	%00111100
   3833  ffe4
   3834  ffe4		       3c		      .byte.b	%00111100
   3835  ffe5		       46		      .byte.b	%01000110
   3836  ffe6		       06		      .byte.b	%00000110
   3837  ffe7		       3e		      .byte.b	%00111110
   3838  ffe8		       66		      .byte.b	%01100110
   3839  ffe9		       66		      .byte.b	%01100110
   3840  ffea		       66		      .byte.b	%01100110
   3841  ffeb		       3c		      .byte.b	%00111100
   3842  ffec
   3843  ffec					      ifnconst	DPC_kernel_options
   3844  ffec
   3845  ffec		       00		      .byte.b	%00000000
   3846  ffed		       00		      .byte.b	%00000000
   3847  ffee		       00		      .byte.b	%00000000
   3848  ffef		       00		      .byte.b	%00000000
   3849  fff0		       00		      .byte.b	%00000000
   3850  fff1		       00		      .byte.b	%00000000
   3851  fff2		       00		      .byte.b	%00000000
   3852  fff3		       00		      .byte.b	%00000000
   3853  fff4
   3854  fff4					      endif
   3855  fff4
   3856  fff4					      endif
   3857  fff4
   3858  fff4				  -	      ifconst	ROM2k
   3859  fff4				  -	      ORG	$F7FC
   3860  fff4					      else
   3861  fff4				  -	      ifconst	bankswitch
   3862  fff4				  -	      if	bankswitch == 8
   3863  fff4				  -	      ORG	$2FF4-bscode_length
   3864  fff4				  -	      RORG	$FFF4-bscode_length
   3865  fff4				  -	      endif
   3866  fff4				  -	      if	bankswitch == 16
   3867  fff4				  -	      ORG	$4FF4-bscode_length
   3868  fff4				  -	      RORG	$FFF4-bscode_length
   3869  fff4				  -	      endif
   3870  fff4				  -	      if	bankswitch == 32
   3871  fff4				  -	      ORG	$8FF4-bscode_length
   3872  fff4				  -	      RORG	$FFF4-bscode_length
   3873  fff4				  -	      endif
   3874  fff4				  -	      if	bankswitch == 64
   3875  fff4				  -	      ORG	$10FE0-bscode_length
   3876  fff4				  -	      RORG	$1FFE0-bscode_length
   3877  fff4				  -	      endif
   3878  fff4					      else
   3879  fffc					      ORG	$FFFC
   3880  fffc					      endif
   3881  fffc					      endif
   3882  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3883  fffc
   3884  fffc				  -	      ifconst	bankswitch
   3885  fffc				  -	      if	bankswitch == 8
   3886  fffc				  -	      ORG	$2FFC
   3887  fffc				  -	      RORG	$FFFC
   3888  fffc				  -	      endif
   3889  fffc				  -	      if	bankswitch == 16
   3890  fffc				  -	      ORG	$4FFC
   3891  fffc				  -	      RORG	$FFFC
   3892  fffc				  -	      endif
   3893  fffc				  -	      if	bankswitch == 32
   3894  fffc				  -	      ORG	$8FFC
   3895  fffc				  -	      RORG	$FFFC
   3896  fffc				  -	      endif
   3897  fffc				  -	      if	bankswitch == 64
   3898  fffc				  -	      ORG	$10FF0
   3899  fffc				  -	      RORG	$1FFF0
   3900  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3901  fffc				  -	      ORG	$10FF8
   3902  fffc				  -	      RORG	$1FFF8
   3903  fffc				  -	      ifconst	superchip
   3904  fffc				  -	      .byte	"E","F","S","C"
   3905  fffc				  -	      else
   3906  fffc				  -	      .byte	"E","F","E","F"
   3907  fffc				  -	      endif
   3908  fffc				  -	      ORG	$10FFC
   3909  fffc				  -	      RORG	$1FFFC
   3910  fffc				  -	      endif
   3911  fffc					      else
   3912  fffc				  -	      ifconst	ROM2k
   3913  fffc				  -	      ORG	$F7FC
   3914  fffc					      else
   3915  fffc					      ORG	$FFFC
   3916  fffc					      endif
   3917  fffc					      endif
   3918  fffc		       00 f0		      .word.w	(start & $ffff)
   3919  fffe		       00 f0		      .word.w	(start & $ffff)

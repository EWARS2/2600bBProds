------- FILE G:\sndsample\5sndtest.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE G:\sndsample\5sndtest.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE G:\sndsample\5sndtest.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    noscore    =	1
      4  10000 ????
      5  10000 ????		00 da	    _F0        =	g
      6  10000 ????
      7  10000 ????		00 d9	    _V0        =	f
      8  10000 ????
      9  10000 ????		00 d8	    _C0        =	e
     10  10000 ????
     11  10000 ????		00 d7	    _Ch0_Duration =	d
     12  10000 ????
     13  10000 ????		00 d6	    _Ch0_Sound =	c
     14  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE G:\sndsample\5sndtest.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    noscore    =	1
      4  10000 ????
      5  10000 ????		00 da	    _F0        =	g
      6  10000 ????
      7  10000 ????		00 d9	    _V0        =	f
      8  10000 ????
      9  10000 ????		00 d8	    _C0        =	e
     10  10000 ????
     11  10000 ????		00 d7	    _Ch0_Duration =	d
     12  10000 ????
     13  10000 ????		00 d6	    _Ch0_Sound =	c
     14  10000 ????
------- FILE G:\sndsample\5sndtest.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c c8 f3 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5				  -	      ifnconst	noscore
    741  f1b5				  -	      lda	scorepointers+1
    742  f1b5				  -			; ldy temp1
    743  f1b5				  -	      sta	temp1
    744  f1b5				  -			; sty scorepointers+1
    745  f1b5				  -
    746  f1b5				  -	      lda	scorepointers+3
    747  f1b5				  -			; ldy temp3
    748  f1b5				  -	      sta	temp3
    749  f1b5				  -			; sty scorepointers+3
    750  f1b5				  -
    751  f1b5				  -
    752  f1b5				  -	      sta	HMCLR
    753  f1b5				  -	      tsx
    754  f1b5				  -	      stx	stack1
    755  f1b5				  -	      ldx	#$E0
    756  f1b5				  -	      stx	HMP0
    757  f1b5				  -
    758  f1b5				  -	      LDA	scorecolor
    759  f1b5				  -	      STA	COLUP0
    760  f1b5				  -	      STA	COLUP1
    761  f1b5				  -	      ifconst	scorefade
    762  f1b5				  -	      STA	stack2
    763  f1b5				  -	      endif
    764  f1b5				  -	      ifconst	pfscore
    765  f1b5				  -	      lda	pfscorecolor
    766  f1b5				  -	      sta	COLUPF
    767  f1b5				  -	      endif
    768  f1b5				  -	      sta	WSYNC
    769  f1b5				  -	      ldx	#0
    770  f1b5				  -	      STx	GRP0
    771  f1b5				  -	      STx	GRP1	; seems to be needed because of vdel
    772  f1b5				  -
    773  f1b5				  -	      lda	scorepointers+5
    774  f1b5				  -			; ldy temp5
    775  f1b5				  -	      sta	temp5,x
    776  f1b5				  -			; sty scorepointers+5
    777  f1b5				  -	      lda	#>scoretable
    778  f1b5				  -	      sta	scorepointers+1
    779  f1b5				  -	      sta	scorepointers+3
    780  f1b5				  -	      sta	scorepointers+5
    781  f1b5				  -	      sta	temp2
    782  f1b5				  -	      sta	temp4
    783  f1b5				  -	      sta	temp6
    784  f1b5				  -	      LDY	#7
    785  f1b5				  -	      STY	VDELP0
    786  f1b5				  -	      STA	RESP0
    787  f1b5				  -	      STA	RESP1
    788  f1b5				  -
    789  f1b5				  -
    790  f1b5				  -	      LDA	#$03
    791  f1b5				  -	      STA	NUSIZ0
    792  f1b5				  -	      STA	NUSIZ1
    793  f1b5				  -	      STA	VDELP1
    794  f1b5				  -	      LDA	#$F0
    795  f1b5				  -	      STA	HMP1
    796  f1b5				  -	      lda	(scorepointers),y
    797  f1b5				  -	      sta	GRP0
    798  f1b5				  -	      STA	HMOVE	; cycle 73 ?
    799  f1b5				  -	      jmp	beginscore
    800  f1b5				  -
    801  f1b5				  -
    802  f1b5				  -	      if	((<*)>$d4)
    803  f1b5				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f1b5				  -	      endif
    805  f1b5				  -
    806  f1b5				  -loop2
    807  f1b5				  -	      lda	(scorepointers),y	;+5 68 204
    808  f1b5				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f1b5				  -	      ifconst	pfscore
    810  f1b5				  -	      lda.w	pfscore1
    811  f1b5				  -	      sta	PF1
    812  f1b5				  -	      else
    813  f1b5				  -	      ifconst	scorefade
    814  f1b5				  -	      sleep	2
    815  f1b5				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f1b5				  -	      else
    817  f1b5				  -	      sleep	7
    818  f1b5				  -	      endif
    819  f1b5				  -	      endif
    820  f1b5				  -			; cycle 0
    821  f1b5				  -beginscore
    822  f1b5				  -	      lda	(scorepointers+$8),y	;+5 5 15
    823  f1b5				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f1b5				  -	      lda	(scorepointers+$6),y	;+5 13 39
    825  f1b5				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f1b5				  -	      lax	(scorepointers+$2),y	;+5 29 87
    827  f1b5				  -	      txs
    828  f1b5				  -	      lax	(scorepointers+$4),y	;+5 36 108
    829  f1b5				  -	      ifconst	scorefade
    830  f1b5				  -	      lda	stack2
    831  f1b5				  -	      else
    832  f1b5				  -	      sleep	3
    833  f1b5				  -	      endif
    834  f1b5				  -
    835  f1b5				  -	      ifconst	pfscore
    836  f1b5				  -	      lda	pfscore2
    837  f1b5				  -	      sta	PF1
    838  f1b5				  -	      else
    839  f1b5				  -	      ifconst	scorefade
    840  f1b5				  -	      sta	COLUP0
    841  f1b5				  -	      sta	COLUP1
    842  f1b5				  -	      else
    843  f1b5				  -	      sleep	6
    844  f1b5				  -	      endif
    845  f1b5				  -	      endif
    846  f1b5				  -
    847  f1b5				  -	      lda	(scorepointers+$A),y	;+5 21 63
    848  f1b5				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f1b5				  -	      tsx
    850  f1b5				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f1b5				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f1b5				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f1b5				  -	      dey
    854  f1b5				  -	      bpl	loop2	;+2 60 180
    855  f1b5				  -
    856  f1b5				  -	      ldx	stack1
    857  f1b5				  -	      txs
    858  f1b5				  -			; lda scorepointers+1
    859  f1b5				  -	      ldy	temp1
    860  f1b5				  -			; sta temp1
    861  f1b5				  -	      sty	scorepointers+1
    862  f1b5				  -
    863  f1b5				  -	      LDA	#0
    864  f1b5				  -	      sta	PF1
    865  f1b5				  -	      STA	GRP0
    866  f1b5				  -	      STA	GRP1
    867  f1b5				  -	      STA	VDELP0
    868  f1b5				  -	      STA	VDELP1	;do we need these
    869  f1b5				  -	      STA	NUSIZ0
    870  f1b5				  -	      STA	NUSIZ1
    871  f1b5				  -
    872  f1b5				  -			; lda scorepointers+3
    873  f1b5				  -	      ldy	temp3
    874  f1b5				  -			; sta temp3
    875  f1b5				  -	      sty	scorepointers+3
    876  f1b5				  -
    877  f1b5				  -			; lda scorepointers+5
    878  f1b5				  -	      ldy	temp5
    879  f1b5				  -			; sta temp5
    880  f1b5				  -	      sty	scorepointers+5
    881  f1b5					      endif		;noscore
    882  f1b5				  -	      ifconst	readpaddle
    883  f1b5				  -	      lda	#%11000010
    884  f1b5					      else
    885  f1b5				  -	      ifconst	qtcontroller
    886  f1b5				  -	      lda	qtcontroller
    887  f1b5				  -	      lsr		; bit 0 in carry
    888  f1b5				  -	      lda	#4
    889  f1b5				  -	      ror		; carry into top of A
    890  f1b5					      else
    891  f1b5		       a9 02		      lda	#2
    892  f1b7					      endif		; qtcontroller
    893  f1b7					      endif		; readpaddle
    894  f1b7		       85 02		      sta	WSYNC
    895  f1b9		       85 01		      sta	VBLANK
      0  f1bb					      RETURN
      1  f1bb					      ifnconst	bankswitch
      2  f1bb		       60		      rts
      3  f1bc				  -	      else
      4  f1bc				  -	      jmp	BS_return
      5  f1bc					      endif
    897  f1bc				  -	      ifconst	shakescreen
    898  f1bc				  -doshakescreen
    899  f1bc				  -	      bit	shakescreen
    900  f1bc				  -	      bmi	noshakescreen
    901  f1bc				  -	      sta	WSYNC
    902  f1bc				  -noshakescreen
    903  f1bc				  -	      ldx	missile0height
    904  f1bc				  -	      inx
    905  f1bc				  -	      rts
    906  f1bc					      endif
    907  f1bc
    908  f1bc							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f1bc
    910  f1bc							; playfield drawing routines
    911  f1bc							; you get a 32x12 bitmapped display in a single color :)
    912  f1bc							; 0-31 and 0-11
    913  f1bc
    914  f1bc				   pfclear		; clears playfield - or fill with pattern
    915  f1bc				  -	      ifconst	pfres
    916  f1bc				  -	      ldx	#pfres*pfwidth-1
    917  f1bc					      else
    918  f1bc		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f1be					      endif
    920  f1be				   pfclear_loop
    921  f1be					      ifnconst	superchip
    922  f1be		       95 a4		      sta	playfield,x
    923  f1c0				  -	      else
    924  f1c0				  -	      sta	playfield-128,x
    925  f1c0					      endif
    926  f1c0		       ca		      dex
    927  f1c1		       10 fb		      bpl	pfclear_loop
      0  f1c3					      RETURN
      1  f1c3					      ifnconst	bankswitch
      2  f1c3		       60		      rts
      3  f1c4				  -	      else
      4  f1c4				  -	      jmp	BS_return
      5  f1c4					      endif
    929  f1c4
    930  f1c4				   setuppointers
    931  f1c4		       86 9d		      stx	temp2	; store on.off.flip value
    932  f1c6		       aa		      tax		; put x-value in x 
    933  f1c7		       4a		      lsr
    934  f1c8		       4a		      lsr
    935  f1c9		       4a		      lsr		; divide x pos by 8 
    936  f1ca		       85 9c		      sta	temp1
    937  f1cc		       98		      tya
    938  f1cd		       0a		      asl
    939  f1ce					      if	pfwidth=4
    940  f1ce		       0a		      asl		; multiply y pos by 4
    941  f1cf					      endif		; else multiply by 2
    942  f1cf		       18		      clc
    943  f1d0		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f1d2		       a8		      tay		; put the value in y
    945  f1d3		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f1d5		       60		      rts
    947  f1d6
    948  f1d6				   pfread
    949  f1d6							;x=xvalue, y=yvalue
    950  f1d6		       20 c4 f1 	      jsr	setuppointers
    951  f1d9		       bd 3e f2 	      lda	setbyte,x
    952  f1dc		       39 a4 00 	      and	playfield,y
    953  f1df		       5d 3e f2 	      eor	setbyte,x
    954  f1e2							; beq readzero
    955  f1e2							; lda #1
    956  f1e2							; readzero
      0  f1e2					      RETURN
      1  f1e2					      ifnconst	bankswitch
      2  f1e2		       60		      rts
      3  f1e3				  -	      else
      4  f1e3				  -	      jmp	BS_return
      5  f1e3					      endif
    958  f1e3
    959  f1e3				   pfpixel
    960  f1e3							;x=xvalue, y=yvalue, a=0,1,2
    961  f1e3		       20 c4 f1 	      jsr	setuppointers
    962  f1e6
    963  f1e6				  -	      ifconst	bankswitch
    964  f1e6				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f1e6				  -	      beq	pixelon_r	; if "on" go to on
    966  f1e6				  -	      lsr
    967  f1e6				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f1e6				  -	      lda	playfield,y	; if here, it's "flip"
    969  f1e6				  -	      eor	setbyte,x
    970  f1e6				  -	      ifconst	superchip
    971  f1e6				  -	      sta	playfield-128,y
    972  f1e6				  -	      else
    973  f1e6				  -	      sta	playfield,y
    974  f1e6				  -	      endif
    975  f1e6				  -	      RETURN
    976  f1e6				  -pixelon_r
    977  f1e6				  -	      lda	playfield,y
    978  f1e6				  -	      ora	setbyte,x
    979  f1e6				  -	      ifconst	superchip
    980  f1e6				  -	      sta	playfield-128,y
    981  f1e6				  -	      else
    982  f1e6				  -	      sta	playfield,y
    983  f1e6				  -	      endif
    984  f1e6				  -	      RETURN
    985  f1e6				  -pixeloff_r
    986  f1e6				  -	      lda	setbyte,x
    987  f1e6				  -	      eor	#$ff
    988  f1e6				  -	      and	playfield,y
    989  f1e6				  -	      ifconst	superchip
    990  f1e6				  -	      sta	playfield-128,y
    991  f1e6				  -	      else
    992  f1e6				  -	      sta	playfield,y
    993  f1e6				  -	      endif
    994  f1e6				  -	      RETURN
    995  f1e6				  -
    996  f1e6					      else
    997  f1e6		       4c 17 f2 	      jmp	plotpoint
    998  f1e9					      endif
    999  f1e9
   1000  f1e9				   pfhline
   1001  f1e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f1e9		       20 c4 f1 	      jsr	setuppointers
   1003  f1ec		       4c f6 f1 	      jmp	noinc
   1004  f1ef				   keepgoing
   1005  f1ef		       e8		      inx
   1006  f1f0		       8a		      txa
   1007  f1f1		       29 07		      and	#7
   1008  f1f3		       d0 01		      bne	noinc
   1009  f1f5		       c8		      iny
   1010  f1f6				   noinc
   1011  f1f6		       20 17 f2 	      jsr	plotpoint
   1012  f1f9		       e4 9e		      cpx	temp3
   1013  f1fb		       30 f2		      bmi	keepgoing
      0  f1fd					      RETURN
      1  f1fd					      ifnconst	bankswitch
      2  f1fd		       60		      rts
      3  f1fe				  -	      else
      4  f1fe				  -	      jmp	BS_return
      5  f1fe					      endif
   1015  f1fe
   1016  f1fe				   pfvline
   1017  f1fe							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f1fe		       20 c4 f1 	      jsr	setuppointers
   1019  f201		       84 9c		      sty	temp1	; store memory location offset
   1020  f203		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f205		       a5 9e		      lda	temp3
   1022  f207		       0a		      asl
   1023  f208					      if	pfwidth=4
   1024  f208		       0a		      asl		; multiply by 4
   1025  f209					      endif		; else multiply by 2
   1026  f209		       85 9e		      sta	temp3	; store it
   1027  f20b							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f20b							; right now, temp1=y=starting memory location, temp3=final
   1029  f20b							; x should equal original x value
   1030  f20b				   keepgoingy
   1031  f20b		       20 17 f2 	      jsr	plotpoint
   1032  f20e		       c8		      iny
   1033  f20f		       c8		      iny
   1034  f210					      if	pfwidth=4
   1035  f210		       c8		      iny
   1036  f211		       c8		      iny
   1037  f212					      endif
   1038  f212		       c4 9e		      cpy	temp3
   1039  f214		       30 f5		      bmi	keepgoingy
      0  f216					      RETURN
      1  f216					      ifnconst	bankswitch
      2  f216		       60		      rts
      3  f217				  -	      else
      4  f217				  -	      jmp	BS_return
      5  f217					      endif
   1041  f217
   1042  f217				   plotpoint
   1043  f217		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f219		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f21b		       4a		      lsr
   1046  f21c		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f21e		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f221		       5d 3e f2 	      eor	setbyte,x
   1049  f224				  -	      ifconst	superchip
   1050  f224				  -	      sta	playfield-128,y
   1051  f224					      else
   1052  f224		       99 a4 00 	      sta	playfield,y
   1053  f227					      endif
   1054  f227		       60		      rts
   1055  f228				   pixelon
   1056  f228		       b9 a4 00 	      lda	playfield,y
   1057  f22b		       1d 3e f2 	      ora	setbyte,x
   1058  f22e				  -	      ifconst	superchip
   1059  f22e				  -	      sta	playfield-128,y
   1060  f22e					      else
   1061  f22e		       99 a4 00 	      sta	playfield,y
   1062  f231					      endif
   1063  f231		       60		      rts
   1064  f232				   pixeloff
   1065  f232		       bd 3e f2 	      lda	setbyte,x
   1066  f235		       49 ff		      eor	#$ff
   1067  f237		       39 a4 00 	      and	playfield,y
   1068  f23a				  -	      ifconst	superchip
   1069  f23a				  -	      sta	playfield-128,y
   1070  f23a					      else
   1071  f23a		       99 a4 00 	      sta	playfield,y
   1072  f23d					      endif
   1073  f23d		       60		      rts
   1074  f23e
   1075  f23e				   setbyte
   1076  f23e					      ifnconst	pfcenter
   1077  f23e		       80		      .byte.b	$80
   1078  f23f		       40		      .byte.b	$40
   1079  f240		       20		      .byte.b	$20
   1080  f241		       10		      .byte.b	$10
   1081  f242		       08		      .byte.b	$08
   1082  f243		       04		      .byte.b	$04
   1083  f244		       02		      .byte.b	$02
   1084  f245		       01		      .byte.b	$01
   1085  f246					      endif
   1086  f246		       01		      .byte.b	$01
   1087  f247		       02		      .byte.b	$02
   1088  f248		       04		      .byte.b	$04
   1089  f249		       08		      .byte.b	$08
   1090  f24a		       10		      .byte.b	$10
   1091  f24b		       20		      .byte.b	$20
   1092  f24c		       40		      .byte.b	$40
   1093  f24d		       80		      .byte.b	$80
   1094  f24e		       80		      .byte.b	$80
   1095  f24f		       40		      .byte.b	$40
   1096  f250		       20		      .byte.b	$20
   1097  f251		       10		      .byte.b	$10
   1098  f252		       08		      .byte.b	$08
   1099  f253		       04		      .byte.b	$04
   1100  f254		       02		      .byte.b	$02
   1101  f255		       01		      .byte.b	$01
   1102  f256		       01		      .byte.b	$01
   1103  f257		       02		      .byte.b	$02
   1104  f258		       04		      .byte.b	$04
   1105  f259		       08		      .byte.b	$08
   1106  f25a		       10		      .byte.b	$10
   1107  f25b		       20		      .byte.b	$20
   1108  f25c		       40		      .byte.b	$40
   1109  f25d		       80		      .byte.b	$80
   1110  f25e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f25e
   1112  f25e				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f25e		       d0 13		      bne	notleft
   1114  f260							;left
   1115  f260				  -	      ifconst	pfres
   1116  f260				  -	      ldx	#pfres*4
   1117  f260					      else
   1118  f260		       a2 30		      ldx	#48
   1119  f262					      endif
   1120  f262				   leftloop
   1121  f262		       b5 a3		      lda	playfield-1,x
   1122  f264		       4a		      lsr
   1123  f265
   1124  f265				  -	      ifconst	superchip
   1125  f265				  -	      lda	playfield-2,x
   1126  f265				  -	      rol
   1127  f265				  -	      sta	playfield-130,x
   1128  f265				  -	      lda	playfield-3,x
   1129  f265				  -	      ror
   1130  f265				  -	      sta	playfield-131,x
   1131  f265				  -	      lda	playfield-4,x
   1132  f265				  -	      rol
   1133  f265				  -	      sta	playfield-132,x
   1134  f265				  -	      lda	playfield-1,x
   1135  f265				  -	      ror
   1136  f265				  -	      sta	playfield-129,x
   1137  f265					      else
   1138  f265		       36 a2		      rol	playfield-2,x
   1139  f267		       76 a1		      ror	playfield-3,x
   1140  f269		       36 a0		      rol	playfield-4,x
   1141  f26b		       76 a3		      ror	playfield-1,x
   1142  f26d					      endif
   1143  f26d
   1144  f26d		       8a		      txa
   1145  f26e		       cb 04		      sbx	#4
   1146  f270		       d0 f0		      bne	leftloop
      0  f272					      RETURN
      1  f272					      ifnconst	bankswitch
      2  f272		       60		      rts
      3  f273				  -	      else
      4  f273				  -	      jmp	BS_return
      5  f273					      endif
   1148  f273
   1149  f273				   notleft
   1150  f273		       4a		      lsr
   1151  f274		       90 13		      bcc	notright
   1152  f276							;right
   1153  f276
   1154  f276				  -	      ifconst	pfres
   1155  f276				  -	      ldx	#pfres*4
   1156  f276					      else
   1157  f276		       a2 30		      ldx	#48
   1158  f278					      endif
   1159  f278				   rightloop
   1160  f278		       b5 a0		      lda	playfield-4,x
   1161  f27a		       4a		      lsr
   1162  f27b				  -	      ifconst	superchip
   1163  f27b				  -	      lda	playfield-3,x
   1164  f27b				  -	      rol
   1165  f27b				  -	      sta	playfield-131,x
   1166  f27b				  -	      lda	playfield-2,x
   1167  f27b				  -	      ror
   1168  f27b				  -	      sta	playfield-130,x
   1169  f27b				  -	      lda	playfield-1,x
   1170  f27b				  -	      rol
   1171  f27b				  -	      sta	playfield-129,x
   1172  f27b				  -	      lda	playfield-4,x
   1173  f27b				  -	      ror
   1174  f27b				  -	      sta	playfield-132,x
   1175  f27b					      else
   1176  f27b		       36 a1		      rol	playfield-3,x
   1177  f27d		       76 a2		      ror	playfield-2,x
   1178  f27f		       36 a3		      rol	playfield-1,x
   1179  f281		       76 a0		      ror	playfield-4,x
   1180  f283					      endif
   1181  f283		       8a		      txa
   1182  f284		       cb 04		      sbx	#4
   1183  f286		       d0 f0		      bne	rightloop
      0  f288					      RETURN
      1  f288					      ifnconst	bankswitch
      2  f288		       60		      rts
      3  f289				  -	      else
      4  f289				  -	      jmp	BS_return
      5  f289					      endif
   1185  f289
   1186  f289				   notright
   1187  f289		       4a		      lsr
   1188  f28a		       90 49		      bcc	notup
   1189  f28c							;up
   1190  f28c		       4a		      lsr
   1191  f28d		       90 02		      bcc	onedecup
   1192  f28f		       c6 ef		      dec	playfieldpos
   1193  f291				   onedecup
   1194  f291		       c6 ef		      dec	playfieldpos
   1195  f293		       f0 02		      beq	shiftdown
   1196  f295		       10 3d		      bpl	noshiftdown2
   1197  f297				   shiftdown
   1198  f297				  -	      ifconst	pfrowheight
   1199  f297				  -	      lda	#pfrowheight
   1200  f297					      else
   1201  f297					      ifnconst	pfres
   1202  f297		       a9 08		      lda	#8
   1203  f299				  -	      else
   1204  f299				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f299					      endif
   1206  f299					      endif
   1207  f299
   1208  f299		       85 ef		      sta	playfieldpos
   1209  f29b		       a5 a7		      lda	playfield+3
   1210  f29d		       85 9f		      sta	temp4
   1211  f29f		       a5 a6		      lda	playfield+2
   1212  f2a1		       85 9e		      sta	temp3
   1213  f2a3		       a5 a5		      lda	playfield+1
   1214  f2a5		       85 9d		      sta	temp2
   1215  f2a7		       a5 a4		      lda	playfield
   1216  f2a9		       85 9c		      sta	temp1
   1217  f2ab		       a2 00		      ldx	#0
   1218  f2ad				   up2
   1219  f2ad		       b5 a8		      lda	playfield+4,x
   1220  f2af				  -	      ifconst	superchip
   1221  f2af				  -	      sta	playfield-128,x
   1222  f2af				  -	      lda	playfield+5,x
   1223  f2af				  -	      sta	playfield-127,x
   1224  f2af				  -	      lda	playfield+6,x
   1225  f2af				  -	      sta	playfield-126,x
   1226  f2af				  -	      lda	playfield+7,x
   1227  f2af				  -	      sta	playfield-125,x
   1228  f2af					      else
   1229  f2af		       95 a4		      sta	playfield,x
   1230  f2b1		       b5 a9		      lda	playfield+5,x
   1231  f2b3		       95 a5		      sta	playfield+1,x
   1232  f2b5		       b5 aa		      lda	playfield+6,x
   1233  f2b7		       95 a6		      sta	playfield+2,x
   1234  f2b9		       b5 ab		      lda	playfield+7,x
   1235  f2bb		       95 a7		      sta	playfield+3,x
   1236  f2bd					      endif
   1237  f2bd		       8a		      txa
   1238  f2be		       cb fc		      sbx	#252
   1239  f2c0				  -	      ifconst	pfres
   1240  f2c0				  -	      cpx	#(pfres-1)*4
   1241  f2c0					      else
   1242  f2c0		       e0 2c		      cpx	#44
   1243  f2c2					      endif
   1244  f2c2		       d0 e9		      bne	up2
   1245  f2c4
   1246  f2c4		       a5 9f		      lda	temp4
   1247  f2c6
   1248  f2c6				  -	      ifconst	superchip
   1249  f2c6				  -	      ifconst	pfres
   1250  f2c6				  -	      sta	playfield+pfres*4-129
   1251  f2c6				  -	      lda	temp3
   1252  f2c6				  -	      sta	playfield+pfres*4-130
   1253  f2c6				  -	      lda	temp2
   1254  f2c6				  -	      sta	playfield+pfres*4-131
   1255  f2c6				  -	      lda	temp1
   1256  f2c6				  -	      sta	playfield+pfres*4-132
   1257  f2c6				  -	      else
   1258  f2c6				  -	      sta	playfield+47-128
   1259  f2c6				  -	      lda	temp3
   1260  f2c6				  -	      sta	playfield+46-128
   1261  f2c6				  -	      lda	temp2
   1262  f2c6				  -	      sta	playfield+45-128
   1263  f2c6				  -	      lda	temp1
   1264  f2c6				  -	      sta	playfield+44-128
   1265  f2c6				  -	      endif
   1266  f2c6					      else
   1267  f2c6				  -	      ifconst	pfres
   1268  f2c6				  -	      sta	playfield+pfres*4-1
   1269  f2c6				  -	      lda	temp3
   1270  f2c6				  -	      sta	playfield+pfres*4-2
   1271  f2c6				  -	      lda	temp2
   1272  f2c6				  -	      sta	playfield+pfres*4-3
   1273  f2c6				  -	      lda	temp1
   1274  f2c6				  -	      sta	playfield+pfres*4-4
   1275  f2c6					      else
   1276  f2c6		       85 d3		      sta	playfield+47
   1277  f2c8		       a5 9e		      lda	temp3
   1278  f2ca		       85 d2		      sta	playfield+46
   1279  f2cc		       a5 9d		      lda	temp2
   1280  f2ce		       85 d1		      sta	playfield+45
   1281  f2d0		       a5 9c		      lda	temp1
   1282  f2d2		       85 d0		      sta	playfield+44
   1283  f2d4					      endif
   1284  f2d4					      endif
   1285  f2d4				   noshiftdown2
      0  f2d4					      RETURN
      1  f2d4					      ifnconst	bankswitch
      2  f2d4		       60		      rts
      3  f2d5				  -	      else
      4  f2d5				  -	      jmp	BS_return
      5  f2d5					      endif
   1287  f2d5
   1288  f2d5
   1289  f2d5				   notup
   1290  f2d5							;down
   1291  f2d5		       4a		      lsr
   1292  f2d6		       b0 02		      bcs	oneincup
   1293  f2d8		       e6 ef		      inc	playfieldpos
   1294  f2da				   oneincup
   1295  f2da		       e6 ef		      inc	playfieldpos
   1296  f2dc		       a5 ef		      lda	playfieldpos
   1297  f2de
   1298  f2de				  -	      ifconst	pfrowheight
   1299  f2de				  -	      cmp	#pfrowheight+1
   1300  f2de					      else
   1301  f2de					      ifnconst	pfres
   1302  f2de		       c9 09		      cmp	#9
   1303  f2e0				  -	      else
   1304  f2e0				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f2e0					      endif
   1306  f2e0					      endif
   1307  f2e0
   1308  f2e0		       90 3b		      bcc	noshiftdown
   1309  f2e2		       a9 01		      lda	#1
   1310  f2e4		       85 ef		      sta	playfieldpos
   1311  f2e6
   1312  f2e6				  -	      ifconst	pfres
   1313  f2e6				  -	      lda	playfield+pfres*4-1
   1314  f2e6				  -	      sta	temp4
   1315  f2e6				  -	      lda	playfield+pfres*4-2
   1316  f2e6				  -	      sta	temp3
   1317  f2e6				  -	      lda	playfield+pfres*4-3
   1318  f2e6				  -	      sta	temp2
   1319  f2e6				  -	      lda	playfield+pfres*4-4
   1320  f2e6					      else
   1321  f2e6		       a5 d3		      lda	playfield+47
   1322  f2e8		       85 9f		      sta	temp4
   1323  f2ea		       a5 d2		      lda	playfield+46
   1324  f2ec		       85 9e		      sta	temp3
   1325  f2ee		       a5 d1		      lda	playfield+45
   1326  f2f0		       85 9d		      sta	temp2
   1327  f2f2		       a5 d0		      lda	playfield+44
   1328  f2f4					      endif
   1329  f2f4
   1330  f2f4		       85 9c		      sta	temp1
   1331  f2f6
   1332  f2f6				  -	      ifconst	pfres
   1333  f2f6				  -	      ldx	#(pfres-1)*4
   1334  f2f6					      else
   1335  f2f6		       a2 2c		      ldx	#44
   1336  f2f8					      endif
   1337  f2f8				   down2
   1338  f2f8		       b5 a3		      lda	playfield-1,x
   1339  f2fa				  -	      ifconst	superchip
   1340  f2fa				  -	      sta	playfield-125,x
   1341  f2fa				  -	      lda	playfield-2,x
   1342  f2fa				  -	      sta	playfield-126,x
   1343  f2fa				  -	      lda	playfield-3,x
   1344  f2fa				  -	      sta	playfield-127,x
   1345  f2fa				  -	      lda	playfield-4,x
   1346  f2fa				  -	      sta	playfield-128,x
   1347  f2fa					      else
   1348  f2fa		       95 a7		      sta	playfield+3,x
   1349  f2fc		       b5 a2		      lda	playfield-2,x
   1350  f2fe		       95 a6		      sta	playfield+2,x
   1351  f300		       b5 a1		      lda	playfield-3,x
   1352  f302		       95 a5		      sta	playfield+1,x
   1353  f304		       b5 a0		      lda	playfield-4,x
   1354  f306		       95 a4		      sta	playfield,x
   1355  f308					      endif
   1356  f308		       8a		      txa
   1357  f309		       cb 04		      sbx	#4
   1358  f30b		       d0 eb		      bne	down2
   1359  f30d
   1360  f30d		       a5 9f		      lda	temp4
   1361  f30f				  -	      ifconst	superchip
   1362  f30f				  -	      sta	playfield-125
   1363  f30f				  -	      lda	temp3
   1364  f30f				  -	      sta	playfield-126
   1365  f30f				  -	      lda	temp2
   1366  f30f				  -	      sta	playfield-127
   1367  f30f				  -	      lda	temp1
   1368  f30f				  -	      sta	playfield-128
   1369  f30f					      else
   1370  f30f		       85 a7		      sta	playfield+3
   1371  f311		       a5 9e		      lda	temp3
   1372  f313		       85 a6		      sta	playfield+2
   1373  f315		       a5 9d		      lda	temp2
   1374  f317		       85 a5		      sta	playfield+1
   1375  f319		       a5 9c		      lda	temp1
   1376  f31b		       85 a4		      sta	playfield
   1377  f31d					      endif
   1378  f31d				   noshiftdown
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1380  f31e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f31e
   1382  f31e							;standard routines needed for pretty much all games
   1383  f31e							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f31e							; repositioning code and score pointer setup moved to overscan
   1385  f31e							; read switches, joysticks now compiler generated (more efficient)
   1386  f31e
   1387  f31e				   randomize
   1388  f31e		       a5 a2		      lda	rand
   1389  f320		       4a		      lsr
   1390  f321				  -	      ifconst	rand16
   1391  f321				  -	      rol	rand16
   1392  f321					      endif
   1393  f321		       90 02		      bcc	noeor
   1394  f323		       49 b4		      eor	#$B4
   1395  f325				   noeor
   1396  f325		       85 a2		      sta	rand
   1397  f327				  -	      ifconst	rand16
   1398  f327				  -	      eor	rand16
   1399  f327					      endif
      0  f327					      RETURN
      1  f327					      ifnconst	bankswitch
      2  f327		       60		      rts
      3  f328				  -	      else
      4  f328				  -	      jmp	BS_return
      5  f328					      endif
   1401  f328							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f328
   1403  f328				   drawscreen
   1404  f328				  -	      ifconst	debugscore
   1405  f328				  -	      ldx	#14
   1406  f328				  -	      lda	INTIM	; display # cycles left in the score
   1407  f328				  -
   1408  f328				  -	      ifconst	mincycles
   1409  f328				  -	      lda	mincycles
   1410  f328				  -	      cmp	INTIM
   1411  f328				  -	      lda	mincycles
   1412  f328				  -	      bcc	nochange
   1413  f328				  -	      lda	INTIM
   1414  f328				  -	      sta	mincycles
   1415  f328				  -nochange
   1416  f328				  -	      endif
   1417  f328				  -
   1418  f328				  -			; cmp #$2B
   1419  f328				  -			; bcs no_cycles_left
   1420  f328				  -	      bmi	cycles_left
   1421  f328				  -	      ldx	#64
   1422  f328				  -	      eor	#$ff	;make negative
   1423  f328				  -cycles_left
   1424  f328				  -	      stx	scorecolor
   1425  f328				  -	      and	#$7f	; clear sign bit
   1426  f328				  -	      tax
   1427  f328				  -	      lda	scorebcd,x
   1428  f328				  -	      sta	score+2
   1429  f328				  -	      lda	scorebcd1,x
   1430  f328				  -	      sta	score+1
   1431  f328				  -	      jmp	done_debugscore
   1432  f328				  -scorebcd
   1433  f328				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f328				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f328				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f328				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f328				  -scorebcd1
   1438  f328				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f328				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f328				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f328				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f328				  -done_debugscore
   1443  f328					      endif
   1444  f328
   1445  f328				  -	      ifconst	debugcycles
   1446  f328				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f328				  -			; cmp #$2B
   1448  f328				  -			; BCC overscan
   1449  f328				  -	      bmi	overscan
   1450  f328				  -	      sta	COLUBK
   1451  f328				  -	      bcs	doneoverscan
   1452  f328					      endif
   1453  f328
   1454  f328				   overscan
   1455  f328				  -	      ifconst	interlaced
   1456  f328				  -	      PHP
   1457  f328				  -	      PLA
   1458  f328				  -	      EOR	#4	; flip interrupt bit
   1459  f328				  -	      PHA
   1460  f328				  -	      PLP
   1461  f328				  -	      AND	#4	; isolate the interrupt bit
   1462  f328				  -	      TAX		; save it for later
   1463  f328					      endif
   1464  f328
   1465  f328				   overscanloop
   1466  f328		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f32b		       30 fb		      bmi	overscanloop
   1468  f32d				   doneoverscan
   1469  f32d
   1470  f32d							;do VSYNC
   1471  f32d
   1472  f32d				  -	      ifconst	interlaced
   1473  f32d				  -	      CPX	#4
   1474  f32d				  -	      BNE	oddframevsync
   1475  f32d					      endif
   1476  f32d
   1477  f32d		       a9 02		      lda	#2
   1478  f32f		       85 02		      sta	WSYNC
   1479  f331		       85 00		      sta	VSYNC
   1480  f333		       85 02		      STA	WSYNC
   1481  f335		       85 02		      STA	WSYNC
   1482  f337		       4a		      lsr
   1483  f338		       85 02		      STA	WSYNC
   1484  f33a		       85 00		      STA	VSYNC
   1485  f33c		       85 01		      sta	VBLANK
   1486  f33e					      ifnconst	overscan_time
   1487  f33e		       a9 a5		      lda	#37+128
   1488  f340				  -	      else
   1489  f340				  -	      lda	#overscan_time+128
   1490  f340					      endif
   1491  f340		       8d 96 02 	      sta	TIM64T
   1492  f343
   1493  f343				  -	      ifconst	interlaced
   1494  f343				  -	      jmp	postsync
   1495  f343				  -
   1496  f343				  -oddframevsync
   1497  f343				  -	      sta	WSYNC
   1498  f343				  -
   1499  f343				  -	      LDA	($80,X)	; 11 waste
   1500  f343				  -	      LDA	($80,X)	; 11 waste
   1501  f343				  -	      LDA	($80,X)	; 11 waste
   1502  f343				  -
   1503  f343				  -	      lda	#2
   1504  f343				  -	      sta	VSYNC
   1505  f343				  -	      sta	WSYNC
   1506  f343				  -	      sta	WSYNC
   1507  f343				  -	      sta	WSYNC
   1508  f343				  -
   1509  f343				  -	      LDA	($80,X)	; 11 waste
   1510  f343				  -	      LDA	($80,X)	; 11 waste
   1511  f343				  -	      LDA	($80,X)	; 11 waste
   1512  f343				  -
   1513  f343				  -	      lda	#0
   1514  f343				  -	      sta	VSYNC
   1515  f343				  -	      sta	VBLANK
   1516  f343				  -	      ifnconst	overscan_time
   1517  f343				  -	      lda	#37+128
   1518  f343				  -	      else
   1519  f343				  -	      lda	#overscan_time+128
   1520  f343				  -	      endif
   1521  f343				  -	      sta	TIM64T
   1522  f343				  -
   1523  f343				  -postsync
   1524  f343					      endif
   1525  f343
   1526  f343				  -	      ifconst	legacy
   1527  f343				  -	      if	legacy < 100
   1528  f343				  -	      ldx	#4
   1529  f343				  -adjustloop
   1530  f343				  -	      lda	player0x,x
   1531  f343				  -	      sec
   1532  f343				  -	      sbc	#14	;?
   1533  f343				  -	      sta	player0x,x
   1534  f343				  -	      dex
   1535  f343				  -	      bpl	adjustloop
   1536  f343				  -	      endif
   1537  f343					      endif
   1538  f343				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f343				  -	      repeat	($fa-(<*))
   1540  f343				  -	      nop
   1541  f343				  -	      repend
   1542  f343					      endif
   1543  f343		       85 02		      sta	WSYNC
   1544  f345		       a2 04		      ldx	#4
      0  f347					      SLEEP	3
      1  f347				   .CYCLES    SET	3
      2  f347
      3  f347				  -	      IF	.CYCLES < 2
      4  f347				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f347				  -	      ERR
      6  f347					      ENDIF
      7  f347
      8  f347					      IF	.CYCLES & 1
      9  f347					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f347		       04 00		      nop	0
     11  f349				  -	      ELSE
     12  f349				  -	      bit	VSYNC
     13  f349					      ENDIF
     14  f349				   .CYCLES    SET	.CYCLES - 3
     15  f349					      ENDIF
     16  f349
     17  f349				  -	      REPEAT	.CYCLES / 2
     18  f349				  -	      nop
     19  f349					      REPEND
   1546  f349				   HorPosLoop		; 5
   1547  f349		       b5 80		      lda	player0x,X	;+4 9
   1548  f34b		       38		      sec		;+2 11
   1549  f34c				   DivideLoop
   1550  f34c		       e9 0f		      sbc	#15
   1551  f34e		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f350		       95 9c		      sta	temp1,X	;+4 19
   1553  f352		       95 10		      sta	RESP0,X	;+4 23
   1554  f354		       85 02		      sta	WSYNC
   1555  f356		       ca		      dex
   1556  f357		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f359							; 4
   1558  f359
   1559  f359		       a2 04		      ldx	#4
   1560  f35b		       b4 9c		      ldy	temp1,X
   1561  f35d		       b9 b9 f2 	      lda	repostable-256,Y
   1562  f360		       95 20		      sta	HMP0,X	;+14 18
   1563  f362
   1564  f362		       ca		      dex
   1565  f363		       b4 9c		      ldy	temp1,X
   1566  f365		       b9 b9 f2 	      lda	repostable-256,Y
   1567  f368		       95 20		      sta	HMP0,X	;+14 32
   1568  f36a
   1569  f36a		       ca		      dex
   1570  f36b		       b4 9c		      ldy	temp1,X
   1571  f36d		       b9 b9 f2 	      lda	repostable-256,Y
   1572  f370		       95 20		      sta	HMP0,X	;+14 46
   1573  f372
   1574  f372		       ca		      dex
   1575  f373		       b4 9c		      ldy	temp1,X
   1576  f375		       b9 b9 f2 	      lda	repostable-256,Y
   1577  f378		       95 20		      sta	HMP0,X	;+14 60
   1578  f37a
   1579  f37a		       ca		      dex
   1580  f37b		       b4 9c		      ldy	temp1,X
   1581  f37d		       b9 b9 f2 	      lda	repostable-256,Y
   1582  f380		       95 20		      sta	HMP0,X	;+14 74
   1583  f382
   1584  f382		       85 02		      sta	WSYNC
   1585  f384
   1586  f384		       85 2a		      sta	HMOVE	;+3 3
   1587  f386
   1588  f386
   1589  f386				  -	      ifconst	legacy
   1590  f386				  -	      if	legacy < 100
   1591  f386				  -	      ldx	#4
   1592  f386				  -adjustloop2
   1593  f386				  -	      lda	player0x,x
   1594  f386				  -	      clc
   1595  f386				  -	      adc	#14	;?
   1596  f386				  -	      sta	player0x,x
   1597  f386				  -	      dex
   1598  f386				  -	      bpl	adjustloop2
   1599  f386				  -	      endif
   1600  f386					      endif
   1601  f386
   1602  f386
   1603  f386
   1604  f386
   1605  f386							;set score pointers
   1606  f386		       a7 95		      lax	score+2
   1607  f388		       20 b9 f3 	      jsr	scorepointerset
   1608  f38b		       84 9b		      sty	scorepointers+5
   1609  f38d		       86 98		      stx	scorepointers+2
   1610  f38f		       a7 94		      lax	score+1
   1611  f391		       20 b9 f3 	      jsr	scorepointerset
   1612  f394		       84 9a		      sty	scorepointers+4
   1613  f396		       86 97		      stx	scorepointers+1
   1614  f398		       a7 93		      lax	score
   1615  f39a		       20 b9 f3 	      jsr	scorepointerset
   1616  f39d		       84 99		      sty	scorepointers+3
   1617  f39f		       86 96		      stx	scorepointers
   1618  f3a1
   1619  f3a1				   vblk
   1620  f3a1							; run possible vblank bB code
   1621  f3a1				  -	      ifconst	vblank_bB_code
   1622  f3a1				  -	      jsr	vblank_bB_code
   1623  f3a1					      endif
   1624  f3a1				   vblk2
   1625  f3a1		       ad 84 02 	      LDA	INTIM
   1626  f3a4		       30 fb		      bmi	vblk2
   1627  f3a6		       4c 34 f0 	      jmp	kernel
   1628  f3a9
   1629  f3a9
   1630  f3a9		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f3b2		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f3b9				   repostable
   1633  f3b9
   1634  f3b9				   scorepointerset
   1635  f3b9		       29 0f		      and	#$0F
   1636  f3bb		       0a		      asl
   1637  f3bc		       0a		      asl
   1638  f3bd		       0a		      asl
   1639  f3be		       69 9c		      adc	#<scoretable
   1640  f3c0		       a8		      tay
   1641  f3c1		       8a		      txa
   1642  f3c2							; and #$F0
   1643  f3c2							; lsr
   1644  f3c2		       4b f0		      asr	#$F0
   1645  f3c4		       69 9c		      adc	#<scoretable
   1646  f3c6		       aa		      tax
   1647  f3c7		       60		      rts
   1648  f3c8				   game
   1649  f3c8				   .
   1650  f3c8							; 
   1651  f3c8
   1652  f3c8				   .
   1653  f3c8							; 
   1654  f3c8
   1655  f3c8				   .
   1656  f3c8							; 
   1657  f3c8
   1658  f3c8				   .
   1659  f3c8							; 
   1660  f3c8
   1661  f3c8				   .
   1662  f3c8							; 
   1663  f3c8
   1664  f3c8				   .
   1665  f3c8							; 
   1666  f3c8
   1667  f3c8				   .
   1668  f3c8							; 
   1669  f3c8
   1670  f3c8				   .
   1671  f3c8							; 
   1672  f3c8
   1673  f3c8				   .
   1674  f3c8							; 
   1675  f3c8
   1676  f3c8				   .
   1677  f3c8							; 
   1678  f3c8
   1679  f3c8				   .
   1680  f3c8							; 
   1681  f3c8
   1682  f3c8				   .
   1683  f3c8							; 
   1684  f3c8
   1685  f3c8				   .
   1686  f3c8							; 
   1687  f3c8
   1688  f3c8				   .
   1689  f3c8							; 
   1690  f3c8
   1691  f3c8				   .
   1692  f3c8							; 
   1693  f3c8
   1694  f3c8				   .
   1695  f3c8							; 
   1696  f3c8
   1697  f3c8				   .
   1698  f3c8							; 
   1699  f3c8
   1700  f3c8				   .
   1701  f3c8							; 
   1702  f3c8
   1703  f3c8				   .
   1704  f3c8							; 
   1705  f3c8
   1706  f3c8				   .
   1707  f3c8							; 
   1708  f3c8
   1709  f3c8				   .
   1710  f3c8							; 
   1711  f3c8
   1712  f3c8				   .
   1713  f3c8							; 
   1714  f3c8
   1715  f3c8				   .
   1716  f3c8							; 
   1717  f3c8
   1718  f3c8				   .
   1719  f3c8							; 
   1720  f3c8
   1721  f3c8				   .
   1722  f3c8							; 
   1723  f3c8
   1724  f3c8				   .
   1725  f3c8							; 
   1726  f3c8
   1727  f3c8				   .
   1728  f3c8							; 
   1729  f3c8
   1730  f3c8				   .
   1731  f3c8							; 
   1732  f3c8
   1733  f3c8				   .
   1734  f3c8							; 
   1735  f3c8
   1736  f3c8				   .
   1737  f3c8							; 
   1738  f3c8
   1739  f3c8				   .
   1740  f3c8							; 
   1741  f3c8
   1742  f3c8				   .
   1743  f3c8							; 
   1744  f3c8
   1745  f3c8				   .
   1746  f3c8							; 
   1747  f3c8
   1748  f3c8				   .
   1749  f3c8							; 
   1750  f3c8
   1751  f3c8				   .
   1752  f3c8							; 
   1753  f3c8
   1754  f3c8				   .
   1755  f3c8							; 
   1756  f3c8
   1757  f3c8				   .
   1758  f3c8							; 
   1759  f3c8
   1760  f3c8				   .
   1761  f3c8							; 
   1762  f3c8
   1763  f3c8				   .
   1764  f3c8							; 
   1765  f3c8
   1766  f3c8				   .
   1767  f3c8							; 
   1768  f3c8
   1769  f3c8				   .
   1770  f3c8							; 
   1771  f3c8
   1772  f3c8				   .
   1773  f3c8							; 
   1774  f3c8
   1775  f3c8				   .
   1776  f3c8							; 
   1777  f3c8
   1778  f3c8				   .
   1779  f3c8							; 
   1780  f3c8
   1781  f3c8				   .
   1782  f3c8							; 
   1783  f3c8
   1784  f3c8				   .
   1785  f3c8							; 
   1786  f3c8
   1787  f3c8				   .
   1788  f3c8							; 
   1789  f3c8
   1790  f3c8				   .
   1791  f3c8							; 
   1792  f3c8
   1793  f3c8				   .
   1794  f3c8							; 
   1795  f3c8
   1796  f3c8				   .
   1797  f3c8							; 
   1798  f3c8
   1799  f3c8				   .
   1800  f3c8							; 
   1801  f3c8
   1802  f3c8				   .
   1803  f3c8							; 
   1804  f3c8
   1805  f3c8				   .
   1806  f3c8							; 
   1807  f3c8
   1808  f3c8				   .L00 		;  dim _Ch0_Sound  =  c
   1809  f3c8
   1810  f3c8				   .L01 		;  dim _Ch0_Duration  =  d
   1811  f3c8
   1812  f3c8				   .L02 		;  dim _C0  =	e
   1813  f3c8
   1814  f3c8				   .L03 		;  dim _V0  =	f
   1815  f3c8
   1816  f3c8				   .L04 		;  dim _F0  =	g
   1817  f3c8
   1818  f3c8				   .
   1819  f3c8							; 
   1820  f3c8
   1821  f3c8				   .
   1822  f3c8							; 
   1823  f3c8
   1824  f3c8				   .
   1825  f3c8							; 
   1826  f3c8
   1827  f3c8				   .
   1828  f3c8							; 
   1829  f3c8
   1830  f3c8				   .
   1831  f3c8							; 
   1832  f3c8
   1833  f3c8				   .
   1834  f3c8							; 
   1835  f3c8
   1836  f3c8				   .
   1837  f3c8							; 
   1838  f3c8
   1839  f3c8				   .L05 		;  const noscore  =  1
   1840  f3c8
   1841  f3c8				   .
   1842  f3c8							; 
   1843  f3c8
   1844  f3c8				   .
   1845  f3c8							; 
   1846  f3c8
   1847  f3c8				   .
   1848  f3c8							; 
   1849  f3c8
   1850  f3c8				   .
   1851  f3c8							; 
   1852  f3c8
   1853  f3c8				   .
   1854  f3c8							; 
   1855  f3c8
   1856  f3c8				   .
   1857  f3c8							; 
   1858  f3c8
   1859  f3c8				   .
   1860  f3c8							; 
   1861  f3c8
   1862  f3c8				   .
   1863  f3c8							; 
   1864  f3c8
   1865  f3c8				   .
   1866  f3c8							; 
   1867  f3c8
   1868  f3c8				   .
   1869  f3c8							; 
   1870  f3c8
   1871  f3c8				   .
   1872  f3c8							; 
   1873  f3c8
   1874  f3c8				   .__Main_Loop
   1875  f3c8							; __Main_Loop
   1876  f3c8
   1877  f3c8				   .
   1878  f3c8							; 
   1879  f3c8
   1880  f3c8				   .
   1881  f3c8							; 
   1882  f3c8
   1883  f3c8				   .
   1884  f3c8							; 
   1885  f3c8
   1886  f3c8				   .
   1887  f3c8							; 
   1888  f3c8
   1889  f3c8				   .
   1890  f3c8							; 
   1891  f3c8
   1892  f3c8				   .
   1893  f3c8							; 
   1894  f3c8
   1895  f3c8				   .
   1896  f3c8							; 
   1897  f3c8
   1898  f3c8				   .
   1899  f3c8							; 
   1900  f3c8
   1901  f3c8				   .
   1902  f3c8							; 
   1903  f3c8
   1904  f3c8				   .
   1905  f3c8							; 
   1906  f3c8
   1907  f3c8				   .L06 		;  if _Ch0_Sound then goto __Skip_Joy0
   1908  f3c8
   1909  f3c8		       a5 d6		      LDA	_Ch0_Sound
   1910  f3ca		       f0 03		      BEQ	.skipL06
   1911  f3cc				   .condpart0
   1912  f3cc		       4c 4f f4 	      jmp	.__Skip_Joy0
   1913  f3cf
   1914  f3cf				   .skipL06
   1915  f3cf				   .
   1916  f3cf							; 
   1917  f3cf
   1918  f3cf				   .
   1919  f3cf							; 
   1920  f3cf
   1921  f3cf				   .
   1922  f3cf							; 
   1923  f3cf
   1924  f3cf				   .
   1925  f3cf							; 
   1926  f3cf
   1927  f3cf				   .
   1928  f3cf							; 
   1929  f3cf
   1930  f3cf				   .L07 		;  if joy0fire then _Ch0_Sound  =  1  :  _Ch0_Duration  =  15	:  COLUBK  =  $4A  :  goto __Skip_Joy0
   1931  f3cf
   1932  f3cf		       24 0c		      bit	INPT4
   1933  f3d1		       30 0f		      BMI	.skipL07
   1934  f3d3				   .condpart1
   1935  f3d3		       a9 01		      LDA	#1
   1936  f3d5		       85 d6		      STA	_Ch0_Sound
   1937  f3d7		       a9 0f		      LDA	#15
   1938  f3d9		       85 d7		      STA	_Ch0_Duration
   1939  f3db		       a9 4a		      LDA	#$4A
   1940  f3dd		       85 09		      STA	COLUBK
   1941  f3df		       4c 4f f4 	      jmp	.__Skip_Joy0
   1942  f3e2
   1943  f3e2				   .skipL07
   1944  f3e2				   .
   1945  f3e2							; 
   1946  f3e2
   1947  f3e2				   .
   1948  f3e2							; 
   1949  f3e2
   1950  f3e2				   .
   1951  f3e2							; 
   1952  f3e2
   1953  f3e2				   .
   1954  f3e2							; 
   1955  f3e2
   1956  f3e2				   .
   1957  f3e2							; 
   1958  f3e2
   1959  f3e2				   .L08 		;  if joy0up then _Ch0_Sound  =  2  :	_Ch0_Duration  =  30  :  _V0  =  12  :	COLUBK	=  $9E	:  goto __Skip_Joy0
   1960  f3e2
   1961  f3e2		       a9 10		      lda	#$10
   1962  f3e4		       2c 80 02 	      bit	SWCHA
   1963  f3e7		       d0 13		      BNE	.skipL08
   1964  f3e9				   .condpart2
   1965  f3e9		       a9 02		      LDA	#2
   1966  f3eb		       85 d6		      STA	_Ch0_Sound
   1967  f3ed		       a9 1e		      LDA	#30
   1968  f3ef		       85 d7		      STA	_Ch0_Duration
   1969  f3f1		       a9 0c		      LDA	#12
   1970  f3f3		       85 d9		      STA	_V0
   1971  f3f5		       a9 9e		      LDA	#$9E
   1972  f3f7		       85 09		      STA	COLUBK
   1973  f3f9		       4c 4f f4 	      jmp	.__Skip_Joy0
   1974  f3fc
   1975  f3fc				   .skipL08
   1976  f3fc				   .
   1977  f3fc							; 
   1978  f3fc
   1979  f3fc				   .
   1980  f3fc							; 
   1981  f3fc
   1982  f3fc				   .
   1983  f3fc							; 
   1984  f3fc
   1985  f3fc				   .
   1986  f3fc							; 
   1987  f3fc
   1988  f3fc				   .
   1989  f3fc							; 
   1990  f3fc
   1991  f3fc				   .L09 		;  if joy0down then _Ch0_Sound  =  3  :  _Ch0_Duration  =  32	:  _F0	=  31  :  COLUBK  =  $DE  :  goto __Skip_Joy0
   1992  f3fc
   1993  f3fc		       a9 20		      lda	#$20
   1994  f3fe		       2c 80 02 	      bit	SWCHA
   1995  f401		       d0 13		      BNE	.skipL09
   1996  f403				   .condpart3
   1997  f403		       a9 03		      LDA	#3
   1998  f405		       85 d6		      STA	_Ch0_Sound
   1999  f407		       a9 20		      LDA	#32
   2000  f409		       85 d7		      STA	_Ch0_Duration
   2001  f40b		       a9 1f		      LDA	#31
   2002  f40d		       85 da		      STA	_F0
   2003  f40f		       a9 de		      LDA	#$DE
   2004  f411		       85 09		      STA	COLUBK
   2005  f413		       4c 4f f4 	      jmp	.__Skip_Joy0
   2006  f416
   2007  f416				   .skipL09
   2008  f416				   .
   2009  f416							; 
   2010  f416
   2011  f416				   .
   2012  f416							; 
   2013  f416
   2014  f416				   .
   2015  f416							; 
   2016  f416
   2017  f416				   .
   2018  f416							; 
   2019  f416
   2020  f416				   .
   2021  f416							; 
   2022  f416
   2023  f416				   .L010		;  if joy0left then _Ch0_Sound  =  4  :  _Ch0_Duration  =  32	:  _V0	=  12  :  _F0  =  31  :  COLUBK  =  $6E  :  goto __Skip_Joy0
   2024  f416
   2025  f416		       2c 80 02 	      bit	SWCHA
   2026  f419		       70 17		      BVS	.skipL010
   2027  f41b				   .condpart4
   2028  f41b		       a9 04		      LDA	#4
   2029  f41d		       85 d6		      STA	_Ch0_Sound
   2030  f41f		       a9 20		      LDA	#32
   2031  f421		       85 d7		      STA	_Ch0_Duration
   2032  f423		       a9 0c		      LDA	#12
   2033  f425		       85 d9		      STA	_V0
   2034  f427		       a9 1f		      LDA	#31
   2035  f429		       85 da		      STA	_F0
   2036  f42b		       a9 6e		      LDA	#$6E
   2037  f42d		       85 09		      STA	COLUBK
   2038  f42f		       4c 4f f4 	      jmp	.__Skip_Joy0
   2039  f432
   2040  f432				   .skipL010
   2041  f432				   .
   2042  f432							; 
   2043  f432
   2044  f432				   .
   2045  f432							; 
   2046  f432
   2047  f432				   .
   2048  f432							; 
   2049  f432
   2050  f432				   .
   2051  f432							; 
   2052  f432
   2053  f432				   .
   2054  f432							; 
   2055  f432
   2056  f432				   .L011		;  if joy0right then _Ch0_Sound  =  5	:  _Ch0_Duration  =  32  :  _C0  =  4  :  _V0  =  12  :  _F0  =  31  :	COLUBK	=  $1E
   2057  f432
   2058  f432		       2c 80 02 	      bit	SWCHA
   2059  f435		       30 18		      BMI	.skipL011
   2060  f437				   .condpart5
   2061  f437		       a9 05		      LDA	#5
   2062  f439		       85 d6		      STA	_Ch0_Sound
   2063  f43b		       a9 20		      LDA	#32
   2064  f43d		       85 d7		      STA	_Ch0_Duration
   2065  f43f		       a9 04		      LDA	#4
   2066  f441		       85 d8		      STA	_C0
   2067  f443		       a9 0c		      LDA	#12
   2068  f445		       85 d9		      STA	_V0
   2069  f447		       a9 1f		      LDA	#31
   2070  f449		       85 da		      STA	_F0
   2071  f44b		       a9 1e		      LDA	#$1E
   2072  f44d		       85 09		      STA	COLUBK
   2073  f44f				   .skipL011
   2074  f44f				   .
   2075  f44f							; 
   2076  f44f
   2077  f44f				   .__Skip_Joy0
   2078  f44f							; __Skip_Joy0
   2079  f44f
   2080  f44f				   .
   2081  f44f							; 
   2082  f44f
   2083  f44f				   .
   2084  f44f							; 
   2085  f44f
   2086  f44f				   .
   2087  f44f							; 
   2088  f44f
   2089  f44f				   .
   2090  f44f							; 
   2091  f44f
   2092  f44f				   .
   2093  f44f							; 
   2094  f44f
   2095  f44f				   .
   2096  f44f							; 
   2097  f44f
   2098  f44f				   .
   2099  f44f							; 
   2100  f44f
   2101  f44f				   .
   2102  f44f							; 
   2103  f44f
   2104  f44f				   .
   2105  f44f							; 
   2106  f44f
   2107  f44f				   .
   2108  f44f							; 
   2109  f44f
   2110  f44f				   .L012		;  if !_Ch0_Sound then goto __Skip_Ch_0
   2111  f44f
   2112  f44f		       a5 d6		      LDA	_Ch0_Sound
   2113  f451		       d0 03		      BNE	.skipL012
   2114  f453				   .condpart6
   2115  f453		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2116  f456
   2117  f456				   .skipL012
   2118  f456				   .
   2119  f456							; 
   2120  f456
   2121  f456				   .
   2122  f456							; 
   2123  f456
   2124  f456				   .
   2125  f456							; 
   2126  f456
   2127  f456				   .
   2128  f456							; 
   2129  f456
   2130  f456				   .L013		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2131  f456
   2132  f456		       c6 d7		      DEC	_Ch0_Duration
   2133  f458				   .
   2134  f458							; 
   2135  f458
   2136  f458				   .
   2137  f458							; 
   2138  f458
   2139  f458				   .
   2140  f458							; 
   2141  f458
   2142  f458				   .
   2143  f458							; 
   2144  f458
   2145  f458				   .L014		;  if !_Ch0_Duration then goto __Clear_Ch_0
   2146  f458
   2147  f458		       a5 d7		      LDA	_Ch0_Duration
   2148  f45a		       d0 03		      BNE	.skipL014
   2149  f45c				   .condpart7
   2150  f45c		       4c 1e f5 	      jmp	.__Clear_Ch_0
   2151  f45f
   2152  f45f				   .skipL014
   2153  f45f				   .
   2154  f45f							; 
   2155  f45f
   2156  f45f				   .
   2157  f45f							; 
   2158  f45f
   2159  f45f				   .
   2160  f45f							; 
   2161  f45f
   2162  f45f				   .
   2163  f45f							; 
   2164  f45f
   2165  f45f				   .
   2166  f45f							; 
   2167  f45f
   2168  f45f				   .
   2169  f45f							; 
   2170  f45f
   2171  f45f				   .
   2172  f45f							; 
   2173  f45f
   2174  f45f				   .
   2175  f45f							; 
   2176  f45f
   2177  f45f				   .
   2178  f45f							; 
   2179  f45f
   2180  f45f				   .
   2181  f45f							; 
   2182  f45f
   2183  f45f				   .
   2184  f45f							; 
   2185  f45f
   2186  f45f				   .
   2187  f45f							; 
   2188  f45f
   2189  f45f				   .L015		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   2190  f45f
   2191  f45f		       a5 d6		      LDA	_Ch0_Sound
   2192  f461		       c9 01		      CMP	#1
   2193  f463		       f0 03		      BEQ	.skipL015
   2194  f465				   .condpart8
   2195  f465		       4c 77 f4 	      jmp	.__Skip_Ch0_Sound_001
   2196  f468
   2197  f468				   .skipL015
   2198  f468				   .
   2199  f468							; 
   2200  f468
   2201  f468				   .
   2202  f468							; 
   2203  f468
   2204  f468				   .
   2205  f468							; 
   2206  f468
   2207  f468				   .
   2208  f468							; 
   2209  f468
   2210  f468				   .L016		;  AUDC0  =  4  :  AUDV0  =  8  :  AUDF0  =  19
   2211  f468
   2212  f468		       a9 04		      LDA	#4
   2213  f46a		       85 15		      STA	AUDC0
   2214  f46c		       a9 08		      LDA	#8
   2215  f46e		       85 19		      STA	AUDV0
   2216  f470		       a9 13		      LDA	#19
   2217  f472		       85 17		      STA	AUDF0
   2218  f474				   .
   2219  f474							; 
   2220  f474
   2221  f474				   .
   2222  f474							; 
   2223  f474
   2224  f474				   .
   2225  f474							; 
   2226  f474
   2227  f474				   .
   2228  f474							; 
   2229  f474
   2230  f474				   .L017		;  goto __Skip_Ch_0
   2231  f474
   2232  f474		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2233  f477
   2234  f477				   .
   2235  f477							; 
   2236  f477
   2237  f477				   .__Skip_Ch0_Sound_001
   2238  f477							; __Skip_Ch0_Sound_001
   2239  f477
   2240  f477				   .
   2241  f477							; 
   2242  f477
   2243  f477				   .
   2244  f477							; 
   2245  f477
   2246  f477				   .
   2247  f477							; 
   2248  f477
   2249  f477				   .
   2250  f477							; 
   2251  f477
   2252  f477				   .
   2253  f477							; 
   2254  f477
   2255  f477				   .
   2256  f477							; 
   2257  f477
   2258  f477				   .
   2259  f477							; 
   2260  f477
   2261  f477				   .
   2262  f477							; 
   2263  f477
   2264  f477				   .
   2265  f477							; 
   2266  f477
   2267  f477				   .
   2268  f477							; 
   2269  f477
   2270  f477				   .
   2271  f477							; 
   2272  f477
   2273  f477				   .
   2274  f477							; 
   2275  f477
   2276  f477				   .L018		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   2277  f477
   2278  f477		       a5 d6		      LDA	_Ch0_Sound
   2279  f479		       c9 02		      CMP	#2
   2280  f47b		       f0 03		      BEQ	.skipL018
   2281  f47d				   .condpart9
   2282  f47d		       4c 9f f4 	      jmp	.__Skip_Ch0_Sound_002
   2283  f480
   2284  f480				   .skipL018
   2285  f480				   .
   2286  f480							; 
   2287  f480
   2288  f480				   .
   2289  f480							; 
   2290  f480
   2291  f480				   .
   2292  f480							; 
   2293  f480
   2294  f480				   .
   2295  f480							; 
   2296  f480
   2297  f480				   .L019		;  AUDC0  =  4  :  AUDV0  =  _V0  :  AUDF0  =	19
   2298  f480
   2299  f480		       a9 04		      LDA	#4
   2300  f482		       85 15		      STA	AUDC0
   2301  f484		       a5 d9		      LDA	_V0
   2302  f486		       85 19		      STA	AUDV0
   2303  f488		       a9 13		      LDA	#19
   2304  f48a		       85 17		      STA	AUDF0
   2305  f48c				   .
   2306  f48c							; 
   2307  f48c
   2308  f48c				   .
   2309  f48c							; 
   2310  f48c
   2311  f48c				   .
   2312  f48c							; 
   2313  f48c
   2314  f48c				   .
   2315  f48c							; 
   2316  f48c
   2317  f48c				   .L020		;  temp5  =  _Ch0_Duration  &	%00000001
   2318  f48c
   2319  f48c		       a5 d7		      LDA	_Ch0_Duration
   2320  f48e		       29 01		      AND	#%00000001
   2321  f490		       85 a0		      STA	temp5
   2322  f492				   .
   2323  f492							; 
   2324  f492
   2325  f492				   .
   2326  f492							; 
   2327  f492
   2328  f492				   .
   2329  f492							; 
   2330  f492
   2331  f492				   .
   2332  f492							; 
   2333  f492
   2334  f492				   .L021		;  if temp5  &&  _V0 then _V0	=  _V0	-  1
   2335  f492
   2336  f492		       a5 a0		      LDA	temp5
   2337  f494		       f0 06		      BEQ	.skipL021
   2338  f496				   .condpart10
   2339  f496		       a5 d9		      LDA	_V0
   2340  f498		       f0 02		      BEQ	.skip10then
   2341  f49a				   .condpart11
   2342  f49a		       c6 d9		      DEC	_V0
   2343  f49c				   .skip10then
   2344  f49c				   .skipL021
   2345  f49c				   .
   2346  f49c							; 
   2347  f49c
   2348  f49c				   .
   2349  f49c							; 
   2350  f49c
   2351  f49c				   .
   2352  f49c							; 
   2353  f49c
   2354  f49c				   .
   2355  f49c							; 
   2356  f49c
   2357  f49c				   .L022		;  goto __Skip_Ch_0
   2358  f49c
   2359  f49c		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2360  f49f
   2361  f49f				   .
   2362  f49f							; 
   2363  f49f
   2364  f49f				   .__Skip_Ch0_Sound_002
   2365  f49f							; __Skip_Ch0_Sound_002
   2366  f49f
   2367  f49f				   .
   2368  f49f							; 
   2369  f49f
   2370  f49f				   .
   2371  f49f							; 
   2372  f49f
   2373  f49f				   .
   2374  f49f							; 
   2375  f49f
   2376  f49f				   .
   2377  f49f							; 
   2378  f49f
   2379  f49f				   .
   2380  f49f							; 
   2381  f49f
   2382  f49f				   .
   2383  f49f							; 
   2384  f49f
   2385  f49f				   .
   2386  f49f							; 
   2387  f49f
   2388  f49f				   .
   2389  f49f							; 
   2390  f49f
   2391  f49f				   .
   2392  f49f							; 
   2393  f49f
   2394  f49f				   .
   2395  f49f							; 
   2396  f49f
   2397  f49f				   .
   2398  f49f							; 
   2399  f49f
   2400  f49f				   .
   2401  f49f							; 
   2402  f49f
   2403  f49f				   .L023		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   2404  f49f
   2405  f49f		       a5 d6		      LDA	_Ch0_Sound
   2406  f4a1		       c9 03		      CMP	#3
   2407  f4a3		       f0 03		      BEQ	.skipL023
   2408  f4a5				   .condpart12
   2409  f4a5		       4c b9 f4 	      jmp	.__Skip_Ch0_Sound_003
   2410  f4a8
   2411  f4a8				   .skipL023
   2412  f4a8				   .
   2413  f4a8							; 
   2414  f4a8
   2415  f4a8				   .
   2416  f4a8							; 
   2417  f4a8
   2418  f4a8				   .
   2419  f4a8							; 
   2420  f4a8
   2421  f4a8				   .
   2422  f4a8							; 
   2423  f4a8
   2424  f4a8				   .L024		;  AUDC0  =  4  :  AUDV0  =  8  :  AUDF0  =  _F0
   2425  f4a8
   2426  f4a8		       a9 04		      LDA	#4
   2427  f4aa		       85 15		      STA	AUDC0
   2428  f4ac		       a9 08		      LDA	#8
   2429  f4ae		       85 19		      STA	AUDV0
   2430  f4b0		       a5 da		      LDA	_F0
   2431  f4b2		       85 17		      STA	AUDF0
   2432  f4b4				   .
   2433  f4b4							; 
   2434  f4b4
   2435  f4b4				   .
   2436  f4b4							; 
   2437  f4b4
   2438  f4b4				   .
   2439  f4b4							; 
   2440  f4b4
   2441  f4b4				   .
   2442  f4b4							; 
   2443  f4b4
   2444  f4b4				   .L025		;  _F0  =  _F0  -  1
   2445  f4b4
   2446  f4b4		       c6 da		      DEC	_F0
   2447  f4b6				   .
   2448  f4b6							; 
   2449  f4b6
   2450  f4b6				   .
   2451  f4b6							; 
   2452  f4b6
   2453  f4b6				   .
   2454  f4b6							; 
   2455  f4b6
   2456  f4b6				   .
   2457  f4b6							; 
   2458  f4b6
   2459  f4b6				   .L026		;  goto __Skip_Ch_0
   2460  f4b6
   2461  f4b6		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2462  f4b9
   2463  f4b9				   .
   2464  f4b9							; 
   2465  f4b9
   2466  f4b9				   .__Skip_Ch0_Sound_003
   2467  f4b9							; __Skip_Ch0_Sound_003
   2468  f4b9
   2469  f4b9				   .
   2470  f4b9							; 
   2471  f4b9
   2472  f4b9				   .
   2473  f4b9							; 
   2474  f4b9
   2475  f4b9				   .
   2476  f4b9							; 
   2477  f4b9
   2478  f4b9				   .
   2479  f4b9							; 
   2480  f4b9
   2481  f4b9				   .
   2482  f4b9							; 
   2483  f4b9
   2484  f4b9				   .
   2485  f4b9							; 
   2486  f4b9
   2487  f4b9				   .
   2488  f4b9							; 
   2489  f4b9
   2490  f4b9				   .
   2491  f4b9							; 
   2492  f4b9
   2493  f4b9				   .
   2494  f4b9							; 
   2495  f4b9
   2496  f4b9				   .
   2497  f4b9							; 
   2498  f4b9
   2499  f4b9				   .
   2500  f4b9							; 
   2501  f4b9
   2502  f4b9				   .
   2503  f4b9							; 
   2504  f4b9
   2505  f4b9				   .L027		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   2506  f4b9
   2507  f4b9		       a5 d6		      LDA	_Ch0_Sound
   2508  f4bb		       c9 04		      CMP	#4
   2509  f4bd		       f0 03		      BEQ	.skipL027
   2510  f4bf				   .condpart13
   2511  f4bf		       4c e7 f4 	      jmp	.__Skip_Ch0_Sound_004
   2512  f4c2
   2513  f4c2				   .skipL027
   2514  f4c2				   .
   2515  f4c2							; 
   2516  f4c2
   2517  f4c2				   .
   2518  f4c2							; 
   2519  f4c2
   2520  f4c2				   .
   2521  f4c2							; 
   2522  f4c2
   2523  f4c2				   .
   2524  f4c2							; 
   2525  f4c2
   2526  f4c2				   .L028		;  AUDC0  =  4  :  AUDV0  =  _V0  :  AUDF0  =	_F0
   2527  f4c2
   2528  f4c2		       a9 04		      LDA	#4
   2529  f4c4		       85 15		      STA	AUDC0
   2530  f4c6		       a5 d9		      LDA	_V0
   2531  f4c8		       85 19		      STA	AUDV0
   2532  f4ca		       a5 da		      LDA	_F0
   2533  f4cc		       85 17		      STA	AUDF0
   2534  f4ce				   .
   2535  f4ce							; 
   2536  f4ce
   2537  f4ce				   .
   2538  f4ce							; 
   2539  f4ce
   2540  f4ce				   .
   2541  f4ce							; 
   2542  f4ce
   2543  f4ce				   .
   2544  f4ce							; 
   2545  f4ce
   2546  f4ce				   .L029		;  temp5  =  _Ch0_Duration  &	%00000001
   2547  f4ce
   2548  f4ce		       a5 d7		      LDA	_Ch0_Duration
   2549  f4d0		       29 01		      AND	#%00000001
   2550  f4d2		       85 a0		      STA	temp5
   2551  f4d4				   .
   2552  f4d4							; 
   2553  f4d4
   2554  f4d4				   .
   2555  f4d4							; 
   2556  f4d4
   2557  f4d4				   .
   2558  f4d4							; 
   2559  f4d4
   2560  f4d4				   .
   2561  f4d4							; 
   2562  f4d4
   2563  f4d4				   .L030		;  if temp5  &&  _V0 then _V0	=  _V0	-  1
   2564  f4d4
   2565  f4d4		       a5 a0		      LDA	temp5
   2566  f4d6		       f0 06		      BEQ	.skipL030
   2567  f4d8				   .condpart14
   2568  f4d8		       a5 d9		      LDA	_V0
   2569  f4da		       f0 02		      BEQ	.skip14then
   2570  f4dc				   .condpart15
   2571  f4dc		       c6 d9		      DEC	_V0
   2572  f4de				   .skip14then
   2573  f4de				   .skipL030
   2574  f4de				   .
   2575  f4de							; 
   2576  f4de
   2577  f4de				   .
   2578  f4de							; 
   2579  f4de
   2580  f4de				   .
   2581  f4de							; 
   2582  f4de
   2583  f4de				   .
   2584  f4de							; 
   2585  f4de
   2586  f4de				   .L031		;  if _F0 then _F0  =	_F0  -	1
   2587  f4de
   2588  f4de		       a5 da		      LDA	_F0
   2589  f4e0		       f0 02		      BEQ	.skipL031
   2590  f4e2				   .condpart16
   2591  f4e2		       c6 da		      DEC	_F0
   2592  f4e4				   .skipL031
   2593  f4e4				   .
   2594  f4e4							; 
   2595  f4e4
   2596  f4e4				   .
   2597  f4e4							; 
   2598  f4e4
   2599  f4e4				   .
   2600  f4e4							; 
   2601  f4e4
   2602  f4e4				   .
   2603  f4e4							; 
   2604  f4e4
   2605  f4e4				   .L032		;  goto __Skip_Ch_0
   2606  f4e4
   2607  f4e4		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2608  f4e7
   2609  f4e7				   .
   2610  f4e7							; 
   2611  f4e7
   2612  f4e7				   .__Skip_Ch0_Sound_004
   2613  f4e7							; __Skip_Ch0_Sound_004
   2614  f4e7
   2615  f4e7				   .
   2616  f4e7							; 
   2617  f4e7
   2618  f4e7				   .
   2619  f4e7							; 
   2620  f4e7
   2621  f4e7				   .
   2622  f4e7							; 
   2623  f4e7
   2624  f4e7				   .
   2625  f4e7							; 
   2626  f4e7
   2627  f4e7				   .
   2628  f4e7							; 
   2629  f4e7
   2630  f4e7				   .
   2631  f4e7							; 
   2632  f4e7
   2633  f4e7				   .
   2634  f4e7							; 
   2635  f4e7
   2636  f4e7				   .
   2637  f4e7							; 
   2638  f4e7
   2639  f4e7				   .
   2640  f4e7							; 
   2641  f4e7
   2642  f4e7				   .
   2643  f4e7							; 
   2644  f4e7
   2645  f4e7				   .
   2646  f4e7							; 
   2647  f4e7
   2648  f4e7				   .
   2649  f4e7							; 
   2650  f4e7
   2651  f4e7				   .L033		;  if _Ch0_Sound  <>  5 then goto __Skip_Ch0_Sound_005
   2652  f4e7
   2653  f4e7		       a5 d6		      LDA	_Ch0_Sound
   2654  f4e9		       c9 05		      CMP	#5
   2655  f4eb		       f0 03		      BEQ	.skipL033
   2656  f4ed				   .condpart17
   2657  f4ed		       4c 1b f5 	      jmp	.__Skip_Ch0_Sound_005
   2658  f4f0
   2659  f4f0				   .skipL033
   2660  f4f0				   .
   2661  f4f0							; 
   2662  f4f0
   2663  f4f0				   .
   2664  f4f0							; 
   2665  f4f0
   2666  f4f0				   .
   2667  f4f0							; 
   2668  f4f0
   2669  f4f0				   .
   2670  f4f0							; 
   2671  f4f0
   2672  f4f0				   .L034		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   2673  f4f0
   2674  f4f0		       a5 d8		      LDA	_C0
   2675  f4f2		       85 15		      STA	AUDC0
   2676  f4f4		       a5 d9		      LDA	_V0
   2677  f4f6		       85 19		      STA	AUDV0
   2678  f4f8		       a5 da		      LDA	_F0
   2679  f4fa		       85 17		      STA	AUDF0
   2680  f4fc				   .
   2681  f4fc							; 
   2682  f4fc
   2683  f4fc				   .
   2684  f4fc							; 
   2685  f4fc
   2686  f4fc				   .
   2687  f4fc							; 
   2688  f4fc
   2689  f4fc				   .
   2690  f4fc							; 
   2691  f4fc
   2692  f4fc				   .L035		;  _C0  =  _C0  ^  8
   2693  f4fc
   2694  f4fc		       a5 d8		      LDA	_C0
   2695  f4fe		       49 08		      EOR	#8
   2696  f500		       85 d8		      STA	_C0
   2697  f502				   .
   2698  f502							; 
   2699  f502
   2700  f502				   .
   2701  f502							; 
   2702  f502
   2703  f502				   .
   2704  f502							; 
   2705  f502
   2706  f502				   .
   2707  f502							; 
   2708  f502
   2709  f502				   .L036		;  temp5  =  _Ch0_Duration  &	%00000001
   2710  f502
   2711  f502		       a5 d7		      LDA	_Ch0_Duration
   2712  f504		       29 01		      AND	#%00000001
   2713  f506		       85 a0		      STA	temp5
   2714  f508				   .
   2715  f508							; 
   2716  f508
   2717  f508				   .
   2718  f508							; 
   2719  f508
   2720  f508				   .
   2721  f508							; 
   2722  f508
   2723  f508				   .
   2724  f508							; 
   2725  f508
   2726  f508				   .L037		;  if temp5  &&  _V0 then _V0	=  _V0	-  1
   2727  f508
   2728  f508		       a5 a0		      LDA	temp5
   2729  f50a		       f0 06		      BEQ	.skipL037
   2730  f50c				   .condpart18
   2731  f50c		       a5 d9		      LDA	_V0
   2732  f50e		       f0 02		      BEQ	.skip18then
   2733  f510				   .condpart19
   2734  f510		       c6 d9		      DEC	_V0
   2735  f512				   .skip18then
   2736  f512				   .skipL037
   2737  f512				   .
   2738  f512							; 
   2739  f512
   2740  f512				   .
   2741  f512							; 
   2742  f512
   2743  f512				   .
   2744  f512							; 
   2745  f512
   2746  f512				   .
   2747  f512							; 
   2748  f512
   2749  f512				   .L038		;  if _F0 then _F0  =	_F0  -	1
   2750  f512
   2751  f512		       a5 da		      LDA	_F0
   2752  f514		       f0 02		      BEQ	.skipL038
   2753  f516				   .condpart20
   2754  f516		       c6 da		      DEC	_F0
   2755  f518				   .skipL038
   2756  f518				   .
   2757  f518							; 
   2758  f518
   2759  f518				   .
   2760  f518							; 
   2761  f518
   2762  f518				   .
   2763  f518							; 
   2764  f518
   2765  f518				   .
   2766  f518							; 
   2767  f518
   2768  f518				   .L039		;  goto __Skip_Ch_0
   2769  f518
   2770  f518		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2771  f51b
   2772  f51b				   .
   2773  f51b							; 
   2774  f51b
   2775  f51b				   .__Skip_Ch0_Sound_005
   2776  f51b							; __Skip_Ch0_Sound_005
   2777  f51b
   2778  f51b				   .
   2779  f51b							; 
   2780  f51b
   2781  f51b				   .
   2782  f51b							; 
   2783  f51b
   2784  f51b				   .
   2785  f51b							; 
   2786  f51b
   2787  f51b				   .
   2788  f51b							; 
   2789  f51b
   2790  f51b				   .
   2791  f51b							; 
   2792  f51b
   2793  f51b				   .
   2794  f51b							; 
   2795  f51b
   2796  f51b				   .
   2797  f51b							; 
   2798  f51b
   2799  f51b				   .
   2800  f51b							; 
   2801  f51b
   2802  f51b				   .
   2803  f51b							; 
   2804  f51b
   2805  f51b				   .
   2806  f51b							; 
   2807  f51b
   2808  f51b				   .
   2809  f51b							; 
   2810  f51b
   2811  f51b				   .
   2812  f51b							; 
   2813  f51b
   2814  f51b				   .
   2815  f51b							; 
   2816  f51b
   2817  f51b				   .
   2818  f51b							; 
   2819  f51b
   2820  f51b				   .
   2821  f51b							; 
   2822  f51b
   2823  f51b				   .
   2824  f51b							; 
   2825  f51b
   2826  f51b				   .
   2827  f51b							; 
   2828  f51b
   2829  f51b				   .L040		;  goto __Skip_Ch_0
   2830  f51b
   2831  f51b		       4c 24 f5 	      jmp	.__Skip_Ch_0
   2832  f51e
   2833  f51e				   .
   2834  f51e							; 
   2835  f51e
   2836  f51e				   .
   2837  f51e							; 
   2838  f51e
   2839  f51e				   .
   2840  f51e							; 
   2841  f51e
   2842  f51e				   .
   2843  f51e							; 
   2844  f51e
   2845  f51e				   .
   2846  f51e							; 
   2847  f51e
   2848  f51e				   .
   2849  f51e							; 
   2850  f51e
   2851  f51e				   .
   2852  f51e							; 
   2853  f51e
   2854  f51e				   .__Clear_Ch_0
   2855  f51e							; __Clear_Ch_0
   2856  f51e
   2857  f51e				   .
   2858  f51e							; 
   2859  f51e
   2860  f51e				   .L041		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   2861  f51e
   2862  f51e		       a9 00		      LDA	#0
   2863  f520		       85 d6		      STA	_Ch0_Sound
   2864  f522		       85 19		      STA	AUDV0
   2865  f524				   .
   2866  f524							; 
   2867  f524
   2868  f524				   .
   2869  f524							; 
   2870  f524
   2871  f524				   .
   2872  f524							; 
   2873  f524
   2874  f524				   .
   2875  f524							; 
   2876  f524
   2877  f524				   .
   2878  f524							; 
   2879  f524
   2880  f524				   .
   2881  f524							; 
   2882  f524
   2883  f524				   .
   2884  f524							; 
   2885  f524
   2886  f524				   .__Skip_Ch_0
   2887  f524							; __Skip_Ch_0
   2888  f524
   2889  f524				   .
   2890  f524							; 
   2891  f524
   2892  f524				   .
   2893  f524							; 
   2894  f524
   2895  f524				   .
   2896  f524							; 
   2897  f524
   2898  f524				   .
   2899  f524							; 
   2900  f524
   2901  f524				   .
   2902  f524							; 
   2903  f524
   2904  f524				   .
   2905  f524							; 
   2906  f524
   2907  f524				   .
   2908  f524							; 
   2909  f524
   2910  f524				   .L042		;  drawscreen
   2911  f524
   2912  f524		       20 28 f3 	      jsr	drawscreen
   2913  f527				   .
   2914  f527							; 
   2915  f527
   2916  f527				   .
   2917  f527							; 
   2918  f527
   2919  f527				   .
   2920  f527							; 
   2921  f527
   2922  f527				   .L043		;  goto __Main_Loop
   2923  f527		       4c c8 f3 	      jmp	.__Main_Loop
   2924  f52a					      if	ECHOFIRST
      2674 bytes of ROM space left
   2925  f52a					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2926  f52a					      endif
   2927  f52a		       00 01	   ECHOFIRST  =	1
   2928  f52a
   2929  f52a
   2930  f52a
   2931  f52a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2932  f52a
   2933  f52a							; feel free to modify the score graphics - just keep each digit 8 high
   2934  f52a							; and keep the conditional compilation stuff intact
   2935  f52a				  -	      ifconst	ROM2k
   2936  f52a				  -	      ORG	$F7AC-8
   2937  f52a					      else
   2938  f52a				  -	      ifconst	bankswitch
   2939  f52a				  -	      if	bankswitch == 8
   2940  f52a				  -	      ORG	$2F94-bscode_length
   2941  f52a				  -	      RORG	$FF94-bscode_length
   2942  f52a				  -	      endif
   2943  f52a				  -	      if	bankswitch == 16
   2944  f52a				  -	      ORG	$4F94-bscode_length
   2945  f52a				  -	      RORG	$FF94-bscode_length
   2946  f52a				  -	      endif
   2947  f52a				  -	      if	bankswitch == 32
   2948  f52a				  -	      ORG	$8F94-bscode_length
   2949  f52a				  -	      RORG	$FF94-bscode_length
   2950  f52a				  -	      endif
   2951  f52a				  -	      if	bankswitch == 64
   2952  f52a				  -	      ORG	$10F80-bscode_length
   2953  f52a				  -	      RORG	$1FF80-bscode_length
   2954  f52a				  -	      endif
   2955  f52a					      else
   2956  ff9c					      ORG	$FF9C
   2957  ff9c					      endif
   2958  ff9c					      endif
   2959  ff9c
   2960  ff9c							; font equates
   2961  ff9c		       00 01	   .21stcentury =	1
   2962  ff9c		       00 02	   alarmclock =	2
   2963  ff9c		       00 03	   handwritten =	3
   2964  ff9c		       00 04	   interrupted =	4
   2965  ff9c		       00 05	   retroputer =	5
   2966  ff9c		       00 06	   whimsey    =	6
   2967  ff9c		       00 07	   tiny       =	7
   2968  ff9c		       00 08	   hex	      =	8
   2969  ff9c
   2970  ff9c				  -	      ifconst	font
   2971  ff9c				  -	      if	font == hex
   2972  ff9c				  -	      ORG	. - 48
   2973  ff9c				  -	      endif
   2974  ff9c					      endif
   2975  ff9c
   2976  ff9c				   scoretable
   2977  ff9c
   2978  ff9c				  -	      ifconst	font
   2979  ff9c				  -	      if	font == .21stcentury
   2980  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2981  ff9c				  -	      endif
   2982  ff9c				  -	      if	font == alarmclock
   2983  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2984  ff9c				  -	      endif
   2985  ff9c				  -	      if	font == handwritten
   2986  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2987  ff9c				  -	      endif
   2988  ff9c				  -	      if	font == interrupted
   2989  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2990  ff9c				  -	      endif
   2991  ff9c				  -	      if	font == retroputer
   2992  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2993  ff9c				  -	      endif
   2994  ff9c				  -	      if	font == whimsey
   2995  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2996  ff9c				  -	      endif
   2997  ff9c				  -	      if	font == tiny
   2998  ff9c				  -	      include	"score_graphics.asm.tiny"
   2999  ff9c				  -	      endif
   3000  ff9c				  -	      if	font == hex
   3001  ff9c				  -	      include	"score_graphics.asm.hex"
   3002  ff9c				  -	      endif
   3003  ff9c					      else		; default font
   3004  ff9c
   3005  ff9c		       3c		      .byte.b	%00111100
   3006  ff9d		       66		      .byte.b	%01100110
   3007  ff9e		       66		      .byte.b	%01100110
   3008  ff9f		       66		      .byte.b	%01100110
   3009  ffa0		       66		      .byte.b	%01100110
   3010  ffa1		       66		      .byte.b	%01100110
   3011  ffa2		       66		      .byte.b	%01100110
   3012  ffa3		       3c		      .byte.b	%00111100
   3013  ffa4
   3014  ffa4		       7e		      .byte.b	%01111110
   3015  ffa5		       18		      .byte.b	%00011000
   3016  ffa6		       18		      .byte.b	%00011000
   3017  ffa7		       18		      .byte.b	%00011000
   3018  ffa8		       18		      .byte.b	%00011000
   3019  ffa9		       38		      .byte.b	%00111000
   3020  ffaa		       18		      .byte.b	%00011000
   3021  ffab		       08		      .byte.b	%00001000
   3022  ffac
   3023  ffac		       7e		      .byte.b	%01111110
   3024  ffad		       60		      .byte.b	%01100000
   3025  ffae		       60		      .byte.b	%01100000
   3026  ffaf		       3c		      .byte.b	%00111100
   3027  ffb0		       06		      .byte.b	%00000110
   3028  ffb1		       06		      .byte.b	%00000110
   3029  ffb2		       46		      .byte.b	%01000110
   3030  ffb3		       3c		      .byte.b	%00111100
   3031  ffb4
   3032  ffb4		       3c		      .byte.b	%00111100
   3033  ffb5		       46		      .byte.b	%01000110
   3034  ffb6		       06		      .byte.b	%00000110
   3035  ffb7		       06		      .byte.b	%00000110
   3036  ffb8		       1c		      .byte.b	%00011100
   3037  ffb9		       06		      .byte.b	%00000110
   3038  ffba		       46		      .byte.b	%01000110
   3039  ffbb		       3c		      .byte.b	%00111100
   3040  ffbc
   3041  ffbc		       0c		      .byte.b	%00001100
   3042  ffbd		       0c		      .byte.b	%00001100
   3043  ffbe		       7e		      .byte.b	%01111110
   3044  ffbf		       4c		      .byte.b	%01001100
   3045  ffc0		       4c		      .byte.b	%01001100
   3046  ffc1		       2c		      .byte.b	%00101100
   3047  ffc2		       1c		      .byte.b	%00011100
   3048  ffc3		       0c		      .byte.b	%00001100
   3049  ffc4
   3050  ffc4		       3c		      .byte.b	%00111100
   3051  ffc5		       46		      .byte.b	%01000110
   3052  ffc6		       06		      .byte.b	%00000110
   3053  ffc7		       06		      .byte.b	%00000110
   3054  ffc8		       3c		      .byte.b	%00111100
   3055  ffc9		       60		      .byte.b	%01100000
   3056  ffca		       60		      .byte.b	%01100000
   3057  ffcb		       7e		      .byte.b	%01111110
   3058  ffcc
   3059  ffcc		       3c		      .byte.b	%00111100
   3060  ffcd		       66		      .byte.b	%01100110
   3061  ffce		       66		      .byte.b	%01100110
   3062  ffcf		       66		      .byte.b	%01100110
   3063  ffd0		       7c		      .byte.b	%01111100
   3064  ffd1		       60		      .byte.b	%01100000
   3065  ffd2		       62		      .byte.b	%01100010
   3066  ffd3		       3c		      .byte.b	%00111100
   3067  ffd4
   3068  ffd4		       30		      .byte.b	%00110000
   3069  ffd5		       30		      .byte.b	%00110000
   3070  ffd6		       30		      .byte.b	%00110000
   3071  ffd7		       18		      .byte.b	%00011000
   3072  ffd8		       0c		      .byte.b	%00001100
   3073  ffd9		       06		      .byte.b	%00000110
   3074  ffda		       42		      .byte.b	%01000010
   3075  ffdb		       3e		      .byte.b	%00111110
   3076  ffdc
   3077  ffdc		       3c		      .byte.b	%00111100
   3078  ffdd		       66		      .byte.b	%01100110
   3079  ffde		       66		      .byte.b	%01100110
   3080  ffdf		       66		      .byte.b	%01100110
   3081  ffe0		       3c		      .byte.b	%00111100
   3082  ffe1		       66		      .byte.b	%01100110
   3083  ffe2		       66		      .byte.b	%01100110
   3084  ffe3		       3c		      .byte.b	%00111100
   3085  ffe4
   3086  ffe4		       3c		      .byte.b	%00111100
   3087  ffe5		       46		      .byte.b	%01000110
   3088  ffe6		       06		      .byte.b	%00000110
   3089  ffe7		       3e		      .byte.b	%00111110
   3090  ffe8		       66		      .byte.b	%01100110
   3091  ffe9		       66		      .byte.b	%01100110
   3092  ffea		       66		      .byte.b	%01100110
   3093  ffeb		       3c		      .byte.b	%00111100
   3094  ffec
   3095  ffec					      ifnconst	DPC_kernel_options
   3096  ffec
   3097  ffec		       00		      .byte.b	%00000000
   3098  ffed		       00		      .byte.b	%00000000
   3099  ffee		       00		      .byte.b	%00000000
   3100  ffef		       00		      .byte.b	%00000000
   3101  fff0		       00		      .byte.b	%00000000
   3102  fff1		       00		      .byte.b	%00000000
   3103  fff2		       00		      .byte.b	%00000000
   3104  fff3		       00		      .byte.b	%00000000
   3105  fff4
   3106  fff4					      endif
   3107  fff4
   3108  fff4					      endif
   3109  fff4
   3110  fff4				  -	      ifconst	ROM2k
   3111  fff4				  -	      ORG	$F7FC
   3112  fff4					      else
   3113  fff4				  -	      ifconst	bankswitch
   3114  fff4				  -	      if	bankswitch == 8
   3115  fff4				  -	      ORG	$2FF4-bscode_length
   3116  fff4				  -	      RORG	$FFF4-bscode_length
   3117  fff4				  -	      endif
   3118  fff4				  -	      if	bankswitch == 16
   3119  fff4				  -	      ORG	$4FF4-bscode_length
   3120  fff4				  -	      RORG	$FFF4-bscode_length
   3121  fff4				  -	      endif
   3122  fff4				  -	      if	bankswitch == 32
   3123  fff4				  -	      ORG	$8FF4-bscode_length
   3124  fff4				  -	      RORG	$FFF4-bscode_length
   3125  fff4				  -	      endif
   3126  fff4				  -	      if	bankswitch == 64
   3127  fff4				  -	      ORG	$10FE0-bscode_length
   3128  fff4				  -	      RORG	$1FFE0-bscode_length
   3129  fff4				  -	      endif
   3130  fff4					      else
   3131  fffc					      ORG	$FFFC
   3132  fffc					      endif
   3133  fffc					      endif
   3134  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3135  fffc
   3136  fffc				  -	      ifconst	bankswitch
   3137  fffc				  -	      if	bankswitch == 8
   3138  fffc				  -	      ORG	$2FFC
   3139  fffc				  -	      RORG	$FFFC
   3140  fffc				  -	      endif
   3141  fffc				  -	      if	bankswitch == 16
   3142  fffc				  -	      ORG	$4FFC
   3143  fffc				  -	      RORG	$FFFC
   3144  fffc				  -	      endif
   3145  fffc				  -	      if	bankswitch == 32
   3146  fffc				  -	      ORG	$8FFC
   3147  fffc				  -	      RORG	$FFFC
   3148  fffc				  -	      endif
   3149  fffc				  -	      if	bankswitch == 64
   3150  fffc				  -	      ORG	$10FF0
   3151  fffc				  -	      RORG	$1FFF0
   3152  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3153  fffc				  -	      ORG	$10FF8
   3154  fffc				  -	      RORG	$1FFF8
   3155  fffc				  -	      ifconst	superchip
   3156  fffc				  -	      .byte	"E","F","S","C"
   3157  fffc				  -	      else
   3158  fffc				  -	      .byte	"E","F","E","F"
   3159  fffc				  -	      endif
   3160  fffc				  -	      ORG	$10FFC
   3161  fffc				  -	      RORG	$1FFFC
   3162  fffc				  -	      endif
   3163  fffc					      else
   3164  fffc				  -	      ifconst	ROM2k
   3165  fffc				  -	      ORG	$F7FC
   3166  fffc					      else
   3167  fffc					      ORG	$FFFC
   3168  fffc					      endif
   3169  fffc					      endif
   3170  fffc		       00 f0		      .word.w	(start & $ffff)
   3171  fffe		       00 f0		      .word.w	(start & $ffff)

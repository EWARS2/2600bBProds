------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   bmp_48x2_1_index =	b
      5  5000 ????
      6  5000 ????	       00 d4	   frame      =	a
      7  5000 ????
      8  5000 ????	       00 03	   bs_mask    =	3
      9  5000 ????	       00 10	   bankswitch =	16
     10  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   bmp_48x2_1_index =	b
      5  5000 ????
      6  5000 ????	       00 d4	   frame      =	a
      7  5000 ????
      8  5000 ????	       00 03	   bs_mask    =	3
      9  5000 ????	       00 10	   bankswitch =	16
     10  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .L00 		;  rem *** any romsize should work
     39  1000
     40  1000				   .L01 		;  set romsize 16k
     41  1000
     42  1000				   .
     43  1000							; 
     44  1000
     45  1000				   .L02 		;  scorecolor = $0f
     46  1000
     47  1000		       a9 0f		      LDA	#$0f
     48  1002		       85 a3		      STA	scorecolor
     49  1004				   .
     50  1004							; 
     51  1004
     52  1004				   .L03 		;  dim frame = a
     53  1004
     54  1004				   .L04 		;  dim bmp_48x2_1_index = b
     55  1004
     56  1004				   .
     57  1004							; 
     58  1004
     59  1004				   .L05 		;  bmp_48x2_1_index = 0
     60  1004
     61  1004		       a9 00		      LDA	#0
     62  1006		       85 d5		      STA	bmp_48x2_1_index
     63  1008				   .
     64  1008							; 
     65  1008
     66  1008				   .titlepage
     67  1008							; titlepage
     68  1008
     69  1008				   .L06 		;  gosub titledrawscreen bank2
     70  1008
     71  1008		       85 ee		      sta	temp7
     72  100a		       a9 90		      lda	#>(ret_point1-1)
     73  100c		       48		      pha
     74  100d		       a9 1f		      lda	#<(ret_point1-1)
     75  100f		       48		      pha
     76  1010		       a9 af		      lda	#>(.titledrawscreen-1)
     77  1012		       48		      pha
     78  1013		       a9 ff		      lda	#<(.titledrawscreen-1)
     79  1015		       48		      pha
     80  1016		       a5 ee		      lda	temp7
     81  1018		       48		      pha
     82  1019		       8a		      txa
     83  101a		       48		      pha
     84  101b		       a2 02		      ldx	#2
     85  101d		       4c eb ff 	      jmp	BS_jsr
     86  1020				   ret_point1
     87  1020				   .L07 		;  frame = frame + 1
     88  1020
     89  1020		       e6 d4		      INC	frame
     90  1022				   .L08 		;  temp1 = frame & %00011111
     91  1022
     92  1022		       a5 d4		      LDA	frame
     93  1024		       29 1f		      AND	#%00011111
     94  1026		       85 9c		      STA	temp1
     95  1028				   .L09 		;  if temp1 = 0 then bmp_48x2_1_index = bmp_48x2_1_index + 48 : if bmp_48x2_1_index = 240 then bmp_48x2_1_index = 0
     96  1028
     97  1028		       a5 9c		      LDA	temp1
     98  102a		       c9 00		      CMP	#0
     99  102c		       d0 11		      BNE	.skipL09
    100  102e				   .condpart0
    101  102e		       a5 d5		      LDA	bmp_48x2_1_index
    102  1030		       18		      CLC
    103  1031		       69 30		      ADC	#48
    104  1033		       85 d5		      STA	bmp_48x2_1_index
    105  1035		       a5 d5		      LDA	bmp_48x2_1_index
    106  1037		       c9 f0		      CMP	#240
    107  1039		       d0 04		      BNE	.skip0then
    108  103b				   .condpart1
    109  103b		       a9 00		      LDA	#0
    110  103d		       85 d5		      STA	bmp_48x2_1_index
    111  103f				   .skip0then
    112  103f				   .skipL09
    113  103f				   .L010		;  if joy0fire  ||  switchreset then goto gamestart
    114  103f
    115  103f		       24 0c		      bit	INPT4
    116  1041		       30 03		      BMI	.skipL010
    117  1043				   .condpart2
    118  1043		       4c 4d 90 	      jmp	.condpart3
    119  1046				   .skipL010
    120  1046		       a9 01		      lda	#1
    121  1048		       2c 82 02 	      bit	SWCHB
    122  104b		       d0 03		      BNE	.skip0OR
    123  104d				   .condpart3
    124  104d		       4c 53 90 	      jmp	.gamestart
    125  1050
    126  1050				   .skip0OR
    127  1050				   .L011		;  goto titlepage
    128  1050
    129  1050		       4c 08 90 	      jmp	.titlepage
    130  1053
    131  1053				   .
    132  1053							; 
    133  1053
    134  1053				   .L012		;  rem *** Our fake game start. If you move the joystick it goes back to the
    135  1053
    136  1053				   .L013		;  rem *** title screen.
    137  1053
    138  1053				   .gamestart
    139  1053							; gamestart
    140  1053
    141  1053				   .L014		;  drawscreen
    142  1053
    143  1053		       85 ee		      sta	temp7
    144  1055		       a9 90		      lda	#>(ret_point2-1)
    145  1057		       48		      pha
    146  1058		       a9 6a		      lda	#<(ret_point2-1)
    147  105a		       48		      pha
    148  105b		       a9 f4		      lda	#>(drawscreen-1)
    149  105d		       48		      pha
    150  105e		       a9 35		      lda	#<(drawscreen-1)
    151  1060		       48		      pha
    152  1061		       a5 ee		      lda	temp7
    153  1063		       48		      pha
    154  1064		       8a		      txa
    155  1065		       48		      pha
    156  1066		       a2 04		      ldx	#4
    157  1068		       4c eb ff 	      jmp	BS_jsr
    158  106b				   ret_point2
    159  106b				   .L015		;  if joy0left  ||  joy0right then goto titlepage
    160  106b
    161  106b		       2c 80 02 	      bit	SWCHA
    162  106e		       70 03		      BVS	.skipL015
    163  1070				   .condpart4
    164  1070		       4c 78 90 	      jmp	.condpart5
    165  1073				   .skipL015
    166  1073		       2c 80 02 	      bit	SWCHA
    167  1076		       30 03		      BMI	.skip1OR
    168  1078				   .condpart5
    169  1078		       4c 08 90 	      jmp	.titlepage
    170  107b
    171  107b				   .skip1OR
    172  107b				   .L016		;  if joy0up  ||  joy0down then goto titlepage
    173  107b
    174  107b		       a9 10		      lda	#$10
    175  107d		       2c 80 02 	      bit	SWCHA
    176  1080		       d0 03		      BNE	.skipL016
    177  1082				   .condpart6
    178  1082		       4c 8c 90 	      jmp	.condpart7
    179  1085				   .skipL016
    180  1085		       a9 20		      lda	#$20
    181  1087		       2c 80 02 	      bit	SWCHA
    182  108a		       d0 03		      BNE	.skip2OR
    183  108c				   .condpart7
    184  108c		       4c 08 90 	      jmp	.titlepage
    185  108f
    186  108f				   .skip2OR
    187  108f				   .L017		;  goto gamestart
    188  108f
    189  108f		       4c 53 90 	      jmp	.gamestart
    190  1092
    191  1092				   .
    192  1092							; 
    193  1092
    194  1092				   .L018		;  bank 2
    195  1092
    196  1092					      if	ECHO1
      3906 bytes of ROM space left in bank 1
    197  1092					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    198  1092					      endif
    199  1092		       00 01	   ECHO1      =	1
    200  1fd4					      ORG	$1FF4-bscode_length
    201  1fd4					      RORG	$9FF4-bscode_length
    202  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    203  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    204  1fd6				  -	      stx	FASTFETCH
    205  1fd6					      endif
    206  1fd6		       9a		      txs
    207  1fd7				  -	      if	bankswitch == 64
    208  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    209  1fd7					      else
    210  1fd7		       a9 f2		      lda	#>(start-1)
    211  1fd9					      endif
    212  1fd9		       48		      pha
    213  1fda		       a9 4f		      lda	#<(start-1)
    214  1fdc		       48		      pha
    215  1fdd		       48		      pha
    216  1fde		       8a		      txa
    217  1fdf		       48		      pha
    218  1fe0		       ba		      tsx
    219  1fe1					      if	bankswitch != 64
    220  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    221  1fe3		       2a		      rol
    222  1fe4		       2a		      rol
    223  1fe5		       2a		      rol
    224  1fe6		       2a		      rol
    225  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    226  1fe9		       aa		      tax
    227  1fea		       e8		      inx
    228  1feb				  -	      else
    229  1feb				  -	      lda	4,x	; get high byte of return address
    230  1feb				  -	      tay
    231  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    232  1feb				  -	      sta	4,x
    233  1feb				  -	      tya
    234  1feb				  -	      lsr
    235  1feb				  -	      lsr
    236  1feb				  -	      lsr
    237  1feb				  -	      lsr
    238  1feb				  -	      tax
    239  1feb				  -	      inx
    240  1feb					      endif
    241  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    242  1fee		       68		      pla
    243  1fef		       aa		      tax
    244  1ff0		       68		      pla
    245  1ff1		       60		      rts
    246  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    247  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    248  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    249  1ff2					      endif
    250  1ffc					      ORG	$1FFC
    251  1ffc					      RORG	$9FFC
    252  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    253  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    254  2000					      ORG	$2000
    255  2000					      RORG	$B000
    256  2000				   .L019		;  rem *** We're putting the title kernel here, but it can go in any bank you
    257  2000
    258  2000				   .L020		;  rem *** like. Just don't let your program flow accidentally fall into the
    259  2000
    260  2000				   .L021		;  rem *** line below.
    261  2000
    262  2000				   .L022		;  asm
    263  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_48x1_2
     10  2000					      draw_space	10
     11  2000					      draw_48x2_1
     12  2000					      draw_space	20
     13  2000					      draw_48x1_3
     14  2000					      ENDM
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019					      ifnconst	vblank_time
     26  2019		       a9 aa		      lda	#42+128
     27  201b				  -	      else
     28  201b				  -	      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 88 b0 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_48x1_2
      1  2046		       00 01	   mk_48x1_X_on =	1
      2  2046		       00 01	   mk_48x1_2_on =	1
      3  2046		       20 89 b0 	      jsr	draw_bmp_48x1_2
      0  2049					      draw_space	10
      1  2049		       a0 0a		      ldy	#10
      2  204b				   .loop
      3  204b		       85 02		      sta	WSYNC
      4  204d		       88		      dey
      5  204e		       d0 fb		      bne	.loop
      0  2050					      draw_48x2_1
      1  2050		       00 01	   mk_48x2_X_on =	1
      2  2050		       00 01	   mk_48x2_1_on =	1
      3  2050		       20 19 b1 	      jsr	draw_bmp_48x2_1
      0  2053					      draw_space	20
      1  2053		       a0 14		      ldy	#20
      2  2055				   .loop
      3  2055		       85 02		      sta	WSYNC
      4  2057		       88		      dey
      5  2058		       d0 fb		      bne	.loop
      0  205a					      draw_48x1_3
      1  205a		       00 01	   mk_48x1_X_on =	1
      2  205a		       00 01	   mk_48x1_3_on =	1
      3  205a		       20 d1 b0 	      jsr	draw_bmp_48x1_3
     68  205d
     69  205d		       4c 90 b2 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2060
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  2060					      include	"titlescreen/asm/position48.asm"
      1  2060
      2  2060				   position48
      3  2060
      4  2060							;postion P0 and P1
      5  2060
      6  2060		       85 02		      sta	WSYNC
      7  2062
      8  2062		       a9 90		      lda	#$90	;2
      9  2064		       85 20		      sta	HMP0	;3
     10  2066		       a9 a0		      lda	#$A0	;2
     11  2068		       85 21		      sta	HMP1	;3
     12  206a
     13  206a		       e6 9c		      inc	temp1
     14  206c		       c6 9c		      dec	temp1
     15  206e		       e6 9c		      inc	temp1
     16  2070		       c6 9c		      dec	temp1
     17  2072		       e6 9c		      inc	temp1
      0  2074					      sleep	2
      1  2074				   .CYCLES    SET	2
      2  2074
      3  2074				  -	      IF	.CYCLES < 2
      4  2074				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2074				  -	      ERR
      6  2074					      ENDIF
      7  2074
      8  2074				  -	      IF	.CYCLES & 1
      9  2074				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2074				  -	      nop	0
     11  2074				  -	      ELSE
     12  2074				  -	      bit	VSYNC
     13  2074				  -	      ENDIF
     14  2074				  -.CYCLES    SET	.CYCLES - 3
     15  2074					      ENDIF
     16  2074
     17  2074					      REPEAT	.CYCLES / 2
     18  2074		       ea		      nop
     19  2075					      REPEND
     19  2075		       85 10		      sta	RESP0	;  +3
     20  2077		       85 11		      sta	RESP1	;  +3
     21  2079		       c6 9c		      dec	temp1	;  +5
     22  207b		       e6 9c		      inc	temp1	;  +5
     23  207d		       c6 9c		      dec	temp1	;  +5
     24  207f		       e6 9c		      inc	temp1	;  +5
     25  2081		       c6 9c		      dec	temp1	;  +5
      0  2083					      sleep	3
      1  2083				   .CYCLES    SET	3
      2  2083
      3  2083				  -	      IF	.CYCLES < 2
      4  2083				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2083				  -	      ERR
      6  2083					      ENDIF
      7  2083
      8  2083					      IF	.CYCLES & 1
      9  2083					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2083		       04 00		      nop	0
     11  2085				  -	      ELSE
     12  2085				  -	      bit	VSYNC
     13  2085					      ENDIF
     14  2085				   .CYCLES    SET	.CYCLES - 3
     15  2085					      ENDIF
     16  2085
     17  2085				  -	      REPEAT	.CYCLES / 2
     18  2085				  -	      nop
     19  2085					      REPEND
     27  2085		       85 2a		      sta	HMOVE	; +76
     28  2087		       60		      RTS
     29  2088
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  2088					      include	"titlescreen/titlescreen_color.asm"
      1  2088
      2  2088							; This is where the titlescreen background color gets set. 
      3  2088							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2088							; if you want to change the color on the fly.
      5  2088
      6  2088				  -	      ifnconst	titlescreencolor
      7  2088				  -titlescreencolor
      8  2088					      endif
      9  2088		       00		      .byte.b	$00
     10  2089
------- FILE titlescreen/asm/titlescreen.asm
     73  2089
     74  2089				  -	      ifconst	mk_48x1_1_on
     75  2089				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  2089					      endif		;mk_48x1_1_on
     77  2089
     78  2089					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  2089					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  2089
      2  2089				   draw_bmp_48x1_2
      3  2089
      4  2089		       a9 00		      lda	#0
      5  208b		       85 1b		      sta	GRP0
      6  208d		       85 1c		      sta	GRP1
      7  208f
      8  208f		       a0 0b		      ldy	#11
      9  2091				   bmp_48x1_2_pointersetup
     10  2091		       b9 c5 b0 	      lda	bmp_48x1_2_values,y
     11  2094		       99 96 00 	      sta	scorepointers,y
     12  2097		       88		      dey
     13  2098		       b9 c5 b0 	      lda	bmp_48x1_2_values,y
     14  209b				  -	      ifconst	bmp_48x1_2_index
     15  209b				  -	      sec
     16  209b				  -	      sbc	bmp_48x1_2_index
     17  209b					      endif
     18  209b		       99 96 00 	      sta	scorepointers,y
     19  209e		       88		      dey
     20  209f		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  20a1
     22  20a1		       a0 13		      ldy	(#bmp_48x1_2_window-1)
     23  20a3		       84 f1		      sty	aux2
     24  20a5
     25  20a5					      ifconst	bmp_48x1_2_background
     26  20a5		       ad a8 b2 	      lda	bmp_48x1_2_background
     27  20a8				  -	      else
     28  20a8				  -	      lda	titlescreencolor
     29  20a8					      endif
     30  20a8		       85 f3		      sta	aux4
     31  20aa
     32  20aa		       ad a5 b2 	      lda	bmp_48x1_2_color
     33  20ad		       85 06		      sta	COLUP0	;3
     34  20af		       85 07		      sta	COLUP1	;3
     35  20b1		       85 2b		      sta	HMCLR	;3
     36  20b3
     37  20b3		       ad 88 b0 	      lda	titlescreencolor
     38  20b6		       85 08		      sta	COLUPF
     39  20b8
     40  20b8					      ifconst	bmp_48x1_2_PF1
     41  20b8		       ad a6 b2 	      lda	bmp_48x1_2_PF1
     42  20bb				  -	      else
     43  20bb				  -	      lda	#0
     44  20bb				  -	      nop
     45  20bb					      endif
     46  20bb		       85 0e		      sta	PF1
     47  20bd
     48  20bd					      ifconst	bmp_48x1_2_PF2
     49  20bd		       ad a7 b2 	      lda	bmp_48x1_2_PF2
     50  20c0				  -	      else
     51  20c0				  -	      lda	#0
     52  20c0				  -	      nop
     53  20c0					      endif
     54  20c0		       85 0f		      sta	PF2
     55  20c2
     56  20c2		       4c 6a b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20c5
     58  20c5				   bmp_48x1_2_values
     59  20c5		       a9 b2		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  20c7		       bd b2		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  20c9		       d1 b2		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  20cb		       e5 b2		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  20cd		       00 b3		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  20cf		       14 b3		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  20d1
------- FILE titlescreen/asm/titlescreen.asm
     80  20d1					      endif		;mk_48x1_2_on
     81  20d1
     82  20d1					      ifconst	mk_48x1_3_on
------- FILE titlescreen/asm/48x1_3_kernel.asm LEVEL 3 PASS 2
      0  20d1					      include	"titlescreen/asm/48x1_3_kernel.asm"
      1  20d1
      2  20d1				   draw_bmp_48x1_3
      3  20d1
      4  20d1		       a9 00		      lda	#0
      5  20d3		       85 1b		      sta	GRP0
      6  20d5		       85 1c		      sta	GRP1
      7  20d7
      8  20d7		       a0 0b		      ldy	#11
      9  20d9				   bmp_48x1_3_pointersetup
     10  20d9		       b9 0d b1 	      lda	bmp_48x1_3_values,y
     11  20dc		       99 96 00 	      sta	scorepointers,y
     12  20df		       88		      dey
     13  20e0		       b9 0d b1 	      lda	bmp_48x1_3_values,y
     14  20e3				  -	      ifconst	bmp_48x1_3_index
     15  20e3				  -	      sec
     16  20e3				  -	      sbc	bmp_48x1_3_index
     17  20e3					      endif
     18  20e3		       99 96 00 	      sta	scorepointers,y
     19  20e6		       88		      dey
     20  20e7		       10 f0		      bpl	bmp_48x1_3_pointersetup
     21  20e9
     22  20e9		       a0 0a		      ldy	(#bmp_48x1_3_window-1)
     23  20eb		       84 f1		      sty	aux2
     24  20ed
     25  20ed					      ifconst	bmp_48x1_3_background
     26  20ed		       ad 2b b3 	      lda	bmp_48x1_3_background
     27  20f0				  -	      else
     28  20f0				  -	      lda	titlescreencolor
     29  20f0					      endif
     30  20f0		       85 f3		      sta	aux4
     31  20f2
     32  20f2		       ad 28 b3 	      lda	bmp_48x1_3_color
     33  20f5		       85 06		      sta	COLUP0	;3
     34  20f7		       85 07		      sta	COLUP1	;3
     35  20f9		       85 2b		      sta	HMCLR	;3
     36  20fb
     37  20fb		       ad 88 b0 	      lda	titlescreencolor
     38  20fe		       85 08		      sta	COLUPF
     39  2100
     40  2100					      ifconst	bmp_48x1_3_PF1
     41  2100		       ad 29 b3 	      lda	bmp_48x1_3_PF1
     42  2103				  -	      else
     43  2103				  -	      lda	#0
     44  2103				  -	      nop
     45  2103					      endif
     46  2103		       85 0e		      sta	PF1
     47  2105
     48  2105					      ifconst	bmp_48x1_3_PF2
     49  2105		       ad 2a b3 	      lda	bmp_48x1_3_PF2
     50  2108				  -	      else
     51  2108				  -	      lda	#0
     52  2108				  -	      nop
     53  2108					      endif
     54  2108		       85 0f		      sta	PF2
     55  210a
     56  210a		       4c 6a b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  210d
     58  210d				   bmp_48x1_3_values
     59  210d		       2c b3		      .word.w	(bmp_48x1_3_00+#bmp_48x1_3_height-#bmp_48x1_3_window)
     60  210f		       37 b3		      .word.w	(bmp_48x1_3_01+#bmp_48x1_3_height-#bmp_48x1_3_window)
     61  2111		       42 b3		      .word.w	(bmp_48x1_3_02+#bmp_48x1_3_height-#bmp_48x1_3_window)
     62  2113		       4d b3		      .word.w	(bmp_48x1_3_03+#bmp_48x1_3_height-#bmp_48x1_3_window)
     63  2115		       58 b3		      .word.w	(bmp_48x1_3_04+#bmp_48x1_3_height-#bmp_48x1_3_window)
     64  2117		       63 b3		      .word.w	(bmp_48x1_3_05+#bmp_48x1_3_height-#bmp_48x1_3_window)
     65  2119
------- FILE titlescreen/asm/titlescreen.asm
     84  2119					      endif		;mk_48x1_3_on
     85  2119
     86  2119				  -	      ifconst	mk_48x1_4_on
     87  2119				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2119					      endif		;mk_48x1_4_on
     89  2119
     90  2119				  -	      ifconst	mk_48x1_5_on
     91  2119				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2119					      endif		;mk_48x1_5_on
     93  2119
     94  2119				  -	      ifconst	mk_48x1_6_on
     95  2119				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2119					      endif		;mk_48x1_6_on
     97  2119
     98  2119				  -	      ifconst	mk_48x1_7_on
     99  2119				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2119					      endif		;mk_48x1_7_on
    101  2119
    102  2119				  -	      ifconst	mk_48x1_8_on
    103  2119				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2119					      endif		;mk_48x1_8_on
    105  2119
    106  2119					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  2119					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  2119
      2  2119				   draw_bmp_48x2_1
      3  2119
      4  2119		       a9 c0		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  211b					      ifconst	bmp_48x2_1_index
      6  211b		       38		      sec
      7  211c		       e5 d5		      sbc	bmp_48x2_1_index
      8  211e					      endif
      9  211e		       85 f4		      sta	aux5+0
     10  2120		       a9 b4		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2122		       85 f5		      sta	aux5+1
     12  2124
     13  2124		       a0 0b		      ldy	#11
     14  2126				   bmp_48x2_1_pointersetup
     15  2126		       b9 5e b1 	      lda	bmp_48x2_1_values,y
     16  2129		       99 96 00 	      sta	scorepointers,y
     17  212c		       88		      dey
     18  212d		       b9 5e b1 	      lda	bmp_48x2_1_values,y
     19  2130					      ifconst	bmp_48x2_1_index
     20  2130		       38		      sec
     21  2131		       e5 d5		      sbc	bmp_48x2_1_index
     22  2133					      endif
     23  2133		       99 96 00 	      sta	scorepointers,y
     24  2136		       88		      dey
     25  2137		       10 ed		      bpl	bmp_48x2_1_pointersetup
     26  2139
     27  2139
     28  2139		       a0 2f		      ldy	#(bmp_48x2_1_window-1)
     29  213b		       84 f1		      sty	aux2
     30  213d
     31  213d		       c8		      iny
     32  213e		       b1 f4		      lda	(aux5),y
     33  2140		       88		      dey
     34  2141
     35  2141		       85 06		      sta	COLUP0	;3
     36  2143		       85 07		      sta	COLUP1	;3
     37  2145		       85 2b		      sta	HMCLR	;3
     38  2147
     39  2147		       ad 88 b0 	      lda	titlescreencolor
     40  214a		       85 08		      sta	COLUPF
     41  214c
     42  214c					      ifconst	bmp_48x2_1_background
     43  214c		       ad f3 b4 	      lda	bmp_48x2_1_background
     44  214f				  -	      else
     45  214f				  -	      lda	titlescreencolor
     46  214f					      endif
     47  214f		       85 f3		      sta	aux4
     48  2151					      ifconst	bmp_48x2_1_PF1
     49  2151		       ad f1 b4 	      lda	bmp_48x2_1_PF1
     50  2154				  -	      else
     51  2154				  -	      lda	#0
     52  2154				  -	      nop
     53  2154					      endif
     54  2154		       85 0e		      sta	PF1
     55  2156
     56  2156					      ifconst	bmp_48x2_1_PF2
     57  2156		       ad f2 b4 	      lda	bmp_48x2_1_PF2
     58  2159				  -	      else
     59  2159				  -	      lda	#0
     60  2159				  -	      nop
     61  2159					      endif
     62  2159		       85 0f		      sta	PF2
     63  215b
     64  215b		       4c e5 b1 	      jmp	draw_bmp_48x2_X
     65  215e
     66  215e				   bmp_48x2_1_values
     67  215e		       c0 b5		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  2160		       c0 b6		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  2162		       c0 b7		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  2164		       c0 b8		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  2166		       c0 b9		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  2168		       c0 ba		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  216a
------- FILE titlescreen/asm/titlescreen.asm
    108  216a					      endif		;mk_48x2_1_on
    109  216a
    110  216a				  -	      ifconst	mk_48x2_2_on
    111  216a				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  216a					      endif		;mk_48x2_2_on
    113  216a
    114  216a				  -	      ifconst	mk_48x2_3_on
    115  216a				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  216a					      endif		;mk_48x2_3_on
    117  216a
    118  216a				  -	      ifconst	mk_48x2_4_on
    119  216a				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  216a					      endif		;mk_48x2_4_on
    121  216a
    122  216a				  -	      ifconst	mk_48x2_5_on
    123  216a				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  216a					      endif		;mk_48x2_5_on
    125  216a
    126  216a				  -	      ifconst	mk_48x2_6_on
    127  216a				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  216a					      endif		;mk_48x2_6_on
    129  216a
    130  216a				  -	      ifconst	mk_48x2_7_on
    131  216a				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  216a					      endif		;mk_48x2_7_on
    133  216a
    134  216a				  -	      ifconst	mk_48x2_8_on
    135  216a				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  216a					      endif		;mk_48x2_8_on
    137  216a
    138  216a					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  216a					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  216a				   draw_bmp_48x1_X
      2  216a
      3  216a		       a9 03		      lda	#3
      4  216c		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  216e		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  2170
      7  2170		       ba		      tsx
      8  2171		       86 f6		      stx	stack1	;save the stack pointer
      9  2173
     10  2173		       20 60 b0 	      jsr	position48
     11  2176
     12  2176		       a9 03		      lda	#3	;2
     13  2178		       85 25		      sta	VDELP0	;3
     14  217a		       85 26		      sta	VDELP1	;3
     15  217c
     16  217c		       a9 01		      lda	#1	;2
     17  217e		       85 0a		      sta	CTRLPF	;3
     18  2180
     19  2180							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2180		       85 2b		      sta	HMCLR
     21  2182
     22  2182		       85 02		      sta	WSYNC
     23  2184
     24  2184		       e6 9c		      inc	temp1	;5
     25  2186		       c6 9c		      dec	temp1	;5
     26  2188		       e6 9c		      inc	temp1	;5
     27  218a		       c6 9c		      dec	temp1	;5
     28  218c		       e6 9c		      inc	temp1	;5
     29  218e		       c6 9c		      dec	temp1	;5
     30  2190		       e6 9c		      inc	temp1	;5
     31  2192		       c6 9c		      dec	temp1	;5
     32  2194		       e6 9c		      inc	temp1	;5
     33  2196		       c6 9c		      dec	temp1	;5
     34  2198
      0  2198					      sleep	5
      1  2198				   .CYCLES    SET	5
      2  2198
      3  2198				  -	      IF	.CYCLES < 2
      4  2198				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2198				  -	      ERR
      6  2198					      ENDIF
      7  2198
      8  2198					      IF	.CYCLES & 1
      9  2198					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2198		       04 00		      nop	0
     11  219a				  -	      ELSE
     12  219a				  -	      bit	VSYNC
     13  219a					      ENDIF
     14  219a				   .CYCLES    SET	.CYCLES - 3
     15  219a					      ENDIF
     16  219a
     17  219a					      REPEAT	.CYCLES / 2
     18  219a		       ea		      nop
     19  219b					      REPEND
     36  219b
     37  219b		       c8		      iny
     38  219c
     39  219c		       4c 9f b1 	      jmp	pf48x1_X_loop_entry
     40  219f
     41  219f				  -	      if	>. != >[.+$2a]
     42  219f				  -	      align	256
     43  219f					      endif
     44  219f
     45  219f				   pf48x1_X_loop_entry
     46  219f				   pf48x1_X_loop
     47  219f		       88		      dey		;2
     48  21a0		       84 f1		      sty	aux2	;3
     49  21a2		       b1 96		      lda	(scorepointers+0),y	;5
     50  21a4		       85 1b		      sta	GRP0	;3
     51  21a6
     52  21a6		       b1 98		      lda	(scorepointers+2),y	;5
     53  21a8		       85 1c		      sta	GRP1	;3
     54  21aa		       b1 9a		      lda	(scorepointers+4),y	;5
     55  21ac		       85 1b		      sta	GRP0	;3
     56  21ae
      0  21ae					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  21ae				   .CYCLES    SET	2
      2  21ae
      3  21ae				  -	      IF	.CYCLES < 2
      4  21ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ae				  -	      ERR
      6  21ae					      ENDIF
      7  21ae
      8  21ae				  -	      IF	.CYCLES & 1
      9  21ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ae				  -	      nop	0
     11  21ae				  -	      ELSE
     12  21ae				  -	      bit	VSYNC
     13  21ae				  -	      ENDIF
     14  21ae				  -.CYCLES    SET	.CYCLES - 3
     15  21ae					      ENDIF
     16  21ae
     17  21ae					      REPEAT	.CYCLES / 2
     18  21ae		       ea		      nop
     19  21af					      REPEND
     58  21af		       a5 f3		      lda	aux4	;3
     59  21b1		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  21b3
     61  21b3		       b3 a0		      lax	(scorepointers+10),y	;5
     62  21b5		       b1 9e		      lda	(scorepointers+8),y	;5
     63  21b7		       85 f7		      sta	stack2	;3
     64  21b9		       b1 9c		      lda	(scorepointers+6),y	;5
     65  21bb		       a4 f7		      ldy	stack2	;3
     66  21bd
     67  21bd		       85 1c		      sta	GRP1	;3
     68  21bf		       84 1b		      sty	GRP0	;3
     69  21c1		       86 1c		      stx	GRP1	;3
     70  21c3		       84 1b		      sty	GRP0	;3
     71  21c5
     72  21c5		       a4 f1		      ldy	aux2	;3
     73  21c7		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  21c9
     75  21c9				   pf48x1_X_codeend
     76  21c9							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  21c9
     78  21c9		       a9 00		      lda	#0
     79  21cb		       85 1b		      sta	GRP0
     80  21cd		       85 1c		      sta	GRP1
     81  21cf		       85 1b		      sta	GRP0
     82  21d1		       85 1c		      sta	GRP1
     83  21d3		       85 1f		      sta	ENABL
     84  21d5		       85 1d		      sta	ENAM0
     85  21d7		       85 25		      sta	VDELP0
     86  21d9		       85 26		      sta	VDELP1
     87  21db		       85 0d		      sta	PF0
     88  21dd		       85 0e		      sta	PF1
     89  21df		       85 0f		      sta	PF2
     90  21e1
     91  21e1		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  21e3		       9a		      txs
     93  21e4		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  21e5					      endif		;mk_48x1_X_on
    141  21e5
    142  21e5					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  21e5					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  21e5				   draw_bmp_48x2_X
      2  21e5
      3  21e5		       a9 00		      lda	#0
      4  21e7		       85 1b		      sta	GRP0
      5  21e9		       85 1c		      sta	GRP1
      6  21eb
      7  21eb		       a9 03		      lda	#3
      8  21ed		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  21ef		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  21f1
     11  21f1		       ba		      tsx
     12  21f2		       86 f6		      stx	stack1	;save the stack pointer
     13  21f4
     14  21f4		       20 60 b0 	      jsr	position48
     15  21f7
     16  21f7		       a9 03		      lda	#3	;2
     17  21f9		       85 25		      sta	VDELP0	;3
     18  21fb		       85 26		      sta	VDELP1	;3
     19  21fd
     20  21fd		       a9 01		      lda	#1	;2
     21  21ff		       85 0a		      sta	CTRLPF	;3
     22  2201
     23  2201							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2201		       85 2b		      sta	HMCLR
     25  2203		       85 02		      sta	WSYNC
     26  2205
     27  2205
     28  2205							;sleep (63)		;63
     29  2205		       e6 9c		      inc	temp1
     30  2207		       c6 9c		      dec	temp1
     31  2209		       e6 9c		      inc	temp1
     32  220b		       c6 9c		      dec	temp1
     33  220d		       e6 9c		      inc	temp1
     34  220f		       c6 9c		      dec	temp1
     35  2211		       e6 9c		      inc	temp1
     36  2213		       c6 9c		      dec	temp1
     37  2215		       e6 9c		      inc	temp1
     38  2217		       c6 9c		      dec	temp1
     39  2219		       e6 9c		      inc	temp1
     40  221b		       c6 9c		      dec	temp1
      0  221d					      sleep	3
      1  221d				   .CYCLES    SET	3
      2  221d
      3  221d				  -	      IF	.CYCLES < 2
      4  221d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  221d				  -	      ERR
      6  221d					      ENDIF
      7  221d
      8  221d					      IF	.CYCLES & 1
      9  221d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  221d		       04 00		      nop	0
     11  221f				  -	      ELSE
     12  221f				  -	      bit	VSYNC
     13  221f					      ENDIF
     14  221f				   .CYCLES    SET	.CYCLES - 3
     15  221f					      ENDIF
     16  221f
     17  221f				  -	      REPEAT	.CYCLES / 2
     18  221f				  -	      nop
     19  221f					      REPEND
     42  221f
     43  221f		       a5 f3		      lda	aux4	;3
     44  2221		       85 08		      sta	COLUPF	;3
     45  2223
     46  2223		       4c 26 b2 	      jmp	pf48x2_X_loop	;3
     47  2226
     48  2226				  -	      if	>. != >[.+$52]
     49  2226				  -	      align	256
     50  2226					      endif
     51  2226
     52  2226				   pf48x2_X_loop
     53  2226
     54  2226		       b1 96		      lda	(scorepointers+0),y	;5
     55  2228		       85 1b		      sta	GRP0	;3
     56  222a		       b1 98		      lda	(scorepointers+2),y	;5
     57  222c		       85 1c		      sta	GRP1	;3
     58  222e		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2230		       85 1b		      sta	GRP0	;3
     60  2232
     61  2232		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2234		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2236		       85 f7		      sta	stack2	;3
     64  2238		       b1 9c		      lda	(scorepointers+6),y	;5
     65  223a		       a4 f7		      ldy	stack2	;3
     66  223c
     67  223c		       85 1c		      sta	GRP1	;3
     68  223e		       84 1b		      sty	GRP0	;3
     69  2240		       86 1c		      stx	GRP1	;3
     70  2242		       84 1b		      sty	GRP0	;3
     71  2244
     72  2244		       a4 f1		      ldy	aux2	;3
     73  2246
     74  2246		       b1 f4		      lda	(aux5),y	;5
     75  2248		       85 91		      sta	missile0y	;3
     76  224a
      0  224a					      sleep	3
      1  224a				   .CYCLES    SET	3
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c				  -	      REPEAT	.CYCLES / 2
     18  224c				  -	      nop
     19  224c					      REPEND
     78  224c
     79  224c		       c6 f1		      dec	aux2	;5
     80  224e
     81  224e
     82  224e		       b1 96		      lda	(scorepointers+0),y	;5
     83  2250		       85 1b		      sta	GRP0	;3
     84  2252		       b1 98		      lda	(scorepointers+2),y	;5
     85  2254		       85 1c		      sta	GRP1	;3
     86  2256		       b1 9a		      lda	(scorepointers+4),y	;5
     87  2258		       85 1b		      sta	GRP0	;3
     88  225a
     89  225a		       b3 a0		      lax	(scorepointers+10),y	;5
     90  225c		       b1 9e		      lda	(scorepointers+8),y	;5
     91  225e		       85 f7		      sta	stack2	;3
     92  2260		       b1 9c		      lda	(scorepointers+6),y	;5
     93  2262		       a4 f7		      ldy	stack2	;3
     94  2264
     95  2264		       85 1c		      sta	GRP1	;3
     96  2266		       84 1b		      sty	GRP0	;3
     97  2268		       86 1c		      stx	GRP1	;3
     98  226a		       84 1b		      sty	GRP0	;3
     99  226c
      0  226c					      sleep	4
      1  226c				   .CYCLES    SET	4
      2  226c
      3  226c				  -	      IF	.CYCLES < 2
      4  226c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226c				  -	      ERR
      6  226c					      ENDIF
      7  226c
      8  226c				  -	      IF	.CYCLES & 1
      9  226c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226c				  -	      nop	0
     11  226c				  -	      ELSE
     12  226c				  -	      bit	VSYNC
     13  226c				  -	      ENDIF
     14  226c				  -.CYCLES    SET	.CYCLES - 3
     15  226c					      ENDIF
     16  226c
     17  226c					      REPEAT	.CYCLES / 2
     18  226c		       ea		      nop
     17  226c					      REPEND
     18  226d		       ea		      nop
     19  226e					      REPEND
    101  226e
    102  226e		       a5 91		      lda	missile0y
    103  2270		       85 07		      sta	COLUP1
    104  2272		       85 06		      sta	COLUP0
    105  2274
    106  2274		       a4 f1		      ldy	aux2	;3
    107  2276		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  2278
    109  2278
    110  2278				   pf48x2_X_codeend
    111  2278							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  2278
    113  2278		       a9 00		      lda	#0
    114  227a		       85 1b		      sta	GRP0
    115  227c		       85 1c		      sta	GRP1
    116  227e		       85 1b		      sta	GRP0
    117  2280		       85 1c		      sta	GRP1
    118  2282		       85 25		      sta	VDELP0
    119  2284		       85 26		      sta	VDELP1
    120  2286		       85 0d		      sta	PF0
    121  2288		       85 0e		      sta	PF1
    122  228a		       85 0f		      sta	PF2
    123  228c
    124  228c		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  228e		       9a		      txs
    126  228f		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  2290					      endif		;mk_48x2_X_on
    145  2290
    146  2290
    147  2290				  -	      ifconst	mk_96x2_1_on
    148  2290				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  2290					      endif		;mk_96x2_1_on
    150  2290
    151  2290				  -	      ifconst	mk_96x2_2_on
    152  2290				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2290					      endif		;mk_96x2_2_on
    154  2290
    155  2290				  -	      ifconst	mk_96x2_3_on
    156  2290				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2290					      endif		;mk_96x2_3_on
    158  2290
    159  2290				  -	      ifconst	mk_96x2_4_on
    160  2290				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2290					      endif		;mk_96x2_4_on
    162  2290
    163  2290				  -	      ifconst	mk_96x2_5_on
    164  2290				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2290					      endif		;mk_96x2_5_on
    166  2290
    167  2290				  -	      ifconst	mk_96x2_6_on
    168  2290				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2290					      endif		;mk_96x2_6_on
    170  2290
    171  2290				  -	      ifconst	mk_96x2_7_on
    172  2290				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2290					      endif		;mk_96x2_7_on
    174  2290
    175  2290				  -	      ifconst	mk_96x2_8_on
    176  2290				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2290					      endif		;mk_96x2_8_on
    178  2290
    179  2290				  -	      ifconst	mk_score_on
    180  2290				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  2290					      endif		;mk_score_on
    182  2290
    183  2290				  -	      ifconst	mk_gameselect_on
    184  2290				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  2290					      endif		;mk_gameselect_on
    186  2290
    187  2290				   PFWAIT
    188  2290		       ad 84 02 	      lda	INTIM
    189  2293		       d0 fb		      bne	PFWAIT
    190  2295		       85 02		      sta	WSYNC
    191  2297
    192  2297				   OVERSCAN
    193  2297					      ifnconst	overscan_time
    194  2297		       a9 a2		      lda	#34+128
    195  2299				  -	      else
    196  2299				  -	      lda	#overscan_time+128-5
    197  2299					      endif
    198  2299		       8d 96 02 	      sta	TIM64T
    199  229c
    200  229c							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  229c				  -	      ifconst	player9height
    202  229c				  -	      ldy	#8
    203  229c				  -	      lda	#0
    204  229c				  -	      sta	player0height
    205  229c				  -.playerheightfixloop
    206  229c				  -	      sta	player1height,y
    207  229c				  -	      ifconst	_NUSIZ1
    208  229c				  -	      sta	_NUSIZ1,y
    209  229c				  -	      endif
    210  229c				  -	      dey
    211  229c				  -	      bpl	.playerheightfixloop
    212  229c					      endif
    213  229c
    214  229c		       a9 c2		      lda	#%11000010
    215  229e		       85 02		      sta	WSYNC
    216  22a0		       85 01		      sta	VBLANK
      0  22a2					      RETURN
      1  22a2				  -	      ifnconst	bankswitch
      2  22a2				  -	      rts
      3  22a2					      else
      4  22a2		       4c dd ff 	      jmp	BS_return
      5  22a5					      endif
    218  22a5
    219  22a5				  -	      ifconst	mk_48x1_1_on
    220  22a5				  -	      include	"titlescreen/48x1_1_image.asm"
    221  22a5					      endif
    222  22a5					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  22a5					      include	"titlescreen/48x1_2_image.asm"
      1  22a5
      2  22a5
      3  22a5							; *** if you want to modify the bitmap color on the fly, just dim a
      4  22a5							; *** variable in bB called "bmp_48x1_2_color", and use it to set the
      5  22a5							; *** color.
      6  22a5
      7  22a5
      8  22a5							;*** this is the height of the displayed data
      9  22a5		       00 14	   bmp_48x1_2_window =	20
     10  22a5
     11  22a5							;*** this is the height of the bitmap data
     12  22a5		       00 14	   bmp_48x1_2_height =	20
     13  22a5
     14  22a5				  -	      ifnconst	bmp_48x1_2_color
     15  22a5				  -bmp_48x1_2_color
     16  22a5					      endif
     17  22a5		       0f		      .byte.b	$0f
     18  22a6
     19  22a6				  -	      ifnconst	bmp_48x1_2_PF1
     20  22a6				  -bmp_48x1_2_PF1
     21  22a6					      endif
     22  22a6		       00		      BYTE.b	%00000000
     23  22a7				  -	      ifnconst	bmp_48x1_2_PF2
     24  22a7				  -bmp_48x1_2_PF2
     25  22a7					      endif
     26  22a7		       00		      BYTE.b	%00000000
     27  22a8				  -	      ifnconst	bmp_48x1_2_background
     28  22a8				  -bmp_48x1_2_background
     29  22a8					      endif
     30  22a8		       00		      BYTE.b	$00
     31  22a9
     32  22a9				  -	      if	>. != >[.+bmp_48x1_2_height]
     33  22a9				  -	      align	256
     34  22a9					      endif
     35  22a9
     36  22a9				   bmp_48x1_2_00
     37  22a9		       1f		      BYTE.b	%00011111
     38  22aa		       7f		      BYTE.b	%01111111
     39  22ab		       e0		      BYTE.b	%11100000
     40  22ac		       c0		      BYTE.b	%11000000
     41  22ad		       c0		      BYTE.b	%11000000
     42  22ae		       71		      BYTE.b	%01110001
     43  22af		       3f		      BYTE.b	%00111111
     44  22b0		       1f		      BYTE.b	%00011111
     45  22b1		       1e		      BYTE.b	%00011110
     46  22b2		       0c		      BYTE.b	%00001100
     47  22b3		       0f		      BYTE.b	%00001111
     48  22b4		       1f		      BYTE.b	%00011111
     49  22b5		       1c		      BYTE.b	%00011100
     50  22b6		       18		      BYTE.b	%00011000
     51  22b7		       18		      BYTE.b	%00011000
     52  22b8		       1c		      BYTE.b	%00011100
     53  22b9		       1c		      BYTE.b	%00011100
     54  22ba		       0e		      BYTE.b	%00001110
     55  22bb		       07		      BYTE.b	%00000111
     56  22bc		       03		      BYTE.b	%00000011
     57  22bd
     58  22bd
     59  22bd				  -	      if	>. != >[.+bmp_48x1_2_height]
     60  22bd				  -	      align	256
     61  22bd					      endif
     62  22bd
     63  22bd				   bmp_48x1_2_01
     64  22bd		       80		      BYTE.b	%10000000
     65  22be		       e0		      BYTE.b	%11100000
     66  22bf		       70		      BYTE.b	%01110000
     67  22c0		       18		      BYTE.b	%00011000
     68  22c1		       38		      BYTE.b	%00111000
     69  22c2		       f8		      BYTE.b	%11111000
     70  22c3		       f0		      BYTE.b	%11110000
     71  22c4		       e1		      BYTE.b	%11100001
     72  22c5		       03		      BYTE.b	%00000011
     73  22c6		       03		      BYTE.b	%00000011
     74  22c7		       c3		      BYTE.b	%11000011
     75  22c8		       f3		      BYTE.b	%11110011
     76  22c9		       73		      BYTE.b	%01110011
     77  22ca		       3b		      BYTE.b	%00111011
     78  22cb		       39		      BYTE.b	%00111001
     79  22cc		       19		      BYTE.b	%00011001
     80  22cd		       18		      BYTE.b	%00011000
     81  22ce		       3e		      BYTE.b	%00111110
     82  22cf		       ff		      BYTE.b	%11111111
     83  22d0		       e3		      BYTE.b	%11100011
     84  22d1
     85  22d1
     86  22d1				  -	      if	>. != >[.+bmp_48x1_2_height]
     87  22d1				  -	      align	256
     88  22d1					      endif
     89  22d1
     90  22d1				   bmp_48x1_2_02
     91  22d1		       00		      BYTE.b	%00000000
     92  22d2		       00		      BYTE.b	%00000000
     93  22d3		       00		      BYTE.b	%00000000
     94  22d4		       00		      BYTE.b	%00000000
     95  22d5		       00		      BYTE.b	%00000000
     96  22d6		       00		      BYTE.b	%00000000
     97  22d7		       f8		      BYTE.b	%11111000
     98  22d8		       fe		      BYTE.b	%11111110
     99  22d9		       c7		      BYTE.b	%11000111
    100  22da		       81		      BYTE.b	%10000001
    101  22db		       00		      BYTE.b	%00000000
    102  22dc		       e0		      BYTE.b	%11100000
    103  22dd		       f8		      BYTE.b	%11111000
    104  22de		       9e		      BYTE.b	%10011110
    105  22df		       87		      BYTE.b	%10000111
    106  22e0		       c3		      BYTE.b	%11000011
    107  22e1		       e1		      BYTE.b	%11100001
    108  22e2		       71		      BYTE.b	%01110001
    109  22e3		       3f		      BYTE.b	%00111111
    110  22e4		       0f		      BYTE.b	%00001111
    111  22e5
    112  22e5
    113  22e5
    114  22e5
    115  22e5				  -	      if	>. != >[.+bmp_48x1_2_height]
    116  22e5				  -	      align	256
    117  22e5					      endif
    118  22e5
    119  22e5				   bmp_48x1_2_03
    120  22e5		       00		      BYTE.b	%00000000
    121  22e6		       00		      BYTE.b	%00000000
    122  22e7		       00		      BYTE.b	%00000000
    123  22e8		       00		      BYTE.b	%00000000
    124  22e9		       00		      BYTE.b	%00000000
    125  22ea		       00		      BYTE.b	%00000000
    126  22eb		       3c		      BYTE.b	%00111100
    127  22ec		       7e		      BYTE.b	%01111110
    128  22ed		       63		      BYTE.b	%01100011
    129  22ee		       e1		      BYTE.b	%11100001
    130  22ef		       e0		      BYTE.b	%11100000
    131  22f0		       60		      BYTE.b	%01100000
    132  22f1		       70		      BYTE.b	%01110000
    133  22f2		       70		      BYTE.b	%01110000
    134  22f3		       30		      BYTE.b	%00110000
    135  22f4		       b8		      BYTE.b	%10111000
    136  22f5		       9c		      BYTE.b	%10011100
    137  22f6		       8e		      BYTE.b	%10001110
    138  22f7		       87		      BYTE.b	%10000111
    139  22f8		       03		      BYTE.b	%00000011
    140  22f9
    141  22f9
    142  22f9
    143  22f9					      if	>. != >[.+bmp_48x1_2_height]
    144  2300		       00 00 00 00*	      align	256
    145  2300					      endif
    146  2300
    147  2300				   bmp_48x1_2_04
    148  2300		       00		      BYTE.b	%00000000
    149  2301		       00		      BYTE.b	%00000000
    150  2302		       00		      BYTE.b	%00000000
    151  2303		       00		      BYTE.b	%00000000
    152  2304		       00		      BYTE.b	%00000000
    153  2305		       00		      BYTE.b	%00000000
    154  2306		       e6		      BYTE.b	%11100110
    155  2307		       f6		      BYTE.b	%11110110
    156  2308		       de		      BYTE.b	%11011110
    157  2309		       ef		      BYTE.b	%11101111
    158  230a		       e3		      BYTE.b	%11100011
    159  230b		       e3		      BYTE.b	%11100011
    160  230c		       63		      BYTE.b	%01100011
    161  230d		       73		      BYTE.b	%01110011
    162  230e		       31		      BYTE.b	%00110001
    163  230f		       31		      BYTE.b	%00110001
    164  2310		       31		      BYTE.b	%00110001
    165  2311		       7b		      BYTE.b	%01111011
    166  2312		       db		      BYTE.b	%11011011
    167  2313		       d9		      BYTE.b	%11011001
    168  2314
    169  2314
    170  2314
    171  2314
    172  2314				  -	      if	>. != >[.+bmp_48x1_2_height]
    173  2314				  -	      align	256
    174  2314					      endif
    175  2314
    176  2314				   bmp_48x1_2_05
    177  2314		       00		      BYTE.b	%00000000
    178  2315		       00		      BYTE.b	%00000000
    179  2316		       00		      BYTE.b	%00000000
    180  2317		       00		      BYTE.b	%00000000
    181  2318		       00		      BYTE.b	%00000000
    182  2319		       00		      BYTE.b	%00000000
    183  231a		       00		      BYTE.b	%00000000
    184  231b		       00		      BYTE.b	%00000000
    185  231c		       00		      BYTE.b	%00000000
    186  231d		       00		      BYTE.b	%00000000
    187  231e		       00		      BYTE.b	%00000000
    188  231f		       00		      BYTE.b	%00000000
    189  2320		       80		      BYTE.b	%10000000
    190  2321		       c0		      BYTE.b	%11000000
    191  2322		       c0		      BYTE.b	%11000000
    192  2323		       e0		      BYTE.b	%11100000
    193  2324		       b7		      BYTE.b	%10110111
    194  2325		       de		      BYTE.b	%11011110
    195  2326		       ce		      BYTE.b	%11001110
    196  2327		       c6		      BYTE.b	%11000110
    197  2328
    198  2328
    199  2328
    200  2328
    201  2328
------- FILE titlescreen/asm/titlescreen.asm
    224  2328					      endif
    225  2328					      ifconst	mk_48x1_3_on
------- FILE titlescreen/48x1_3_image.asm LEVEL 3 PASS 2
      0  2328					      include	"titlescreen/48x1_3_image.asm"
      1  2328
      2  2328
      3  2328							; *** if you want to modify the bitmap color on the fly, just dim a
      4  2328							; *** variable in bB called "bmp_48x1_3_color", and use it to set the
      5  2328							; *** color.
      6  2328
      7  2328
      8  2328							;*** this is the height of the displayed data
      9  2328		       00 0b	   bmp_48x1_3_window =	11
     10  2328
     11  2328							;*** this is the height of the bitmap data
     12  2328		       00 0b	   bmp_48x1_3_height =	11
     13  2328
     14  2328				  -	      ifnconst	bmp_48x1_3_color
     15  2328				  -bmp_48x1_3_color
     16  2328					      endif
     17  2328		       0f		      .byte.b	$0f
     18  2329
     19  2329				  -	      ifnconst	bmp_48x1_3_PF1
     20  2329				  -bmp_48x1_3_PF1
     21  2329					      endif
     22  2329		       00		      BYTE.b	%00000000
     23  232a				  -	      ifnconst	bmp_48x1_3_PF2
     24  232a				  -bmp_48x1_3_PF2
     25  232a					      endif
     26  232a		       00		      BYTE.b	%00000000
     27  232b				  -	      ifnconst	bmp_48x1_3_background
     28  232b				  -bmp_48x1_3_background
     29  232b					      endif
     30  232b		       00		      BYTE.b	$00
     31  232c
     32  232c
     33  232c				  -	      if	>. != >[.+bmp_48x1_3_height]
     34  232c				  -	      align	256
     35  232c					      endif
     36  232c
     37  232c				   bmp_48x1_3_00
     38  232c
     39  232c		       00		      BYTE.b	%00000000
     40  232d		       00		      BYTE.b	%00000000
     41  232e		       00		      BYTE.b	%00000000
     42  232f		       00		      BYTE.b	%00000000
     43  2330		       00		      BYTE.b	%00000000
     44  2331		       00		      BYTE.b	%00000000
     45  2332		       04		      BYTE.b	%00000100
     46  2333		       04		      BYTE.b	%00000100
     47  2334		       07		      BYTE.b	%00000111
     48  2335		       05		      BYTE.b	%00000101
     49  2336		       07		      BYTE.b	%00000111
     50  2337
     51  2337				  -	      if	>. != >[.+bmp_48x1_3_height]
     52  2337				  -	      align	256
     53  2337					      endif
     54  2337
     55  2337				   bmp_48x1_3_01
     56  2337
     57  2337		       4e		      BYTE.b	%01001110
     58  2338		       4a		      BYTE.b	%01001010
     59  2339		       4a		      BYTE.b	%01001010
     60  233a		       4a		      BYTE.b	%01001010
     61  233b		       ee		      BYTE.b	%11101110
     62  233c		       00		      BYTE.b	%00000000
     63  233d		       57		      BYTE.b	%01010111
     64  233e		       64		      BYTE.b	%01100100
     65  233f		       76		      BYTE.b	%01110110
     66  2340		       54		      BYTE.b	%01010100
     67  2341		       77		      BYTE.b	%01110111
     68  2342
     69  2342				  -	      if	>. != >[.+bmp_48x1_3_height]
     70  2342				  -	      align	256
     71  2342					      endif
     72  2342
     73  2342				   bmp_48x1_3_02
     74  2342
     75  2342		       0e		      BYTE.b	%00001110
     76  2343		       02		      BYTE.b	%00000010
     77  2344		       0e		      BYTE.b	%00001110
     78  2345		       08		      BYTE.b	%00001000
     79  2346		       0e		      BYTE.b	%00001110
     80  2347		       00		      BYTE.b	%00000000
     81  2348		       77		      BYTE.b	%01110111
     82  2349		       11		      BYTE.b	%00010001
     83  234a		       77		      BYTE.b	%01110111
     84  234b		       44		      BYTE.b	%01000100
     85  234c		       77		      BYTE.b	%01110111
     86  234d
     87  234d
     88  234d
     89  234d				  -	      if	>. != >[.+bmp_48x1_3_height]
     90  234d				  -	      align	256
     91  234d					      endif
     92  234d
     93  234d				   bmp_48x1_3_03
     94  234d
     95  234d		       4a		      BYTE.b	%01001010
     96  234e		       4a		      BYTE.b	%01001010
     97  234f		       4e		      BYTE.b	%01001110
     98  2350		       4a		      BYTE.b	%01001010
     99  2351		       ee		      BYTE.b	%11101110
    100  2352		       00		      BYTE.b	%00000000
    101  2353		       04		      BYTE.b	%00000100
    102  2354		       04		      BYTE.b	%00000100
    103  2355		       06		      BYTE.b	%00000110
    104  2356		       04		      BYTE.b	%00000100
    105  2357		       07		      BYTE.b	%00000111
    106  2358
    107  2358				  -	      if	>. != >[.+bmp_48x1_3_height]
    108  2358				  -	      align	256
    109  2358					      endif
    110  2358
    111  2358				   bmp_48x1_3_04
    112  2358
    113  2358		       a4		      BYTE.b	%10100100
    114  2359		       c4		      BYTE.b	%11000100
    115  235a		       e4		      BYTE.b	%11100100
    116  235b		       a4		      BYTE.b	%10100100
    117  235c		       ee		      BYTE.b	%11101110
    118  235d		       00		      BYTE.b	%00000000
    119  235e		       55		      BYTE.b	%01010101
    120  235f		       59		      BYTE.b	%01011001
    121  2360		       5d		      BYTE.b	%01011101
    122  2361		       55		      BYTE.b	%01010101
    123  2362		       5d		      BYTE.b	%01011101
    124  2363
    125  2363
    126  2363				  -	      if	>. != >[.+bmp_48x1_3_height]
    127  2363				  -	      align	256
    128  2363					      endif
    129  2363
    130  2363				   bmp_48x1_3_05
    131  2363
    132  2363		       00		      BYTE.b	%00000000
    133  2364		       00		      BYTE.b	%00000000
    134  2365		       00		      BYTE.b	%00000000
    135  2366		       00		      BYTE.b	%00000000
    136  2367		       00		      BYTE.b	%00000000
    137  2368		       00		      BYTE.b	%00000000
    138  2369		       c0		      BYTE.b	%11000000
    139  236a		       00		      BYTE.b	%00000000
    140  236b		       80		      BYTE.b	%10000000
    141  236c		       00		      BYTE.b	%00000000
    142  236d		       c0		      BYTE.b	%11000000
    143  236e
    144  236e
------- FILE titlescreen/asm/titlescreen.asm
    227  236e					      endif
    228  236e				  -	      ifconst	mk_48x1_4_on
    229  236e				  -	      include	"titlescreen/48x1_4_image.asm"
    230  236e					      endif
    231  236e				  -	      ifconst	mk_48x1_5_on
    232  236e				  -	      include	"titlescreen/48x1_5_image.asm"
    233  236e					      endif
    234  236e				  -	      ifconst	mk_48x1_6_on
    235  236e				  -	      include	"titlescreen/48x1_6_image.asm"
    236  236e					      endif
    237  236e				  -	      ifconst	mk_48x1_7_on
    238  236e				  -	      include	"titlescreen/48x1_7_image.asm"
    239  236e					      endif
    240  236e				  -	      ifconst	mk_48x1_8_on
    241  236e				  -	      include	"titlescreen/48x1_8_image.asm"
    242  236e					      endif
    243  236e
    244  236e
    245  236e					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  236e					      include	"titlescreen/48x2_1_image.asm"
      1  236e
      2  236e							; *** if you want to modify the bitmap color on the fly, just dim a
      3  236e							; *** variable in bB called "bmp_48x2_1_color", and use it to set the
      4  236e							; *** color.
      5  236e
      6  236e
      7  236e							;*** this is the height of the displayed data
      8  236e		       00 30	   bmp_48x2_1_window =	48
      9  236e
     10  236e							;*** this is the height of the bitmap data
     11  236e		       00 f0	   bmp_48x2_1_height =	240
     12  236e
     13  236e					      if	>. != >[.+(bmp_48x2_1_height)]
     14  2400		       00 00 00 00*	      align	256
     15  2400					      endif
     16  2400		       00		      BYTE.b	0
     17  2401
     18  2401							;*** this is the color of each line in the bitmap data
     19  2401				   bmp_48x2_1_colors
     20  2401							; 240 color lines. Yes, this is a bit wasteful, but
     21  2401							; the 48x2 kernel works with color lists.
     22  2401		       0f		      BYTE.b	$0f
     23  2402		       0f		      BYTE.b	$0f
     24  2403		       0f		      BYTE.b	$0f
     25  2404		       0f		      BYTE.b	$0f
     26  2405		       0f		      BYTE.b	$0f
     27  2406		       0f		      BYTE.b	$0f
     28  2407		       0f		      BYTE.b	$0f
     29  2408		       0f		      BYTE.b	$0f
     30  2409		       0f		      BYTE.b	$0f
     31  240a		       0f		      BYTE.b	$0f
     32  240b		       0f		      BYTE.b	$0f
     33  240c		       0f		      BYTE.b	$0f
     34  240d		       0f		      BYTE.b	$0f
     35  240e		       0f		      BYTE.b	$0f
     36  240f		       0f		      BYTE.b	$0f
     37  2410		       0f		      BYTE.b	$0f
     38  2411		       0f		      BYTE.b	$0f
     39  2412		       0f		      BYTE.b	$0f
     40  2413		       0f		      BYTE.b	$0f
     41  2414		       0f		      BYTE.b	$0f
     42  2415		       0f		      BYTE.b	$0f
     43  2416		       0f		      BYTE.b	$0f
     44  2417		       0f		      BYTE.b	$0f
     45  2418		       0f		      BYTE.b	$0f
     46  2419		       0f		      BYTE.b	$0f
     47  241a		       0f		      BYTE.b	$0f
     48  241b		       0f		      BYTE.b	$0f
     49  241c		       0f		      BYTE.b	$0f
     50  241d		       0f		      BYTE.b	$0f
     51  241e		       0f		      BYTE.b	$0f
     52  241f		       0f		      BYTE.b	$0f
     53  2420		       0f		      BYTE.b	$0f
     54  2421		       0f		      BYTE.b	$0f
     55  2422		       0f		      BYTE.b	$0f
     56  2423		       0f		      BYTE.b	$0f
     57  2424		       0f		      BYTE.b	$0f
     58  2425		       0f		      BYTE.b	$0f
     59  2426		       0f		      BYTE.b	$0f
     60  2427		       0f		      BYTE.b	$0f
     61  2428		       0f		      BYTE.b	$0f
     62  2429		       0f		      BYTE.b	$0f
     63  242a		       0f		      BYTE.b	$0f
     64  242b		       0f		      BYTE.b	$0f
     65  242c		       0f		      BYTE.b	$0f
     66  242d		       0f		      BYTE.b	$0f
     67  242e		       0f		      BYTE.b	$0f
     68  242f		       0f		      BYTE.b	$0f
     69  2430		       0f		      BYTE.b	$0f
     70  2431		       0f		      BYTE.b	$0f
     71  2432		       0f		      BYTE.b	$0f
     72  2433		       0f		      BYTE.b	$0f
     73  2434		       0f		      BYTE.b	$0f
     74  2435		       0f		      BYTE.b	$0f
     75  2436		       0f		      BYTE.b	$0f
     76  2437		       0f		      BYTE.b	$0f
     77  2438		       0f		      BYTE.b	$0f
     78  2439		       0f		      BYTE.b	$0f
     79  243a		       0f		      BYTE.b	$0f
     80  243b		       0f		      BYTE.b	$0f
     81  243c		       0f		      BYTE.b	$0f
     82  243d		       0f		      BYTE.b	$0f
     83  243e		       0f		      BYTE.b	$0f
     84  243f		       0f		      BYTE.b	$0f
     85  2440		       0f		      BYTE.b	$0f
     86  2441		       0f		      BYTE.b	$0f
     87  2442		       0f		      BYTE.b	$0f
     88  2443		       0f		      BYTE.b	$0f
     89  2444		       0f		      BYTE.b	$0f
     90  2445		       0f		      BYTE.b	$0f
     91  2446		       0f		      BYTE.b	$0f
     92  2447		       0f		      BYTE.b	$0f
     93  2448		       0f		      BYTE.b	$0f
     94  2449		       0f		      BYTE.b	$0f
     95  244a		       0f		      BYTE.b	$0f
     96  244b		       0f		      BYTE.b	$0f
     97  244c		       0f		      BYTE.b	$0f
     98  244d		       0f		      BYTE.b	$0f
     99  244e		       0f		      BYTE.b	$0f
    100  244f		       0f		      BYTE.b	$0f
    101  2450		       0f		      BYTE.b	$0f
    102  2451		       0f		      BYTE.b	$0f
    103  2452		       0f		      BYTE.b	$0f
    104  2453		       0f		      BYTE.b	$0f
    105  2454		       0f		      BYTE.b	$0f
    106  2455		       0f		      BYTE.b	$0f
    107  2456		       0f		      BYTE.b	$0f
    108  2457		       0f		      BYTE.b	$0f
    109  2458		       0f		      BYTE.b	$0f
    110  2459		       0f		      BYTE.b	$0f
    111  245a		       0f		      BYTE.b	$0f
    112  245b		       0f		      BYTE.b	$0f
    113  245c		       0f		      BYTE.b	$0f
    114  245d		       0f		      BYTE.b	$0f
    115  245e		       0f		      BYTE.b	$0f
    116  245f		       0f		      BYTE.b	$0f
    117  2460		       0f		      BYTE.b	$0f
    118  2461		       0f		      BYTE.b	$0f
    119  2462		       0f		      BYTE.b	$0f
    120  2463		       0f		      BYTE.b	$0f
    121  2464		       0f		      BYTE.b	$0f
    122  2465		       0f		      BYTE.b	$0f
    123  2466		       0f		      BYTE.b	$0f
    124  2467		       0f		      BYTE.b	$0f
    125  2468		       0f		      BYTE.b	$0f
    126  2469		       0f		      BYTE.b	$0f
    127  246a		       0f		      BYTE.b	$0f
    128  246b		       0f		      BYTE.b	$0f
    129  246c		       0f		      BYTE.b	$0f
    130  246d		       0f		      BYTE.b	$0f
    131  246e		       0f		      BYTE.b	$0f
    132  246f		       0f		      BYTE.b	$0f
    133  2470		       0f		      BYTE.b	$0f
    134  2471		       0f		      BYTE.b	$0f
    135  2472		       0f		      BYTE.b	$0f
    136  2473		       0f		      BYTE.b	$0f
    137  2474		       0f		      BYTE.b	$0f
    138  2475		       0f		      BYTE.b	$0f
    139  2476		       0f		      BYTE.b	$0f
    140  2477		       0f		      BYTE.b	$0f
    141  2478		       0f		      BYTE.b	$0f
    142  2479		       0f		      BYTE.b	$0f
    143  247a		       0f		      BYTE.b	$0f
    144  247b		       0f		      BYTE.b	$0f
    145  247c		       0f		      BYTE.b	$0f
    146  247d		       0f		      BYTE.b	$0f
    147  247e		       0f		      BYTE.b	$0f
    148  247f		       0f		      BYTE.b	$0f
    149  2480		       0f		      BYTE.b	$0f
    150  2481		       0f		      BYTE.b	$0f
    151  2482		       0f		      BYTE.b	$0f
    152  2483		       0f		      BYTE.b	$0f
    153  2484		       0f		      BYTE.b	$0f
    154  2485		       0f		      BYTE.b	$0f
    155  2486		       0f		      BYTE.b	$0f
    156  2487		       0f		      BYTE.b	$0f
    157  2488		       0f		      BYTE.b	$0f
    158  2489		       0f		      BYTE.b	$0f
    159  248a		       0f		      BYTE.b	$0f
    160  248b		       0f		      BYTE.b	$0f
    161  248c		       0f		      BYTE.b	$0f
    162  248d		       0f		      BYTE.b	$0f
    163  248e		       0f		      BYTE.b	$0f
    164  248f		       0f		      BYTE.b	$0f
    165  2490		       0f		      BYTE.b	$0f
    166  2491		       0f		      BYTE.b	$0f
    167  2492		       0f		      BYTE.b	$0f
    168  2493		       0f		      BYTE.b	$0f
    169  2494		       0f		      BYTE.b	$0f
    170  2495		       0f		      BYTE.b	$0f
    171  2496		       0f		      BYTE.b	$0f
    172  2497		       0f		      BYTE.b	$0f
    173  2498		       0f		      BYTE.b	$0f
    174  2499		       0f		      BYTE.b	$0f
    175  249a		       0f		      BYTE.b	$0f
    176  249b		       0f		      BYTE.b	$0f
    177  249c		       0f		      BYTE.b	$0f
    178  249d		       0f		      BYTE.b	$0f
    179  249e		       0f		      BYTE.b	$0f
    180  249f		       0f		      BYTE.b	$0f
    181  24a0		       0f		      BYTE.b	$0f
    182  24a1		       0f		      BYTE.b	$0f
    183  24a2		       0f		      BYTE.b	$0f
    184  24a3		       0f		      BYTE.b	$0f
    185  24a4		       0f		      BYTE.b	$0f
    186  24a5		       0f		      BYTE.b	$0f
    187  24a6		       0f		      BYTE.b	$0f
    188  24a7		       0f		      BYTE.b	$0f
    189  24a8		       0f		      BYTE.b	$0f
    190  24a9		       0f		      BYTE.b	$0f
    191  24aa		       0f		      BYTE.b	$0f
    192  24ab		       0f		      BYTE.b	$0f
    193  24ac		       0f		      BYTE.b	$0f
    194  24ad		       0f		      BYTE.b	$0f
    195  24ae		       0f		      BYTE.b	$0f
    196  24af		       0f		      BYTE.b	$0f
    197  24b0		       0f		      BYTE.b	$0f
    198  24b1		       0f		      BYTE.b	$0f
    199  24b2		       0f		      BYTE.b	$0f
    200  24b3		       0f		      BYTE.b	$0f
    201  24b4		       0f		      BYTE.b	$0f
    202  24b5		       0f		      BYTE.b	$0f
    203  24b6		       0f		      BYTE.b	$0f
    204  24b7		       0f		      BYTE.b	$0f
    205  24b8		       0f		      BYTE.b	$0f
    206  24b9		       0f		      BYTE.b	$0f
    207  24ba		       0f		      BYTE.b	$0f
    208  24bb		       0f		      BYTE.b	$0f
    209  24bc		       0f		      BYTE.b	$0f
    210  24bd		       0f		      BYTE.b	$0f
    211  24be		       0f		      BYTE.b	$0f
    212  24bf		       0f		      BYTE.b	$0f
    213  24c0		       0f		      BYTE.b	$0f
    214  24c1		       0f		      BYTE.b	$0f
    215  24c2		       0f		      BYTE.b	$0f
    216  24c3		       0f		      BYTE.b	$0f
    217  24c4		       0f		      BYTE.b	$0f
    218  24c5		       0f		      BYTE.b	$0f
    219  24c6		       0f		      BYTE.b	$0f
    220  24c7		       0f		      BYTE.b	$0f
    221  24c8		       0f		      BYTE.b	$0f
    222  24c9		       0f		      BYTE.b	$0f
    223  24ca		       0f		      BYTE.b	$0f
    224  24cb		       0f		      BYTE.b	$0f
    225  24cc		       0f		      BYTE.b	$0f
    226  24cd		       0f		      BYTE.b	$0f
    227  24ce		       0f		      BYTE.b	$0f
    228  24cf		       0f		      BYTE.b	$0f
    229  24d0		       0f		      BYTE.b	$0f
    230  24d1		       0f		      BYTE.b	$0f
    231  24d2		       0f		      BYTE.b	$0f
    232  24d3		       0f		      BYTE.b	$0f
    233  24d4		       0f		      BYTE.b	$0f
    234  24d5		       0f		      BYTE.b	$0f
    235  24d6		       0f		      BYTE.b	$0f
    236  24d7		       0f		      BYTE.b	$0f
    237  24d8		       0f		      BYTE.b	$0f
    238  24d9		       0f		      BYTE.b	$0f
    239  24da		       0f		      BYTE.b	$0f
    240  24db		       0f		      BYTE.b	$0f
    241  24dc		       0f		      BYTE.b	$0f
    242  24dd		       0f		      BYTE.b	$0f
    243  24de		       0f		      BYTE.b	$0f
    244  24df		       0f		      BYTE.b	$0f
    245  24e0		       0f		      BYTE.b	$0f
    246  24e1		       0f		      BYTE.b	$0f
    247  24e2		       0f		      BYTE.b	$0f
    248  24e3		       0f		      BYTE.b	$0f
    249  24e4		       0f		      BYTE.b	$0f
    250  24e5		       0f		      BYTE.b	$0f
    251  24e6		       0f		      BYTE.b	$0f
    252  24e7		       0f		      BYTE.b	$0f
    253  24e8		       0f		      BYTE.b	$0f
    254  24e9		       0f		      BYTE.b	$0f
    255  24ea		       0f		      BYTE.b	$0f
    256  24eb		       0f		      BYTE.b	$0f
    257  24ec		       0f		      BYTE.b	$0f
    258  24ed		       0f		      BYTE.b	$0f
    259  24ee		       0f		      BYTE.b	$0f
    260  24ef		       0f		      BYTE.b	$0f
    261  24f0		       0f		      BYTE.b	$0f
    262  24f1
    263  24f1				  -	      ifnconst	bmp_48x2_1_PF1
    264  24f1				  -bmp_48x2_1_PF1
    265  24f1					      endif
    266  24f1		       00		      BYTE.b	%00000000
    267  24f2				  -	      ifnconst	bmp_48x2_1_PF2
    268  24f2				  -bmp_48x2_1_PF2
    269  24f2					      endif
    270  24f2		       ff		      BYTE.b	%11111111
    271  24f3				  -	      ifnconst	bmp_48x2_1_background
    272  24f3				  -bmp_48x2_1_background
    273  24f3					      endif
    274  24f3		       00		      BYTE.b	$00
    275  24f4
    276  24f4
    277  24f4
    278  24f4					      if	>. != >[.+bmp_48x2_1_height]
    279  2500		       00 00 00 00*	      align	256
    280  2500					      endif
    281  2500
    282  2500				   bmp_48x2_1_00
    283  2500		       ff		      BYTE.b	%11111111
    284  2501		       ff		      BYTE.b	%11111111
    285  2502		       ff		      BYTE.b	%11111111
    286  2503		       ff		      BYTE.b	%11111111
    287  2504		       ff		      BYTE.b	%11111111
    288  2505		       ff		      BYTE.b	%11111111
    289  2506		       fc		      BYTE.b	%11111100
    290  2507		       fc		      BYTE.b	%11111100
    291  2508		       f8		      BYTE.b	%11111000
    292  2509		       f0		      BYTE.b	%11110000
    293  250a		       f0		      BYTE.b	%11110000
    294  250b		       f0		      BYTE.b	%11110000
    295  250c		       e0		      BYTE.b	%11100000
    296  250d		       e0		      BYTE.b	%11100000
    297  250e		       e0		      BYTE.b	%11100000
    298  250f		       f0		      BYTE.b	%11110000
    299  2510		       f0		      BYTE.b	%11110000
    300  2511		       f0		      BYTE.b	%11110000
    301  2512		       f8		      BYTE.b	%11111000
    302  2513		       fc		      BYTE.b	%11111100
    303  2514		       fc		      BYTE.b	%11111100
    304  2515		       ff		      BYTE.b	%11111111
    305  2516		       ff		      BYTE.b	%11111111
    306  2517		       ff		      BYTE.b	%11111111
    307  2518		       ff		      BYTE.b	%11111111
    308  2519		       ff		      BYTE.b	%11111111
    309  251a		       ff		      BYTE.b	%11111111
    310  251b		       ff		      BYTE.b	%11111111
    311  251c		       ff		      BYTE.b	%11111111
    312  251d		       ff		      BYTE.b	%11111111
    313  251e		       ff		      BYTE.b	%11111111
    314  251f		       ff		      BYTE.b	%11111111
    315  2520		       ff		      BYTE.b	%11111111
    316  2521		       ff		      BYTE.b	%11111111
    317  2522		       78		      BYTE.b	%01111000
    318  2523		       1c		      BYTE.b	%00011100
    319  2524		       1f		      BYTE.b	%00011111
    320  2525		       1f		      BYTE.b	%00011111
    321  2526		       1f		      BYTE.b	%00011111
    322  2527		       1f		      BYTE.b	%00011111
    323  2528		       3e		      BYTE.b	%00111110
    324  2529		       3e		      BYTE.b	%00111110
    325  252a		       3e		      BYTE.b	%00111110
    326  252b		       1c		      BYTE.b	%00011100
    327  252c		       00		      BYTE.b	%00000000
    328  252d		       00		      BYTE.b	%00000000
    329  252e		       00		      BYTE.b	%00000000
    330  252f		       00		      BYTE.b	%00000000
    331  2530
    332  2530		       ff		      BYTE.b	%11111111
    333  2531		       ff		      BYTE.b	%11111111
    334  2532		       ff		      BYTE.b	%11111111
    335  2533		       ff		      BYTE.b	%11111111
    336  2534		       ff		      BYTE.b	%11111111
    337  2535		       ff		      BYTE.b	%11111111
    338  2536		       fc		      BYTE.b	%11111100
    339  2537		       fc		      BYTE.b	%11111100
    340  2538		       f8		      BYTE.b	%11111000
    341  2539		       f0		      BYTE.b	%11110000
    342  253a		       f0		      BYTE.b	%11110000
    343  253b		       f0		      BYTE.b	%11110000
    344  253c		       e0		      BYTE.b	%11100000
    345  253d		       e0		      BYTE.b	%11100000
    346  253e		       e0		      BYTE.b	%11100000
    347  253f		       f0		      BYTE.b	%11110000
    348  2540		       f0		      BYTE.b	%11110000
    349  2541		       f0		      BYTE.b	%11110000
    350  2542		       f8		      BYTE.b	%11111000
    351  2543		       fc		      BYTE.b	%11111100
    352  2544		       fc		      BYTE.b	%11111100
    353  2545		       ff		      BYTE.b	%11111111
    354  2546		       ff		      BYTE.b	%11111111
    355  2547		       ff		      BYTE.b	%11111111
    356  2548		       ff		      BYTE.b	%11111111
    357  2549		       ff		      BYTE.b	%11111111
    358  254a		       ff		      BYTE.b	%11111111
    359  254b		       ff		      BYTE.b	%11111111
    360  254c		       ff		      BYTE.b	%11111111
    361  254d		       ff		      BYTE.b	%11111111
    362  254e		       ff		      BYTE.b	%11111111
    363  254f		       ff		      BYTE.b	%11111111
    364  2550		       ff		      BYTE.b	%11111111
    365  2551		       ff		      BYTE.b	%11111111
    366  2552		       78		      BYTE.b	%01111000
    367  2553		       7c		      BYTE.b	%01111100
    368  2554		       7c		      BYTE.b	%01111100
    369  2555		       7c		      BYTE.b	%01111100
    370  2556		       7c		      BYTE.b	%01111100
    371  2557		       f8		      BYTE.b	%11111000
    372  2558		       f8		      BYTE.b	%11111000
    373  2559		       f8		      BYTE.b	%11111000
    374  255a		       f0		      BYTE.b	%11110000
    375  255b		       60		      BYTE.b	%01100000
    376  255c		       00		      BYTE.b	%00000000
    377  255d		       00		      BYTE.b	%00000000
    378  255e		       00		      BYTE.b	%00000000
    379  255f		       00		      BYTE.b	%00000000
    380  2560
    381  2560		       ff		      BYTE.b	%11111111
    382  2561		       ff		      BYTE.b	%11111111
    383  2562		       ff		      BYTE.b	%11111111
    384  2563		       ff		      BYTE.b	%11111111
    385  2564		       ff		      BYTE.b	%11111111
    386  2565		       ff		      BYTE.b	%11111111
    387  2566		       fc		      BYTE.b	%11111100
    388  2567		       fc		      BYTE.b	%11111100
    389  2568		       f8		      BYTE.b	%11111000
    390  2569		       f0		      BYTE.b	%11110000
    391  256a		       f0		      BYTE.b	%11110000
    392  256b		       f0		      BYTE.b	%11110000
    393  256c		       e0		      BYTE.b	%11100000
    394  256d		       e0		      BYTE.b	%11100000
    395  256e		       e0		      BYTE.b	%11100000
    396  256f		       f0		      BYTE.b	%11110000
    397  2570		       f0		      BYTE.b	%11110000
    398  2571		       f0		      BYTE.b	%11110000
    399  2572		       f8		      BYTE.b	%11111000
    400  2573		       fc		      BYTE.b	%11111100
    401  2574		       fc		      BYTE.b	%11111100
    402  2575		       ff		      BYTE.b	%11111111
    403  2576		       ff		      BYTE.b	%11111111
    404  2577		       ff		      BYTE.b	%11111111
    405  2578		       ff		      BYTE.b	%11111111
    406  2579		       ff		      BYTE.b	%11111111
    407  257a		       ff		      BYTE.b	%11111111
    408  257b		       ff		      BYTE.b	%11111111
    409  257c		       ff		      BYTE.b	%11111111
    410  257d		       ff		      BYTE.b	%11111111
    411  257e		       ff		      BYTE.b	%11111111
    412  257f		       ff		      BYTE.b	%11111111
    413  2580		       ff		      BYTE.b	%11111111
    414  2581		       ff		      BYTE.b	%11111111
    415  2582		       f8		      BYTE.b	%11111000
    416  2583		       fc		      BYTE.b	%11111100
    417  2584		       f9		      BYTE.b	%11111001
    418  2585		       f0		      BYTE.b	%11110000
    419  2586		       f0		      BYTE.b	%11110000
    420  2587		       e0		      BYTE.b	%11100000
    421  2588		       e0		      BYTE.b	%11100000
    422  2589		       c0		      BYTE.b	%11000000
    423  258a		       80		      BYTE.b	%10000000
    424  258b		       80		      BYTE.b	%10000000
    425  258c		       00		      BYTE.b	%00000000
    426  258d		       00		      BYTE.b	%00000000
    427  258e		       00		      BYTE.b	%00000000
    428  258f		       00		      BYTE.b	%00000000
    429  2590
    430  2590		       ff		      BYTE.b	%11111111
    431  2591		       ff		      BYTE.b	%11111111
    432  2592		       ff		      BYTE.b	%11111111
    433  2593		       ff		      BYTE.b	%11111111
    434  2594		       ff		      BYTE.b	%11111111
    435  2595		       ff		      BYTE.b	%11111111
    436  2596		       fc		      BYTE.b	%11111100
    437  2597		       fc		      BYTE.b	%11111100
    438  2598		       f8		      BYTE.b	%11111000
    439  2599		       f0		      BYTE.b	%11110000
    440  259a		       f0		      BYTE.b	%11110000
    441  259b		       f0		      BYTE.b	%11110000
    442  259c		       e0		      BYTE.b	%11100000
    443  259d		       e0		      BYTE.b	%11100000
    444  259e		       e0		      BYTE.b	%11100000
    445  259f		       f0		      BYTE.b	%11110000
    446  25a0		       f0		      BYTE.b	%11110000
    447  25a1		       f0		      BYTE.b	%11110000
    448  25a2		       f8		      BYTE.b	%11111000
    449  25a3		       fc		      BYTE.b	%11111100
    450  25a4		       fc		      BYTE.b	%11111100
    451  25a5		       ff		      BYTE.b	%11111111
    452  25a6		       ff		      BYTE.b	%11111111
    453  25a7		       ff		      BYTE.b	%11111111
    454  25a8		       ff		      BYTE.b	%11111111
    455  25a9		       ff		      BYTE.b	%11111111
    456  25aa		       ff		      BYTE.b	%11111111
    457  25ab		       ff		      BYTE.b	%11111111
    458  25ac		       ff		      BYTE.b	%11111111
    459  25ad		       ff		      BYTE.b	%11111111
    460  25ae		       ff		      BYTE.b	%11111111
    461  25af		       ff		      BYTE.b	%11111111
    462  25b0		       ff		      BYTE.b	%11111111
    463  25b1		       ff		      BYTE.b	%11111111
    464  25b2		       f8		      BYTE.b	%11111000
    465  25b3		       fc		      BYTE.b	%11111100
    466  25b4		       c3		      BYTE.b	%11000011
    467  25b5		       c1		      BYTE.b	%11000001
    468  25b6		       81		      BYTE.b	%10000001
    469  25b7		       81		      BYTE.b	%10000001
    470  25b8		       01		      BYTE.b	%00000001
    471  25b9		       01		      BYTE.b	%00000001
    472  25ba		       01		      BYTE.b	%00000001
    473  25bb		       01		      BYTE.b	%00000001
    474  25bc		       00		      BYTE.b	%00000000
    475  25bd		       00		      BYTE.b	%00000000
    476  25be		       00		      BYTE.b	%00000000
    477  25bf		       00		      BYTE.b	%00000000
    478  25c0
    479  25c0		       ff		      BYTE.b	%11111111
    480  25c1		       ff		      BYTE.b	%11111111
    481  25c2		       ff		      BYTE.b	%11111111
    482  25c3		       ff		      BYTE.b	%11111111
    483  25c4		       ff		      BYTE.b	%11111111
    484  25c5		       ff		      BYTE.b	%11111111
    485  25c6		       fc		      BYTE.b	%11111100
    486  25c7		       fc		      BYTE.b	%11111100
    487  25c8		       f8		      BYTE.b	%11111000
    488  25c9		       f0		      BYTE.b	%11110000
    489  25ca		       f0		      BYTE.b	%11110000
    490  25cb		       f0		      BYTE.b	%11110000
    491  25cc		       e0		      BYTE.b	%11100000
    492  25cd		       e0		      BYTE.b	%11100000
    493  25ce		       e0		      BYTE.b	%11100000
    494  25cf		       f0		      BYTE.b	%11110000
    495  25d0		       f0		      BYTE.b	%11110000
    496  25d1		       f0		      BYTE.b	%11110000
    497  25d2		       f8		      BYTE.b	%11111000
    498  25d3		       fc		      BYTE.b	%11111100
    499  25d4		       fc		      BYTE.b	%11111100
    500  25d5		       ff		      BYTE.b	%11111111
    501  25d6		       ff		      BYTE.b	%11111111
    502  25d7		       ff		      BYTE.b	%11111111
    503  25d8		       ff		      BYTE.b	%11111111
    504  25d9		       ff		      BYTE.b	%11111111
    505  25da		       ff		      BYTE.b	%11111111
    506  25db		       ff		      BYTE.b	%11111111
    507  25dc		       ff		      BYTE.b	%11111111
    508  25dd		       ff		      BYTE.b	%11111111
    509  25de		       ff		      BYTE.b	%11111111
    510  25df		       ff		      BYTE.b	%11111111
    511  25e0		       ff		      BYTE.b	%11111111
    512  25e1		       ff		      BYTE.b	%11111111
    513  25e2		       f8		      BYTE.b	%11111000
    514  25e3		       9c		      BYTE.b	%10011100
    515  25e4		       07		      BYTE.b	%00000111
    516  25e5		       07		      BYTE.b	%00000111
    517  25e6		       07		      BYTE.b	%00000111
    518  25e7		       07		      BYTE.b	%00000111
    519  25e8		       0f		      BYTE.b	%00001111
    520  25e9		       0f		      BYTE.b	%00001111
    521  25ea		       07		      BYTE.b	%00000111
    522  25eb		       07		      BYTE.b	%00000111
    523  25ec		       03		      BYTE.b	%00000011
    524  25ed		       00		      BYTE.b	%00000000
    525  25ee		       00		      BYTE.b	%00000000
    526  25ef		       00		      BYTE.b	%00000000
    527  25f0
    528  25f0
    529  25f0
    530  25f0					      if	>. != >[.+bmp_48x2_1_height]
    531  2600		       00 00 00 00*	      align	256
    532  2600					      endif
    533  2600
    534  2600				   bmp_48x2_1_01
    535  2600		       ff		      BYTE.b	%11111111
    536  2601		       ff		      BYTE.b	%11111111
    537  2602		       ff		      BYTE.b	%11111111
    538  2603		       ff		      BYTE.b	%11111111
    539  2604		       80		      BYTE.b	%10000000
    540  2605		       00		      BYTE.b	%00000000
    541  2606		       00		      BYTE.b	%00000000
    542  2607		       00		      BYTE.b	%00000000
    543  2608		       00		      BYTE.b	%00000000
    544  2609		       00		      BYTE.b	%00000000
    545  260a		       00		      BYTE.b	%00000000
    546  260b		       00		      BYTE.b	%00000000
    547  260c		       00		      BYTE.b	%00000000
    548  260d		       00		      BYTE.b	%00000000
    549  260e		       00		      BYTE.b	%00000000
    550  260f		       00		      BYTE.b	%00000000
    551  2610		       00		      BYTE.b	%00000000
    552  2611		       00		      BYTE.b	%00000000
    553  2612		       00		      BYTE.b	%00000000
    554  2613		       00		      BYTE.b	%00000000
    555  2614		       00		      BYTE.b	%00000000
    556  2615		       00		      BYTE.b	%00000000
    557  2616		       c0		      BYTE.b	%11000000
    558  2617		       ff		      BYTE.b	%11111111
    559  2618		       ff		      BYTE.b	%11111111
    560  2619		       ff		      BYTE.b	%11111111
    561  261a		       ff		      BYTE.b	%11111111
    562  261b		       ff		      BYTE.b	%11111111
    563  261c		       ff		      BYTE.b	%11111111
    564  261d		       ff		      BYTE.b	%11111111
    565  261e		       ff		      BYTE.b	%11111111
    566  261f		       ff		      BYTE.b	%11111111
    567  2620		       ff		      BYTE.b	%11111111
    568  2621		       f8		      BYTE.b	%11111000
    569  2622		       00		      BYTE.b	%00000000
    570  2623		       00		      BYTE.b	%00000000
    571  2624		       00		      BYTE.b	%00000000
    572  2625		       01		      BYTE.b	%00000001
    573  2626		       07		      BYTE.b	%00000111
    574  2627		       03		      BYTE.b	%00000011
    575  2628		       03		      BYTE.b	%00000011
    576  2629		       03		      BYTE.b	%00000011
    577  262a		       03		      BYTE.b	%00000011
    578  262b		       03		      BYTE.b	%00000011
    579  262c		       01		      BYTE.b	%00000001
    580  262d		       00		      BYTE.b	%00000000
    581  262e		       00		      BYTE.b	%00000000
    582  262f		       00		      BYTE.b	%00000000
    583  2630
    584  2630		       ff		      BYTE.b	%11111111
    585  2631		       ff		      BYTE.b	%11111111
    586  2632		       ff		      BYTE.b	%11111111
    587  2633		       ff		      BYTE.b	%11111111
    588  2634		       80		      BYTE.b	%10000000
    589  2635		       00		      BYTE.b	%00000000
    590  2636		       00		      BYTE.b	%00000000
    591  2637		       00		      BYTE.b	%00000000
    592  2638		       00		      BYTE.b	%00000000
    593  2639		       00		      BYTE.b	%00000000
    594  263a		       00		      BYTE.b	%00000000
    595  263b		       00		      BYTE.b	%00000000
    596  263c		       00		      BYTE.b	%00000000
    597  263d		       00		      BYTE.b	%00000000
    598  263e		       00		      BYTE.b	%00000000
    599  263f		       00		      BYTE.b	%00000000
    600  2640		       00		      BYTE.b	%00000000
    601  2641		       00		      BYTE.b	%00000000
    602  2642		       00		      BYTE.b	%00000000
    603  2643		       00		      BYTE.b	%00000000
    604  2644		       00		      BYTE.b	%00000000
    605  2645		       00		      BYTE.b	%00000000
    606  2646		       c0		      BYTE.b	%11000000
    607  2647		       ff		      BYTE.b	%11111111
    608  2648		       ff		      BYTE.b	%11111111
    609  2649		       ff		      BYTE.b	%11111111
    610  264a		       ff		      BYTE.b	%11111111
    611  264b		       ff		      BYTE.b	%11111111
    612  264c		       ff		      BYTE.b	%11111111
    613  264d		       ff		      BYTE.b	%11111111
    614  264e		       ff		      BYTE.b	%11111111
    615  264f		       ff		      BYTE.b	%11111111
    616  2650		       ff		      BYTE.b	%11111111
    617  2651		       f8		      BYTE.b	%11111000
    618  2652		       00		      BYTE.b	%00000000
    619  2653		       00		      BYTE.b	%00000000
    620  2654		       00		      BYTE.b	%00000000
    621  2655		       30		      BYTE.b	%00110000
    622  2656		       1f		      BYTE.b	%00011111
    623  2657		       0f		      BYTE.b	%00001111
    624  2658		       0f		      BYTE.b	%00001111
    625  2659		       0f		      BYTE.b	%00001111
    626  265a		       0f		      BYTE.b	%00001111
    627  265b		       0f		      BYTE.b	%00001111
    628  265c		       0e		      BYTE.b	%00001110
    629  265d		       06		      BYTE.b	%00000110
    630  265e		       00		      BYTE.b	%00000000
    631  265f		       00		      BYTE.b	%00000000
    632  2660
    633  2660		       ff		      BYTE.b	%11111111
    634  2661		       ff		      BYTE.b	%11111111
    635  2662		       ff		      BYTE.b	%11111111
    636  2663		       ff		      BYTE.b	%11111111
    637  2664		       80		      BYTE.b	%10000000
    638  2665		       00		      BYTE.b	%00000000
    639  2666		       00		      BYTE.b	%00000000
    640  2667		       00		      BYTE.b	%00000000
    641  2668		       00		      BYTE.b	%00000000
    642  2669		       00		      BYTE.b	%00000000
    643  266a		       00		      BYTE.b	%00000000
    644  266b		       00		      BYTE.b	%00000000
    645  266c		       00		      BYTE.b	%00000000
    646  266d		       00		      BYTE.b	%00000000
    647  266e		       00		      BYTE.b	%00000000
    648  266f		       00		      BYTE.b	%00000000
    649  2670		       00		      BYTE.b	%00000000
    650  2671		       00		      BYTE.b	%00000000
    651  2672		       00		      BYTE.b	%00000000
    652  2673		       00		      BYTE.b	%00000000
    653  2674		       00		      BYTE.b	%00000000
    654  2675		       00		      BYTE.b	%00000000
    655  2676		       c0		      BYTE.b	%11000000
    656  2677		       ff		      BYTE.b	%11111111
    657  2678		       ff		      BYTE.b	%11111111
    658  2679		       ff		      BYTE.b	%11111111
    659  267a		       ff		      BYTE.b	%11111111
    660  267b		       ff		      BYTE.b	%11111111
    661  267c		       ff		      BYTE.b	%11111111
    662  267d		       ff		      BYTE.b	%11111111
    663  267e		       ff		      BYTE.b	%11111111
    664  267f		       ff		      BYTE.b	%11111111
    665  2680		       ff		      BYTE.b	%11111111
    666  2681		       f8		      BYTE.b	%11111000
    667  2682		       00		      BYTE.b	%00000000
    668  2683		       00		      BYTE.b	%00000000
    669  2684		       00		      BYTE.b	%00000000
    670  2685		       70		      BYTE.b	%01110000
    671  2686		       7c		      BYTE.b	%01111100
    672  2687		       7c		      BYTE.b	%01111100
    673  2688		       7c		      BYTE.b	%01111100
    674  2689		       7c		      BYTE.b	%01111100
    675  268a		       7c		      BYTE.b	%01111100
    676  268b		       78		      BYTE.b	%01111000
    677  268c		       38		      BYTE.b	%00111000
    678  268d		       10		      BYTE.b	%00010000
    679  268e		       00		      BYTE.b	%00000000
    680  268f		       00		      BYTE.b	%00000000
    681  2690
    682  2690		       ff		      BYTE.b	%11111111
    683  2691		       ff		      BYTE.b	%11111111
    684  2692		       ff		      BYTE.b	%11111111
    685  2693		       ff		      BYTE.b	%11111111
    686  2694		       80		      BYTE.b	%10000000
    687  2695		       00		      BYTE.b	%00000000
    688  2696		       00		      BYTE.b	%00000000
    689  2697		       00		      BYTE.b	%00000000
    690  2698		       00		      BYTE.b	%00000000
    691  2699		       00		      BYTE.b	%00000000
    692  269a		       00		      BYTE.b	%00000000
    693  269b		       00		      BYTE.b	%00000000
    694  269c		       00		      BYTE.b	%00000000
    695  269d		       00		      BYTE.b	%00000000
    696  269e		       00		      BYTE.b	%00000000
    697  269f		       00		      BYTE.b	%00000000
    698  26a0		       00		      BYTE.b	%00000000
    699  26a1		       00		      BYTE.b	%00000000
    700  26a2		       00		      BYTE.b	%00000000
    701  26a3		       00		      BYTE.b	%00000000
    702  26a4		       00		      BYTE.b	%00000000
    703  26a5		       00		      BYTE.b	%00000000
    704  26a6		       c0		      BYTE.b	%11000000
    705  26a7		       ff		      BYTE.b	%11111111
    706  26a8		       ff		      BYTE.b	%11111111
    707  26a9		       ff		      BYTE.b	%11111111
    708  26aa		       ff		      BYTE.b	%11111111
    709  26ab		       ff		      BYTE.b	%11111111
    710  26ac		       ff		      BYTE.b	%11111111
    711  26ad		       ff		      BYTE.b	%11111111
    712  26ae		       ff		      BYTE.b	%11111111
    713  26af		       ff		      BYTE.b	%11111111
    714  26b0		       ff		      BYTE.b	%11111111
    715  26b1		       f8		      BYTE.b	%11111000
    716  26b2		       00		      BYTE.b	%00000000
    717  26b3		       00		      BYTE.b	%00000000
    718  26b4		       00		      BYTE.b	%00000000
    719  26b5		       f0		      BYTE.b	%11110000
    720  26b6		       f0		      BYTE.b	%11110000
    721  26b7		       f0		      BYTE.b	%11110000
    722  26b8		       f0		      BYTE.b	%11110000
    723  26b9		       f0		      BYTE.b	%11110000
    724  26ba		       f0		      BYTE.b	%11110000
    725  26bb		       e0		      BYTE.b	%11100000
    726  26bc		       e0		      BYTE.b	%11100000
    727  26bd		       00		      BYTE.b	%00000000
    728  26be		       00		      BYTE.b	%00000000
    729  26bf		       00		      BYTE.b	%00000000
    730  26c0
    731  26c0		       ff		      BYTE.b	%11111111
    732  26c1		       ff		      BYTE.b	%11111111
    733  26c2		       ff		      BYTE.b	%11111111
    734  26c3		       ff		      BYTE.b	%11111111
    735  26c4		       80		      BYTE.b	%10000000
    736  26c5		       00		      BYTE.b	%00000000
    737  26c6		       00		      BYTE.b	%00000000
    738  26c7		       00		      BYTE.b	%00000000
    739  26c8		       00		      BYTE.b	%00000000
    740  26c9		       00		      BYTE.b	%00000000
    741  26ca		       00		      BYTE.b	%00000000
    742  26cb		       00		      BYTE.b	%00000000
    743  26cc		       00		      BYTE.b	%00000000
    744  26cd		       00		      BYTE.b	%00000000
    745  26ce		       00		      BYTE.b	%00000000
    746  26cf		       00		      BYTE.b	%00000000
    747  26d0		       00		      BYTE.b	%00000000
    748  26d1		       00		      BYTE.b	%00000000
    749  26d2		       00		      BYTE.b	%00000000
    750  26d3		       00		      BYTE.b	%00000000
    751  26d4		       00		      BYTE.b	%00000000
    752  26d5		       00		      BYTE.b	%00000000
    753  26d6		       c0		      BYTE.b	%11000000
    754  26d7		       ff		      BYTE.b	%11111111
    755  26d8		       ff		      BYTE.b	%11111111
    756  26d9		       ff		      BYTE.b	%11111111
    757  26da		       ff		      BYTE.b	%11111111
    758  26db		       ff		      BYTE.b	%11111111
    759  26dc		       ff		      BYTE.b	%11111111
    760  26dd		       ff		      BYTE.b	%11111111
    761  26de		       ff		      BYTE.b	%11111111
    762  26df		       ff		      BYTE.b	%11111111
    763  26e0		       ff		      BYTE.b	%11111111
    764  26e1		       f8		      BYTE.b	%11111000
    765  26e2		       00		      BYTE.b	%00000000
    766  26e3		       00		      BYTE.b	%00000000
    767  26e4		       00		      BYTE.b	%00000000
    768  26e5		       c1		      BYTE.b	%11000001
    769  26e6		       c1		      BYTE.b	%11000001
    770  26e7		       c0		      BYTE.b	%11000000
    771  26e8		       c0		      BYTE.b	%11000000
    772  26e9		       80		      BYTE.b	%10000000
    773  26ea		       80		      BYTE.b	%10000000
    774  26eb		       80		      BYTE.b	%10000000
    775  26ec		       00		      BYTE.b	%00000000
    776  26ed		       00		      BYTE.b	%00000000
    777  26ee		       00		      BYTE.b	%00000000
    778  26ef		       00		      BYTE.b	%00000000
    779  26f0
    780  26f0
    781  26f0					      if	>. != >[.+bmp_48x2_1_height]
    782  2700		       00 00 00 00*	      align	256
    783  2700					      endif
    784  2700
    785  2700				   bmp_48x2_1_02
    786  2700		       ff		      BYTE.b	%11111111
    787  2701		       ff		      BYTE.b	%11111111
    788  2702		       ff		      BYTE.b	%11111111
    789  2703		       ff		      BYTE.b	%11111111
    790  2704		       ff		      BYTE.b	%11111111
    791  2705		       3f		      BYTE.b	%00111111
    792  2706		       1f		      BYTE.b	%00011111
    793  2707		       1f		      BYTE.b	%00011111
    794  2708		       0f		      BYTE.b	%00001111
    795  2709		       0f		      BYTE.b	%00001111
    796  270a		       07		      BYTE.b	%00000111
    797  270b		       07		      BYTE.b	%00000111
    798  270c		       07		      BYTE.b	%00000111
    799  270d		       07		      BYTE.b	%00000111
    800  270e		       07		      BYTE.b	%00000111
    801  270f		       07		      BYTE.b	%00000111
    802  2710		       07		      BYTE.b	%00000111
    803  2711		       07		      BYTE.b	%00000111
    804  2712		       0f		      BYTE.b	%00001111
    805  2713		       0f		      BYTE.b	%00001111
    806  2714		       1f		      BYTE.b	%00011111
    807  2715		       3f		      BYTE.b	%00111111
    808  2716		       ff		      BYTE.b	%11111111
    809  2717		       ff		      BYTE.b	%11111111
    810  2718		       ff		      BYTE.b	%11111111
    811  2719		       ff		      BYTE.b	%11111111
    812  271a		       ff		      BYTE.b	%11111111
    813  271b		       ff		      BYTE.b	%11111111
    814  271c		       ff		      BYTE.b	%11111111
    815  271d		       ff		      BYTE.b	%11111111
    816  271e		       fe		      BYTE.b	%11111110
    817  271f		       f8		      BYTE.b	%11111000
    818  2720		       c0		      BYTE.b	%11000000
    819  2721		       00		      BYTE.b	%00000000
    820  2722		       00		      BYTE.b	%00000000
    821  2723		       00		      BYTE.b	%00000000
    822  2724		       01		      BYTE.b	%00000001
    823  2725		       c1		      BYTE.b	%11000001
    824  2726		       c0		      BYTE.b	%11000000
    825  2727		       c0		      BYTE.b	%11000000
    826  2728		       c0		      BYTE.b	%11000000
    827  2729		       c0		      BYTE.b	%11000000
    828  272a		       c0		      BYTE.b	%11000000
    829  272b		       c0		      BYTE.b	%11000000
    830  272c		       c0		      BYTE.b	%11000000
    831  272d		       80		      BYTE.b	%10000000
    832  272e		       00		      BYTE.b	%00000000
    833  272f		       00		      BYTE.b	%00000000
    834  2730
    835  2730		       ff		      BYTE.b	%11111111
    836  2731		       ff		      BYTE.b	%11111111
    837  2732		       ff		      BYTE.b	%11111111
    838  2733		       ff		      BYTE.b	%11111111
    839  2734		       ff		      BYTE.b	%11111111
    840  2735		       3f		      BYTE.b	%00111111
    841  2736		       1f		      BYTE.b	%00011111
    842  2737		       1f		      BYTE.b	%00011111
    843  2738		       0f		      BYTE.b	%00001111
    844  2739		       0f		      BYTE.b	%00001111
    845  273a		       07		      BYTE.b	%00000111
    846  273b		       07		      BYTE.b	%00000111
    847  273c		       07		      BYTE.b	%00000111
    848  273d		       07		      BYTE.b	%00000111
    849  273e		       07		      BYTE.b	%00000111
    850  273f		       07		      BYTE.b	%00000111
    851  2740		       07		      BYTE.b	%00000111
    852  2741		       07		      BYTE.b	%00000111
    853  2742		       0f		      BYTE.b	%00001111
    854  2743		       0f		      BYTE.b	%00001111
    855  2744		       1f		      BYTE.b	%00011111
    856  2745		       3f		      BYTE.b	%00111111
    857  2746		       ff		      BYTE.b	%11111111
    858  2747		       ff		      BYTE.b	%11111111
    859  2748		       ff		      BYTE.b	%11111111
    860  2749		       ff		      BYTE.b	%11111111
    861  274a		       ff		      BYTE.b	%11111111
    862  274b		       ff		      BYTE.b	%11111111
    863  274c		       ff		      BYTE.b	%11111111
    864  274d		       ff		      BYTE.b	%11111111
    865  274e		       fe		      BYTE.b	%11111110
    866  274f		       f8		      BYTE.b	%11111000
    867  2750		       c0		      BYTE.b	%11000000
    868  2751		       00		      BYTE.b	%00000000
    869  2752		       00		      BYTE.b	%00000000
    870  2753		       00		      BYTE.b	%00000000
    871  2754		       07		      BYTE.b	%00000111
    872  2755		       07		      BYTE.b	%00000111
    873  2756		       07		      BYTE.b	%00000111
    874  2757		       03		      BYTE.b	%00000011
    875  2758		       03		      BYTE.b	%00000011
    876  2759		       01		      BYTE.b	%00000001
    877  275a		       00		      BYTE.b	%00000000
    878  275b		       00		      BYTE.b	%00000000
    879  275c		       00		      BYTE.b	%00000000
    880  275d		       00		      BYTE.b	%00000000
    881  275e		       00		      BYTE.b	%00000000
    882  275f		       00		      BYTE.b	%00000000
    883  2760
    884  2760		       ff		      BYTE.b	%11111111
    885  2761		       ff		      BYTE.b	%11111111
    886  2762		       ff		      BYTE.b	%11111111
    887  2763		       ff		      BYTE.b	%11111111
    888  2764		       ff		      BYTE.b	%11111111
    889  2765		       3f		      BYTE.b	%00111111
    890  2766		       1f		      BYTE.b	%00011111
    891  2767		       1f		      BYTE.b	%00011111
    892  2768		       0f		      BYTE.b	%00001111
    893  2769		       0f		      BYTE.b	%00001111
    894  276a		       07		      BYTE.b	%00000111
    895  276b		       07		      BYTE.b	%00000111
    896  276c		       07		      BYTE.b	%00000111
    897  276d		       07		      BYTE.b	%00000111
    898  276e		       07		      BYTE.b	%00000111
    899  276f		       07		      BYTE.b	%00000111
    900  2770		       07		      BYTE.b	%00000111
    901  2771		       07		      BYTE.b	%00000111
    902  2772		       0f		      BYTE.b	%00001111
    903  2773		       0f		      BYTE.b	%00001111
    904  2774		       1f		      BYTE.b	%00011111
    905  2775		       3f		      BYTE.b	%00111111
    906  2776		       ff		      BYTE.b	%11111111
    907  2777		       ff		      BYTE.b	%11111111
    908  2778		       ff		      BYTE.b	%11111111
    909  2779		       ff		      BYTE.b	%11111111
    910  277a		       ff		      BYTE.b	%11111111
    911  277b		       ff		      BYTE.b	%11111111
    912  277c		       ff		      BYTE.b	%11111111
    913  277d		       ff		      BYTE.b	%11111111
    914  277e		       fe		      BYTE.b	%11111110
    915  277f		       f8		      BYTE.b	%11111000
    916  2780		       c0		      BYTE.b	%11000000
    917  2781		       00		      BYTE.b	%00000000
    918  2782		       00		      BYTE.b	%00000000
    919  2783		       00		      BYTE.b	%00000000
    920  2784		       07		      BYTE.b	%00000111
    921  2785		       1f		      BYTE.b	%00011111
    922  2786		       0f		      BYTE.b	%00001111
    923  2787		       0f		      BYTE.b	%00001111
    924  2788		       0f		      BYTE.b	%00001111
    925  2789		       07		      BYTE.b	%00000111
    926  278a		       07		      BYTE.b	%00000111
    927  278b		       03		      BYTE.b	%00000011
    928  278c		       00		      BYTE.b	%00000000
    929  278d		       00		      BYTE.b	%00000000
    930  278e		       00		      BYTE.b	%00000000
    931  278f		       00		      BYTE.b	%00000000
    932  2790
    933  2790		       ff		      BYTE.b	%11111111
    934  2791		       ff		      BYTE.b	%11111111
    935  2792		       ff		      BYTE.b	%11111111
    936  2793		       ff		      BYTE.b	%11111111
    937  2794		       ff		      BYTE.b	%11111111
    938  2795		       3f		      BYTE.b	%00111111
    939  2796		       1f		      BYTE.b	%00011111
    940  2797		       1f		      BYTE.b	%00011111
    941  2798		       0f		      BYTE.b	%00001111
    942  2799		       0f		      BYTE.b	%00001111
    943  279a		       07		      BYTE.b	%00000111
    944  279b		       07		      BYTE.b	%00000111
    945  279c		       07		      BYTE.b	%00000111
    946  279d		       07		      BYTE.b	%00000111
    947  279e		       07		      BYTE.b	%00000111
    948  279f		       07		      BYTE.b	%00000111
    949  27a0		       07		      BYTE.b	%00000111
    950  27a1		       07		      BYTE.b	%00000111
    951  27a2		       0f		      BYTE.b	%00001111
    952  27a3		       0f		      BYTE.b	%00001111
    953  27a4		       1f		      BYTE.b	%00011111
    954  27a5		       3f		      BYTE.b	%00111111
    955  27a6		       ff		      BYTE.b	%11111111
    956  27a7		       ff		      BYTE.b	%11111111
    957  27a8		       ff		      BYTE.b	%11111111
    958  27a9		       ff		      BYTE.b	%11111111
    959  27aa		       ff		      BYTE.b	%11111111
    960  27ab		       ff		      BYTE.b	%11111111
    961  27ac		       ff		      BYTE.b	%11111111
    962  27ad		       ff		      BYTE.b	%11111111
    963  27ae		       fe		      BYTE.b	%11111110
    964  27af		       f8		      BYTE.b	%11111000
    965  27b0		       c0		      BYTE.b	%11000000
    966  27b1		       00		      BYTE.b	%00000000
    967  27b2		       00		      BYTE.b	%00000000
    968  27b3		       00		      BYTE.b	%00000000
    969  27b4		       04		      BYTE.b	%00000100
    970  27b5		       fc		      BYTE.b	%11111100
    971  27b6		       7c		      BYTE.b	%01111100
    972  27b7		       3c		      BYTE.b	%00111100
    973  27b8		       3e		      BYTE.b	%00111110
    974  27b9		       3e		      BYTE.b	%00111110
    975  27ba		       1e		      BYTE.b	%00011110
    976  27bb		       1c		      BYTE.b	%00011100
    977  27bc		       00		      BYTE.b	%00000000
    978  27bd		       00		      BYTE.b	%00000000
    979  27be		       00		      BYTE.b	%00000000
    980  27bf		       00		      BYTE.b	%00000000
    981  27c0
    982  27c0		       ff		      BYTE.b	%11111111
    983  27c1		       ff		      BYTE.b	%11111111
    984  27c2		       ff		      BYTE.b	%11111111
    985  27c3		       ff		      BYTE.b	%11111111
    986  27c4		       ff		      BYTE.b	%11111111
    987  27c5		       3f		      BYTE.b	%00111111
    988  27c6		       1f		      BYTE.b	%00011111
    989  27c7		       1f		      BYTE.b	%00011111
    990  27c8		       0f		      BYTE.b	%00001111
    991  27c9		       0f		      BYTE.b	%00001111
    992  27ca		       07		      BYTE.b	%00000111
    993  27cb		       07		      BYTE.b	%00000111
    994  27cc		       07		      BYTE.b	%00000111
    995  27cd		       07		      BYTE.b	%00000111
    996  27ce		       07		      BYTE.b	%00000111
    997  27cf		       07		      BYTE.b	%00000111
    998  27d0		       07		      BYTE.b	%00000111
    999  27d1		       07		      BYTE.b	%00000111
   1000  27d2		       0f		      BYTE.b	%00001111
   1001  27d3		       0f		      BYTE.b	%00001111
   1002  27d4		       1f		      BYTE.b	%00011111
   1003  27d5		       3f		      BYTE.b	%00111111
   1004  27d6		       ff		      BYTE.b	%11111111
   1005  27d7		       ff		      BYTE.b	%11111111
   1006  27d8		       ff		      BYTE.b	%11111111
   1007  27d9		       ff		      BYTE.b	%11111111
   1008  27da		       ff		      BYTE.b	%11111111
   1009  27db		       ff		      BYTE.b	%11111111
   1010  27dc		       ff		      BYTE.b	%11111111
   1011  27dd		       ff		      BYTE.b	%11111111
   1012  27de		       fe		      BYTE.b	%11111110
   1013  27df		       f8		      BYTE.b	%11111000
   1014  27e0		       c0		      BYTE.b	%11000000
   1015  27e1		       00		      BYTE.b	%00000000
   1016  27e2		       00		      BYTE.b	%00000000
   1017  27e3		       00		      BYTE.b	%00000000
   1018  27e4		       00		      BYTE.b	%00000000
   1019  27e5		       f0		      BYTE.b	%11110000
   1020  27e6		       f0		      BYTE.b	%11110000
   1021  27e7		       f0		      BYTE.b	%11110000
   1022  27e8		       f0		      BYTE.b	%11110000
   1023  27e9		       f0		      BYTE.b	%11110000
   1024  27ea		       f0		      BYTE.b	%11110000
   1025  27eb		       f0		      BYTE.b	%11110000
   1026  27ec		       30		      BYTE.b	%00110000
   1027  27ed		       00		      BYTE.b	%00000000
   1028  27ee		       00		      BYTE.b	%00000000
   1029  27ef		       00		      BYTE.b	%00000000
   1030  27f0
   1031  27f0
   1032  27f0
   1033  27f0					      if	>. != >[.+bmp_48x2_1_height]
   1034  2800		       00 00 00 00*	      align	256
   1035  2800					      endif
   1036  2800
   1037  2800				   bmp_48x2_1_03
   1038  2800		       f0		      BYTE.b	%11110000
   1039  2801		       f8		      BYTE.b	%11111000
   1040  2802		       f8		      BYTE.b	%11111000
   1041  2803		       fc		      BYTE.b	%11111100
   1042  2804		       fc		      BYTE.b	%11111100
   1043  2805		       fe		      BYTE.b	%11111110
   1044  2806		       fe		      BYTE.b	%11111110
   1045  2807		       ff		      BYTE.b	%11111111
   1046  2808		       ff		      BYTE.b	%11111111
   1047  2809		       ff		      BYTE.b	%11111111
   1048  280a		       ff		      BYTE.b	%11111111
   1049  280b		       ff		      BYTE.b	%11111111
   1050  280c		       ff		      BYTE.b	%11111111
   1051  280d		       ff		      BYTE.b	%11111111
   1052  280e		       ff		      BYTE.b	%11111111
   1053  280f		       ff		      BYTE.b	%11111111
   1054  2810		       ff		      BYTE.b	%11111111
   1055  2811		       ff		      BYTE.b	%11111111
   1056  2812		       ff		      BYTE.b	%11111111
   1057  2813		       ff		      BYTE.b	%11111111
   1058  2814		       fe		      BYTE.b	%11111110
   1059  2815		       fe		      BYTE.b	%11111110
   1060  2816		       fc		      BYTE.b	%11111100
   1061  2817		       fc		      BYTE.b	%11111100
   1062  2818		       f8		      BYTE.b	%11111000
   1063  2819		       f0		      BYTE.b	%11110000
   1064  281a		       f0		      BYTE.b	%11110000
   1065  281b		       e0		      BYTE.b	%11100000
   1066  281c		       c0		      BYTE.b	%11000000
   1067  281d		       00		      BYTE.b	%00000000
   1068  281e		       00		      BYTE.b	%00000000
   1069  281f		       00		      BYTE.b	%00000000
   1070  2820		       00		      BYTE.b	%00000000
   1071  2821		       00		      BYTE.b	%00000000
   1072  2822		       20		      BYTE.b	%00100000
   1073  2823		       e0		      BYTE.b	%11100000
   1074  2824		       f0		      BYTE.b	%11110000
   1075  2825		       f8		      BYTE.b	%11111000
   1076  2826		       f8		      BYTE.b	%11111000
   1077  2827		       f8		      BYTE.b	%11111000
   1078  2828		       78		      BYTE.b	%01111000
   1079  2829		       10		      BYTE.b	%00010000
   1080  282a		       00		      BYTE.b	%00000000
   1081  282b		       00		      BYTE.b	%00000000
   1082  282c		       00		      BYTE.b	%00000000
   1083  282d		       00		      BYTE.b	%00000000
   1084  282e		       00		      BYTE.b	%00000000
   1085  282f		       00		      BYTE.b	%00000000
   1086  2830
   1087  2830		       f0		      BYTE.b	%11110000
   1088  2831		       f8		      BYTE.b	%11111000
   1089  2832		       f8		      BYTE.b	%11111000
   1090  2833		       fc		      BYTE.b	%11111100
   1091  2834		       fc		      BYTE.b	%11111100
   1092  2835		       fe		      BYTE.b	%11111110
   1093  2836		       fe		      BYTE.b	%11111110
   1094  2837		       ff		      BYTE.b	%11111111
   1095  2838		       ff		      BYTE.b	%11111111
   1096  2839		       ff		      BYTE.b	%11111111
   1097  283a		       ff		      BYTE.b	%11111111
   1098  283b		       ff		      BYTE.b	%11111111
   1099  283c		       ff		      BYTE.b	%11111111
   1100  283d		       ff		      BYTE.b	%11111111
   1101  283e		       ff		      BYTE.b	%11111111
   1102  283f		       ff		      BYTE.b	%11111111
   1103  2840		       ff		      BYTE.b	%11111111
   1104  2841		       ff		      BYTE.b	%11111111
   1105  2842		       ff		      BYTE.b	%11111111
   1106  2843		       ff		      BYTE.b	%11111111
   1107  2844		       fe		      BYTE.b	%11111110
   1108  2845		       fe		      BYTE.b	%11111110
   1109  2846		       fc		      BYTE.b	%11111100
   1110  2847		       fc		      BYTE.b	%11111100
   1111  2848		       f8		      BYTE.b	%11111000
   1112  2849		       f0		      BYTE.b	%11110000
   1113  284a		       f0		      BYTE.b	%11110000
   1114  284b		       e0		      BYTE.b	%11100000
   1115  284c		       c0		      BYTE.b	%11000000
   1116  284d		       00		      BYTE.b	%00000000
   1117  284e		       00		      BYTE.b	%00000000
   1118  284f		       01		      BYTE.b	%00000001
   1119  2850		       03		      BYTE.b	%00000011
   1120  2851		       01		      BYTE.b	%00000001
   1121  2852		       00		      BYTE.b	%00000000
   1122  2853		       80		      BYTE.b	%10000000
   1123  2854		       c0		      BYTE.b	%11000000
   1124  2855		       c0		      BYTE.b	%11000000
   1125  2856		       e0		      BYTE.b	%11100000
   1126  2857		       e0		      BYTE.b	%11100000
   1127  2858		       e0		      BYTE.b	%11100000
   1128  2859		       e0		      BYTE.b	%11100000
   1129  285a		       40		      BYTE.b	%01000000
   1130  285b		       00		      BYTE.b	%00000000
   1131  285c		       00		      BYTE.b	%00000000
   1132  285d		       00		      BYTE.b	%00000000
   1133  285e		       00		      BYTE.b	%00000000
   1134  285f		       00		      BYTE.b	%00000000
   1135  2860
   1136  2860		       f0		      BYTE.b	%11110000
   1137  2861		       f8		      BYTE.b	%11111000
   1138  2862		       f8		      BYTE.b	%11111000
   1139  2863		       fc		      BYTE.b	%11111100
   1140  2864		       fc		      BYTE.b	%11111100
   1141  2865		       fe		      BYTE.b	%11111110
   1142  2866		       fe		      BYTE.b	%11111110
   1143  2867		       ff		      BYTE.b	%11111111
   1144  2868		       ff		      BYTE.b	%11111111
   1145  2869		       ff		      BYTE.b	%11111111
   1146  286a		       ff		      BYTE.b	%11111111
   1147  286b		       ff		      BYTE.b	%11111111
   1148  286c		       ff		      BYTE.b	%11111111
   1149  286d		       ff		      BYTE.b	%11111111
   1150  286e		       ff		      BYTE.b	%11111111
   1151  286f		       ff		      BYTE.b	%11111111
   1152  2870		       ff		      BYTE.b	%11111111
   1153  2871		       ff		      BYTE.b	%11111111
   1154  2872		       ff		      BYTE.b	%11111111
   1155  2873		       ff		      BYTE.b	%11111111
   1156  2874		       fe		      BYTE.b	%11111110
   1157  2875		       fe		      BYTE.b	%11111110
   1158  2876		       fc		      BYTE.b	%11111100
   1159  2877		       fc		      BYTE.b	%11111100
   1160  2878		       f8		      BYTE.b	%11111000
   1161  2879		       f0		      BYTE.b	%11110000
   1162  287a		       f0		      BYTE.b	%11110000
   1163  287b		       e0		      BYTE.b	%11100000
   1164  287c		       c0		      BYTE.b	%11000000
   1165  287d		       00		      BYTE.b	%00000000
   1166  287e		       00		      BYTE.b	%00000000
   1167  287f		       00		      BYTE.b	%00000000
   1168  2880		       03		      BYTE.b	%00000011
   1169  2881		       0f		      BYTE.b	%00001111
   1170  2882		       07		      BYTE.b	%00000111
   1171  2883		       03		      BYTE.b	%00000011
   1172  2884		       01		      BYTE.b	%00000001
   1173  2885		       00		      BYTE.b	%00000000
   1174  2886		       00		      BYTE.b	%00000000
   1175  2887		       80		      BYTE.b	%10000000
   1176  2888		       80		      BYTE.b	%10000000
   1177  2889		       80		      BYTE.b	%10000000
   1178  288a		       80		      BYTE.b	%10000000
   1179  288b		       00		      BYTE.b	%00000000
   1180  288c		       00		      BYTE.b	%00000000
   1181  288d		       00		      BYTE.b	%00000000
   1182  288e		       00		      BYTE.b	%00000000
   1183  288f		       00		      BYTE.b	%00000000
   1184  2890
   1185  2890		       f0		      BYTE.b	%11110000
   1186  2891		       f8		      BYTE.b	%11111000
   1187  2892		       f8		      BYTE.b	%11111000
   1188  2893		       fc		      BYTE.b	%11111100
   1189  2894		       fc		      BYTE.b	%11111100
   1190  2895		       fe		      BYTE.b	%11111110
   1191  2896		       fe		      BYTE.b	%11111110
   1192  2897		       ff		      BYTE.b	%11111111
   1193  2898		       ff		      BYTE.b	%11111111
   1194  2899		       ff		      BYTE.b	%11111111
   1195  289a		       ff		      BYTE.b	%11111111
   1196  289b		       ff		      BYTE.b	%11111111
   1197  289c		       ff		      BYTE.b	%11111111
   1198  289d		       ff		      BYTE.b	%11111111
   1199  289e		       ff		      BYTE.b	%11111111
   1200  289f		       ff		      BYTE.b	%11111111
   1201  28a0		       ff		      BYTE.b	%11111111
   1202  28a1		       ff		      BYTE.b	%11111111
   1203  28a2		       ff		      BYTE.b	%11111111
   1204  28a3		       ff		      BYTE.b	%11111111
   1205  28a4		       fe		      BYTE.b	%11111110
   1206  28a5		       fe		      BYTE.b	%11111110
   1207  28a6		       fc		      BYTE.b	%11111100
   1208  28a7		       fc		      BYTE.b	%11111100
   1209  28a8		       f8		      BYTE.b	%11111000
   1210  28a9		       f0		      BYTE.b	%11110000
   1211  28aa		       f0		      BYTE.b	%11110000
   1212  28ab		       e0		      BYTE.b	%11100000
   1213  28ac		       c0		      BYTE.b	%11000000
   1214  28ad		       00		      BYTE.b	%00000000
   1215  28ae		       00		      BYTE.b	%00000000
   1216  28af		       00		      BYTE.b	%00000000
   1217  28b0		       00		      BYTE.b	%00000000
   1218  28b1		       0e		      BYTE.b	%00001110
   1219  28b2		       1f		      BYTE.b	%00011111
   1220  28b3		       1f		      BYTE.b	%00011111
   1221  28b4		       0f		      BYTE.b	%00001111
   1222  28b5		       0f		      BYTE.b	%00001111
   1223  28b6		       03		      BYTE.b	%00000011
   1224  28b7		       00		      BYTE.b	%00000000
   1225  28b8		       00		      BYTE.b	%00000000
   1226  28b9		       00		      BYTE.b	%00000000
   1227  28ba		       00		      BYTE.b	%00000000
   1228  28bb		       00		      BYTE.b	%00000000
   1229  28bc		       00		      BYTE.b	%00000000
   1230  28bd		       00		      BYTE.b	%00000000
   1231  28be		       00		      BYTE.b	%00000000
   1232  28bf		       00		      BYTE.b	%00000000
   1233  28c0
   1234  28c0		       f0		      BYTE.b	%11110000
   1235  28c1		       f8		      BYTE.b	%11111000
   1236  28c2		       f8		      BYTE.b	%11111000
   1237  28c3		       fc		      BYTE.b	%11111100
   1238  28c4		       fc		      BYTE.b	%11111100
   1239  28c5		       fe		      BYTE.b	%11111110
   1240  28c6		       fe		      BYTE.b	%11111110
   1241  28c7		       ff		      BYTE.b	%11111111
   1242  28c8		       ff		      BYTE.b	%11111111
   1243  28c9		       ff		      BYTE.b	%11111111
   1244  28ca		       ff		      BYTE.b	%11111111
   1245  28cb		       ff		      BYTE.b	%11111111
   1246  28cc		       ff		      BYTE.b	%11111111
   1247  28cd		       ff		      BYTE.b	%11111111
   1248  28ce		       ff		      BYTE.b	%11111111
   1249  28cf		       ff		      BYTE.b	%11111111
   1250  28d0		       ff		      BYTE.b	%11111111
   1251  28d1		       ff		      BYTE.b	%11111111
   1252  28d2		       ff		      BYTE.b	%11111111
   1253  28d3		       ff		      BYTE.b	%11111111
   1254  28d4		       fe		      BYTE.b	%11111110
   1255  28d5		       fe		      BYTE.b	%11111110
   1256  28d6		       fc		      BYTE.b	%11111100
   1257  28d7		       fc		      BYTE.b	%11111100
   1258  28d8		       f8		      BYTE.b	%11111000
   1259  28d9		       f0		      BYTE.b	%11110000
   1260  28da		       f0		      BYTE.b	%11110000
   1261  28db		       e0		      BYTE.b	%11100000
   1262  28dc		       c0		      BYTE.b	%11000000
   1263  28dd		       00		      BYTE.b	%00000000
   1264  28de		       00		      BYTE.b	%00000000
   1265  28df		       00		      BYTE.b	%00000000
   1266  28e0		       00		      BYTE.b	%00000000
   1267  28e1		       08		      BYTE.b	%00001000
   1268  28e2		       38		      BYTE.b	%00111000
   1269  28e3		       7c		      BYTE.b	%01111100
   1270  28e4		       7e		      BYTE.b	%01111110
   1271  28e5		       7e		      BYTE.b	%01111110
   1272  28e6		       3e		      BYTE.b	%00111110
   1273  28e7		       0e		      BYTE.b	%00001110
   1274  28e8		       04		      BYTE.b	%00000100
   1275  28e9		       00		      BYTE.b	%00000000
   1276  28ea		       00		      BYTE.b	%00000000
   1277  28eb		       00		      BYTE.b	%00000000
   1278  28ec		       00		      BYTE.b	%00000000
   1279  28ed		       00		      BYTE.b	%00000000
   1280  28ee		       00		      BYTE.b	%00000000
   1281  28ef
   1282  28ef
   1283  28ef
   1284  28ef					      if	>. != >[.+bmp_48x2_1_height]
   1285  2900		       00 00 00 00*	      align	256
   1286  2900					      endif
   1287  2900
   1288  2900				   bmp_48x2_1_04
   1289  2900		       07		      BYTE.b	%00000111
   1290  2901		       00		      BYTE.b	%00000000
   1291  2902		       00		      BYTE.b	%00000000
   1292  2903		       00		      BYTE.b	%00000000
   1293  2904		       00		      BYTE.b	%00000000
   1294  2905		       00		      BYTE.b	%00000000
   1295  2906		       00		      BYTE.b	%00000000
   1296  2907		       00		      BYTE.b	%00000000
   1297  2908		       00		      BYTE.b	%00000000
   1298  2909		       00		      BYTE.b	%00000000
   1299  290a		       00		      BYTE.b	%00000000
   1300  290b		       00		      BYTE.b	%00000000
   1301  290c		       00		      BYTE.b	%00000000
   1302  290d		       00		      BYTE.b	%00000000
   1303  290e		       00		      BYTE.b	%00000000
   1304  290f		       00		      BYTE.b	%00000000
   1305  2910		       00		      BYTE.b	%00000000
   1306  2911		       00		      BYTE.b	%00000000
   1307  2912		       00		      BYTE.b	%00000000
   1308  2913		       00		      BYTE.b	%00000000
   1309  2914		       00		      BYTE.b	%00000000
   1310  2915		       00		      BYTE.b	%00000000
   1311  2916		       01		      BYTE.b	%00000001
   1312  2917		       00		      BYTE.b	%00000000
   1313  2918		       00		      BYTE.b	%00000000
   1314  2919		       00		      BYTE.b	%00000000
   1315  291a		       00		      BYTE.b	%00000000
   1316  291b		       00		      BYTE.b	%00000000
   1317  291c		       00		      BYTE.b	%00000000
   1318  291d		       70		      BYTE.b	%01110000
   1319  291e		       f8		      BYTE.b	%11111000
   1320  291f		       fc		      BYTE.b	%11111100
   1321  2920		       7c		      BYTE.b	%01111100
   1322  2921		       3c		      BYTE.b	%00111100
   1323  2922		       00		      BYTE.b	%00000000
   1324  2923		       00		      BYTE.b	%00000000
   1325  2924		       00		      BYTE.b	%00000000
   1326  2925		       00		      BYTE.b	%00000000
   1327  2926		       00		      BYTE.b	%00000000
   1328  2927		       00		      BYTE.b	%00000000
   1329  2928		       00		      BYTE.b	%00000000
   1330  2929		       00		      BYTE.b	%00000000
   1331  292a		       00		      BYTE.b	%00000000
   1332  292b		       00		      BYTE.b	%00000000
   1333  292c		       00		      BYTE.b	%00000000
   1334  292d		       00		      BYTE.b	%00000000
   1335  292e		       00		      BYTE.b	%00000000
   1336  292f		       00		      BYTE.b	%00000000
   1337  2930
   1338  2930		       07		      BYTE.b	%00000111
   1339  2931		       01		      BYTE.b	%00000001
   1340  2932		       01		      BYTE.b	%00000001
   1341  2933		       00		      BYTE.b	%00000000
   1342  2934		       00		      BYTE.b	%00000000
   1343  2935		       00		      BYTE.b	%00000000
   1344  2936		       00		      BYTE.b	%00000000
   1345  2937		       00		      BYTE.b	%00000000
   1346  2938		       00		      BYTE.b	%00000000
   1347  2939		       00		      BYTE.b	%00000000
   1348  293a		       00		      BYTE.b	%00000000
   1349  293b		       00		      BYTE.b	%00000000
   1350  293c		       00		      BYTE.b	%00000000
   1351  293d		       00		      BYTE.b	%00000000
   1352  293e		       00		      BYTE.b	%00000000
   1353  293f		       00		      BYTE.b	%00000000
   1354  2940		       00		      BYTE.b	%00000000
   1355  2941		       00		      BYTE.b	%00000000
   1356  2942		       00		      BYTE.b	%00000000
   1357  2943		       00		      BYTE.b	%00000000
   1358  2944		       00		      BYTE.b	%00000000
   1359  2945		       00		      BYTE.b	%00000000
   1360  2946		       01		      BYTE.b	%00000001
   1361  2947		       01		      BYTE.b	%00000001
   1362  2948		       03		      BYTE.b	%00000011
   1363  2949		       01		      BYTE.b	%00000001
   1364  294a		       00		      BYTE.b	%00000000
   1365  294b		       00		      BYTE.b	%00000000
   1366  294c		       00		      BYTE.b	%00000000
   1367  294d		       00		      BYTE.b	%00000000
   1368  294e		       c0		      BYTE.b	%11000000
   1369  294f		       e0		      BYTE.b	%11100000
   1370  2950		       f0		      BYTE.b	%11110000
   1371  2951		       f0		      BYTE.b	%11110000
   1372  2952		       f0		      BYTE.b	%11110000
   1373  2953		       30		      BYTE.b	%00110000
   1374  2954		       00		      BYTE.b	%00000000
   1375  2955		       00		      BYTE.b	%00000000
   1376  2956		       00		      BYTE.b	%00000000
   1377  2957		       00		      BYTE.b	%00000000
   1378  2958		       00		      BYTE.b	%00000000
   1379  2959		       00		      BYTE.b	%00000000
   1380  295a		       00		      BYTE.b	%00000000
   1381  295b		       00		      BYTE.b	%00000000
   1382  295c		       00		      BYTE.b	%00000000
   1383  295d		       00		      BYTE.b	%00000000
   1384  295e		       00		      BYTE.b	%00000000
   1385  295f		       00		      BYTE.b	%00000000
   1386  2960
   1387  2960		       00		      BYTE.b	%00000000
   1388  2961		       00		      BYTE.b	%00000000
   1389  2962		       01		      BYTE.b	%00000001
   1390  2963		       00		      BYTE.b	%00000000
   1391  2964		       00		      BYTE.b	%00000000
   1392  2965		       00		      BYTE.b	%00000000
   1393  2966		       00		      BYTE.b	%00000000
   1394  2967		       00		      BYTE.b	%00000000
   1395  2968		       00		      BYTE.b	%00000000
   1396  2969		       00		      BYTE.b	%00000000
   1397  296a		       00		      BYTE.b	%00000000
   1398  296b		       00		      BYTE.b	%00000000
   1399  296c		       00		      BYTE.b	%00000000
   1400  296d		       00		      BYTE.b	%00000000
   1401  296e		       00		      BYTE.b	%00000000
   1402  296f		       00		      BYTE.b	%00000000
   1403  2970		       00		      BYTE.b	%00000000
   1404  2971		       00		      BYTE.b	%00000000
   1405  2972		       00		      BYTE.b	%00000000
   1406  2973		       00		      BYTE.b	%00000000
   1407  2974		       00		      BYTE.b	%00000000
   1408  2975		       00		      BYTE.b	%00000000
   1409  2976		       00		      BYTE.b	%00000000
   1410  2977		       00		      BYTE.b	%00000000
   1411  2978		       03		      BYTE.b	%00000011
   1412  2979		       07		      BYTE.b	%00000111
   1413  297a		       0f		      BYTE.b	%00001111
   1414  297b		       03		      BYTE.b	%00000011
   1415  297c		       00		      BYTE.b	%00000000
   1416  297d		       00		      BYTE.b	%00000000
   1417  297e		       00		      BYTE.b	%00000000
   1418  297f		       00		      BYTE.b	%00000000
   1419  2980		       80		      BYTE.b	%10000000
   1420  2981		       c0		      BYTE.b	%11000000
   1421  2982		       c0		      BYTE.b	%11000000
   1422  2983		       e0		      BYTE.b	%11100000
   1423  2984		       e0		      BYTE.b	%11100000
   1424  2985		       40		      BYTE.b	%01000000
   1425  2986		       00		      BYTE.b	%00000000
   1426  2987		       00		      BYTE.b	%00000000
   1427  2988		       00		      BYTE.b	%00000000
   1428  2989		       00		      BYTE.b	%00000000
   1429  298a		       00		      BYTE.b	%00000000
   1430  298b		       00		      BYTE.b	%00000000
   1431  298c		       00		      BYTE.b	%00000000
   1432  298d		       00		      BYTE.b	%00000000
   1433  298e		       00		      BYTE.b	%00000000
   1434  298f		       00		      BYTE.b	%00000000
   1435  2990
   1436  2990		       00		      BYTE.b	%00000000
   1437  2991		       00		      BYTE.b	%00000000
   1438  2992		       00		      BYTE.b	%00000000
   1439  2993		       00		      BYTE.b	%00000000
   1440  2994		       00		      BYTE.b	%00000000
   1441  2995		       00		      BYTE.b	%00000000
   1442  2996		       00		      BYTE.b	%00000000
   1443  2997		       00		      BYTE.b	%00000000
   1444  2998		       00		      BYTE.b	%00000000
   1445  2999		       00		      BYTE.b	%00000000
   1446  299a		       00		      BYTE.b	%00000000
   1447  299b		       00		      BYTE.b	%00000000
   1448  299c		       00		      BYTE.b	%00000000
   1449  299d		       00		      BYTE.b	%00000000
   1450  299e		       00		      BYTE.b	%00000000
   1451  299f		       00		      BYTE.b	%00000000
   1452  29a0		       00		      BYTE.b	%00000000
   1453  29a1		       00		      BYTE.b	%00000000
   1454  29a2		       00		      BYTE.b	%00000000
   1455  29a3		       00		      BYTE.b	%00000000
   1456  29a4		       00		      BYTE.b	%00000000
   1457  29a5		       00		      BYTE.b	%00000000
   1458  29a6		       00		      BYTE.b	%00000000
   1459  29a7		       00		      BYTE.b	%00000000
   1460  29a8		       00		      BYTE.b	%00000000
   1461  29a9		       00		      BYTE.b	%00000000
   1462  29aa		       06		      BYTE.b	%00000110
   1463  29ab		       1f		      BYTE.b	%00011111
   1464  29ac		       1f		      BYTE.b	%00011111
   1465  29ad		       0f		      BYTE.b	%00001111
   1466  29ae		       00		      BYTE.b	%00000000
   1467  29af		       00		      BYTE.b	%00000000
   1468  29b0		       00		      BYTE.b	%00000000
   1469  29b1		       00		      BYTE.b	%00000000
   1470  29b2		       00		      BYTE.b	%00000000
   1471  29b3		       00		      BYTE.b	%00000000
   1472  29b4		       80		      BYTE.b	%10000000
   1473  29b5		       80		      BYTE.b	%10000000
   1474  29b6		       80		      BYTE.b	%10000000
   1475  29b7		       00		      BYTE.b	%00000000
   1476  29b8		       00		      BYTE.b	%00000000
   1477  29b9		       00		      BYTE.b	%00000000
   1478  29ba		       00		      BYTE.b	%00000000
   1479  29bb		       00		      BYTE.b	%00000000
   1480  29bc		       00		      BYTE.b	%00000000
   1481  29bd		       00		      BYTE.b	%00000000
   1482  29be		       00		      BYTE.b	%00000000
   1483  29bf		       00		      BYTE.b	%00000000
   1484  29c0
   1485  29c0		       00		      BYTE.b	%00000000
   1486  29c1		       00		      BYTE.b	%00000000
   1487  29c2		       00		      BYTE.b	%00000000
   1488  29c3		       00		      BYTE.b	%00000000
   1489  29c4		       00		      BYTE.b	%00000000
   1490  29c5		       00		      BYTE.b	%00000000
   1491  29c6		       00		      BYTE.b	%00000000
   1492  29c7		       00		      BYTE.b	%00000000
   1493  29c8		       00		      BYTE.b	%00000000
   1494  29c9		       00		      BYTE.b	%00000000
   1495  29ca		       00		      BYTE.b	%00000000
   1496  29cb		       00		      BYTE.b	%00000000
   1497  29cc		       00		      BYTE.b	%00000000
   1498  29cd		       00		      BYTE.b	%00000000
   1499  29ce		       00		      BYTE.b	%00000000
   1500  29cf		       00		      BYTE.b	%00000000
   1501  29d0		       00		      BYTE.b	%00000000
   1502  29d1		       00		      BYTE.b	%00000000
   1503  29d2		       00		      BYTE.b	%00000000
   1504  29d3		       00		      BYTE.b	%00000000
   1505  29d4		       00		      BYTE.b	%00000000
   1506  29d5		       00		      BYTE.b	%00000000
   1507  29d6		       00		      BYTE.b	%00000000
   1508  29d7		       00		      BYTE.b	%00000000
   1509  29d8		       00		      BYTE.b	%00000000
   1510  29d9		       00		      BYTE.b	%00000000
   1511  29da		       00		      BYTE.b	%00000000
   1512  29db		       1c		      BYTE.b	%00011100
   1513  29dc		       3c		      BYTE.b	%00111100
   1514  29dd		       7e		      BYTE.b	%01111110
   1515  29de		       3e		      BYTE.b	%00111110
   1516  29df		       1e		      BYTE.b	%00011110
   1517  29e0		       00		      BYTE.b	%00000000
   1518  29e1		       00		      BYTE.b	%00000000
   1519  29e2		       00		      BYTE.b	%00000000
   1520  29e3		       00		      BYTE.b	%00000000
   1521  29e4		       00		      BYTE.b	%00000000
   1522  29e5		       00		      BYTE.b	%00000000
   1523  29e6		       00		      BYTE.b	%00000000
   1524  29e7		       00		      BYTE.b	%00000000
   1525  29e8		       00		      BYTE.b	%00000000
   1526  29e9		       00		      BYTE.b	%00000000
   1527  29ea		       00		      BYTE.b	%00000000
   1528  29eb		       00		      BYTE.b	%00000000
   1529  29ec		       00		      BYTE.b	%00000000
   1530  29ed		       00		      BYTE.b	%00000000
   1531  29ee		       00		      BYTE.b	%00000000
   1532  29ef		       00		      BYTE.b	%00000000
   1533  29f0
   1534  29f0
   1535  29f0					      if	>. != >[.+bmp_48x2_1_height]
   1536  2a00		       00 00 00 00*	      align	256
   1537  2a00					      endif
   1538  2a00
   1539  2a00				   bmp_48x2_1_05
   1540  2a00		       00		      BYTE.b	%00000000
   1541  2a01		       00		      BYTE.b	%00000000
   1542  2a02		       00		      BYTE.b	%00000000
   1543  2a03		       00		      BYTE.b	%00000000
   1544  2a04		       00		      BYTE.b	%00000000
   1545  2a05		       00		      BYTE.b	%00000000
   1546  2a06		       00		      BYTE.b	%00000000
   1547  2a07		       00		      BYTE.b	%00000000
   1548  2a08		       60		      BYTE.b	%01100000
   1549  2a09		       30		      BYTE.b	%00110000
   1550  2a0a		       30		      BYTE.b	%00110000
   1551  2a0b		       20		      BYTE.b	%00100000
   1552  2a0c		       00		      BYTE.b	%00000000
   1553  2a0d		       00		      BYTE.b	%00000000
   1554  2a0e		       00		      BYTE.b	%00000000
   1555  2a0f		       00		      BYTE.b	%00000000
   1556  2a10		       00		      BYTE.b	%00000000
   1557  2a11		       00		      BYTE.b	%00000000
   1558  2a12		       00		      BYTE.b	%00000000
   1559  2a13		       00		      BYTE.b	%00000000
   1560  2a14		       e0		      BYTE.b	%11100000
   1561  2a15		       e0		      BYTE.b	%11100000
   1562  2a16		       e0		      BYTE.b	%11100000
   1563  2a17		       00		      BYTE.b	%00000000
   1564  2a18		       00		      BYTE.b	%00000000
   1565  2a19		       00		      BYTE.b	%00000000
   1566  2a1a		       00		      BYTE.b	%00000000
   1567  2a1b		       00		      BYTE.b	%00000000
   1568  2a1c		       00		      BYTE.b	%00000000
   1569  2a1d		       00		      BYTE.b	%00000000
   1570  2a1e		       00		      BYTE.b	%00000000
   1571  2a1f		       00		      BYTE.b	%00000000
   1572  2a20		       00		      BYTE.b	%00000000
   1573  2a21		       00		      BYTE.b	%00000000
   1574  2a22		       00		      BYTE.b	%00000000
   1575  2a23		       00		      BYTE.b	%00000000
   1576  2a24		       00		      BYTE.b	%00000000
   1577  2a25		       00		      BYTE.b	%00000000
   1578  2a26		       00		      BYTE.b	%00000000
   1579  2a27		       00		      BYTE.b	%00000000
   1580  2a28		       00		      BYTE.b	%00000000
   1581  2a29		       00		      BYTE.b	%00000000
   1582  2a2a		       00		      BYTE.b	%00000000
   1583  2a2b		       00		      BYTE.b	%00000000
   1584  2a2c		       00		      BYTE.b	%00000000
   1585  2a2d		       00		      BYTE.b	%00000000
   1586  2a2e		       00		      BYTE.b	%00000000
   1587  2a2f		       00		      BYTE.b	%00000000
   1588  2a30
   1589  2a30		       c0		      BYTE.b	%11000000
   1590  2a31		       c0		      BYTE.b	%11000000
   1591  2a32		       80		      BYTE.b	%10000000
   1592  2a33		       00		      BYTE.b	%00000000
   1593  2a34		       00		      BYTE.b	%00000000
   1594  2a35		       00		      BYTE.b	%00000000
   1595  2a36		       00		      BYTE.b	%00000000
   1596  2a37		       00		      BYTE.b	%00000000
   1597  2a38		       00		      BYTE.b	%00000000
   1598  2a39		       00		      BYTE.b	%00000000
   1599  2a3a		       00		      BYTE.b	%00000000
   1600  2a3b		       30		      BYTE.b	%00110000
   1601  2a3c		       38		      BYTE.b	%00111000
   1602  2a3d		       30		      BYTE.b	%00110000
   1603  2a3e		       00		      BYTE.b	%00000000
   1604  2a3f		       00		      BYTE.b	%00000000
   1605  2a40		       00		      BYTE.b	%00000000
   1606  2a41		       00		      BYTE.b	%00000000
   1607  2a42		       00		      BYTE.b	%00000000
   1608  2a43		       00		      BYTE.b	%00000000
   1609  2a44		       00		      BYTE.b	%00000000
   1610  2a45		       00		      BYTE.b	%00000000
   1611  2a46		       c0		      BYTE.b	%11000000
   1612  2a47		       e0		      BYTE.b	%11100000
   1613  2a48		       e0		      BYTE.b	%11100000
   1614  2a49		       00		      BYTE.b	%00000000
   1615  2a4a		       00		      BYTE.b	%00000000
   1616  2a4b		       00		      BYTE.b	%00000000
   1617  2a4c		       00		      BYTE.b	%00000000
   1618  2a4d		       00		      BYTE.b	%00000000
   1619  2a4e		       00		      BYTE.b	%00000000
   1620  2a4f		       00		      BYTE.b	%00000000
   1621  2a50		       00		      BYTE.b	%00000000
   1622  2a51		       00		      BYTE.b	%00000000
   1623  2a52		       00		      BYTE.b	%00000000
   1624  2a53		       00		      BYTE.b	%00000000
   1625  2a54		       00		      BYTE.b	%00000000
   1626  2a55		       00		      BYTE.b	%00000000
   1627  2a56		       00		      BYTE.b	%00000000
   1628  2a57		       00		      BYTE.b	%00000000
   1629  2a58		       00		      BYTE.b	%00000000
   1630  2a59		       00		      BYTE.b	%00000000
   1631  2a5a		       00		      BYTE.b	%00000000
   1632  2a5b		       00		      BYTE.b	%00000000
   1633  2a5c		       00		      BYTE.b	%00000000
   1634  2a5d		       00		      BYTE.b	%00000000
   1635  2a5e		       00		      BYTE.b	%00000000
   1636  2a5f		       00		      BYTE.b	%00000000
   1637  2a60
   1638  2a60		       00		      BYTE.b	%00000000
   1639  2a61		       00		      BYTE.b	%00000000
   1640  2a62		       e0		      BYTE.b	%11100000
   1641  2a63		       e0		      BYTE.b	%11100000
   1642  2a64		       c0		      BYTE.b	%11000000
   1643  2a65		       00		      BYTE.b	%00000000
   1644  2a66		       00		      BYTE.b	%00000000
   1645  2a67		       00		      BYTE.b	%00000000
   1646  2a68		       00		      BYTE.b	%00000000
   1647  2a69		       00		      BYTE.b	%00000000
   1648  2a6a		       00		      BYTE.b	%00000000
   1649  2a6b		       00		      BYTE.b	%00000000
   1650  2a6c		       00		      BYTE.b	%00000000
   1651  2a6d		       30		      BYTE.b	%00110000
   1652  2a6e		       38		      BYTE.b	%00111000
   1653  2a6f		       38		      BYTE.b	%00111000
   1654  2a70		       00		      BYTE.b	%00000000
   1655  2a71		       00		      BYTE.b	%00000000
   1656  2a72		       00		      BYTE.b	%00000000
   1657  2a73		       00		      BYTE.b	%00000000
   1658  2a74		       00		      BYTE.b	%00000000
   1659  2a75		       00		      BYTE.b	%00000000
   1660  2a76		       00		      BYTE.b	%00000000
   1661  2a77		       00		      BYTE.b	%00000000
   1662  2a78		       80		      BYTE.b	%10000000
   1663  2a79		       80		      BYTE.b	%10000000
   1664  2a7a		       c0		      BYTE.b	%11000000
   1665  2a7b		       80		      BYTE.b	%10000000
   1666  2a7c		       00		      BYTE.b	%00000000
   1667  2a7d		       00		      BYTE.b	%00000000
   1668  2a7e		       00		      BYTE.b	%00000000
   1669  2a7f		       00		      BYTE.b	%00000000
   1670  2a80		       00		      BYTE.b	%00000000
   1671  2a81		       00		      BYTE.b	%00000000
   1672  2a82		       00		      BYTE.b	%00000000
   1673  2a83		       00		      BYTE.b	%00000000
   1674  2a84		       00		      BYTE.b	%00000000
   1675  2a85		       00		      BYTE.b	%00000000
   1676  2a86		       00		      BYTE.b	%00000000
   1677  2a87		       00		      BYTE.b	%00000000
   1678  2a88		       00		      BYTE.b	%00000000
   1679  2a89		       00		      BYTE.b	%00000000
   1680  2a8a		       00		      BYTE.b	%00000000
   1681  2a8b		       00		      BYTE.b	%00000000
   1682  2a8c		       00		      BYTE.b	%00000000
   1683  2a8d		       00		      BYTE.b	%00000000
   1684  2a8e		       00		      BYTE.b	%00000000
   1685  2a8f		       00		      BYTE.b	%00000000
   1686  2a90
   1687  2a90		       00		      BYTE.b	%00000000
   1688  2a91		       00		      BYTE.b	%00000000
   1689  2a92		       00		      BYTE.b	%00000000
   1690  2a93		       00		      BYTE.b	%00000000
   1691  2a94		       e0		      BYTE.b	%11100000
   1692  2a95		       60		      BYTE.b	%01100000
   1693  2a96		       60		      BYTE.b	%01100000
   1694  2a97		       00		      BYTE.b	%00000000
   1695  2a98		       00		      BYTE.b	%00000000
   1696  2a99		       00		      BYTE.b	%00000000
   1697  2a9a		       00		      BYTE.b	%00000000
   1698  2a9b		       00		      BYTE.b	%00000000
   1699  2a9c		       00		      BYTE.b	%00000000
   1700  2a9d		       00		      BYTE.b	%00000000
   1701  2a9e		       00		      BYTE.b	%00000000
   1702  2a9f		       20		      BYTE.b	%00100000
   1703  2aa0		       30		      BYTE.b	%00110000
   1704  2aa1		       70		      BYTE.b	%01110000
   1705  2aa2		       60		      BYTE.b	%01100000
   1706  2aa3		       00		      BYTE.b	%00000000
   1707  2aa4		       00		      BYTE.b	%00000000
   1708  2aa5		       00		      BYTE.b	%00000000
   1709  2aa6		       00		      BYTE.b	%00000000
   1710  2aa7		       00		      BYTE.b	%00000000
   1711  2aa8		       00		      BYTE.b	%00000000
   1712  2aa9		       00		      BYTE.b	%00000000
   1713  2aaa		       00		      BYTE.b	%00000000
   1714  2aab		       80		      BYTE.b	%10000000
   1715  2aac		       80		      BYTE.b	%10000000
   1716  2aad		       00		      BYTE.b	%00000000
   1717  2aae		       00		      BYTE.b	%00000000
   1718  2aaf		       00		      BYTE.b	%00000000
   1719  2ab0		       00		      BYTE.b	%00000000
   1720  2ab1		       00		      BYTE.b	%00000000
   1721  2ab2		       00		      BYTE.b	%00000000
   1722  2ab3		       00		      BYTE.b	%00000000
   1723  2ab4		       00		      BYTE.b	%00000000
   1724  2ab5		       00		      BYTE.b	%00000000
   1725  2ab6		       00		      BYTE.b	%00000000
   1726  2ab7		       00		      BYTE.b	%00000000
   1727  2ab8		       00		      BYTE.b	%00000000
   1728  2ab9		       00		      BYTE.b	%00000000
   1729  2aba		       00		      BYTE.b	%00000000
   1730  2abb		       00		      BYTE.b	%00000000
   1731  2abc		       00		      BYTE.b	%00000000
   1732  2abd		       00		      BYTE.b	%00000000
   1733  2abe		       00		      BYTE.b	%00000000
   1734  2abf		       00		      BYTE.b	%00000000
   1735  2ac0
   1736  2ac0		       00		      BYTE.b	%00000000
   1737  2ac1		       00		      BYTE.b	%00000000
   1738  2ac2		       00		      BYTE.b	%00000000
   1739  2ac3		       00		      BYTE.b	%00000000
   1740  2ac4		       00		      BYTE.b	%00000000
   1741  2ac5		       00		      BYTE.b	%00000000
   1742  2ac6		       70		      BYTE.b	%01110000
   1743  2ac7		       70		      BYTE.b	%01110000
   1744  2ac8		       70		      BYTE.b	%01110000
   1745  2ac9		       00		      BYTE.b	%00000000
   1746  2aca		       00		      BYTE.b	%00000000
   1747  2acb		       00		      BYTE.b	%00000000
   1748  2acc		       00		      BYTE.b	%00000000
   1749  2acd		       00		      BYTE.b	%00000000
   1750  2ace		       00		      BYTE.b	%00000000
   1751  2acf		       00		      BYTE.b	%00000000
   1752  2ad0		       00		      BYTE.b	%00000000
   1753  2ad1		       00		      BYTE.b	%00000000
   1754  2ad2		       70		      BYTE.b	%01110000
   1755  2ad3		       70		      BYTE.b	%01110000
   1756  2ad4		       f0		      BYTE.b	%11110000
   1757  2ad5		       00		      BYTE.b	%00000000
   1758  2ad6		       00		      BYTE.b	%00000000
   1759  2ad7		       00		      BYTE.b	%00000000
   1760  2ad8		       00		      BYTE.b	%00000000
   1761  2ad9		       00		      BYTE.b	%00000000
   1762  2ada		       00		      BYTE.b	%00000000
   1763  2adb		       00		      BYTE.b	%00000000
   1764  2adc		       00		      BYTE.b	%00000000
   1765  2add		       00		      BYTE.b	%00000000
   1766  2ade		       00		      BYTE.b	%00000000
   1767  2adf		       00		      BYTE.b	%00000000
   1768  2ae0		       00		      BYTE.b	%00000000
   1769  2ae1		       00		      BYTE.b	%00000000
   1770  2ae2		       00		      BYTE.b	%00000000
   1771  2ae3		       00		      BYTE.b	%00000000
   1772  2ae4		       00		      BYTE.b	%00000000
   1773  2ae5		       00		      BYTE.b	%00000000
   1774  2ae6		       00		      BYTE.b	%00000000
   1775  2ae7		       00		      BYTE.b	%00000000
   1776  2ae8		       00		      BYTE.b	%00000000
   1777  2ae9		       00		      BYTE.b	%00000000
   1778  2aea		       00		      BYTE.b	%00000000
   1779  2aeb		       00		      BYTE.b	%00000000
   1780  2aec		       00		      BYTE.b	%00000000
   1781  2aed		       00		      BYTE.b	%00000000
   1782  2aee		       00		      BYTE.b	%00000000
   1783  2aef		       00		      BYTE.b	%00000000
   1784  2af0
   1785  2af0
   1786  2af0
   1787  2af0
------- FILE titlescreen/asm/titlescreen.asm
    247  2af0					      endif
    248  2af0				  -	      ifconst	mk_48x2_2_on
    249  2af0				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2af0					      endif
    251  2af0				  -	      ifconst	mk_48x2_3_on
    252  2af0				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2af0					      endif
    254  2af0				  -	      ifconst	mk_48x2_4_on
    255  2af0				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2af0					      endif
    257  2af0				  -	      ifconst	mk_48x2_5_on
    258  2af0				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2af0					      endif
    260  2af0				  -	      ifconst	mk_48x2_6_on
    261  2af0				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2af0					      endif
    263  2af0				  -	      ifconst	mk_48x2_7_on
    264  2af0				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2af0					      endif
    266  2af0
    267  2af0				  -	      ifconst	mk_48x2_8_on
    268  2af0				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2af0					      endif
    270  2af0
    271  2af0
    272  2af0				  -	      ifconst	mk_96x2_1_on
    273  2af0				  -	      include	"titlescreen/96x2_1_image.asm"
    274  2af0					      endif
    275  2af0				  -	      ifconst	mk_96x2_2_on
    276  2af0				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2af0					      endif
    278  2af0				  -	      ifconst	mk_96x2_3_on
    279  2af0				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2af0					      endif
    281  2af0				  -	      ifconst	mk_96x2_4_on
    282  2af0				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2af0					      endif
    284  2af0				  -	      ifconst	mk_96x2_5_on
    285  2af0				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2af0					      endif
    287  2af0				  -	      ifconst	mk_96x2_6_on
    288  2af0				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2af0					      endif
    290  2af0				  -	      ifconst	mk_96x2_7_on
    291  2af0				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2af0					      endif
    293  2af0				  -	      ifconst	mk_96x2_8_on
    294  2af0				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2af0					      endif
    296  2af0
    297  2af0				  -	      ifconst	mk_player_on
    298  2af0				  -	      include	"titlescreen/player_image.asm"
    299  2af0					      endif
    300  2af0
    301  2af0				  -	      ifconst	mk_score_on
    302  2af0				  -	      include	"titlescreen/score_image.asm"
    303  2af0					      endif
    304  2af0
    305  2af0				  -	      ifconst	mk_gameselect_on
    306  2af0				  -	      include	"titlescreen/gameselect_image.asm"
    307  2af0					      endif
    308  2af0
    309  2af0				  -	      ifconst	mk_player_on
    310  2af0				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2af0					      endif		;mk_player_on
    312  2af0
    313  2af0
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex3-animation\ex3-animation.bas.asm
    265  2af0
    266  2af0				   .
    267  2af0							; 
    268  2af0
    269  2af0					      if	ECHO2
      1252 bytes of ROM space left in bank 2
    270  2af0					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    271  2af0					      endif
    272  2af0		       00 01	   ECHO2      =	1
    273  2fd4					      ORG	$2FF4-bscode_length
    274  2fd4					      RORG	$BFF4-bscode_length
    275  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    276  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    277  2fd6				  -	      stx	FASTFETCH
    278  2fd6					      endif
    279  2fd6		       9a		      txs
    280  2fd7				  -	      if	bankswitch == 64
    281  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    282  2fd7					      else
    283  2fd7		       a9 f2		      lda	#>(start-1)
    284  2fd9					      endif
    285  2fd9		       48		      pha
    286  2fda		       a9 4f		      lda	#<(start-1)
    287  2fdc		       48		      pha
    288  2fdd		       48		      pha
    289  2fde		       8a		      txa
    290  2fdf		       48		      pha
    291  2fe0		       ba		      tsx
    292  2fe1					      if	bankswitch != 64
    293  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    294  2fe3		       2a		      rol
    295  2fe4		       2a		      rol
    296  2fe5		       2a		      rol
    297  2fe6		       2a		      rol
    298  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    299  2fe9		       aa		      tax
    300  2fea		       e8		      inx
    301  2feb				  -	      else
    302  2feb				  -	      lda	4,x	; get high byte of return address
    303  2feb				  -	      tay
    304  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    305  2feb				  -	      sta	4,x
    306  2feb				  -	      tya
    307  2feb				  -	      lsr
    308  2feb				  -	      lsr
    309  2feb				  -	      lsr
    310  2feb				  -	      lsr
    311  2feb				  -	      tax
    312  2feb				  -	      inx
    313  2feb					      endif
    314  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    315  2fee		       68		      pla
    316  2fef		       aa		      tax
    317  2ff0		       68		      pla
    318  2ff1		       60		      rts
    319  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    320  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    321  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    322  2ff2					      endif
    323  2ffc					      ORG	$2FFC
    324  2ffc					      RORG	$BFFC
    325  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    326  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    327  3000					      ORG	$3000
    328  3000					      RORG	$D000
    329  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    330  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    331  3000					      endif
    332  3000		       00 01	   ECHO3      =	1
    333  3fd4					      ORG	$3FF4-bscode_length
    334  3fd4					      RORG	$DFF4-bscode_length
    335  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    336  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    337  3fd6				  -	      stx	FASTFETCH
    338  3fd6					      endif
    339  3fd6		       9a		      txs
    340  3fd7				  -	      if	bankswitch == 64
    341  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    342  3fd7					      else
    343  3fd7		       a9 f2		      lda	#>(start-1)
    344  3fd9					      endif
    345  3fd9		       48		      pha
    346  3fda		       a9 4f		      lda	#<(start-1)
    347  3fdc		       48		      pha
    348  3fdd		       48		      pha
    349  3fde		       8a		      txa
    350  3fdf		       48		      pha
    351  3fe0		       ba		      tsx
    352  3fe1					      if	bankswitch != 64
    353  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    354  3fe3		       2a		      rol
    355  3fe4		       2a		      rol
    356  3fe5		       2a		      rol
    357  3fe6		       2a		      rol
    358  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    359  3fe9		       aa		      tax
    360  3fea		       e8		      inx
    361  3feb				  -	      else
    362  3feb				  -	      lda	4,x	; get high byte of return address
    363  3feb				  -	      tay
    364  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    365  3feb				  -	      sta	4,x
    366  3feb				  -	      tya
    367  3feb				  -	      lsr
    368  3feb				  -	      lsr
    369  3feb				  -	      lsr
    370  3feb				  -	      lsr
    371  3feb				  -	      tax
    372  3feb				  -	      inx
    373  3feb					      endif
    374  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    375  3fee		       68		      pla
    376  3fef		       aa		      tax
    377  3ff0		       68		      pla
    378  3ff1		       60		      rts
    379  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    380  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    381  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    382  3ff2					      endif
    383  3ffc					      ORG	$3FFC
    384  3ffc					      RORG	$DFFC
    385  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    386  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    387  4000					      ORG	$4000
    388  4000					      RORG	$F000
    389  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
    390  4000
    391  4000							; This is a 2-line kernel!
    392  4000					      ifnconst	vertical_reflect
    393  4000				   kernel
    394  4000					      endif
    395  4000		       85 02		      sta	WSYNC
    396  4002		       a9 ff		      lda	#255
    397  4004		       8d 96 02 	      sta	TIM64T
    398  4007
    399  4007		       a9 01		      lda	#1
    400  4009		       85 27		      sta	VDELBL
    401  400b		       85 25		      sta	VDELP0
    402  400d		       a6 92		      ldx	ballheight
    403  400f		       e8		      inx
    404  4010		       e8		      inx
    405  4011		       86 9f		      stx	temp4
    406  4013		       a5 86		      lda	player1y
    407  4015		       85 9e		      sta	temp3
    408  4017
    409  4017				  -	      ifconst	shakescreen
    410  4017				  -	      jsr	doshakescreen
    411  4017					      else
    412  4017		       a6 90		      ldx	missile0height
    413  4019		       e8		      inx
    414  401a					      endif
    415  401a
    416  401a		       e8		      inx
    417  401b		       86 f6		      stx	stack1
    418  401d
    419  401d		       a5 89		      lda	bally
    420  401f		       85 f7		      sta	stack2
    421  4021
    422  4021		       a5 85		      lda	player0y
    423  4023		       a2 00		      ldx	#0
    424  4025		       85 02		      sta	WSYNC
    425  4027		       86 1b		      stx	GRP0
    426  4029		       86 1c		      stx	GRP1
    427  402b		       86 0e		      stx	PF1L
    428  402d		       86 0f		      stx	PF2
    429  402f		       86 2c		      stx	CXCLR
    430  4031				  -	      ifconst	readpaddle
    431  4031				  -	      stx	paddle
    432  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    434  4033					      endif
    435  4033
    436  4033		       95 9d		      sta	temp2,x
    437  4035
    438  4035							;store these so they can be retrieved later
    439  4035					      ifnconst	pfres
    440  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    441  4037				  -	      else
    442  4037				  -	      ldx	#132-pfres*pfwidth
    443  4037					      endif
    444  4037
    445  4037		       c6 85		      dec	player0y
    446  4039
    447  4039		       a5 91		      lda	missile0y
    448  403b		       85 a0		      sta	temp5
    449  403d		       a5 88		      lda	missile1y
    450  403f		       85 a1		      sta	temp6
    451  4041
    452  4041		       a5 ef		      lda	playfieldpos
    453  4043		       85 9c		      sta	temp1
    454  4045
    455  4045				  -	      ifconst	pfrowheight
    456  4045				  -	      lda	#pfrowheight+2
    457  4045					      else
    458  4045					      ifnconst	pfres
    459  4045		       a9 0a		      lda	#10
    460  4047				  -	      else
    461  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    462  4047					      endif
    463  4047					      endif
    464  4047		       18		      clc
    465  4048		       e5 ef		      sbc	playfieldpos
    466  404a		       85 ef		      sta	playfieldpos
    467  404c		       4c 74 f0 	      jmp	.startkernel
    468  404f
    469  404f				   .skipDrawP0
    470  404f		       a9 00		      lda	#0
    471  4051		       a8		      tay
    472  4052		       4c a2 f0 	      jmp	.continueP0
    473  4055
    474  4055				   .skipDrawP1
    475  4055		       a9 00		      lda	#0
    476  4057		       a8		      tay
    477  4058		       4c 7e f0 	      jmp	.continueP1
    478  405b
    479  405b				   .kerloop		; enter at cycle 59??
    480  405b
    481  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    483  405c				   continuekernel2
    484  405c		       a5 92		      lda	ballheight
    485  405e
    486  405e				  -	      ifconst	pfres
    487  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    488  405e				  -	      sty	PF1L	;3
    489  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    490  405e				  -	      sty	PF2L	;3
    491  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    492  405e				  -	      sty	PF1R	; 3 too early?
    493  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    494  405e				  -	      sty	PF2R	;3
    495  405e					      else
    496  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    497  4060		       84 0e		      sty	PF1L	;3
    498  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    499  4064		       84 0f		      sty	PF2L	;3
    500  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    501  4068		       84 0e		      sty	PF1R	; 3 too early?
    502  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    503  406c		       84 0f		      sty	PF2R	;3
    504  406e					      endif
    505  406e
    506  406e							; should be playfield+$38 for width=2
    507  406e
    508  406e		       c7 89		      dcp	bally
    509  4070		       2a		      rol
    510  4071		       2a		      rol
    511  4072							; rol
    512  4072							; rol
    513  4072				   goback
    514  4072		       85 1f		      sta	ENABL
    515  4074				   .startkernel
    516  4074		       a5 8f		      lda	player1height	;3
    517  4076		       c7 86		      dcp	player1y	;5
    518  4078		       90 db		      bcc	.skipDrawP1	;2
    519  407a		       a4 86		      ldy	player1y	;3
    520  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    521  407e							; so it doesn't cross a page boundary!
    522  407e
    523  407e				   .continueP1
    524  407e		       85 1c		      sta	GRP1	;3
    525  4080
    526  4080					      ifnconst	player1colors
    527  4080		       a5 87		      lda	missile1height	;3
    528  4082		       c7 88		      dcp	missile1y	;5
    529  4084		       2a		      rol		;2
    530  4085		       2a		      rol		;2
    531  4086		       85 1e		      sta	ENAM1	;3
    532  4088				  -	      else
    533  4088				  -	      lda	(player1color),y
    534  4088				  -	      sta	COLUP1
    535  4088				  -	      ifnconst	playercolors
    536  4088				  -	      sleep	7
    537  4088				  -	      else
    538  4088				  -	      lda.w	player0colorstore
    539  4088				  -	      sta	COLUP0
    540  4088				  -	      endif
    541  4088					      endif
    542  4088
    543  4088				  -	      ifconst	pfres
    544  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    545  4088				  -	      sta	PF1L	;3
    546  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    547  4088				  -	      sta	PF2L	;3
    548  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    549  4088				  -	      sta	PF1R	; 3 too early?
    550  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    551  4088				  -	      sta	PF2R	;3
    552  4088					      else
    553  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    554  408a		       85 0e		      sta	PF1L	;3
    555  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    556  408e		       85 0f		      sta	PF2L	;3
    557  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    558  4092		       85 0e		      sta	PF1R	; 3 too early?
    559  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    560  4096		       85 0f		      sta	PF2R	;3
    561  4098					      endif
    562  4098							; sleep 3
    563  4098
    564  4098		       a5 8e		      lda	player0height
    565  409a		       c7 85		      dcp	player0y
    566  409c		       90 b1		      bcc	.skipDrawP0
    567  409e		       a4 85		      ldy	player0y
    568  40a0		       b1 8a		      lda	(player0pointer),y
    569  40a2				   .continueP0
    570  40a2		       85 1b		      sta	GRP0
    571  40a4
    572  40a4					      ifnconst	no_blank_lines
    573  40a4					      ifnconst	playercolors
    574  40a4		       a5 90		      lda	missile0height	;3
    575  40a6		       c7 91		      dcp	missile0y	;5
    576  40a8		       e5 f6		      sbc	stack1
    577  40aa		       85 1d		      sta	ENAM0	;3
    578  40ac				  -	      else
    579  40ac				  -	      lda	(player0color),y
    580  40ac				  -	      sta	player0colorstore
    581  40ac				  -	      sleep	6
    582  40ac					      endif
    583  40ac		       c6 9c		      dec	temp1
    584  40ae		       d0 ab		      bne	continuekernel
    585  40b0				  -	      else
    586  40b0				  -	      dec	temp1
    587  40b0				  -	      beq	altkernel2
    588  40b0				  -	      ifconst	readpaddle
    589  40b0				  -	      ldy	currentpaddle
    590  40b0				  -	      lda	INPT0,y
    591  40b0				  -	      bpl	noreadpaddle
    592  40b0				  -	      inc	paddle
    593  40b0				  -	      jmp	continuekernel2
    594  40b0				  -noreadpaddle
    595  40b0				  -	      sleep	2
    596  40b0				  -	      jmp	continuekernel
    597  40b0				  -	      else
    598  40b0				  -	      ifnconst	playercolors
    599  40b0				  -	      ifconst	PFcolors
    600  40b0				  -	      txa
    601  40b0				  -	      tay
    602  40b0				  -	      lda	(pfcolortable),y
    603  40b0				  -	      ifnconst	backgroundchange
    604  40b0				  -	      sta	COLUPF
    605  40b0				  -	      else
    606  40b0				  -	      sta	COLUBK
    607  40b0				  -	      endif
    608  40b0				  -	      jmp	continuekernel
    609  40b0				  -	      else
    610  40b0				  -	      ifconst	kernelmacrodef
    611  40b0				  -	      kernelmacro
    612  40b0				  -	      else
    613  40b0				  -	      sleep	12
    614  40b0				  -	      endif
    615  40b0				  -	      endif
    616  40b0				  -	      else
    617  40b0				  -	      lda	(player0color),y
    618  40b0				  -	      sta	player0colorstore
    619  40b0				  -	      sleep	4
    620  40b0				  -	      endif
    621  40b0				  -	      jmp	continuekernel
    622  40b0				  -	      endif
    623  40b0				  -altkernel2
    624  40b0				  -	      txa
    625  40b0				  -	      ifnconst	vertical_reflect
    626  40b0				  -	      sbx	#256-pfwidth
    627  40b0				  -	      else
    628  40b0				  -	      sbx	#256-pfwidth/2
    629  40b0				  -	      endif
    630  40b0				  -	      bmi	lastkernelline
    631  40b0				  -	      ifconst	pfrowheight
    632  40b0				  -	      lda	#pfrowheight
    633  40b0				  -	      else
    634  40b0				  -	      ifnconst	pfres
    635  40b0				  -	      lda	#8
    636  40b0				  -	      else
    637  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    638  40b0				  -	      endif
    639  40b0				  -	      endif
    640  40b0				  -	      sta	temp1
    641  40b0				  -	      jmp	continuekernel
    642  40b0					      endif
    643  40b0
    644  40b0				   altkernel
    645  40b0
    646  40b0				  -	      ifconst	PFmaskvalue
    647  40b0				  -	      lda	#PFmaskvalue
    648  40b0					      else
    649  40b0		       a9 00		      lda	#0
    650  40b2					      endif
    651  40b2		       85 0e		      sta	PF1L
    652  40b4		       85 0f		      sta	PF2
    653  40b6
    654  40b6
    655  40b6							;sleep 3
    656  40b6
    657  40b6							;28 cycles to fix things
    658  40b6							;minus 11=17
    659  40b6
    660  40b6							; lax temp4
    661  40b6							; clc
    662  40b6		       8a		      txa
    663  40b7					      ifnconst	vertical_reflect
    664  40b7		       cb fc		      sbx	#256-pfwidth
    665  40b9				  -	      else
    666  40b9				  -	      sbx	#256-pfwidth/2
    667  40b9					      endif
    668  40b9
    669  40b9		       30 12		      bmi	lastkernelline
    670  40bb
    671  40bb				  -	      ifconst	PFcolorandheight
    672  40bb				  -	      ifconst	pfres
    673  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    674  40bb				  -	      else
    675  40bb				  -	      ldy	playfieldcolorandheight-87,x
    676  40bb				  -	      endif
    677  40bb				  -	      ifnconst	backgroundchange
    678  40bb				  -	      sty	COLUPF
    679  40bb				  -	      else
    680  40bb				  -	      sty	COLUBK
    681  40bb				  -	      endif
    682  40bb				  -	      ifconst	pfres
    683  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    684  40bb				  -	      else
    685  40bb				  -	      lda	playfieldcolorandheight-88,x
    686  40bb				  -	      endif
    687  40bb				  -	      sta.w	temp1
    688  40bb					      endif
    689  40bb				  -	      ifconst	PFheights
    690  40bb				  -	      lsr
    691  40bb				  -	      lsr
    692  40bb				  -	      tay
    693  40bb				  -	      lda	(pfheighttable),y
    694  40bb				  -	      sta.w	temp1
    695  40bb					      endif
    696  40bb				  -	      ifconst	PFcolors
    697  40bb				  -	      tay
    698  40bb				  -	      lda	(pfcolortable),y
    699  40bb				  -	      ifnconst	backgroundchange
    700  40bb				  -	      sta	COLUPF
    701  40bb				  -	      else
    702  40bb				  -	      sta	COLUBK
    703  40bb				  -	      endif
    704  40bb				  -	      ifconst	pfrowheight
    705  40bb				  -	      lda	#pfrowheight
    706  40bb				  -	      else
    707  40bb				  -	      ifnconst	pfres
    708  40bb				  -	      lda	#8
    709  40bb				  -	      else
    710  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    711  40bb				  -	      endif
    712  40bb				  -	      endif
    713  40bb				  -	      sta	temp1
    714  40bb					      endif
    715  40bb					      ifnconst	PFcolorandheight
    716  40bb					      ifnconst	PFcolors
    717  40bb					      ifnconst	PFheights
    718  40bb					      ifnconst	no_blank_lines
    719  40bb							; read paddle 0
    720  40bb							; lo-res paddle read
    721  40bb							; bit INPT0
    722  40bb							; bmi paddleskipread
    723  40bb							; inc paddle0
    724  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    726  40c0				  -	      ifconst	pfrowheight
    727  40c0				  -	      lda	#pfrowheight
    728  40c0					      else
    729  40c0					      ifnconst	pfres
    730  40c0		       a9 08		      lda	#8
    731  40c2				  -	      else
    732  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    733  40c2					      endif
    734  40c2					      endif
    735  40c2		       85 9c		      sta	temp1
    736  40c4					      endif
    737  40c4					      endif
    738  40c4					      endif
    739  40c4					      endif
    740  40c4
    741  40c4
    742  40c4		       a5 92		      lda	ballheight
    743  40c6		       c7 89		      dcp	bally
    744  40c8		       e5 9f		      sbc	temp4
    745  40ca
    746  40ca
    747  40ca		       4c 72 f0 	      jmp	goback
    748  40cd
    749  40cd
    750  40cd					      ifnconst	no_blank_lines
    751  40cd				   lastkernelline
    752  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    754  40d2				  -	      else
    755  40d2				  -	      ldy	#124
    756  40d2				  -	      lda	(pfcolortable),y
    757  40d2				  -	      sta	COLUPF
    758  40d2					      endif
    759  40d2
    760  40d2				  -	      ifconst	PFheights
    761  40d2				  -	      ldx	#1
    762  40d2				  -			;sleep 4
    763  40d2				  -	      sleep	3	; this was over 1 cycle
    764  40d2					      else
    765  40d2		       a6 ef		      ldx	playfieldpos
    766  40d4							;sleep 3
      0  40d4					      sleep	2	; this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    768  40d5					      endif
    769  40d5
    770  40d5		       4c 1b f1 	      jmp	enterlastkernel
    771  40d8
    772  40d8				  -	      else
    773  40d8				  -lastkernelline
    774  40d8				  -
    775  40d8				  -	      ifconst	PFheights
    776  40d8				  -	      ldx	#1
    777  40d8				  -			;sleep 5
    778  40d8				  -	      sleep	4	; this was over 1 cycle
    779  40d8				  -	      else
    780  40d8				  -	      ldx	playfieldpos
    781  40d8				  -			;sleep 4
    782  40d8				  -	      sleep	3	; this was over 1 cycle
    783  40d8				  -	      endif
    784  40d8				  -
    785  40d8				  -	      cpx	#0
    786  40d8				  -	      bne	.enterfromNBL
    787  40d8				  -	      jmp	no_blank_lines_bailout
    788  40d8					      endif
    789  40d8
    790  40d8					      if	((<*)>$d5)
    791  4100		       00 00 00 00*	      align	256
    792  4100					      endif
    793  4100							; this is a kludge to prevent page wrapping - fix!!!
    794  4100
    795  4100				   .skipDrawlastP1
    796  4100		       a9 00		      lda	#0
    797  4102		       a8		      tay		; added so we don't cross a page
    798  4103		       4c 2d f1 	      jmp	.continuelastP1
    799  4106
    800  4106				   .endkerloop		; enter at cycle 59??
    801  4106
    802  4106		       ea		      nop
    803  4107
    804  4107				   .enterfromNBL
    805  4107				  -	      ifconst	pfres
    806  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    807  4107				  -	      sty	PF1L	;3
    808  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    809  4107				  -	      sty	PF2L	;3
    810  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    811  4107				  -	      sty	PF1R	; possibly too early?
    812  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    813  4107				  -	      sty	PF2R	;3
    814  4107					      else
    815  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    816  410a		       84 0e		      sty	PF1L	;3
    817  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    818  410f		       84 0f		      sty	PF2L	;3
    819  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    820  4114		       84 0e		      sty	PF1R	; possibly too early?
    821  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    822  4119		       84 0f		      sty	PF2R	;3
    823  411b					      endif
    824  411b
    825  411b				   enterlastkernel
    826  411b		       a5 92		      lda	ballheight
    827  411d
    828  411d							; tya
    829  411d		       c7 89		      dcp	bally
    830  411f							; sleep 4
    831  411f
    832  411f							; sbc stack3
    833  411f		       2a		      rol
    834  4120		       2a		      rol
    835  4121		       85 1f		      sta	ENABL
    836  4123
    837  4123		       a5 8f		      lda	player1height	;3
    838  4125		       c7 86		      dcp	player1y	;5
    839  4127		       90 d7		      bcc	.skipDrawlastP1
    840  4129		       a4 86		      ldy	player1y	;3
    841  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    842  412d							; so it doesn't cross a page boundary!
    843  412d
    844  412d				   .continuelastP1
    845  412d		       85 1c		      sta	GRP1	;3
    846  412f
    847  412f					      ifnconst	player1colors
    848  412f		       a5 87		      lda	missile1height	;3
    849  4131		       c7 88		      dcp	missile1y	;5
    850  4133				  -	      else
    851  4133				  -	      lda	(player1color),y
    852  4133				  -	      sta	COLUP1
    853  4133					      endif
    854  4133
    855  4133		       ca		      dex
    856  4134							;dec temp4 ; might try putting this above PF writes
    857  4134		       f0 36		      beq	endkernel
    858  4136
    859  4136
    860  4136				  -	      ifconst	pfres
    861  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    862  4136				  -	      sty	PF1L	;3
    863  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    864  4136				  -	      sty	PF2L	;3
    865  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    866  4136				  -	      sty	PF1R	; possibly too early?
    867  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    868  4136				  -	      sty	PF2R	;3
    869  4136					      else
    870  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    871  4139		       84 0e		      sty	PF1L	;3
    872  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    873  413e		       84 0f		      sty	PF2L	;3
    874  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    875  4143		       84 0e		      sty	PF1R	; possibly too early?
    876  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    877  4148		       84 0f		      sty	PF2R	;3
    878  414a					      endif
    879  414a
    880  414a					      ifnconst	player1colors
    881  414a		       2a		      rol		;2
    882  414b		       2a		      rol		;2
    883  414c		       85 1e		      sta	ENAM1	;3
    884  414e				  -	      else
    885  414e				  -	      ifnconst	playercolors
    886  414e				  -	      sleep	7
    887  414e				  -	      else
    888  414e				  -	      lda.w	player0colorstore
    889  414e				  -	      sta	COLUP0
    890  414e				  -	      endif
    891  414e					      endif
    892  414e
    893  414e		       ad 8e 00 	      lda.w	player0height
    894  4151		       c7 85		      dcp	player0y
    895  4153		       90 11		      bcc	.skipDrawlastP0
    896  4155		       a4 85		      ldy	player0y
    897  4157		       b1 8a		      lda	(player0pointer),y
    898  4159				   .continuelastP0
    899  4159		       85 1b		      sta	GRP0
    900  415b
    901  415b
    902  415b
    903  415b					      ifnconst	no_blank_lines
    904  415b		       a5 90		      lda	missile0height	;3
    905  415d		       c7 91		      dcp	missile0y	;5
    906  415f		       e5 f6		      sbc	stack1
    907  4161		       85 1d		      sta	ENAM0	;3
    908  4163		       4c 06 f1 	      jmp	.endkerloop
    909  4166				  -	      else
    910  4166				  -	      ifconst	readpaddle
    911  4166				  -	      ldy	currentpaddle
    912  4166				  -	      lda	INPT0,y
    913  4166				  -	      bpl	noreadpaddle2
    914  4166				  -	      inc	paddle
    915  4166				  -	      jmp	.endkerloop
    916  4166				  -noreadpaddle2
    917  4166				  -	      sleep	4
    918  4166				  -	      jmp	.endkerloop
    919  4166				  -	      else		; no_blank_lines and no paddle reading
    920  4166				  -	      pla
    921  4166				  -	      pha		; 14 cycles in 4 bytes
    922  4166				  -	      pla
    923  4166				  -	      pha
    924  4166				  -			; sleep 14
    925  4166				  -	      jmp	.endkerloop
    926  4166				  -	      endif
    927  4166					      endif
    928  4166
    929  4166
    930  4166							; ifconst donepaddleskip
    931  4166							;paddleskipread
    932  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    933  4166							; plus we get a lo-res paddle read
    934  4166							; bmi donepaddleskip
    935  4166							; endif
    936  4166
    937  4166				   .skipDrawlastP0
    938  4166		       a9 00		      lda	#0
    939  4168		       a8		      tay
    940  4169		       4c 59 f1 	      jmp	.continuelastP0
    941  416c
    942  416c				  -	      ifconst	no_blank_lines
    943  416c				  -no_blank_lines_bailout
    944  416c				  -	      ldx	#0
    945  416c					      endif
    946  416c
    947  416c				   endkernel
    948  416c							; 6 digit score routine
    949  416c		       86 0e		      stx	PF1
    950  416e		       86 0f		      stx	PF2
    951  4170		       86 0d		      stx	PF0
    952  4172		       18		      clc
    953  4173
    954  4173				  -	      ifconst	pfrowheight
    955  4173				  -	      lda	#pfrowheight+2
    956  4173					      else
    957  4173					      ifnconst	pfres
    958  4173		       a9 0a		      lda	#10
    959  4175				  -	      else
    960  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    961  4175					      endif
    962  4175					      endif
    963  4175
    964  4175		       e5 ef		      sbc	playfieldpos
    965  4177		       85 ef		      sta	playfieldpos
    966  4179		       8a		      txa
    967  417a
    968  417a				  -	      ifconst	shakescreen
    969  417a				  -	      bit	shakescreen
    970  417a				  -	      bmi	noshakescreen2
    971  417a				  -	      ldx	#$3D
    972  417a				  -noshakescreen2
    973  417a					      endif
    974  417a
    975  417a		       95 02		      sta	WSYNC,x
    976  417c
    977  417c							; STA WSYNC ;first one, need one more
    978  417c		       85 0b		      sta	REFP0
    979  417e		       85 0c		      sta	REFP1
    980  4180		       85 1b		      STA	GRP0
    981  4182		       85 1c		      STA	GRP1
    982  4184							; STA PF1
    983  4184							; STA PF2
    984  4184		       85 2b		      sta	HMCLR
    985  4186		       85 1d		      sta	ENAM0
    986  4188		       85 1e		      sta	ENAM1
    987  418a		       85 1f		      sta	ENABL
    988  418c
    989  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    990  418e		       85 85		      sta	player0y
    991  4190		       a5 9e		      lda	temp3
    992  4192		       85 86		      sta	player1y
    993  4194					      ifnconst	player1colors
    994  4194		       a5 a1		      lda	temp6
    995  4196		       85 88		      sta	missile1y
    996  4198					      endif
    997  4198					      ifnconst	playercolors
    998  4198					      ifnconst	readpaddle
    999  4198		       a5 a0		      lda	temp5
   1000  419a		       85 91		      sta	missile0y
   1001  419c					      endif
   1002  419c					      endif
   1003  419c		       a5 f7		      lda	stack2
   1004  419e		       85 89		      sta	bally
   1005  41a0
   1006  41a0							; strangely, this isn't required any more. might have
   1007  41a0							; resulted from the no_blank_lines score bounce fix
   1008  41a0							;ifconst no_blank_lines
   1009  41a0							;sta WSYNC
   1010  41a0							;endif
   1011  41a0
   1012  41a0		       ad 84 02 	      lda	INTIM
   1013  41a3		       18		      clc
   1014  41a4					      ifnconst	vblank_time
   1015  41a4		       69 8e		      adc	#43+12+87
   1016  41a6				  -	      else
   1017  41a6				  -	      adc	#vblank_time+12+87
   1018  41a6				  -
   1019  41a6					      endif
   1020  41a6							; sta WSYNC
   1021  41a6		       8d 96 02 	      sta	TIM64T
   1022  41a9
   1023  41a9				  -	      ifconst	minikernel
   1024  41a9				  -	      jsr	minikernel
   1025  41a9					      endif
   1026  41a9
   1027  41a9							; now reassign temp vars for score pointers
   1028  41a9
   1029  41a9							; score pointers contain:
   1030  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1031  41a9							; swap lo2->temp1
   1032  41a9							; swap lo4->temp3
   1033  41a9							; swap lo6->temp5
   1034  41a9					      ifnconst	noscore
   1035  41a9		       a5 97		      lda	scorepointers+1
   1036  41ab							; ldy temp1
   1037  41ab		       85 9c		      sta	temp1
   1038  41ad							; sty scorepointers+1
   1039  41ad
   1040  41ad		       a5 99		      lda	scorepointers+3
   1041  41af							; ldy temp3
   1042  41af		       85 9e		      sta	temp3
   1043  41b1							; sty scorepointers+3
   1044  41b1
   1045  41b1
   1046  41b1		       85 2b		      sta	HMCLR
   1047  41b3		       ba		      tsx
   1048  41b4		       86 f6		      stx	stack1
   1049  41b6		       a2 e0		      ldx	#$E0
   1050  41b8		       86 20		      stx	HMP0
   1051  41ba
   1052  41ba		       a5 a3		      LDA	scorecolor
   1053  41bc		       85 06		      STA	COLUP0
   1054  41be		       85 07		      STA	COLUP1
   1055  41c0				  -	      ifconst	scorefade
   1056  41c0				  -	      STA	stack2
   1057  41c0					      endif
   1058  41c0				  -	      ifconst	pfscore
   1059  41c0				  -	      lda	pfscorecolor
   1060  41c0				  -	      sta	COLUPF
   1061  41c0					      endif
   1062  41c0		       85 02		      sta	WSYNC
   1063  41c2		       a2 00		      ldx	#0
   1064  41c4		       86 1b		      STx	GRP0
   1065  41c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1066  41c8
   1067  41c8		       a5 9b		      lda	scorepointers+5
   1068  41ca							; ldy temp5
   1069  41ca		       95 a0		      sta	temp5,x
   1070  41cc							; sty scorepointers+5
   1071  41cc		       a9 ff		      lda	#>scoretable
   1072  41ce		       85 97		      sta	scorepointers+1
   1073  41d0		       85 99		      sta	scorepointers+3
   1074  41d2		       85 9b		      sta	scorepointers+5
   1075  41d4		       85 9d		      sta	temp2
   1076  41d6		       85 9f		      sta	temp4
   1077  41d8		       85 a1		      sta	temp6
   1078  41da		       a0 07		      LDY	#7
   1079  41dc		       84 25		      STY	VDELP0
   1080  41de		       85 10		      STA	RESP0
   1081  41e0		       85 11		      STA	RESP1
   1082  41e2
   1083  41e2
   1084  41e2		       a9 03		      LDA	#$03
   1085  41e4		       85 04		      STA	NUSIZ0
   1086  41e6		       85 05		      STA	NUSIZ1
   1087  41e8		       85 26		      STA	VDELP1
   1088  41ea		       a9 f0		      LDA	#$F0
   1089  41ec		       85 21		      STA	HMP1
   1090  41ee		       b1 96		      lda	(scorepointers),y
   1091  41f0		       85 1b		      sta	GRP0
   1092  41f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   1093  41f4		       4c 08 f2 	      jmp	beginscore
   1094  41f7
   1095  41f7
   1096  41f7					      if	((<*)>$d4)
   1097  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1098  4200					      endif
   1099  4200
   1100  4200				   loop2
   1101  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1102  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1103  4204				  -	      ifconst	pfscore
   1104  4204				  -	      lda.w	pfscore1
   1105  4204				  -	      sta	PF1
   1106  4204					      else
   1107  4204				  -	      ifconst	scorefade
   1108  4204				  -	      sleep	2
   1109  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   1110  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   1112  4208					      endif
   1113  4208					      endif
   1114  4208							; cycle 0
   1115  4208				   beginscore
   1116  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1117  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1118  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1119  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1120  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1121  4212		       9a		      txs
   1122  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1123  4215				  -	      ifconst	scorefade
   1124  4215				  -	      lda	stack2
   1125  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   1127  4217					      endif
   1128  4217
   1129  4217				  -	      ifconst	pfscore
   1130  4217				  -	      lda	pfscore2
   1131  4217				  -	      sta	PF1
   1132  4217					      else
   1133  4217				  -	      ifconst	scorefade
   1134  4217				  -	      sta	COLUP0
   1135  4217				  -	      sta	COLUP1
   1136  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   1138  421a					      endif
   1139  421a					      endif
   1140  421a
   1141  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1142  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1143  421e		       ba		      tsx
   1144  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1145  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1146  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1147  4225		       88		      dey
   1148  4226		       10 d8		      bpl	loop2	;+2 60 180
   1149  4228
   1150  4228		       a6 f6		      ldx	stack1
   1151  422a		       9a		      txs
   1152  422b							; lda scorepointers+1
   1153  422b		       a4 9c		      ldy	temp1
   1154  422d							; sta temp1
   1155  422d		       84 97		      sty	scorepointers+1
   1156  422f
   1157  422f		       a9 00		      LDA	#0
   1158  4231		       85 0e		      sta	PF1
   1159  4233		       85 1b		      STA	GRP0
   1160  4235		       85 1c		      STA	GRP1
   1161  4237		       85 25		      STA	VDELP0
   1162  4239		       85 26		      STA	VDELP1	;do we need these
   1163  423b		       85 04		      STA	NUSIZ0
   1164  423d		       85 05		      STA	NUSIZ1
   1165  423f
   1166  423f							; lda scorepointers+3
   1167  423f		       a4 9e		      ldy	temp3
   1168  4241							; sta temp3
   1169  4241		       84 99		      sty	scorepointers+3
   1170  4243
   1171  4243							; lda scorepointers+5
   1172  4243		       a4 a0		      ldy	temp5
   1173  4245							; sta temp5
   1174  4245		       84 9b		      sty	scorepointers+5
   1175  4247					      endif		;noscore
   1176  4247				  -	      ifconst	readpaddle
   1177  4247				  -	      lda	#%11000010
   1178  4247					      else
   1179  4247				  -	      ifconst	qtcontroller
   1180  4247				  -	      lda	qtcontroller
   1181  4247				  -	      lsr		; bit 0 in carry
   1182  4247				  -	      lda	#4
   1183  4247				  -	      ror		; carry into top of A
   1184  4247					      else
   1185  4247		       a9 02		      lda	#2
   1186  4249					      endif		; qtcontroller
   1187  4249					      endif		; readpaddle
   1188  4249		       85 02		      sta	WSYNC
   1189  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1191  4250				  -	      ifconst	shakescreen
   1192  4250				  -doshakescreen
   1193  4250				  -	      bit	shakescreen
   1194  4250				  -	      bmi	noshakescreen
   1195  4250				  -	      sta	WSYNC
   1196  4250				  -noshakescreen
   1197  4250				  -	      ldx	missile0height
   1198  4250				  -	      inx
   1199  4250				  -	      rts
   1200  4250					      endif
   1201  4250
   1202  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1203  4250
   1204  4250				   start
   1205  4250		       78		      sei
   1206  4251		       d8		      cld
   1207  4252		       a0 00		      ldy	#0
   1208  4254		       a5 d0		      lda	$D0
   1209  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1210  4258		       d0 07		      bne	MachineIs2600
   1211  425a		       a5 d1		      lda	$D1
   1212  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1213  425e		       d0 01		      bne	MachineIs2600
   1214  4260		       88		      dey
   1215  4261				   MachineIs2600
   1216  4261		       a2 00		      ldx	#0
   1217  4263		       8a		      txa
   1218  4264				   clearmem
   1219  4264		       e8		      inx
   1220  4265		       9a		      txs
   1221  4266		       48		      pha
   1222  4267		       d0 fb		      bne	clearmem
   1223  4269		       84 9c		      sty	temp1
   1224  426b					      ifnconst	multisprite
   1225  426b				  -	      ifconst	pfrowheight
   1226  426b				  -	      lda	#pfrowheight
   1227  426b					      else
   1228  426b				  -	      ifconst	pfres
   1229  426b				  -	      lda	#(96/pfres)
   1230  426b					      else
   1231  426b		       a9 08		      lda	#8
   1232  426d					      endif
   1233  426d					      endif
   1234  426d		       85 ef		      sta	playfieldpos
   1235  426f					      endif
   1236  426f		       a2 05		      ldx	#5
   1237  4271				   initscore
   1238  4271		       a9 74		      lda	#<scoretable
   1239  4273		       95 96		      sta	scorepointers,x
   1240  4275		       ca		      dex
   1241  4276		       10 f9		      bpl	initscore
   1242  4278		       a9 01		      lda	#1
   1243  427a		       85 0a		      sta	CTRLPF
   1244  427c		       0d 84 02 	      ora	INTIM
   1245  427f		       85 a2		      sta	rand
   1246  4281
   1247  4281				  -	      ifconst	multisprite
   1248  4281				  -	      jsr	multisprite_setup
   1249  4281					      endif
   1250  4281
   1251  4281				  -	      ifnconst	bankswitch
   1252  4281				  -	      jmp	game
   1253  4281					      else
   1254  4281		       a9 8f		      lda	#>(game-1)
   1255  4283		       48		      pha
   1256  4284		       a9 ff		      lda	#<(game-1)
   1257  4286		       48		      pha
   1258  4287		       48		      pha
   1259  4288		       48		      pha
   1260  4289		       a2 01		      ldx	#1
   1261  428b		       4c eb ff 	      jmp	BS_jsr
   1262  428e					      endif
   1263  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1264  428e
   1265  428e							; playfield drawing routines
   1266  428e							; you get a 32x12 bitmapped display in a single color :)
   1267  428e							; 0-31 and 0-11
   1268  428e
   1269  428e				   pfclear		; clears playfield - or fill with pattern
   1270  428e				  -	      ifconst	pfres
   1271  428e				  -	      ldx	#pfres*pfwidth-1
   1272  428e					      else
   1273  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1274  4290					      endif
   1275  4290				   pfclear_loop
   1276  4290					      ifnconst	superchip
   1277  4290		       95 a4		      sta	playfield,x
   1278  4292				  -	      else
   1279  4292				  -	      sta	playfield-128,x
   1280  4292					      endif
   1281  4292		       ca		      dex
   1282  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1284  4298
   1285  4298				   setuppointers
   1286  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1287  429a		       aa		      tax		; put x-value in x 
   1288  429b		       4a		      lsr
   1289  429c		       4a		      lsr
   1290  429d		       4a		      lsr		; divide x pos by 8 
   1291  429e		       85 9c		      sta	temp1
   1292  42a0		       98		      tya
   1293  42a1		       0a		      asl
   1294  42a2					      if	pfwidth=4
   1295  42a2		       0a		      asl		; multiply y pos by 4
   1296  42a3					      endif		; else multiply by 2
   1297  42a3		       18		      clc
   1298  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1299  42a6		       a8		      tay		; put the value in y
   1300  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1301  42a9		       60		      rts
   1302  42aa
   1303  42aa				   pfread
   1304  42aa							;x=xvalue, y=yvalue
   1305  42aa		       20 98 f2 	      jsr	setuppointers
   1306  42ad		       bd 42 f3 	      lda	setbyte,x
   1307  42b0		       39 a4 00 	      and	playfield,y
   1308  42b3		       5d 42 f3 	      eor	setbyte,x
   1309  42b6							; beq readzero
   1310  42b6							; lda #1
   1311  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1313  42b9
   1314  42b9				   pfpixel
   1315  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1316  42b9		       20 98 f2 	      jsr	setuppointers
   1317  42bc
   1318  42bc					      ifconst	bankswitch
   1319  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1320  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1321  42c0		       4a		      lsr
   1322  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1323  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1324  42c6		       5d 42 f3 	      eor	setbyte,x
   1325  42c9				  -	      ifconst	superchip
   1326  42c9				  -	      sta	playfield-128,y
   1327  42c9					      else
   1328  42c9		       99 a4 00 	      sta	playfield,y
   1329  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1331  42cf				   pixelon_r
   1332  42cf		       b9 a4 00 	      lda	playfield,y
   1333  42d2		       1d 42 f3 	      ora	setbyte,x
   1334  42d5				  -	      ifconst	superchip
   1335  42d5				  -	      sta	playfield-128,y
   1336  42d5					      else
   1337  42d5		       99 a4 00 	      sta	playfield,y
   1338  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1340  42db				   pixeloff_r
   1341  42db		       bd 42 f3 	      lda	setbyte,x
   1342  42de		       49 ff		      eor	#$ff
   1343  42e0		       39 a4 00 	      and	playfield,y
   1344  42e3				  -	      ifconst	superchip
   1345  42e3				  -	      sta	playfield-128,y
   1346  42e3					      else
   1347  42e3		       99 a4 00 	      sta	playfield,y
   1348  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1350  42e9
   1351  42e9				  -	      else
   1352  42e9				  -	      jmp	plotpoint
   1353  42e9					      endif
   1354  42e9
   1355  42e9				   pfhline
   1356  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1357  42e9		       20 98 f2 	      jsr	setuppointers
   1358  42ec		       4c f6 f2 	      jmp	noinc
   1359  42ef				   keepgoing
   1360  42ef		       e8		      inx
   1361  42f0		       8a		      txa
   1362  42f1		       29 07		      and	#7
   1363  42f3		       d0 01		      bne	noinc
   1364  42f5		       c8		      iny
   1365  42f6				   noinc
   1366  42f6		       20 1b f3 	      jsr	plotpoint
   1367  42f9		       e4 9e		      cpx	temp3
   1368  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1370  4300
   1371  4300				   pfvline
   1372  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1373  4300		       20 98 f2 	      jsr	setuppointers
   1374  4303		       84 9c		      sty	temp1	; store memory location offset
   1375  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1376  4307		       a5 9e		      lda	temp3
   1377  4309		       0a		      asl
   1378  430a					      if	pfwidth=4
   1379  430a		       0a		      asl		; multiply by 4
   1380  430b					      endif		; else multiply by 2
   1381  430b		       85 9e		      sta	temp3	; store it
   1382  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1383  430d							; right now, temp1=y=starting memory location, temp3=final
   1384  430d							; x should equal original x value
   1385  430d				   keepgoingy
   1386  430d		       20 1b f3 	      jsr	plotpoint
   1387  4310		       c8		      iny
   1388  4311		       c8		      iny
   1389  4312					      if	pfwidth=4
   1390  4312		       c8		      iny
   1391  4313		       c8		      iny
   1392  4314					      endif
   1393  4314		       c4 9e		      cpy	temp3
   1394  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1396  431b
   1397  431b				   plotpoint
   1398  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1399  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1400  431f		       4a		      lsr
   1401  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1402  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1403  4325		       5d 42 f3 	      eor	setbyte,x
   1404  4328				  -	      ifconst	superchip
   1405  4328				  -	      sta	playfield-128,y
   1406  4328					      else
   1407  4328		       99 a4 00 	      sta	playfield,y
   1408  432b					      endif
   1409  432b		       60		      rts
   1410  432c				   pixelon
   1411  432c		       b9 a4 00 	      lda	playfield,y
   1412  432f		       1d 42 f3 	      ora	setbyte,x
   1413  4332				  -	      ifconst	superchip
   1414  4332				  -	      sta	playfield-128,y
   1415  4332					      else
   1416  4332		       99 a4 00 	      sta	playfield,y
   1417  4335					      endif
   1418  4335		       60		      rts
   1419  4336				   pixeloff
   1420  4336		       bd 42 f3 	      lda	setbyte,x
   1421  4339		       49 ff		      eor	#$ff
   1422  433b		       39 a4 00 	      and	playfield,y
   1423  433e				  -	      ifconst	superchip
   1424  433e				  -	      sta	playfield-128,y
   1425  433e					      else
   1426  433e		       99 a4 00 	      sta	playfield,y
   1427  4341					      endif
   1428  4341		       60		      rts
   1429  4342
   1430  4342				   setbyte
   1431  4342					      ifnconst	pfcenter
   1432  4342		       80		      .byte.b	$80
   1433  4343		       40		      .byte.b	$40
   1434  4344		       20		      .byte.b	$20
   1435  4345		       10		      .byte.b	$10
   1436  4346		       08		      .byte.b	$08
   1437  4347		       04		      .byte.b	$04
   1438  4348		       02		      .byte.b	$02
   1439  4349		       01		      .byte.b	$01
   1440  434a					      endif
   1441  434a		       01		      .byte.b	$01
   1442  434b		       02		      .byte.b	$02
   1443  434c		       04		      .byte.b	$04
   1444  434d		       08		      .byte.b	$08
   1445  434e		       10		      .byte.b	$10
   1446  434f		       20		      .byte.b	$20
   1447  4350		       40		      .byte.b	$40
   1448  4351		       80		      .byte.b	$80
   1449  4352		       80		      .byte.b	$80
   1450  4353		       40		      .byte.b	$40
   1451  4354		       20		      .byte.b	$20
   1452  4355		       10		      .byte.b	$10
   1453  4356		       08		      .byte.b	$08
   1454  4357		       04		      .byte.b	$04
   1455  4358		       02		      .byte.b	$02
   1456  4359		       01		      .byte.b	$01
   1457  435a		       01		      .byte.b	$01
   1458  435b		       02		      .byte.b	$02
   1459  435c		       04		      .byte.b	$04
   1460  435d		       08		      .byte.b	$08
   1461  435e		       10		      .byte.b	$10
   1462  435f		       20		      .byte.b	$20
   1463  4360		       40		      .byte.b	$40
   1464  4361		       80		      .byte.b	$80
   1465  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1466  4362
   1467  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1468  4362		       d0 15		      bne	notleft
   1469  4364							;left
   1470  4364				  -	      ifconst	pfres
   1471  4364				  -	      ldx	#pfres*4
   1472  4364					      else
   1473  4364		       a2 30		      ldx	#48
   1474  4366					      endif
   1475  4366				   leftloop
   1476  4366		       b5 a3		      lda	playfield-1,x
   1477  4368		       4a		      lsr
   1478  4369
   1479  4369				  -	      ifconst	superchip
   1480  4369				  -	      lda	playfield-2,x
   1481  4369				  -	      rol
   1482  4369				  -	      sta	playfield-130,x
   1483  4369				  -	      lda	playfield-3,x
   1484  4369				  -	      ror
   1485  4369				  -	      sta	playfield-131,x
   1486  4369				  -	      lda	playfield-4,x
   1487  4369				  -	      rol
   1488  4369				  -	      sta	playfield-132,x
   1489  4369				  -	      lda	playfield-1,x
   1490  4369				  -	      ror
   1491  4369				  -	      sta	playfield-129,x
   1492  4369					      else
   1493  4369		       36 a2		      rol	playfield-2,x
   1494  436b		       76 a1		      ror	playfield-3,x
   1495  436d		       36 a0		      rol	playfield-4,x
   1496  436f		       76 a3		      ror	playfield-1,x
   1497  4371					      endif
   1498  4371
   1499  4371		       8a		      txa
   1500  4372		       cb 04		      sbx	#4
   1501  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1503  4379
   1504  4379				   notleft
   1505  4379		       4a		      lsr
   1506  437a		       90 15		      bcc	notright
   1507  437c							;right
   1508  437c
   1509  437c				  -	      ifconst	pfres
   1510  437c				  -	      ldx	#pfres*4
   1511  437c					      else
   1512  437c		       a2 30		      ldx	#48
   1513  437e					      endif
   1514  437e				   rightloop
   1515  437e		       b5 a0		      lda	playfield-4,x
   1516  4380		       4a		      lsr
   1517  4381				  -	      ifconst	superchip
   1518  4381				  -	      lda	playfield-3,x
   1519  4381				  -	      rol
   1520  4381				  -	      sta	playfield-131,x
   1521  4381				  -	      lda	playfield-2,x
   1522  4381				  -	      ror
   1523  4381				  -	      sta	playfield-130,x
   1524  4381				  -	      lda	playfield-1,x
   1525  4381				  -	      rol
   1526  4381				  -	      sta	playfield-129,x
   1527  4381				  -	      lda	playfield-4,x
   1528  4381				  -	      ror
   1529  4381				  -	      sta	playfield-132,x
   1530  4381					      else
   1531  4381		       36 a1		      rol	playfield-3,x
   1532  4383		       76 a2		      ror	playfield-2,x
   1533  4385		       36 a3		      rol	playfield-1,x
   1534  4387		       76 a0		      ror	playfield-4,x
   1535  4389					      endif
   1536  4389		       8a		      txa
   1537  438a		       cb 04		      sbx	#4
   1538  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1540  4391
   1541  4391				   notright
   1542  4391		       4a		      lsr
   1543  4392		       90 4b		      bcc	notup
   1544  4394							;up
   1545  4394		       4a		      lsr
   1546  4395		       90 02		      bcc	onedecup
   1547  4397		       c6 ef		      dec	playfieldpos
   1548  4399				   onedecup
   1549  4399		       c6 ef		      dec	playfieldpos
   1550  439b		       f0 02		      beq	shiftdown
   1551  439d		       10 3d		      bpl	noshiftdown2
   1552  439f				   shiftdown
   1553  439f				  -	      ifconst	pfrowheight
   1554  439f				  -	      lda	#pfrowheight
   1555  439f					      else
   1556  439f					      ifnconst	pfres
   1557  439f		       a9 08		      lda	#8
   1558  43a1				  -	      else
   1559  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1560  43a1					      endif
   1561  43a1					      endif
   1562  43a1
   1563  43a1		       85 ef		      sta	playfieldpos
   1564  43a3		       a5 a7		      lda	playfield+3
   1565  43a5		       85 9f		      sta	temp4
   1566  43a7		       a5 a6		      lda	playfield+2
   1567  43a9		       85 9e		      sta	temp3
   1568  43ab		       a5 a5		      lda	playfield+1
   1569  43ad		       85 9d		      sta	temp2
   1570  43af		       a5 a4		      lda	playfield
   1571  43b1		       85 9c		      sta	temp1
   1572  43b3		       a2 00		      ldx	#0
   1573  43b5				   up2
   1574  43b5		       b5 a8		      lda	playfield+4,x
   1575  43b7				  -	      ifconst	superchip
   1576  43b7				  -	      sta	playfield-128,x
   1577  43b7				  -	      lda	playfield+5,x
   1578  43b7				  -	      sta	playfield-127,x
   1579  43b7				  -	      lda	playfield+6,x
   1580  43b7				  -	      sta	playfield-126,x
   1581  43b7				  -	      lda	playfield+7,x
   1582  43b7				  -	      sta	playfield-125,x
   1583  43b7					      else
   1584  43b7		       95 a4		      sta	playfield,x
   1585  43b9		       b5 a9		      lda	playfield+5,x
   1586  43bb		       95 a5		      sta	playfield+1,x
   1587  43bd		       b5 aa		      lda	playfield+6,x
   1588  43bf		       95 a6		      sta	playfield+2,x
   1589  43c1		       b5 ab		      lda	playfield+7,x
   1590  43c3		       95 a7		      sta	playfield+3,x
   1591  43c5					      endif
   1592  43c5		       8a		      txa
   1593  43c6		       cb fc		      sbx	#252
   1594  43c8				  -	      ifconst	pfres
   1595  43c8				  -	      cpx	#(pfres-1)*4
   1596  43c8					      else
   1597  43c8		       e0 2c		      cpx	#44
   1598  43ca					      endif
   1599  43ca		       d0 e9		      bne	up2
   1600  43cc
   1601  43cc		       a5 9f		      lda	temp4
   1602  43ce
   1603  43ce				  -	      ifconst	superchip
   1604  43ce				  -	      ifconst	pfres
   1605  43ce				  -	      sta	playfield+pfres*4-129
   1606  43ce				  -	      lda	temp3
   1607  43ce				  -	      sta	playfield+pfres*4-130
   1608  43ce				  -	      lda	temp2
   1609  43ce				  -	      sta	playfield+pfres*4-131
   1610  43ce				  -	      lda	temp1
   1611  43ce				  -	      sta	playfield+pfres*4-132
   1612  43ce				  -	      else
   1613  43ce				  -	      sta	playfield+47-128
   1614  43ce				  -	      lda	temp3
   1615  43ce				  -	      sta	playfield+46-128
   1616  43ce				  -	      lda	temp2
   1617  43ce				  -	      sta	playfield+45-128
   1618  43ce				  -	      lda	temp1
   1619  43ce				  -	      sta	playfield+44-128
   1620  43ce				  -	      endif
   1621  43ce					      else
   1622  43ce				  -	      ifconst	pfres
   1623  43ce				  -	      sta	playfield+pfres*4-1
   1624  43ce				  -	      lda	temp3
   1625  43ce				  -	      sta	playfield+pfres*4-2
   1626  43ce				  -	      lda	temp2
   1627  43ce				  -	      sta	playfield+pfres*4-3
   1628  43ce				  -	      lda	temp1
   1629  43ce				  -	      sta	playfield+pfres*4-4
   1630  43ce					      else
   1631  43ce		       85 d3		      sta	playfield+47
   1632  43d0		       a5 9e		      lda	temp3
   1633  43d2		       85 d2		      sta	playfield+46
   1634  43d4		       a5 9d		      lda	temp2
   1635  43d6		       85 d1		      sta	playfield+45
   1636  43d8		       a5 9c		      lda	temp1
   1637  43da		       85 d0		      sta	playfield+44
   1638  43dc					      endif
   1639  43dc					      endif
   1640  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1642  43df
   1643  43df
   1644  43df				   notup
   1645  43df							;down
   1646  43df		       4a		      lsr
   1647  43e0		       b0 02		      bcs	oneincup
   1648  43e2		       e6 ef		      inc	playfieldpos
   1649  43e4				   oneincup
   1650  43e4		       e6 ef		      inc	playfieldpos
   1651  43e6		       a5 ef		      lda	playfieldpos
   1652  43e8
   1653  43e8				  -	      ifconst	pfrowheight
   1654  43e8				  -	      cmp	#pfrowheight+1
   1655  43e8					      else
   1656  43e8					      ifnconst	pfres
   1657  43e8		       c9 09		      cmp	#9
   1658  43ea				  -	      else
   1659  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1660  43ea					      endif
   1661  43ea					      endif
   1662  43ea
   1663  43ea		       90 3b		      bcc	noshiftdown
   1664  43ec		       a9 01		      lda	#1
   1665  43ee		       85 ef		      sta	playfieldpos
   1666  43f0
   1667  43f0				  -	      ifconst	pfres
   1668  43f0				  -	      lda	playfield+pfres*4-1
   1669  43f0				  -	      sta	temp4
   1670  43f0				  -	      lda	playfield+pfres*4-2
   1671  43f0				  -	      sta	temp3
   1672  43f0				  -	      lda	playfield+pfres*4-3
   1673  43f0				  -	      sta	temp2
   1674  43f0				  -	      lda	playfield+pfres*4-4
   1675  43f0					      else
   1676  43f0		       a5 d3		      lda	playfield+47
   1677  43f2		       85 9f		      sta	temp4
   1678  43f4		       a5 d2		      lda	playfield+46
   1679  43f6		       85 9e		      sta	temp3
   1680  43f8		       a5 d1		      lda	playfield+45
   1681  43fa		       85 9d		      sta	temp2
   1682  43fc		       a5 d0		      lda	playfield+44
   1683  43fe					      endif
   1684  43fe
   1685  43fe		       85 9c		      sta	temp1
   1686  4400
   1687  4400				  -	      ifconst	pfres
   1688  4400				  -	      ldx	#(pfres-1)*4
   1689  4400					      else
   1690  4400		       a2 2c		      ldx	#44
   1691  4402					      endif
   1692  4402				   down2
   1693  4402		       b5 a3		      lda	playfield-1,x
   1694  4404				  -	      ifconst	superchip
   1695  4404				  -	      sta	playfield-125,x
   1696  4404				  -	      lda	playfield-2,x
   1697  4404				  -	      sta	playfield-126,x
   1698  4404				  -	      lda	playfield-3,x
   1699  4404				  -	      sta	playfield-127,x
   1700  4404				  -	      lda	playfield-4,x
   1701  4404				  -	      sta	playfield-128,x
   1702  4404					      else
   1703  4404		       95 a7		      sta	playfield+3,x
   1704  4406		       b5 a2		      lda	playfield-2,x
   1705  4408		       95 a6		      sta	playfield+2,x
   1706  440a		       b5 a1		      lda	playfield-3,x
   1707  440c		       95 a5		      sta	playfield+1,x
   1708  440e		       b5 a0		      lda	playfield-4,x
   1709  4410		       95 a4		      sta	playfield,x
   1710  4412					      endif
   1711  4412		       8a		      txa
   1712  4413		       cb 04		      sbx	#4
   1713  4415		       d0 eb		      bne	down2
   1714  4417
   1715  4417		       a5 9f		      lda	temp4
   1716  4419				  -	      ifconst	superchip
   1717  4419				  -	      sta	playfield-125
   1718  4419				  -	      lda	temp3
   1719  4419				  -	      sta	playfield-126
   1720  4419				  -	      lda	temp2
   1721  4419				  -	      sta	playfield-127
   1722  4419				  -	      lda	temp1
   1723  4419				  -	      sta	playfield-128
   1724  4419					      else
   1725  4419		       85 a7		      sta	playfield+3
   1726  441b		       a5 9e		      lda	temp3
   1727  441d		       85 a6		      sta	playfield+2
   1728  441f		       a5 9d		      lda	temp2
   1729  4421		       85 a5		      sta	playfield+1
   1730  4423		       a5 9c		      lda	temp1
   1731  4425		       85 a4		      sta	playfield
   1732  4427					      endif
   1733  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1735  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1736  442a
   1737  442a							;standard routines needed for pretty much all games
   1738  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1739  442a							; repositioning code and score pointer setup moved to overscan
   1740  442a							; read switches, joysticks now compiler generated (more efficient)
   1741  442a
   1742  442a				   randomize
   1743  442a		       a5 a2		      lda	rand
   1744  442c		       4a		      lsr
   1745  442d				  -	      ifconst	rand16
   1746  442d				  -	      rol	rand16
   1747  442d					      endif
   1748  442d		       90 02		      bcc	noeor
   1749  442f		       49 b4		      eor	#$B4
   1750  4431				   noeor
   1751  4431		       85 a2		      sta	rand
   1752  4433				  -	      ifconst	rand16
   1753  4433				  -	      eor	rand16
   1754  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1756  4436							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1757  4436
   1758  4436				   drawscreen
   1759  4436				  -	      ifconst	debugscore
   1760  4436				  -	      ldx	#14
   1761  4436				  -	      lda	INTIM	; display # cycles left in the score
   1762  4436				  -
   1763  4436				  -	      ifconst	mincycles
   1764  4436				  -	      lda	mincycles
   1765  4436				  -	      cmp	INTIM
   1766  4436				  -	      lda	mincycles
   1767  4436				  -	      bcc	nochange
   1768  4436				  -	      lda	INTIM
   1769  4436				  -	      sta	mincycles
   1770  4436				  -nochange
   1771  4436				  -	      endif
   1772  4436				  -
   1773  4436				  -			; cmp #$2B
   1774  4436				  -			; bcs no_cycles_left
   1775  4436				  -	      bmi	cycles_left
   1776  4436				  -	      ldx	#64
   1777  4436				  -	      eor	#$ff	;make negative
   1778  4436				  -cycles_left
   1779  4436				  -	      stx	scorecolor
   1780  4436				  -	      and	#$7f	; clear sign bit
   1781  4436				  -	      tax
   1782  4436				  -	      lda	scorebcd,x
   1783  4436				  -	      sta	score+2
   1784  4436				  -	      lda	scorebcd1,x
   1785  4436				  -	      sta	score+1
   1786  4436				  -	      jmp	done_debugscore
   1787  4436				  -scorebcd
   1788  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1789  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1790  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1791  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1792  4436				  -scorebcd1
   1793  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1794  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1795  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1796  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1797  4436				  -done_debugscore
   1798  4436					      endif
   1799  4436
   1800  4436				  -	      ifconst	debugcycles
   1801  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1802  4436				  -			; cmp #$2B
   1803  4436				  -			; BCC overscan
   1804  4436				  -	      bmi	overscan
   1805  4436				  -	      sta	COLUBK
   1806  4436				  -	      bcs	doneoverscan
   1807  4436					      endif
   1808  4436
   1809  4436				   overscan
   1810  4436				  -	      ifconst	interlaced
   1811  4436				  -	      PHP
   1812  4436				  -	      PLA
   1813  4436				  -	      EOR	#4	; flip interrupt bit
   1814  4436				  -	      PHA
   1815  4436				  -	      PLP
   1816  4436				  -	      AND	#4	; isolate the interrupt bit
   1817  4436				  -	      TAX		; save it for later
   1818  4436					      endif
   1819  4436
   1820  4436				   overscanloop
   1821  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1822  4439		       30 fb		      bmi	overscanloop
   1823  443b				   doneoverscan
   1824  443b
   1825  443b							;do VSYNC
   1826  443b
   1827  443b				  -	      ifconst	interlaced
   1828  443b				  -	      CPX	#4
   1829  443b				  -	      BNE	oddframevsync
   1830  443b					      endif
   1831  443b
   1832  443b		       a9 02		      lda	#2
   1833  443d		       85 02		      sta	WSYNC
   1834  443f		       85 00		      sta	VSYNC
   1835  4441		       85 02		      STA	WSYNC
   1836  4443		       85 02		      STA	WSYNC
   1837  4445		       4a		      lsr
   1838  4446		       85 02		      STA	WSYNC
   1839  4448		       85 00		      STA	VSYNC
   1840  444a		       85 01		      sta	VBLANK
   1841  444c					      ifnconst	overscan_time
   1842  444c		       a9 a5		      lda	#37+128
   1843  444e				  -	      else
   1844  444e				  -	      lda	#overscan_time+128
   1845  444e					      endif
   1846  444e		       8d 96 02 	      sta	TIM64T
   1847  4451
   1848  4451				  -	      ifconst	interlaced
   1849  4451				  -	      jmp	postsync
   1850  4451				  -
   1851  4451				  -oddframevsync
   1852  4451				  -	      sta	WSYNC
   1853  4451				  -
   1854  4451				  -	      LDA	($80,X)	; 11 waste
   1855  4451				  -	      LDA	($80,X)	; 11 waste
   1856  4451				  -	      LDA	($80,X)	; 11 waste
   1857  4451				  -
   1858  4451				  -	      lda	#2
   1859  4451				  -	      sta	VSYNC
   1860  4451				  -	      sta	WSYNC
   1861  4451				  -	      sta	WSYNC
   1862  4451				  -	      sta	WSYNC
   1863  4451				  -
   1864  4451				  -	      LDA	($80,X)	; 11 waste
   1865  4451				  -	      LDA	($80,X)	; 11 waste
   1866  4451				  -	      LDA	($80,X)	; 11 waste
   1867  4451				  -
   1868  4451				  -	      lda	#0
   1869  4451				  -	      sta	VSYNC
   1870  4451				  -	      sta	VBLANK
   1871  4451				  -	      ifnconst	overscan_time
   1872  4451				  -	      lda	#37+128
   1873  4451				  -	      else
   1874  4451				  -	      lda	#overscan_time+128
   1875  4451				  -	      endif
   1876  4451				  -	      sta	TIM64T
   1877  4451				  -
   1878  4451				  -postsync
   1879  4451					      endif
   1880  4451
   1881  4451				  -	      ifconst	legacy
   1882  4451				  -	      if	legacy < 100
   1883  4451				  -	      ldx	#4
   1884  4451				  -adjustloop
   1885  4451				  -	      lda	player0x,x
   1886  4451				  -	      sec
   1887  4451				  -	      sbc	#14	;?
   1888  4451				  -	      sta	player0x,x
   1889  4451				  -	      dex
   1890  4451				  -	      bpl	adjustloop
   1891  4451				  -	      endif
   1892  4451					      endif
   1893  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1894  4451				  -	      repeat	($fa-(<*))
   1895  4451				  -	      nop
   1896  4451				  -	      repend
   1897  4451					      endif
   1898  4451		       85 02		      sta	WSYNC
   1899  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1901  4457				   HorPosLoop		; 5
   1902  4457		       b5 80		      lda	player0x,X	;+4 9
   1903  4459		       38		      sec		;+2 11
   1904  445a				   DivideLoop
   1905  445a		       e9 0f		      sbc	#15
   1906  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1907  445e		       95 9c		      sta	temp1,X	;+4 19
   1908  4460		       95 10		      sta	RESP0,X	;+4 23
   1909  4462		       85 02		      sta	WSYNC
   1910  4464		       ca		      dex
   1911  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1912  4467							; 4
   1913  4467
   1914  4467		       a2 04		      ldx	#4
   1915  4469		       b4 9c		      ldy	temp1,X
   1916  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1917  446e		       95 20		      sta	HMP0,X	;+14 18
   1918  4470
   1919  4470		       ca		      dex
   1920  4471		       b4 9c		      ldy	temp1,X
   1921  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1922  4476		       95 20		      sta	HMP0,X	;+14 32
   1923  4478
   1924  4478		       ca		      dex
   1925  4479		       b4 9c		      ldy	temp1,X
   1926  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1927  447e		       95 20		      sta	HMP0,X	;+14 46
   1928  4480
   1929  4480		       ca		      dex
   1930  4481		       b4 9c		      ldy	temp1,X
   1931  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1932  4486		       95 20		      sta	HMP0,X	;+14 60
   1933  4488
   1934  4488		       ca		      dex
   1935  4489		       b4 9c		      ldy	temp1,X
   1936  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1937  448e		       95 20		      sta	HMP0,X	;+14 74
   1938  4490
   1939  4490		       85 02		      sta	WSYNC
   1940  4492
   1941  4492		       85 2a		      sta	HMOVE	;+3 3
   1942  4494
   1943  4494
   1944  4494				  -	      ifconst	legacy
   1945  4494				  -	      if	legacy < 100
   1946  4494				  -	      ldx	#4
   1947  4494				  -adjustloop2
   1948  4494				  -	      lda	player0x,x
   1949  4494				  -	      clc
   1950  4494				  -	      adc	#14	;?
   1951  4494				  -	      sta	player0x,x
   1952  4494				  -	      dex
   1953  4494				  -	      bpl	adjustloop2
   1954  4494				  -	      endif
   1955  4494					      endif
   1956  4494
   1957  4494
   1958  4494
   1959  4494
   1960  4494							;set score pointers
   1961  4494		       a7 95		      lax	score+2
   1962  4496		       20 c7 f4 	      jsr	scorepointerset
   1963  4499		       84 9b		      sty	scorepointers+5
   1964  449b		       86 98		      stx	scorepointers+2
   1965  449d		       a7 94		      lax	score+1
   1966  449f		       20 c7 f4 	      jsr	scorepointerset
   1967  44a2		       84 9a		      sty	scorepointers+4
   1968  44a4		       86 97		      stx	scorepointers+1
   1969  44a6		       a7 93		      lax	score
   1970  44a8		       20 c7 f4 	      jsr	scorepointerset
   1971  44ab		       84 99		      sty	scorepointers+3
   1972  44ad		       86 96		      stx	scorepointers
   1973  44af
   1974  44af				   vblk
   1975  44af							; run possible vblank bB code
   1976  44af				  -	      ifconst	vblank_bB_code
   1977  44af				  -	      jsr	vblank_bB_code
   1978  44af					      endif
   1979  44af				   vblk2
   1980  44af		       ad 84 02 	      LDA	INTIM
   1981  44b2		       30 fb		      bmi	vblk2
   1982  44b4		       4c 00 f0 	      jmp	kernel
   1983  44b7
   1984  44b7
   1985  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1986  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1987  44c7				   repostable
   1988  44c7
   1989  44c7				   scorepointerset
   1990  44c7		       29 0f		      and	#$0F
   1991  44c9		       0a		      asl
   1992  44ca		       0a		      asl
   1993  44cb		       0a		      asl
   1994  44cc		       69 74		      adc	#<scoretable
   1995  44ce		       a8		      tay
   1996  44cf		       8a		      txa
   1997  44d0							; and #$F0
   1998  44d0							; lsr
   1999  44d0		       4b f0		      asr	#$F0
   2000  44d2		       69 74		      adc	#<scoretable
   2001  44d4		       aa		      tax
   2002  44d5		       60		      rts
   2003  44d6							;bB.asm
   2004  44d6							; bB.asm file is split here
   2005  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2006  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2007  44d6					      endif
   2008  44d6		       00 01	   ECHOFIRST  =	1
   2009  44d6
   2010  44d6
   2011  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2012  44d6
   2013  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2014  44d6							; and keep the conditional compilation stuff intact
   2015  44d6				  -	      ifconst	ROM2k
   2016  44d6				  -	      ORG	$F7AC-8
   2017  44d6					      else
   2018  44d6					      ifconst	bankswitch
   2019  44d6				  -	      if	bankswitch == 8
   2020  44d6				  -	      ORG	$2F94-bscode_length
   2021  44d6				  -	      RORG	$FF94-bscode_length
   2022  44d6					      endif
   2023  44d6					      if	bankswitch == 16
   2024  4f74					      ORG	$4F94-bscode_length
   2025  4f74					      RORG	$FF94-bscode_length
   2026  4f74					      endif
   2027  4f74				  -	      if	bankswitch == 32
   2028  4f74				  -	      ORG	$8F94-bscode_length
   2029  4f74				  -	      RORG	$FF94-bscode_length
   2030  4f74					      endif
   2031  4f74				  -	      if	bankswitch == 64
   2032  4f74				  -	      ORG	$10F80-bscode_length
   2033  4f74				  -	      RORG	$1FF80-bscode_length
   2034  4f74					      endif
   2035  4f74				  -	      else
   2036  4f74				  -	      ORG	$FF9C
   2037  4f74					      endif
   2038  4f74					      endif
   2039  4f74
   2040  4f74							; font equates
   2041  4f74		       00 01	   .21stcentury =	1
   2042  4f74		       00 02	   alarmclock =	2
   2043  4f74		       00 03	   handwritten =	3
   2044  4f74		       00 04	   interrupted =	4
   2045  4f74		       00 05	   retroputer =	5
   2046  4f74		       00 06	   whimsey    =	6
   2047  4f74		       00 07	   tiny       =	7
   2048  4f74		       00 08	   hex	      =	8
   2049  4f74
   2050  4f74				  -	      ifconst	font
   2051  4f74				  -	      if	font == hex
   2052  4f74				  -	      ORG	. - 48
   2053  4f74				  -	      endif
   2054  4f74					      endif
   2055  4f74
   2056  4f74				   scoretable
   2057  4f74
   2058  4f74				  -	      ifconst	font
   2059  4f74				  -	      if	font == .21stcentury
   2060  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2061  4f74				  -	      endif
   2062  4f74				  -	      if	font == alarmclock
   2063  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2064  4f74				  -	      endif
   2065  4f74				  -	      if	font == handwritten
   2066  4f74				  -	      include	"score_graphics.asm.handwritten"
   2067  4f74				  -	      endif
   2068  4f74				  -	      if	font == interrupted
   2069  4f74				  -	      include	"score_graphics.asm.interrupted"
   2070  4f74				  -	      endif
   2071  4f74				  -	      if	font == retroputer
   2072  4f74				  -	      include	"score_graphics.asm.retroputer"
   2073  4f74				  -	      endif
   2074  4f74				  -	      if	font == whimsey
   2075  4f74				  -	      include	"score_graphics.asm.whimsey"
   2076  4f74				  -	      endif
   2077  4f74				  -	      if	font == tiny
   2078  4f74				  -	      include	"score_graphics.asm.tiny"
   2079  4f74				  -	      endif
   2080  4f74				  -	      if	font == hex
   2081  4f74				  -	      include	"score_graphics.asm.hex"
   2082  4f74				  -	      endif
   2083  4f74					      else		; default font
   2084  4f74
   2085  4f74		       3c		      .byte.b	%00111100
   2086  4f75		       66		      .byte.b	%01100110
   2087  4f76		       66		      .byte.b	%01100110
   2088  4f77		       66		      .byte.b	%01100110
   2089  4f78		       66		      .byte.b	%01100110
   2090  4f79		       66		      .byte.b	%01100110
   2091  4f7a		       66		      .byte.b	%01100110
   2092  4f7b		       3c		      .byte.b	%00111100
   2093  4f7c
   2094  4f7c		       7e		      .byte.b	%01111110
   2095  4f7d		       18		      .byte.b	%00011000
   2096  4f7e		       18		      .byte.b	%00011000
   2097  4f7f		       18		      .byte.b	%00011000
   2098  4f80		       18		      .byte.b	%00011000
   2099  4f81		       38		      .byte.b	%00111000
   2100  4f82		       18		      .byte.b	%00011000
   2101  4f83		       08		      .byte.b	%00001000
   2102  4f84
   2103  4f84		       7e		      .byte.b	%01111110
   2104  4f85		       60		      .byte.b	%01100000
   2105  4f86		       60		      .byte.b	%01100000
   2106  4f87		       3c		      .byte.b	%00111100
   2107  4f88		       06		      .byte.b	%00000110
   2108  4f89		       06		      .byte.b	%00000110
   2109  4f8a		       46		      .byte.b	%01000110
   2110  4f8b		       3c		      .byte.b	%00111100
   2111  4f8c
   2112  4f8c		       3c		      .byte.b	%00111100
   2113  4f8d		       46		      .byte.b	%01000110
   2114  4f8e		       06		      .byte.b	%00000110
   2115  4f8f		       06		      .byte.b	%00000110
   2116  4f90		       1c		      .byte.b	%00011100
   2117  4f91		       06		      .byte.b	%00000110
   2118  4f92		       46		      .byte.b	%01000110
   2119  4f93		       3c		      .byte.b	%00111100
   2120  4f94
   2121  4f94		       0c		      .byte.b	%00001100
   2122  4f95		       0c		      .byte.b	%00001100
   2123  4f96		       7e		      .byte.b	%01111110
   2124  4f97		       4c		      .byte.b	%01001100
   2125  4f98		       4c		      .byte.b	%01001100
   2126  4f99		       2c		      .byte.b	%00101100
   2127  4f9a		       1c		      .byte.b	%00011100
   2128  4f9b		       0c		      .byte.b	%00001100
   2129  4f9c
   2130  4f9c		       3c		      .byte.b	%00111100
   2131  4f9d		       46		      .byte.b	%01000110
   2132  4f9e		       06		      .byte.b	%00000110
   2133  4f9f		       06		      .byte.b	%00000110
   2134  4fa0		       3c		      .byte.b	%00111100
   2135  4fa1		       60		      .byte.b	%01100000
   2136  4fa2		       60		      .byte.b	%01100000
   2137  4fa3		       7e		      .byte.b	%01111110
   2138  4fa4
   2139  4fa4		       3c		      .byte.b	%00111100
   2140  4fa5		       66		      .byte.b	%01100110
   2141  4fa6		       66		      .byte.b	%01100110
   2142  4fa7		       66		      .byte.b	%01100110
   2143  4fa8		       7c		      .byte.b	%01111100
   2144  4fa9		       60		      .byte.b	%01100000
   2145  4faa		       62		      .byte.b	%01100010
   2146  4fab		       3c		      .byte.b	%00111100
   2147  4fac
   2148  4fac		       30		      .byte.b	%00110000
   2149  4fad		       30		      .byte.b	%00110000
   2150  4fae		       30		      .byte.b	%00110000
   2151  4faf		       18		      .byte.b	%00011000
   2152  4fb0		       0c		      .byte.b	%00001100
   2153  4fb1		       06		      .byte.b	%00000110
   2154  4fb2		       42		      .byte.b	%01000010
   2155  4fb3		       3e		      .byte.b	%00111110
   2156  4fb4
   2157  4fb4		       3c		      .byte.b	%00111100
   2158  4fb5		       66		      .byte.b	%01100110
   2159  4fb6		       66		      .byte.b	%01100110
   2160  4fb7		       66		      .byte.b	%01100110
   2161  4fb8		       3c		      .byte.b	%00111100
   2162  4fb9		       66		      .byte.b	%01100110
   2163  4fba		       66		      .byte.b	%01100110
   2164  4fbb		       3c		      .byte.b	%00111100
   2165  4fbc
   2166  4fbc		       3c		      .byte.b	%00111100
   2167  4fbd		       46		      .byte.b	%01000110
   2168  4fbe		       06		      .byte.b	%00000110
   2169  4fbf		       3e		      .byte.b	%00111110
   2170  4fc0		       66		      .byte.b	%01100110
   2171  4fc1		       66		      .byte.b	%01100110
   2172  4fc2		       66		      .byte.b	%01100110
   2173  4fc3		       3c		      .byte.b	%00111100
   2174  4fc4
   2175  4fc4					      ifnconst	DPC_kernel_options
   2176  4fc4
   2177  4fc4		       00		      .byte.b	%00000000
   2178  4fc5		       00		      .byte.b	%00000000
   2179  4fc6		       00		      .byte.b	%00000000
   2180  4fc7		       00		      .byte.b	%00000000
   2181  4fc8		       00		      .byte.b	%00000000
   2182  4fc9		       00		      .byte.b	%00000000
   2183  4fca		       00		      .byte.b	%00000000
   2184  4fcb		       00		      .byte.b	%00000000
   2185  4fcc
   2186  4fcc					      endif
   2187  4fcc
   2188  4fcc					      endif
   2189  4fcc
   2190  4fcc				  -	      ifconst	ROM2k
   2191  4fcc				  -	      ORG	$F7FC
   2192  4fcc					      else
   2193  4fcc					      ifconst	bankswitch
   2194  4fcc				  -	      if	bankswitch == 8
   2195  4fcc				  -	      ORG	$2FF4-bscode_length
   2196  4fcc				  -	      RORG	$FFF4-bscode_length
   2197  4fcc					      endif
   2198  4fcc					      if	bankswitch == 16
   2199  4fd4					      ORG	$4FF4-bscode_length
   2200  4fd4					      RORG	$FFF4-bscode_length
   2201  4fd4					      endif
   2202  4fd4				  -	      if	bankswitch == 32
   2203  4fd4				  -	      ORG	$8FF4-bscode_length
   2204  4fd4				  -	      RORG	$FFF4-bscode_length
   2205  4fd4					      endif
   2206  4fd4				  -	      if	bankswitch == 64
   2207  4fd4				  -	      ORG	$10FE0-bscode_length
   2208  4fd4				  -	      RORG	$1FFE0-bscode_length
   2209  4fd4					      endif
   2210  4fd4				  -	      else
   2211  4fd4				  -	      ORG	$FFFC
   2212  4fd4					      endif
   2213  4fd4					      endif
   2214  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2215  4fd4
   2216  4fd4							; every bank has this stuff at the same place
   2217  4fd4							; this code can switch to/from any bank at any entry point
   2218  4fd4							; and can preserve register values
   2219  4fd4							; note: lines not starting with a space are not placed in all banks
   2220  4fd4							;
   2221  4fd4							; line below tells the compiler how long this is - do not remove
   2222  4fd4							;size=32
   2223  4fd4
   2224  4fd4				   begin_bscode
   2225  4fd4		       a2 ff		      ldx	#$ff
   2226  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2227  4fd6				  -	      stx	FASTFETCH
   2228  4fd6					      endif
   2229  4fd6		       9a		      txs
   2230  4fd7				  -	      if	bankswitch == 64
   2231  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2232  4fd7					      else
   2233  4fd7		       a9 f2		      lda	#>(start-1)
   2234  4fd9					      endif
   2235  4fd9		       48		      pha
   2236  4fda		       a9 4f		      lda	#<(start-1)
   2237  4fdc		       48		      pha
   2238  4fdd
   2239  4fdd				   BS_return
   2240  4fdd		       48		      pha
   2241  4fde		       8a		      txa
   2242  4fdf		       48		      pha
   2243  4fe0		       ba		      tsx
   2244  4fe1
   2245  4fe1					      if	bankswitch != 64
   2246  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2247  4fe3
   2248  4fe3		       2a		      rol
   2249  4fe4		       2a		      rol
   2250  4fe5		       2a		      rol
   2251  4fe6		       2a		      rol
   2252  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2253  4fe9		       aa		      tax
   2254  4fea		       e8		      inx
   2255  4feb				  -	      else
   2256  4feb				  -	      lda	4,x	; get high byte of return address
   2257  4feb				  -	      tay
   2258  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2259  4feb				  -	      sta	4,x
   2260  4feb				  -	      tya
   2261  4feb				  -	      lsr
   2262  4feb				  -	      lsr
   2263  4feb				  -	      lsr
   2264  4feb				  -	      lsr
   2265  4feb				  -	      tax
   2266  4feb				  -	      inx
   2267  4feb					      endif
   2268  4feb
   2269  4feb				   BS_jsr
   2270  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2271  4fee		       68		      pla
   2272  4fef		       aa		      tax
   2273  4ff0		       68		      pla
   2274  4ff1		       60		      rts
   2275  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2276  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2277  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2278  4ff2					      endif
   2279  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2280  4ff2
   2281  4ff2					      ifconst	bankswitch
   2282  4ff2				  -	      if	bankswitch == 8
   2283  4ff2				  -	      ORG	$2FFC
   2284  4ff2				  -	      RORG	$FFFC
   2285  4ff2					      endif
   2286  4ff2					      if	bankswitch == 16
   2287  4ffc					      ORG	$4FFC
   2288  4ffc					      RORG	$FFFC
   2289  4ffc					      endif
   2290  4ffc				  -	      if	bankswitch == 32
   2291  4ffc				  -	      ORG	$8FFC
   2292  4ffc				  -	      RORG	$FFFC
   2293  4ffc					      endif
   2294  4ffc				  -	      if	bankswitch == 64
   2295  4ffc				  -	      ORG	$10FF0
   2296  4ffc				  -	      RORG	$1FFF0
   2297  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2298  4ffc				  -	      ORG	$10FF8
   2299  4ffc				  -	      RORG	$1FFF8
   2300  4ffc				  -	      ifconst	superchip
   2301  4ffc				  -	      .byte	"E","F","S","C"
   2302  4ffc				  -	      else
   2303  4ffc				  -	      .byte	"E","F","E","F"
   2304  4ffc				  -	      endif
   2305  4ffc				  -	      ORG	$10FFC
   2306  4ffc				  -	      RORG	$1FFFC
   2307  4ffc					      endif
   2308  4ffc				  -	      else
   2309  4ffc				  -	      ifconst	ROM2k
   2310  4ffc				  -	      ORG	$F7FC
   2311  4ffc				  -	      else
   2312  4ffc				  -	      ORG	$FFFC
   2313  4ffc				  -	      endif
   2314  4ffc					      endif
   2315  4ffc		       50 f2		      .word.w	(start & $ffff)
   2316  4ffe		       50 f2		      .word.w	(start & $ffff)

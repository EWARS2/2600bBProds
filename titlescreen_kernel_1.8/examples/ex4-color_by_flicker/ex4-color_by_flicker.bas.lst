------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d7	   frame      =	d
      5  5000 ????
      6  5000 ????	       00 d6	   bmp_48x1_2_color =	c
      7  5000 ????
      8  5000 ????	       00 d5	   bmp_48x1_1_color =	b
      9  5000 ????
     10  5000 ????	       00 d4	   bmp_48x1_1_index =	a
     11  5000 ????
     12  5000 ????	       00 03	   bs_mask    =	3
     13  5000 ????	       00 10	   bankswitch =	16
     14  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d7	   frame      =	d
      5  5000 ????
      6  5000 ????	       00 d6	   bmp_48x1_2_color =	c
      7  5000 ????
      8  5000 ????	       00 d5	   bmp_48x1_1_color =	b
      9  5000 ????
     10  5000 ????	       00 d4	   bmp_48x1_1_index =	a
     11  5000 ????
     12  5000 ????	       00 03	   bs_mask    =	3
     13  5000 ????	       00 10	   bankswitch =	16
     14  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .L00 		;  rem *** any romsize should work
     39  1000
     40  1000				   .L01 		;  set romsize 16k
     41  1000
     42  1000				   .
     43  1000							; 
     44  1000
     45  1000				   .L02 		;  rem *** a variable to switch frames of the yoshi picture
     46  1000
     47  1000				   .L03 		;  dim bmp_48x1_1_index  =  a
     48  1000
     49  1000				   .
     50  1000							; 
     51  1000
     52  1000				   .L04 		;  rem *** a variable to color each frame of the yoshi picture
     53  1000
     54  1000				   .L05 		;  dim bmp_48x1_1_color  =  b
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .L06 		;  rem *** a variable to color cycle the "press fire" text
     60  1000
     61  1000				   .L07 		;  dim bmp_48x1_2_color  =  c
     62  1000
     63  1000				   .
     64  1000							; 
     65  1000
     66  1000				   .L08 		;  rem *** a frame counter
     67  1000
     68  1000				   .L09 		;  dim frame  =  d
     69  1000
     70  1000				   .
     71  1000							; 
     72  1000
     73  1000				   .L010		;  scorecolor = $0a
     74  1000
     75  1000		       a9 0a		      LDA	#$0a
     76  1002		       85 a3		      STA	scorecolor
     77  1004				   .
     78  1004							; 
     79  1004
     80  1004				   .titlepage
     81  1004							; titlepage
     82  1004
     83  1004				   .L011		;  frame = frame + 1
     84  1004
     85  1004		       e6 d7		      INC	frame
     86  1006				   .L012		;  bmp_48x1_1_color = $4b  : bmp_48x1_1_index = 0
     87  1006
     88  1006		       a9 4b		      LDA	#$4b
     89  1008		       85 d5		      STA	bmp_48x1_1_color
     90  100a		       a9 00		      LDA	#0
     91  100c		       85 d4		      STA	bmp_48x1_1_index
     92  100e				   .L013		;  if frame{0} then bmp_48x1_1_color = $ac  :	bmp_48x1_1_index = 87
     93  100e
     94  100e		       a5 d7		      LDA	frame
     95  1010		       4a		      LSR
     96  1011		       90 08		      BCC	.skipL013
     97  1013				   .condpart0
     98  1013		       a9 ac		      LDA	#$ac
     99  1015		       85 d5		      STA	bmp_48x1_1_color
    100  1017		       a9 57		      LDA	#87
    101  1019		       85 d4		      STA	bmp_48x1_1_index
    102  101b				   .skipL013
    103  101b				   .L014		;  gosub titledrawscreen bank2
    104  101b
    105  101b		       85 ee		      sta	temp7
    106  101d		       a9 90		      lda	#>(ret_point1-1)
    107  101f		       48		      pha
    108  1020		       a9 32		      lda	#<(ret_point1-1)
    109  1022		       48		      pha
    110  1023		       a9 af		      lda	#>(.titledrawscreen-1)
    111  1025		       48		      pha
    112  1026		       a9 ff		      lda	#<(.titledrawscreen-1)
    113  1028		       48		      pha
    114  1029		       a5 ee		      lda	temp7
    115  102b		       48		      pha
    116  102c		       8a		      txa
    117  102d		       48		      pha
    118  102e		       a2 02		      ldx	#2
    119  1030		       4c eb ff 	      jmp	BS_jsr
    120  1033				   ret_point1
    121  1033				   .
    122  1033							; 
    123  1033
    124  1033				   .L015		;  rem *** make the "press fire to start" color-cycle
    125  1033
    126  1033				   .L016		;  bmp_48x1_2_color = bmp_48x1_2_color + 1
    127  1033
    128  1033		       e6 d6		      INC	bmp_48x1_2_color
    129  1035				   .L017		;  if joy0fire then goto gamestart
    130  1035
    131  1035		       24 0c		      bit	INPT4
    132  1037		       30 03		      BMI	.skipL017
    133  1039				   .condpart1
    134  1039		       4c 3f 90 	      jmp	.gamestart
    135  103c
    136  103c				   .skipL017
    137  103c				   .
    138  103c							; 
    139  103c
    140  103c				   .L018		;  goto titlepage
    141  103c
    142  103c		       4c 04 90 	      jmp	.titlepage
    143  103f
    144  103f				   .
    145  103f							; 
    146  103f
    147  103f				   .L019		;  rem *** Our fake game start. If you move the joystick it goes back to the
    148  103f
    149  103f				   .L020		;  rem *** title screen.
    150  103f
    151  103f				   .gamestart
    152  103f							; gamestart
    153  103f
    154  103f				   .L021		;  bmp_48x1_1_index = 0
    155  103f
    156  103f		       a9 00		      LDA	#0
    157  1041		       85 d4		      STA	bmp_48x1_1_index
    158  1043				   .L022		;  drawscreen
    159  1043
    160  1043		       85 ee		      sta	temp7
    161  1045		       a9 90		      lda	#>(ret_point2-1)
    162  1047		       48		      pha
    163  1048		       a9 5a		      lda	#<(ret_point2-1)
    164  104a		       48		      pha
    165  104b		       a9 f4		      lda	#>(drawscreen-1)
    166  104d		       48		      pha
    167  104e		       a9 35		      lda	#<(drawscreen-1)
    168  1050		       48		      pha
    169  1051		       a5 ee		      lda	temp7
    170  1053		       48		      pha
    171  1054		       8a		      txa
    172  1055		       48		      pha
    173  1056		       a2 04		      ldx	#4
    174  1058		       4c eb ff 	      jmp	BS_jsr
    175  105b				   ret_point2
    176  105b				   .L023		;  if joy0left  ||  joy0right then goto titlepage
    177  105b
    178  105b		       2c 80 02 	      bit	SWCHA
    179  105e		       70 03		      BVS	.skipL023
    180  1060				   .condpart2
    181  1060		       4c 68 90 	      jmp	.condpart3
    182  1063				   .skipL023
    183  1063		       2c 80 02 	      bit	SWCHA
    184  1066		       30 03		      BMI	.skip0OR
    185  1068				   .condpart3
    186  1068		       4c 04 90 	      jmp	.titlepage
    187  106b
    188  106b				   .skip0OR
    189  106b				   .L024		;  if joy0up  ||  joy0down then goto titlepage
    190  106b
    191  106b		       a9 10		      lda	#$10
    192  106d		       2c 80 02 	      bit	SWCHA
    193  1070		       d0 03		      BNE	.skipL024
    194  1072				   .condpart4
    195  1072		       4c 7c 90 	      jmp	.condpart5
    196  1075				   .skipL024
    197  1075		       a9 20		      lda	#$20
    198  1077		       2c 80 02 	      bit	SWCHA
    199  107a		       d0 03		      BNE	.skip1OR
    200  107c				   .condpart5
    201  107c		       4c 04 90 	      jmp	.titlepage
    202  107f
    203  107f				   .skip1OR
    204  107f				   .L025		;  goto gamestart
    205  107f
    206  107f		       4c 3f 90 	      jmp	.gamestart
    207  1082
    208  1082				   .
    209  1082							; 
    210  1082
    211  1082				   .L026		;  bank 2
    212  1082
    213  1082					      if	ECHO1
      3922 bytes of ROM space left in bank 1
    214  1082					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    215  1082					      endif
    216  1082		       00 01	   ECHO1      =	1
    217  1fd4					      ORG	$1FF4-bscode_length
    218  1fd4					      RORG	$9FF4-bscode_length
    219  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    220  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    221  1fd6				  -	      stx	FASTFETCH
    222  1fd6					      endif
    223  1fd6		       9a		      txs
    224  1fd7				  -	      if	bankswitch == 64
    225  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    226  1fd7					      else
    227  1fd7		       a9 f2		      lda	#>(start-1)
    228  1fd9					      endif
    229  1fd9		       48		      pha
    230  1fda		       a9 4f		      lda	#<(start-1)
    231  1fdc		       48		      pha
    232  1fdd		       48		      pha
    233  1fde		       8a		      txa
    234  1fdf		       48		      pha
    235  1fe0		       ba		      tsx
    236  1fe1					      if	bankswitch != 64
    237  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    238  1fe3		       2a		      rol
    239  1fe4		       2a		      rol
    240  1fe5		       2a		      rol
    241  1fe6		       2a		      rol
    242  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    243  1fe9		       aa		      tax
    244  1fea		       e8		      inx
    245  1feb				  -	      else
    246  1feb				  -	      lda	4,x	; get high byte of return address
    247  1feb				  -	      tay
    248  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    249  1feb				  -	      sta	4,x
    250  1feb				  -	      tya
    251  1feb				  -	      lsr
    252  1feb				  -	      lsr
    253  1feb				  -	      lsr
    254  1feb				  -	      lsr
    255  1feb				  -	      tax
    256  1feb				  -	      inx
    257  1feb					      endif
    258  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    259  1fee		       68		      pla
    260  1fef		       aa		      tax
    261  1ff0		       68		      pla
    262  1ff1		       60		      rts
    263  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    264  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    265  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    266  1ff2					      endif
    267  1ffc					      ORG	$1FFC
    268  1ffc					      RORG	$9FFC
    269  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    270  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    271  2000					      ORG	$2000
    272  2000					      RORG	$B000
    273  2000				   .L027		;  rem *** We're putting the title kernel here, but it can go in any bank you
    274  2000
    275  2000				   .L028		;  rem *** like. Just don't let your program flow accidentally fall into the
    276  2000
    277  2000				   .L029		;  rem *** line below.
    278  2000
    279  2000				   .L030		;  asm
    280  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      5  2000							; it won't use any rom space.
      6  2000
      7  2000					      MAC	titlescreenlayout
      8  2000					      draw_48x2_1
      9  2000					      draw_48x1_1
     10  2000					      draw_space	6
     11  2000					      draw_48x1_2
     12  2000					      draw_score
     13  2000					      ENDM
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019					      ifnconst	vblank_time
     26  2019		       a9 aa		      lda	#42+128
     27  201b				  -	      else
     28  201b				  -	      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 84 b0 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_48x2_1
      1  2046		       00 01	   mk_48x2_X_on =	1
      2  2046		       00 01	   mk_48x2_1_on =	1
      3  2046		       20 16 b1 	      jsr	draw_bmp_48x2_1
      0  2049					      draw_48x1_1
      1  2049		       00 01	   mk_48x1_X_on =	1
      2  2049		       00 01	   mk_48x1_1_on =	1
      3  2049		       20 85 b0 	      jsr	draw_bmp_48x1_1
      0  204c					      draw_space	6
      1  204c		       a0 06		      ldy	#6
      2  204e				   .loop
      3  204e		       85 02		      sta	WSYNC
      4  2050		       88		      dey
      5  2051		       d0 fb		      bne	.loop
      0  2053					      draw_48x1_2
      1  2053		       00 01	   mk_48x1_X_on =	1
      2  2053		       00 01	   mk_48x1_2_on =	1
      3  2053		       20 cf b0 	      jsr	draw_bmp_48x1_2
      0  2056					      draw_score
      1  2056		       00 01	   mk_score_on =	1
      2  2056		       00 01	   mk_48x1_X_on =	1
      3  2056		       20 87 b2 	      jsr	draw_score_display
     68  2059
     69  2059		       4c 53 b3 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  205c
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  205c					      include	"titlescreen/asm/position48.asm"
      1  205c
      2  205c				   position48
      3  205c
      4  205c							;postion P0 and P1
      5  205c
      6  205c		       85 02		      sta	WSYNC
      7  205e
      8  205e		       a9 90		      lda	#$90	;2
      9  2060		       85 20		      sta	HMP0	;3
     10  2062		       a9 a0		      lda	#$A0	;2
     11  2064		       85 21		      sta	HMP1	;3
     12  2066
     13  2066		       e6 9c		      inc	temp1
     14  2068		       c6 9c		      dec	temp1
     15  206a		       e6 9c		      inc	temp1
     16  206c		       c6 9c		      dec	temp1
     17  206e		       e6 9c		      inc	temp1
      0  2070					      sleep	2
      1  2070				   .CYCLES    SET	2
      2  2070
      3  2070				  -	      IF	.CYCLES < 2
      4  2070				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2070				  -	      ERR
      6  2070					      ENDIF
      7  2070
      8  2070				  -	      IF	.CYCLES & 1
      9  2070				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2070				  -	      nop	0
     11  2070				  -	      ELSE
     12  2070				  -	      bit	VSYNC
     13  2070				  -	      ENDIF
     14  2070				  -.CYCLES    SET	.CYCLES - 3
     15  2070					      ENDIF
     16  2070
     17  2070					      REPEAT	.CYCLES / 2
     18  2070		       ea		      nop
     19  2071					      REPEND
     19  2071		       85 10		      sta	RESP0	;  +3
     20  2073		       85 11		      sta	RESP1	;  +3
     21  2075		       c6 9c		      dec	temp1	;  +5
     22  2077		       e6 9c		      inc	temp1	;  +5
     23  2079		       c6 9c		      dec	temp1	;  +5
     24  207b		       e6 9c		      inc	temp1	;  +5
     25  207d		       c6 9c		      dec	temp1	;  +5
      0  207f					      sleep	3
      1  207f				   .CYCLES    SET	3
      2  207f
      3  207f				  -	      IF	.CYCLES < 2
      4  207f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  207f				  -	      ERR
      6  207f					      ENDIF
      7  207f
      8  207f					      IF	.CYCLES & 1
      9  207f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  207f		       04 00		      nop	0
     11  2081				  -	      ELSE
     12  2081				  -	      bit	VSYNC
     13  2081					      ENDIF
     14  2081				   .CYCLES    SET	.CYCLES - 3
     15  2081					      ENDIF
     16  2081
     17  2081				  -	      REPEAT	.CYCLES / 2
     18  2081				  -	      nop
     19  2081					      REPEND
     27  2081		       85 2a		      sta	HMOVE	; +76
     28  2083		       60		      RTS
     29  2084
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  2084					      include	"titlescreen/titlescreen_color.asm"
      1  2084
      2  2084							; This is where the titlescreen background color gets set. 
      3  2084							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2084							; if you want to change the color on the fly.
      5  2084
      6  2084				  -	      ifnconst	titlescreencolor
      7  2084				  -titlescreencolor
      8  2084					      endif
      9  2084		       00		      .byte.b	$00
     10  2085
------- FILE titlescreen/asm/titlescreen.asm
     73  2085
     74  2085					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  2085					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  2085
      2  2085				   draw_bmp_48x1_1
      3  2085
      4  2085		       a9 00		      lda	#0
      5  2087		       85 1b		      sta	GRP0
      6  2089		       85 1c		      sta	GRP1
      7  208b
      8  208b		       a0 0b		      ldy	#11
      9  208d				   bmp_48x1_1_pointersetup
     10  208d		       b9 c3 b0 	      lda	bmp_48x1_1_values,y
     11  2090		       99 96 00 	      sta	scorepointers,y
     12  2093		       88		      dey
     13  2094		       b9 c3 b0 	      lda	bmp_48x1_1_values,y
     14  2097					      ifconst	bmp_48x1_1_index
     15  2097		       38		      sec
     16  2098		       e5 d4		      sbc	bmp_48x1_1_index
     17  209a					      endif
     18  209a		       99 96 00 	      sta	scorepointers,y
     19  209d		       88		      dey
     20  209e		       10 ed		      bpl	bmp_48x1_1_pointersetup
     21  20a0
     22  20a0		       a0 56		      ldy	(#bmp_48x1_1_window-1)
     23  20a2		       84 f1		      sty	aux2
     24  20a4
     25  20a4					      ifconst	bmp_48x1_1_background
     26  20a4		       ad 6b b3 	      lda	bmp_48x1_1_background
     27  20a7				  -	      else
     28  20a7				  -	      lda	titlescreencolor
     29  20a7					      endif
     30  20a7		       85 f3		      sta	aux4
     31  20a9
     32  20a9		       a5 d5		      lda	bmp_48x1_1_color
     33  20ab		       85 06		      sta	COLUP0	;3
     34  20ad		       85 07		      sta	COLUP1	;3
     35  20af		       85 2b		      sta	HMCLR	;3
     36  20b1
     37  20b1		       ad 84 b0 	      lda	titlescreencolor
     38  20b4		       85 08		      sta	COLUPF
     39  20b6
     40  20b6					      ifconst	bmp_48x1_1_PF1
     41  20b6		       ad 69 b3 	      lda	bmp_48x1_1_PF1
     42  20b9				  -	      else
     43  20b9				  -	      lda	#0
     44  20b9				  -	      nop
     45  20b9					      endif
     46  20b9		       85 0e		      sta	PF1
     47  20bb
     48  20bb					      ifconst	bmp_48x1_1_PF2
     49  20bb		       ad 6a b3 	      lda	bmp_48x1_1_PF2
     50  20be				  -	      else
     51  20be				  -	      lda	#0
     52  20be				  -	      nop
     53  20be					      endif
     54  20be		       85 0f		      sta	PF2
     55  20c0
     56  20c0		       4c 61 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20c3
     58  20c3				   bmp_48x1_1_values
     59  20c3		       57 b4		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  20c5		       57 b5		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  20c7		       57 b6		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  20c9		       57 b7		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  20cb		       57 b8		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  20cd		       57 b9		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  20cf
------- FILE titlescreen/asm/titlescreen.asm
     76  20cf					      endif		;mk_48x1_1_on
     77  20cf
     78  20cf					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  20cf					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  20cf
      2  20cf				   draw_bmp_48x1_2
      3  20cf
      4  20cf		       a9 00		      lda	#0
      5  20d1		       85 1b		      sta	GRP0
      6  20d3		       85 1c		      sta	GRP1
      7  20d5
      8  20d5		       a0 0b		      ldy	#11
      9  20d7				   bmp_48x1_2_pointersetup
     10  20d7		       b9 0a b1 	      lda	bmp_48x1_2_values,y
     11  20da		       99 96 00 	      sta	scorepointers,y
     12  20dd		       88		      dey
     13  20de		       b9 0a b1 	      lda	bmp_48x1_2_values,y
     14  20e1				  -	      ifconst	bmp_48x1_2_index
     15  20e1				  -	      sec
     16  20e1				  -	      sbc	bmp_48x1_2_index
     17  20e1					      endif
     18  20e1		       99 96 00 	      sta	scorepointers,y
     19  20e4		       88		      dey
     20  20e5		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  20e7
     22  20e7		       a0 0a		      ldy	(#bmp_48x1_2_window-1)
     23  20e9		       84 f1		      sty	aux2
     24  20eb
     25  20eb					      ifconst	bmp_48x1_2_background
     26  20eb		       ad b1 b9 	      lda	bmp_48x1_2_background
     27  20ee				  -	      else
     28  20ee				  -	      lda	titlescreencolor
     29  20ee					      endif
     30  20ee		       85 f3		      sta	aux4
     31  20f0
     32  20f0		       a5 d6		      lda	bmp_48x1_2_color
     33  20f2		       85 06		      sta	COLUP0	;3
     34  20f4		       85 07		      sta	COLUP1	;3
     35  20f6		       85 2b		      sta	HMCLR	;3
     36  20f8
     37  20f8		       ad 84 b0 	      lda	titlescreencolor
     38  20fb		       85 08		      sta	COLUPF
     39  20fd
     40  20fd					      ifconst	bmp_48x1_2_PF1
     41  20fd		       ad af b9 	      lda	bmp_48x1_2_PF1
     42  2100				  -	      else
     43  2100				  -	      lda	#0
     44  2100				  -	      nop
     45  2100					      endif
     46  2100		       85 0e		      sta	PF1
     47  2102
     48  2102					      ifconst	bmp_48x1_2_PF2
     49  2102		       ad b0 b9 	      lda	bmp_48x1_2_PF2
     50  2105				  -	      else
     51  2105				  -	      lda	#0
     52  2105				  -	      nop
     53  2105					      endif
     54  2105		       85 0f		      sta	PF2
     55  2107
     56  2107		       4c 61 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  210a
     58  210a				   bmp_48x1_2_values
     59  210a		       b2 b9		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  210c		       bd b9		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  210e		       c8 b9		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2110		       d3 b9		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  2112		       de b9		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  2114		       e9 b9		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  2116
------- FILE titlescreen/asm/titlescreen.asm
     80  2116					      endif		;mk_48x1_2_on
     81  2116
     82  2116				  -	      ifconst	mk_48x1_3_on
     83  2116				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2116					      endif		;mk_48x1_3_on
     85  2116
     86  2116				  -	      ifconst	mk_48x1_4_on
     87  2116				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2116					      endif		;mk_48x1_4_on
     89  2116
     90  2116				  -	      ifconst	mk_48x1_5_on
     91  2116				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2116					      endif		;mk_48x1_5_on
     93  2116
     94  2116				  -	      ifconst	mk_48x1_6_on
     95  2116				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2116					      endif		;mk_48x1_6_on
     97  2116
     98  2116				  -	      ifconst	mk_48x1_7_on
     99  2116				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2116					      endif		;mk_48x1_7_on
    101  2116
    102  2116				  -	      ifconst	mk_48x1_8_on
    103  2116				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2116					      endif		;mk_48x1_8_on
    105  2116
    106  2116					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  2116					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  2116
      2  2116				   draw_bmp_48x2_1
      3  2116
      4  2116		       a9 00		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  2118				  -	      ifconst	bmp_48x2_1_index
      6  2118				  -	      sec
      7  2118				  -	      sbc	bmp_48x2_1_index
      8  2118					      endif
      9  2118		       85 f4		      sta	aux5+0
     10  211a		       a9 ba		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  211c		       85 f5		      sta	aux5+1
     12  211e
     13  211e		       a0 0b		      ldy	#11
     14  2120				   bmp_48x2_1_pointersetup
     15  2120		       b9 55 b1 	      lda	bmp_48x2_1_values,y
     16  2123		       99 96 00 	      sta	scorepointers,y
     17  2126		       88		      dey
     18  2127		       b9 55 b1 	      lda	bmp_48x2_1_values,y
     19  212a				  -	      ifconst	bmp_48x2_1_index
     20  212a				  -	      sec
     21  212a				  -	      sbc	bmp_48x2_1_index
     22  212a					      endif
     23  212a		       99 96 00 	      sta	scorepointers,y
     24  212d		       88		      dey
     25  212e		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2130
     27  2130
     28  2130		       a0 15		      ldy	#(bmp_48x2_1_window-1)
     29  2132		       84 f1		      sty	aux2
     30  2134
     31  2134		       c8		      iny
     32  2135		       b1 f4		      lda	(aux5),y
     33  2137		       88		      dey
     34  2138
     35  2138		       85 06		      sta	COLUP0	;3
     36  213a		       85 07		      sta	COLUP1	;3
     37  213c		       85 2b		      sta	HMCLR	;3
     38  213e
     39  213e		       ad 84 b0 	      lda	titlescreencolor
     40  2141		       85 08		      sta	COLUPF
     41  2143
     42  2143					      ifconst	bmp_48x2_1_background
     43  2143		       ad 19 ba 	      lda	bmp_48x2_1_background
     44  2146				  -	      else
     45  2146				  -	      lda	titlescreencolor
     46  2146					      endif
     47  2146		       85 f3		      sta	aux4
     48  2148					      ifconst	bmp_48x2_1_PF1
     49  2148		       ad 17 ba 	      lda	bmp_48x2_1_PF1
     50  214b				  -	      else
     51  214b				  -	      lda	#0
     52  214b				  -	      nop
     53  214b					      endif
     54  214b		       85 0e		      sta	PF1
     55  214d
     56  214d					      ifconst	bmp_48x2_1_PF2
     57  214d		       ad 18 ba 	      lda	bmp_48x2_1_PF2
     58  2150				  -	      else
     59  2150				  -	      lda	#0
     60  2150				  -	      nop
     61  2150					      endif
     62  2150		       85 0f		      sta	PF2
     63  2152
     64  2152		       4c dc b1 	      jmp	draw_bmp_48x2_X
     65  2155
     66  2155				   bmp_48x2_1_values
     67  2155		       1a ba		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  2157		       30 ba		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  2159		       46 ba		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  215b		       5c ba		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  215d		       72 ba		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  215f		       88 ba		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  2161
------- FILE titlescreen/asm/titlescreen.asm
    108  2161					      endif		;mk_48x2_1_on
    109  2161
    110  2161				  -	      ifconst	mk_48x2_2_on
    111  2161				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  2161					      endif		;mk_48x2_2_on
    113  2161
    114  2161				  -	      ifconst	mk_48x2_3_on
    115  2161				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  2161					      endif		;mk_48x2_3_on
    117  2161
    118  2161				  -	      ifconst	mk_48x2_4_on
    119  2161				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  2161					      endif		;mk_48x2_4_on
    121  2161
    122  2161				  -	      ifconst	mk_48x2_5_on
    123  2161				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  2161					      endif		;mk_48x2_5_on
    125  2161
    126  2161				  -	      ifconst	mk_48x2_6_on
    127  2161				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  2161					      endif		;mk_48x2_6_on
    129  2161
    130  2161				  -	      ifconst	mk_48x2_7_on
    131  2161				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  2161					      endif		;mk_48x2_7_on
    133  2161
    134  2161				  -	      ifconst	mk_48x2_8_on
    135  2161				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  2161					      endif		;mk_48x2_8_on
    137  2161
    138  2161					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  2161					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  2161				   draw_bmp_48x1_X
      2  2161
      3  2161		       a9 03		      lda	#3
      4  2163		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  2165		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  2167
      7  2167		       ba		      tsx
      8  2168		       86 f6		      stx	stack1	;save the stack pointer
      9  216a
     10  216a		       20 5c b0 	      jsr	position48
     11  216d
     12  216d		       a9 03		      lda	#3	;2
     13  216f		       85 25		      sta	VDELP0	;3
     14  2171		       85 26		      sta	VDELP1	;3
     15  2173
     16  2173		       a9 01		      lda	#1	;2
     17  2175		       85 0a		      sta	CTRLPF	;3
     18  2177
     19  2177							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2177		       85 2b		      sta	HMCLR
     21  2179
     22  2179		       85 02		      sta	WSYNC
     23  217b
     24  217b		       e6 9c		      inc	temp1	;5
     25  217d		       c6 9c		      dec	temp1	;5
     26  217f		       e6 9c		      inc	temp1	;5
     27  2181		       c6 9c		      dec	temp1	;5
     28  2183		       e6 9c		      inc	temp1	;5
     29  2185		       c6 9c		      dec	temp1	;5
     30  2187		       e6 9c		      inc	temp1	;5
     31  2189		       c6 9c		      dec	temp1	;5
     32  218b		       e6 9c		      inc	temp1	;5
     33  218d		       c6 9c		      dec	temp1	;5
     34  218f
      0  218f					      sleep	5
      1  218f				   .CYCLES    SET	5
      2  218f
      3  218f				  -	      IF	.CYCLES < 2
      4  218f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  218f				  -	      ERR
      6  218f					      ENDIF
      7  218f
      8  218f					      IF	.CYCLES & 1
      9  218f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  218f		       04 00		      nop	0
     11  2191				  -	      ELSE
     12  2191				  -	      bit	VSYNC
     13  2191					      ENDIF
     14  2191				   .CYCLES    SET	.CYCLES - 3
     15  2191					      ENDIF
     16  2191
     17  2191					      REPEAT	.CYCLES / 2
     18  2191		       ea		      nop
     19  2192					      REPEND
     36  2192
     37  2192		       c8		      iny
     38  2193
     39  2193		       4c 96 b1 	      jmp	pf48x1_X_loop_entry
     40  2196
     41  2196				  -	      if	>. != >[.+$2a]
     42  2196				  -	      align	256
     43  2196					      endif
     44  2196
     45  2196				   pf48x1_X_loop_entry
     46  2196				   pf48x1_X_loop
     47  2196		       88		      dey		;2
     48  2197		       84 f1		      sty	aux2	;3
     49  2199		       b1 96		      lda	(scorepointers+0),y	;5
     50  219b		       85 1b		      sta	GRP0	;3
     51  219d
     52  219d		       b1 98		      lda	(scorepointers+2),y	;5
     53  219f		       85 1c		      sta	GRP1	;3
     54  21a1		       b1 9a		      lda	(scorepointers+4),y	;5
     55  21a3		       85 1b		      sta	GRP0	;3
     56  21a5
      0  21a5					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  21a5				   .CYCLES    SET	2
      2  21a5
      3  21a5				  -	      IF	.CYCLES < 2
      4  21a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21a5				  -	      ERR
      6  21a5					      ENDIF
      7  21a5
      8  21a5				  -	      IF	.CYCLES & 1
      9  21a5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21a5				  -	      nop	0
     11  21a5				  -	      ELSE
     12  21a5				  -	      bit	VSYNC
     13  21a5				  -	      ENDIF
     14  21a5				  -.CYCLES    SET	.CYCLES - 3
     15  21a5					      ENDIF
     16  21a5
     17  21a5					      REPEAT	.CYCLES / 2
     18  21a5		       ea		      nop
     19  21a6					      REPEND
     58  21a6		       a5 f3		      lda	aux4	;3
     59  21a8		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  21aa
     61  21aa		       b3 a0		      lax	(scorepointers+10),y	;5
     62  21ac		       b1 9e		      lda	(scorepointers+8),y	;5
     63  21ae		       85 f7		      sta	stack2	;3
     64  21b0		       b1 9c		      lda	(scorepointers+6),y	;5
     65  21b2		       a4 f7		      ldy	stack2	;3
     66  21b4
     67  21b4		       85 1c		      sta	GRP1	;3
     68  21b6		       84 1b		      sty	GRP0	;3
     69  21b8		       86 1c		      stx	GRP1	;3
     70  21ba		       84 1b		      sty	GRP0	;3
     71  21bc
     72  21bc		       a4 f1		      ldy	aux2	;3
     73  21be		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  21c0
     75  21c0				   pf48x1_X_codeend
     76  21c0							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  21c0
     78  21c0		       a9 00		      lda	#0
     79  21c2		       85 1b		      sta	GRP0
     80  21c4		       85 1c		      sta	GRP1
     81  21c6		       85 1b		      sta	GRP0
     82  21c8		       85 1c		      sta	GRP1
     83  21ca		       85 1f		      sta	ENABL
     84  21cc		       85 1d		      sta	ENAM0
     85  21ce		       85 25		      sta	VDELP0
     86  21d0		       85 26		      sta	VDELP1
     87  21d2		       85 0d		      sta	PF0
     88  21d4		       85 0e		      sta	PF1
     89  21d6		       85 0f		      sta	PF2
     90  21d8
     91  21d8		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  21da		       9a		      txs
     93  21db		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  21dc					      endif		;mk_48x1_X_on
    141  21dc
    142  21dc					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  21dc					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  21dc				   draw_bmp_48x2_X
      2  21dc
      3  21dc		       a9 00		      lda	#0
      4  21de		       85 1b		      sta	GRP0
      5  21e0		       85 1c		      sta	GRP1
      6  21e2
      7  21e2		       a9 03		      lda	#3
      8  21e4		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  21e6		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  21e8
     11  21e8		       ba		      tsx
     12  21e9		       86 f6		      stx	stack1	;save the stack pointer
     13  21eb
     14  21eb		       20 5c b0 	      jsr	position48
     15  21ee
     16  21ee		       a9 03		      lda	#3	;2
     17  21f0		       85 25		      sta	VDELP0	;3
     18  21f2		       85 26		      sta	VDELP1	;3
     19  21f4
     20  21f4		       a9 01		      lda	#1	;2
     21  21f6		       85 0a		      sta	CTRLPF	;3
     22  21f8
     23  21f8							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  21f8		       85 2b		      sta	HMCLR
     25  21fa		       85 02		      sta	WSYNC
     26  21fc
     27  21fc
     28  21fc							;sleep (63)		;63
     29  21fc		       e6 9c		      inc	temp1
     30  21fe		       c6 9c		      dec	temp1
     31  2200		       e6 9c		      inc	temp1
     32  2202		       c6 9c		      dec	temp1
     33  2204		       e6 9c		      inc	temp1
     34  2206		       c6 9c		      dec	temp1
     35  2208		       e6 9c		      inc	temp1
     36  220a		       c6 9c		      dec	temp1
     37  220c		       e6 9c		      inc	temp1
     38  220e		       c6 9c		      dec	temp1
     39  2210		       e6 9c		      inc	temp1
     40  2212		       c6 9c		      dec	temp1
      0  2214					      sleep	3
      1  2214				   .CYCLES    SET	3
      2  2214
      3  2214				  -	      IF	.CYCLES < 2
      4  2214				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2214				  -	      ERR
      6  2214					      ENDIF
      7  2214
      8  2214					      IF	.CYCLES & 1
      9  2214					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2214		       04 00		      nop	0
     11  2216				  -	      ELSE
     12  2216				  -	      bit	VSYNC
     13  2216					      ENDIF
     14  2216				   .CYCLES    SET	.CYCLES - 3
     15  2216					      ENDIF
     16  2216
     17  2216				  -	      REPEAT	.CYCLES / 2
     18  2216				  -	      nop
     19  2216					      REPEND
     42  2216
     43  2216		       a5 f3		      lda	aux4	;3
     44  2218		       85 08		      sta	COLUPF	;3
     45  221a
     46  221a		       4c 1d b2 	      jmp	pf48x2_X_loop	;3
     47  221d
     48  221d				  -	      if	>. != >[.+$52]
     49  221d				  -	      align	256
     50  221d					      endif
     51  221d
     52  221d				   pf48x2_X_loop
     53  221d
     54  221d		       b1 96		      lda	(scorepointers+0),y	;5
     55  221f		       85 1b		      sta	GRP0	;3
     56  2221		       b1 98		      lda	(scorepointers+2),y	;5
     57  2223		       85 1c		      sta	GRP1	;3
     58  2225		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2227		       85 1b		      sta	GRP0	;3
     60  2229
     61  2229		       b3 a0		      lax	(scorepointers+10),y	;5
     62  222b		       b1 9e		      lda	(scorepointers+8),y	;5
     63  222d		       85 f7		      sta	stack2	;3
     64  222f		       b1 9c		      lda	(scorepointers+6),y	;5
     65  2231		       a4 f7		      ldy	stack2	;3
     66  2233
     67  2233		       85 1c		      sta	GRP1	;3
     68  2235		       84 1b		      sty	GRP0	;3
     69  2237		       86 1c		      stx	GRP1	;3
     70  2239		       84 1b		      sty	GRP0	;3
     71  223b
     72  223b		       a4 f1		      ldy	aux2	;3
     73  223d
     74  223d		       b1 f4		      lda	(aux5),y	;5
     75  223f		       85 91		      sta	missile0y	;3
     76  2241
      0  2241					      sleep	3
      1  2241				   .CYCLES    SET	3
      2  2241
      3  2241				  -	      IF	.CYCLES < 2
      4  2241				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2241				  -	      ERR
      6  2241					      ENDIF
      7  2241
      8  2241					      IF	.CYCLES & 1
      9  2241					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2241		       04 00		      nop	0
     11  2243				  -	      ELSE
     12  2243				  -	      bit	VSYNC
     13  2243					      ENDIF
     14  2243				   .CYCLES    SET	.CYCLES - 3
     15  2243					      ENDIF
     16  2243
     17  2243				  -	      REPEAT	.CYCLES / 2
     18  2243				  -	      nop
     19  2243					      REPEND
     78  2243
     79  2243		       c6 f1		      dec	aux2	;5
     80  2245
     81  2245
     82  2245		       b1 96		      lda	(scorepointers+0),y	;5
     83  2247		       85 1b		      sta	GRP0	;3
     84  2249		       b1 98		      lda	(scorepointers+2),y	;5
     85  224b		       85 1c		      sta	GRP1	;3
     86  224d		       b1 9a		      lda	(scorepointers+4),y	;5
     87  224f		       85 1b		      sta	GRP0	;3
     88  2251
     89  2251		       b3 a0		      lax	(scorepointers+10),y	;5
     90  2253		       b1 9e		      lda	(scorepointers+8),y	;5
     91  2255		       85 f7		      sta	stack2	;3
     92  2257		       b1 9c		      lda	(scorepointers+6),y	;5
     93  2259		       a4 f7		      ldy	stack2	;3
     94  225b
     95  225b		       85 1c		      sta	GRP1	;3
     96  225d		       84 1b		      sty	GRP0	;3
     97  225f		       86 1c		      stx	GRP1	;3
     98  2261		       84 1b		      sty	GRP0	;3
     99  2263
      0  2263					      sleep	4
      1  2263				   .CYCLES    SET	4
      2  2263
      3  2263				  -	      IF	.CYCLES < 2
      4  2263				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2263				  -	      ERR
      6  2263					      ENDIF
      7  2263
      8  2263				  -	      IF	.CYCLES & 1
      9  2263				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2263				  -	      nop	0
     11  2263				  -	      ELSE
     12  2263				  -	      bit	VSYNC
     13  2263				  -	      ENDIF
     14  2263				  -.CYCLES    SET	.CYCLES - 3
     15  2263					      ENDIF
     16  2263
     17  2263					      REPEAT	.CYCLES / 2
     18  2263		       ea		      nop
     17  2263					      REPEND
     18  2264		       ea		      nop
     19  2265					      REPEND
    101  2265
    102  2265		       a5 91		      lda	missile0y
    103  2267		       85 07		      sta	COLUP1
    104  2269		       85 06		      sta	COLUP0
    105  226b
    106  226b		       a4 f1		      ldy	aux2	;3
    107  226d		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  226f
    109  226f
    110  226f				   pf48x2_X_codeend
    111  226f							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  226f
    113  226f		       a9 00		      lda	#0
    114  2271		       85 1b		      sta	GRP0
    115  2273		       85 1c		      sta	GRP1
    116  2275		       85 1b		      sta	GRP0
    117  2277		       85 1c		      sta	GRP1
    118  2279		       85 25		      sta	VDELP0
    119  227b		       85 26		      sta	VDELP1
    120  227d		       85 0d		      sta	PF0
    121  227f		       85 0e		      sta	PF1
    122  2281		       85 0f		      sta	PF2
    123  2283
    124  2283		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  2285		       9a		      txs
    126  2286		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  2287					      endif		;mk_48x2_X_on
    145  2287
    146  2287
    147  2287				  -	      ifconst	mk_96x2_1_on
    148  2287				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  2287					      endif		;mk_96x2_1_on
    150  2287
    151  2287				  -	      ifconst	mk_96x2_2_on
    152  2287				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2287					      endif		;mk_96x2_2_on
    154  2287
    155  2287				  -	      ifconst	mk_96x2_3_on
    156  2287				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2287					      endif		;mk_96x2_3_on
    158  2287
    159  2287				  -	      ifconst	mk_96x2_4_on
    160  2287				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2287					      endif		;mk_96x2_4_on
    162  2287
    163  2287				  -	      ifconst	mk_96x2_5_on
    164  2287				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2287					      endif		;mk_96x2_5_on
    166  2287
    167  2287				  -	      ifconst	mk_96x2_6_on
    168  2287				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2287					      endif		;mk_96x2_6_on
    170  2287
    171  2287				  -	      ifconst	mk_96x2_7_on
    172  2287				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2287					      endif		;mk_96x2_7_on
    174  2287
    175  2287				  -	      ifconst	mk_96x2_8_on
    176  2287				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2287					      endif		;mk_96x2_8_on
    178  2287
    179  2287					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  2287					      include	"titlescreen/asm/score_kernel.asm"
      1  2287							; The batari Basic score kernel
      2  2287							; This minikernel is not under the same license as the rest of the
      3  2287							; titlescreen code. Refer to the bB license before you use this in
      4  2287							; a non-bB program.
      5  2287
      6  2287				   draw_score_display
      7  2287
      8  2287		       a7 93		      lax	score+0
      9  2289		       20 43 b3 	      jsr	miniscorepointerset
     10  228c		       84 9e		      sty	scorepointers+8
     11  228e		       86 96		      stx	scorepointers+0
     12  2290		       a7 94		      lax	score+1
     13  2292		       20 43 b3 	      jsr	miniscorepointerset
     14  2295		       84 9a		      sty	scorepointers+4
     15  2297		       86 9c		      stx	scorepointers+6
     16  2299		       a7 95		      lax	score+2
     17  229b		       20 43 b3 	      jsr	miniscorepointerset
     18  229e		       84 a0		      sty	scorepointers+10
     19  22a0		       86 98		      stx	scorepointers+2
     20  22a2
     21  22a2		       85 2b		      sta	HMCLR
     22  22a4		       ba		      tsx
     23  22a5		       86 f6		      stx	stack1
     24  22a7							;ldx #$20
     25  22a7		       a2 60		      ldx	#$60
     26  22a9		       86 20		      stx	HMP0
     27  22ab
     28  22ab		       a2 00		      ldx	#0
     29  22ad		       85 02		      sta	WSYNC	;   0
     30  22af		       86 1b		      STx	GRP0	; 3 3
     31  22b1		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  22b3
      0  22b3					      sleep	7	; 7 13
      1  22b3				   .CYCLES    SET	7
      2  22b3
      3  22b3				  -	      IF	.CYCLES < 2
      4  22b3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22b3				  -	      ERR
      6  22b3					      ENDIF
      7  22b3
      8  22b3					      IF	.CYCLES & 1
      9  22b3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22b3		       04 00		      nop	0
     11  22b5				  -	      ELSE
     12  22b5				  -	      bit	VSYNC
     13  22b5					      ENDIF
     14  22b5				   .CYCLES    SET	.CYCLES - 3
     15  22b5					      ENDIF
     16  22b5
     17  22b5					      REPEAT	.CYCLES / 2
     18  22b5		       ea		      nop
     17  22b5					      REPEND
     18  22b6		       ea		      nop
     19  22b7					      REPEND
     34  22b7
     35  22b7		       a9 ba		      lda	#>miniscoretable	; 2 15
     36  22b9		       95 97		      sta	scorepointers+1,x	; 4 19
     37  22bb		       95 99		      sta	scorepointers+3,x	; 4 23
     38  22bd		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  22bf		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  22c1		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  22c3		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  22c5
     43  22c5		       a0 07		      LDY	#7	; 2 41
     44  22c7		       85 10		      STA	RESP0	; 3 44
     45  22c9		       85 11		      STA	RESP1	; 3 47
     46  22cb
     47  22cb		       a9 03		      LDA	#$03	; 2 49
     48  22cd		       85 04		      STA	NUSIZ0	; 3 52
     49  22cf		       95 05		      STA	NUSIZ1,x	; 4 56
     50  22d1		       85 25		      STA	VDELP0	; 3 59
     51  22d3		       85 26		      STA	VDELP1	; 3 62
     52  22d5							;LDA #$30		; 2 64
     53  22d5		       a9 70		      LDA	#$70	; 2 64
     54  22d7		       85 21		      STA	HMP1	; 3 67
     55  22d9		       a5 a3		      LDA	scorecolor	; 3 70
     56  22db		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  22dd				  -	      ifconst	score_kernel_fade
     58  22dd				  -	      and	score_kernel_fade
     59  22dd					      endif
     60  22dd
     61  22dd		       85 06		      STA	COLUP0
     62  22df		       85 07		      STA	COLUP1
     63  22e1				  -	      ifconst	scorefade
     64  22e1				  -	      STA	stack2	; scorefade
     65  22e1					      endif
     66  22e1		       b1 96		      lda	(scorepointers),y
     67  22e3		       85 1b		      sta	GRP0
     68  22e5		       b1 9e		      lda	(scorepointers+8),y
     69  22e7		       85 02		      sta	WSYNC
      0  22e9					      sleep	2
      1  22e9				   .CYCLES    SET	2
      2  22e9
      3  22e9				  -	      IF	.CYCLES < 2
      4  22e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22e9				  -	      ERR
      6  22e9					      ENDIF
      7  22e9
      8  22e9				  -	      IF	.CYCLES & 1
      9  22e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22e9				  -	      nop	0
     11  22e9				  -	      ELSE
     12  22e9				  -	      bit	VSYNC
     13  22e9				  -	      ENDIF
     14  22e9				  -.CYCLES    SET	.CYCLES - 3
     15  22e9					      ENDIF
     16  22e9
     17  22e9					      REPEAT	.CYCLES / 2
     18  22e9		       ea		      nop
     19  22ea					      REPEND
     71  22ea		       4c 0b b3 	      jmp	beginscoreloop
     72  22ed
     73  22ed					      if	((<*)>$28)
     74  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2300					      endif
     76  2300
     77  2300				   scoreloop2
     78  2300				  -	      ifconst	scorefade
     79  2300				  -	      lda	stack2
     80  2300				  -	      sta	COLUP0
     81  2300				  -	      sta	COLUP1
     82  2300					      else
      0  2300					      sleep	9
      1  2300				   .CYCLES    SET	9
      2  2300
      3  2300				  -	      IF	.CYCLES < 2
      4  2300				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2300				  -	      ERR
      6  2300					      ENDIF
      7  2300
      8  2300					      IF	.CYCLES & 1
      9  2300					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2300		       04 00		      nop	0
     11  2302				  -	      ELSE
     12  2302				  -	      bit	VSYNC
     13  2302					      ENDIF
     14  2302				   .CYCLES    SET	.CYCLES - 3
     15  2302					      ENDIF
     16  2302
     17  2302					      REPEAT	.CYCLES / 2
     18  2302		       ea		      nop
     17  2302					      REPEND
     18  2303		       ea		      nop
     17  2303					      REPEND
     18  2304		       ea		      nop
     19  2305					      REPEND
     84  2305					      endif
     85  2305		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2307		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  230b							; cycle 0
     89  230b				   beginscoreloop
     90  230b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  230f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2311		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2313		       9a		      txs
     95  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2316
     97  2316				  -	      ifconst	scorefade
     98  2316				  -	      dec	stack2
     99  2316					      else
      0  2316					      sleep	5
      1  2316				   .CYCLES    SET	5
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     19  2319					      REPEND
    101  2319					      endif
      0  2319					      sleep	2
      1  2319				   .CYCLES    SET	2
      2  2319
      3  2319				  -	      IF	.CYCLES < 2
      4  2319				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2319				  -	      ERR
      6  2319					      ENDIF
      7  2319
      8  2319				  -	      IF	.CYCLES & 1
      9  2319				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2319				  -	      nop	0
     11  2319				  -	      ELSE
     12  2319				  -	      bit	VSYNC
     13  2319				  -	      ENDIF
     14  2319				  -.CYCLES    SET	.CYCLES - 3
     15  2319					      ENDIF
     16  2319
     17  2319					      REPEAT	.CYCLES / 2
     18  2319		       ea		      nop
     19  231a					      REPEND
    103  231a
    104  231a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  231c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  231e		       ba		      tsx
    107  231f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2321		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2323
    110  2323		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2325		       88		      dey
    112  2326		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2328				   scoreloop2end
    114  2328
    115  2328							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2328
    117  2328
    118  2328		       a6 f6		      ldx	stack1
    119  232a		       9a		      txs
    120  232b
    121  232b		       a9 00		      LDA	#0
    122  232d		       85 0e		      sta	PF1
    123  232f		       85 1b		      STA	GRP0
    124  2331		       85 1c		      STA	GRP1
    125  2333		       85 25		      STA	VDELP0
    126  2335		       85 26		      STA	VDELP1
    127  2337		       85 04		      STA	NUSIZ0
    128  2339		       85 05		      STA	NUSIZ1
    129  233b
    130  233b							; clear out the score pointers in case they're stolen DPC variables...
    131  233b		       a2 0b		      ldx	#11
    132  233d				   clearscoreploop
    133  233d		       95 96		      sta	scorepointers,x
    134  233f		       ca		      dex
    135  2340		       10 fb		      bpl	clearscoreploop
    136  2342
    137  2342
    138  2342							;;ldy temp3
    139  2342							;ldy scorepointers+8
    140  2342							;sty scorepointers+3
    141  2342
    142  2342							;;ldy temp5
    143  2342							;ldy scorepointers+10
    144  2342							;sty scorepointers+5
    145  2342		       60		      rts
    146  2343
    147  2343				   miniscorepointerset
    148  2343		       29 0f		      and	#$0F
    149  2345		       0a		      asl
    150  2346		       0a		      asl
    151  2347		       0a		      asl
    152  2348		       69 9e		      adc	#<miniscoretable
    153  234a		       a8		      tay
    154  234b		       8a		      txa
    155  234c		       29 f0		      and	#$F0
    156  234e		       4a		      lsr
    157  234f		       69 9e		      adc	#<miniscoretable
    158  2351		       aa		      tax
    159  2352		       60		      rts
    160  2353
------- FILE titlescreen/asm/titlescreen.asm
    181  2353					      endif		;mk_score_on
    182  2353
    183  2353				  -	      ifconst	mk_gameselect_on
    184  2353				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  2353					      endif		;mk_gameselect_on
    186  2353
    187  2353				   PFWAIT
    188  2353		       ad 84 02 	      lda	INTIM
    189  2356		       d0 fb		      bne	PFWAIT
    190  2358		       85 02		      sta	WSYNC
    191  235a
    192  235a				   OVERSCAN
    193  235a					      ifnconst	overscan_time
    194  235a		       a9 a2		      lda	#34+128
    195  235c				  -	      else
    196  235c				  -	      lda	#overscan_time+128-5
    197  235c					      endif
    198  235c		       8d 96 02 	      sta	TIM64T
    199  235f
    200  235f							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  235f				  -	      ifconst	player9height
    202  235f				  -	      ldy	#8
    203  235f				  -	      lda	#0
    204  235f				  -	      sta	player0height
    205  235f				  -.playerheightfixloop
    206  235f				  -	      sta	player1height,y
    207  235f				  -	      ifconst	_NUSIZ1
    208  235f				  -	      sta	_NUSIZ1,y
    209  235f				  -	      endif
    210  235f				  -	      dey
    211  235f				  -	      bpl	.playerheightfixloop
    212  235f					      endif
    213  235f
    214  235f		       a9 c2		      lda	#%11000010
    215  2361		       85 02		      sta	WSYNC
    216  2363		       85 01		      sta	VBLANK
      0  2365					      RETURN
      1  2365				  -	      ifnconst	bankswitch
      2  2365				  -	      rts
      3  2365					      else
      4  2365		       4c dd ff 	      jmp	BS_return
      5  2368					      endif
    218  2368
    219  2368					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  2368					      include	"titlescreen/48x1_1_image.asm"
      1  2368
      2  2368
      3  2368							; *** if you want to modify the bitmap color on the fly, just dim a
      4  2368							; *** variable in bB called "bmp_48x1_1_color", and use it to set the
      5  2368							; *** color.
      6  2368
      7  2368
      8  2368							;*** this is the height of the displayed data
      9  2368		       00 57	   bmp_48x1_1_window =	87
     10  2368
     11  2368							;*** this is the height of the bitmap data
     12  2368		       00 ae	   bmp_48x1_1_height =	174
     13  2368
     14  2368				  -	      ifnconst	bmp_48x1_1_color
     15  2368				  -bmp_48x1_1_color
     16  2368					      endif
     17  2368		       0a		      .byte.b	$0a
     18  2369
     19  2369				  -	      ifnconst	bmp_48x1_1_PF1
     20  2369				  -bmp_48x1_1_PF1
     21  2369					      endif
     22  2369		       00		      BYTE.b	%00000000
     23  236a				  -	      ifnconst	bmp_48x1_1_PF2
     24  236a				  -bmp_48x1_1_PF2
     25  236a					      endif
     26  236a		       00		      BYTE.b	%00000000
     27  236b				  -	      ifnconst	bmp_48x1_1_background
     28  236b				  -bmp_48x1_1_background
     29  236b					      endif
     30  236b		       00		      BYTE.b	$00
     31  236c
     32  236c					      if	>. != >[.+bmp_48x1_1_height]
     33  2400		       00 00 00 00*	      align	256
     34  2400					      endif
     35  2400
     36  2400				   bmp_48x1_1_00
     37  2400
     38  2400		       ff		      BYTE.b	%11111111
     39  2401		       ff		      BYTE.b	%11111111
     40  2402		       7f		      BYTE.b	%01111111
     41  2403		       7f		      BYTE.b	%01111111
     42  2404		       3f		      BYTE.b	%00111111
     43  2405		       0f		      BYTE.b	%00001111
     44  2406		       03		      BYTE.b	%00000011
     45  2407		       00		      BYTE.b	%00000000
     46  2408		       00		      BYTE.b	%00000000
     47  2409		       00		      BYTE.b	%00000000
     48  240a		       00		      BYTE.b	%00000000
     49  240b		       00		      BYTE.b	%00000000
     50  240c		       00		      BYTE.b	%00000000
     51  240d		       00		      BYTE.b	%00000000
     52  240e		       00		      BYTE.b	%00000000
     53  240f		       00		      BYTE.b	%00000000
     54  2410		       00		      BYTE.b	%00000000
     55  2411		       00		      BYTE.b	%00000000
     56  2412		       00		      BYTE.b	%00000000
     57  2413		       00		      BYTE.b	%00000000
     58  2414		       00		      BYTE.b	%00000000
     59  2415		       00		      BYTE.b	%00000000
     60  2416		       00		      BYTE.b	%00000000
     61  2417		       00		      BYTE.b	%00000000
     62  2418		       00		      BYTE.b	%00000000
     63  2419		       00		      BYTE.b	%00000000
     64  241a		       01		      BYTE.b	%00000001
     65  241b		       01		      BYTE.b	%00000001
     66  241c		       03		      BYTE.b	%00000011
     67  241d		       03		      BYTE.b	%00000011
     68  241e		       03		      BYTE.b	%00000011
     69  241f		       07		      BYTE.b	%00000111
     70  2420		       07		      BYTE.b	%00000111
     71  2421		       07		      BYTE.b	%00000111
     72  2422		       07		      BYTE.b	%00000111
     73  2423		       07		      BYTE.b	%00000111
     74  2424		       07		      BYTE.b	%00000111
     75  2425		       07		      BYTE.b	%00000111
     76  2426		       07		      BYTE.b	%00000111
     77  2427		       07		      BYTE.b	%00000111
     78  2428		       07		      BYTE.b	%00000111
     79  2429		       07		      BYTE.b	%00000111
     80  242a		       07		      BYTE.b	%00000111
     81  242b		       07		      BYTE.b	%00000111
     82  242c		       07		      BYTE.b	%00000111
     83  242d		       07		      BYTE.b	%00000111
     84  242e		       07		      BYTE.b	%00000111
     85  242f		       03		      BYTE.b	%00000011
     86  2430		       03		      BYTE.b	%00000011
     87  2431		       03		      BYTE.b	%00000011
     88  2432		       03		      BYTE.b	%00000011
     89  2433		       03		      BYTE.b	%00000011
     90  2434		       03		      BYTE.b	%00000011
     91  2435		       03		      BYTE.b	%00000011
     92  2436		       03		      BYTE.b	%00000011
     93  2437		       03		      BYTE.b	%00000011
     94  2438		       03		      BYTE.b	%00000011
     95  2439		       03		      BYTE.b	%00000011
     96  243a		       03		      BYTE.b	%00000011
     97  243b		       03		      BYTE.b	%00000011
     98  243c		       03		      BYTE.b	%00000011
     99  243d		       01		      BYTE.b	%00000001
    100  243e		       01		      BYTE.b	%00000001
    101  243f		       01		      BYTE.b	%00000001
    102  2440		       03		      BYTE.b	%00000011
    103  2441		       03		      BYTE.b	%00000011
    104  2442		       03		      BYTE.b	%00000011
    105  2443		       03		      BYTE.b	%00000011
    106  2444		       03		      BYTE.b	%00000011
    107  2445		       03		      BYTE.b	%00000011
    108  2446		       03		      BYTE.b	%00000011
    109  2447		       03		      BYTE.b	%00000011
    110  2448		       03		      BYTE.b	%00000011
    111  2449		       03		      BYTE.b	%00000011
    112  244a		       03		      BYTE.b	%00000011
    113  244b		       03		      BYTE.b	%00000011
    114  244c		       03		      BYTE.b	%00000011
    115  244d		       03		      BYTE.b	%00000011
    116  244e		       03		      BYTE.b	%00000011
    117  244f		       01		      BYTE.b	%00000001
    118  2450		       01		      BYTE.b	%00000001
    119  2451		       01		      BYTE.b	%00000001
    120  2452		       00		      BYTE.b	%00000000
    121  2453		       00		      BYTE.b	%00000000
    122  2454		       00		      BYTE.b	%00000000
    123  2455		       00		      BYTE.b	%00000000
    124  2456		       00		      BYTE.b	%00000000
    125  2457		       00		      BYTE.b	%00000000
    126  2458		       00		      BYTE.b	%00000000
    127  2459		       00		      BYTE.b	%00000000
    128  245a		       00		      BYTE.b	%00000000
    129  245b		       00		      BYTE.b	%00000000
    130  245c		       00		      BYTE.b	%00000000
    131  245d		       00		      BYTE.b	%00000000
    132  245e		       00		      BYTE.b	%00000000
    133  245f		       00		      BYTE.b	%00000000
    134  2460		       00		      BYTE.b	%00000000
    135  2461		       00		      BYTE.b	%00000000
    136  2462		       00		      BYTE.b	%00000000
    137  2463		       00		      BYTE.b	%00000000
    138  2464		       00		      BYTE.b	%00000000
    139  2465		       00		      BYTE.b	%00000000
    140  2466		       00		      BYTE.b	%00000000
    141  2467		       00		      BYTE.b	%00000000
    142  2468		       00		      BYTE.b	%00000000
    143  2469		       01		      BYTE.b	%00000001
    144  246a		       01		      BYTE.b	%00000001
    145  246b		       03		      BYTE.b	%00000011
    146  246c		       03		      BYTE.b	%00000011
    147  246d		       02		      BYTE.b	%00000010
    148  246e		       02		      BYTE.b	%00000010
    149  246f		       00		      BYTE.b	%00000000
    150  2470		       00		      BYTE.b	%00000000
    151  2471		       01		      BYTE.b	%00000001
    152  2472		       01		      BYTE.b	%00000001
    153  2473		       03		      BYTE.b	%00000011
    154  2474		       03		      BYTE.b	%00000011
    155  2475		       03		      BYTE.b	%00000011
    156  2476		       07		      BYTE.b	%00000111
    157  2477		       07		      BYTE.b	%00000111
    158  2478		       17		      BYTE.b	%00010111
    159  2479		       17		      BYTE.b	%00010111
    160  247a		       17		      BYTE.b	%00010111
    161  247b		       17		      BYTE.b	%00010111
    162  247c		       33		      BYTE.b	%00110011
    163  247d		       33		      BYTE.b	%00110011
    164  247e		       13		      BYTE.b	%00010011
    165  247f		       11		      BYTE.b	%00010001
    166  2480		       10		      BYTE.b	%00010000
    167  2481		       00		      BYTE.b	%00000000
    168  2482		       00		      BYTE.b	%00000000
    169  2483		       00		      BYTE.b	%00000000
    170  2484		       00		      BYTE.b	%00000000
    171  2485		       00		      BYTE.b	%00000000
    172  2486		       00		      BYTE.b	%00000000
    173  2487		       08		      BYTE.b	%00001000
    174  2488		       08		      BYTE.b	%00001000
    175  2489		       18		      BYTE.b	%00011000
    176  248a		       18		      BYTE.b	%00011000
    177  248b		       18		      BYTE.b	%00011000
    178  248c		       18		      BYTE.b	%00011000
    179  248d		       18		      BYTE.b	%00011000
    180  248e		       18		      BYTE.b	%00011000
    181  248f		       18		      BYTE.b	%00011000
    182  2490		       18		      BYTE.b	%00011000
    183  2491		       08		      BYTE.b	%00001000
    184  2492		       08		      BYTE.b	%00001000
    185  2493		       00		      BYTE.b	%00000000
    186  2494		       00		      BYTE.b	%00000000
    187  2495		       00		      BYTE.b	%00000000
    188  2496		       00		      BYTE.b	%00000000
    189  2497		       00		      BYTE.b	%00000000
    190  2498		       00		      BYTE.b	%00000000
    191  2499		       00		      BYTE.b	%00000000
    192  249a		       00		      BYTE.b	%00000000
    193  249b		       00		      BYTE.b	%00000000
    194  249c		       00		      BYTE.b	%00000000
    195  249d		       00		      BYTE.b	%00000000
    196  249e		       00		      BYTE.b	%00000000
    197  249f		       00		      BYTE.b	%00000000
    198  24a0		       00		      BYTE.b	%00000000
    199  24a1		       00		      BYTE.b	%00000000
    200  24a2		       00		      BYTE.b	%00000000
    201  24a3		       00		      BYTE.b	%00000000
    202  24a4		       00		      BYTE.b	%00000000
    203  24a5		       00		      BYTE.b	%00000000
    204  24a6		       00		      BYTE.b	%00000000
    205  24a7		       00		      BYTE.b	%00000000
    206  24a8		       00		      BYTE.b	%00000000
    207  24a9		       00		      BYTE.b	%00000000
    208  24aa		       00		      BYTE.b	%00000000
    209  24ab		       00		      BYTE.b	%00000000
    210  24ac		       00		      BYTE.b	%00000000
    211  24ad		       00		      BYTE.b	%00000000
    212  24ae
    213  24ae
    214  24ae					      if	>. != >[.+bmp_48x1_1_height]
    215  2500		       00 00 00 00*	      align	256
    216  2500					      endif
    217  2500
    218  2500				   bmp_48x1_1_01
    219  2500
    220  2500		       ff		      BYTE.b	%11111111
    221  2501		       ff		      BYTE.b	%11111111
    222  2502		       ff		      BYTE.b	%11111111
    223  2503		       ff		      BYTE.b	%11111111
    224  2504		       ff		      BYTE.b	%11111111
    225  2505		       ff		      BYTE.b	%11111111
    226  2506		       ff		      BYTE.b	%11111111
    227  2507		       ff		      BYTE.b	%11111111
    228  2508		       3f		      BYTE.b	%00111111
    229  2509		       1f		      BYTE.b	%00011111
    230  250a		       1f		      BYTE.b	%00011111
    231  250b		       1f		      BYTE.b	%00011111
    232  250c		       1e		      BYTE.b	%00011110
    233  250d		       0d		      BYTE.b	%00001101
    234  250e		       0b		      BYTE.b	%00001011
    235  250f		       07		      BYTE.b	%00000111
    236  2510		       07		      BYTE.b	%00000111
    237  2511		       0f		      BYTE.b	%00001111
    238  2512		       1f		      BYTE.b	%00011111
    239  2513		       3f		      BYTE.b	%00111111
    240  2514		       3f		      BYTE.b	%00111111
    241  2515		       3f		      BYTE.b	%00111111
    242  2516		       7f		      BYTE.b	%01111111
    243  2517		       ff		      BYTE.b	%11111111
    244  2518		       ff		      BYTE.b	%11111111
    245  2519		       ff		      BYTE.b	%11111111
    246  251a		       ff		      BYTE.b	%11111111
    247  251b		       ff		      BYTE.b	%11111111
    248  251c		       ff		      BYTE.b	%11111111
    249  251d		       ff		      BYTE.b	%11111111
    250  251e		       ff		      BYTE.b	%11111111
    251  251f		       ff		      BYTE.b	%11111111
    252  2520		       ff		      BYTE.b	%11111111
    253  2521		       ff		      BYTE.b	%11111111
    254  2522		       ff		      BYTE.b	%11111111
    255  2523		       ff		      BYTE.b	%11111111
    256  2524		       ff		      BYTE.b	%11111111
    257  2525		       ff		      BYTE.b	%11111111
    258  2526		       ff		      BYTE.b	%11111111
    259  2527		       ff		      BYTE.b	%11111111
    260  2528		       ff		      BYTE.b	%11111111
    261  2529		       ff		      BYTE.b	%11111111
    262  252a		       ff		      BYTE.b	%11111111
    263  252b		       ff		      BYTE.b	%11111111
    264  252c		       ff		      BYTE.b	%11111111
    265  252d		       ff		      BYTE.b	%11111111
    266  252e		       ff		      BYTE.b	%11111111
    267  252f		       ff		      BYTE.b	%11111111
    268  2530		       ff		      BYTE.b	%11111111
    269  2531		       ff		      BYTE.b	%11111111
    270  2532		       ff		      BYTE.b	%11111111
    271  2533		       ff		      BYTE.b	%11111111
    272  2534		       ff		      BYTE.b	%11111111
    273  2535		       ff		      BYTE.b	%11111111
    274  2536		       cf		      BYTE.b	%11001111
    275  2537		       c7		      BYTE.b	%11000111
    276  2538		       b0		      BYTE.b	%10110000
    277  2539		       be		      BYTE.b	%10111110
    278  253a		       bf		      BYTE.b	%10111111
    279  253b		       73		      BYTE.b	%01110011
    280  253c		       73		      BYTE.b	%01110011
    281  253d		       63		      BYTE.b	%01100011
    282  253e		       63		      BYTE.b	%01100011
    283  253f		       e3		      BYTE.b	%11100011
    284  2540		       c3		      BYTE.b	%11000011
    285  2541		       c3		      BYTE.b	%11000011
    286  2542		       c3		      BYTE.b	%11000011
    287  2543		       e7		      BYTE.b	%11100111
    288  2544		       e7		      BYTE.b	%11100111
    289  2545		       ef		      BYTE.b	%11101111
    290  2546		       ff		      BYTE.b	%11111111
    291  2547		       7f		      BYTE.b	%01111111
    292  2548		       7e		      BYTE.b	%01111110
    293  2549		       7e		      BYTE.b	%01111110
    294  254a		       fe		      BYTE.b	%11111110
    295  254b		       fc		      BYTE.b	%11111100
    296  254c		       b8		      BYTE.b	%10111000
    297  254d		       80		      BYTE.b	%10000000
    298  254e		       c0		      BYTE.b	%11000000
    299  254f		       f8		      BYTE.b	%11111000
    300  2550		       fa		      BYTE.b	%11111010
    301  2551		       f3		      BYTE.b	%11110011
    302  2552		       e7		      BYTE.b	%11100111
    303  2553		       03		      BYTE.b	%00000011
    304  2554		       03		      BYTE.b	%00000011
    305  2555		       03		      BYTE.b	%00000011
    306  2556		       01		      BYTE.b	%00000001
    307  2557		       00		      BYTE.b	%00000000
    308  2558		       00		      BYTE.b	%00000000
    309  2559		       00		      BYTE.b	%00000000
    310  255a		       00		      BYTE.b	%00000000
    311  255b		       00		      BYTE.b	%00000000
    312  255c		       00		      BYTE.b	%00000000
    313  255d		       00		      BYTE.b	%00000000
    314  255e		       00		      BYTE.b	%00000000
    315  255f		       00		      BYTE.b	%00000000
    316  2560		       00		      BYTE.b	%00000000
    317  2561		       00		      BYTE.b	%00000000
    318  2562		       00		      BYTE.b	%00000000
    319  2563		       00		      BYTE.b	%00000000
    320  2564		       01		      BYTE.b	%00000001
    321  2565		       03		      BYTE.b	%00000011
    322  2566		       07		      BYTE.b	%00000111
    323  2567		       07		      BYTE.b	%00000111
    324  2568		       4f		      BYTE.b	%01001111
    325  2569		       9f		      BYTE.b	%10011111
    326  256a		       bf		      BYTE.b	%10111111
    327  256b		       3f		      BYTE.b	%00111111
    328  256c		       3f		      BYTE.b	%00111111
    329  256d		       7f		      BYTE.b	%01111111
    330  256e		       ff		      BYTE.b	%11111111
    331  256f		       ff		      BYTE.b	%11111111
    332  2570		       ff		      BYTE.b	%11111111
    333  2571		       ff		      BYTE.b	%11111111
    334  2572		       ff		      BYTE.b	%11111111
    335  2573		       ff		      BYTE.b	%11111111
    336  2574		       ff		      BYTE.b	%11111111
    337  2575		       ff		      BYTE.b	%11111111
    338  2576		       ff		      BYTE.b	%11111111
    339  2577		       ff		      BYTE.b	%11111111
    340  2578		       ff		      BYTE.b	%11111111
    341  2579		       ff		      BYTE.b	%11111111
    342  257a		       ff		      BYTE.b	%11111111
    343  257b		       ff		      BYTE.b	%11111111
    344  257c		       ff		      BYTE.b	%11111111
    345  257d		       ff		      BYTE.b	%11111111
    346  257e		       fe		      BYTE.b	%11111110
    347  257f		       fc		      BYTE.b	%11111100
    348  2580		       f8		      BYTE.b	%11111000
    349  2581		       00		      BYTE.b	%00000000
    350  2582		       00		      BYTE.b	%00000000
    351  2583		       00		      BYTE.b	%00000000
    352  2584		       00		      BYTE.b	%00000000
    353  2585		       00		      BYTE.b	%00000000
    354  2586		       00		      BYTE.b	%00000000
    355  2587		       00		      BYTE.b	%00000000
    356  2588		       00		      BYTE.b	%00000000
    357  2589		       00		      BYTE.b	%00000000
    358  258a		       00		      BYTE.b	%00000000
    359  258b		       00		      BYTE.b	%00000000
    360  258c		       00		      BYTE.b	%00000000
    361  258d		       00		      BYTE.b	%00000000
    362  258e		       00		      BYTE.b	%00000000
    363  258f		       30		      BYTE.b	%00110000
    364  2590		       3e		      BYTE.b	%00111110
    365  2591		       3f		      BYTE.b	%00111111
    366  2592		       73		      BYTE.b	%01110011
    367  2593		       73		      BYTE.b	%01110011
    368  2594		       63		      BYTE.b	%01100011
    369  2595		       63		      BYTE.b	%01100011
    370  2596		       e3		      BYTE.b	%11100011
    371  2597		       c3		      BYTE.b	%11000011
    372  2598		       c3		      BYTE.b	%11000011
    373  2599		       c3		      BYTE.b	%11000011
    374  259a		       e7		      BYTE.b	%11100111
    375  259b		       e7		      BYTE.b	%11100111
    376  259c		       ef		      BYTE.b	%11101111
    377  259d		       ff		      BYTE.b	%11111111
    378  259e		       7f		      BYTE.b	%01111111
    379  259f		       7e		      BYTE.b	%01111110
    380  25a0		       7e		      BYTE.b	%01111110
    381  25a1		       7e		      BYTE.b	%01111110
    382  25a2		       7c		      BYTE.b	%01111100
    383  25a3		       38		      BYTE.b	%00111000
    384  25a4		       00		      BYTE.b	%00000000
    385  25a5		       00		      BYTE.b	%00000000
    386  25a6		       00		      BYTE.b	%00000000
    387  25a7		       00		      BYTE.b	%00000000
    388  25a8		       00		      BYTE.b	%00000000
    389  25a9		       00		      BYTE.b	%00000000
    390  25aa		       00		      BYTE.b	%00000000
    391  25ab		       00		      BYTE.b	%00000000
    392  25ac		       00		      BYTE.b	%00000000
    393  25ad		       00		      BYTE.b	%00000000
    394  25ae
    395  25ae
    396  25ae					      if	>. != >[.+bmp_48x1_1_height]
    397  2600		       00 00 00 00*	      align	256
    398  2600					      endif
    399  2600
    400  2600				   bmp_48x1_1_02
    401  2600
    402  2600		       f7		      BYTE.b	%11110111
    403  2601		       e7		      BYTE.b	%11100111
    404  2602		       e7		      BYTE.b	%11100111
    405  2603		       e6		      BYTE.b	%11100110
    406  2604		       e0		      BYTE.b	%11100000
    407  2605		       e0		      BYTE.b	%11100000
    408  2606		       c3		      BYTE.b	%11000011
    409  2607		       c7		      BYTE.b	%11000111
    410  2608		       cf		      BYTE.b	%11001111
    411  2609		       df		      BYTE.b	%11011111
    412  260a		       bd		      BYTE.b	%10111101
    413  260b		       78		      BYTE.b	%01111000
    414  260c		       f0		      BYTE.b	%11110000
    415  260d		       f0		      BYTE.b	%11110000
    416  260e		       e0		      BYTE.b	%11100000
    417  260f		       e0		      BYTE.b	%11100000
    418  2610		       e0		      BYTE.b	%11100000
    419  2611		       e0		      BYTE.b	%11100000
    420  2612		       c0		      BYTE.b	%11000000
    421  2613		       c0		      BYTE.b	%11000000
    422  2614		       c0		      BYTE.b	%11000000
    423  2615		       80		      BYTE.b	%10000000
    424  2616		       80		      BYTE.b	%10000000
    425  2617		       80		      BYTE.b	%10000000
    426  2618		       80		      BYTE.b	%10000000
    427  2619		       c1		      BYTE.b	%11000001
    428  261a		       c7		      BYTE.b	%11000111
    429  261b		       cf		      BYTE.b	%11001111
    430  261c		       cf		      BYTE.b	%11001111
    431  261d		       cf		      BYTE.b	%11001111
    432  261e		       cf		      BYTE.b	%11001111
    433  261f		       cf		      BYTE.b	%11001111
    434  2620		       cf		      BYTE.b	%11001111
    435  2621		       cf		      BYTE.b	%11001111
    436  2622		       df		      BYTE.b	%11011111
    437  2623		       df		      BYTE.b	%11011111
    438  2624		       df		      BYTE.b	%11011111
    439  2625		       df		      BYTE.b	%11011111
    440  2626		       df		      BYTE.b	%11011111
    441  2627		       df		      BYTE.b	%11011111
    442  2628		       ff		      BYTE.b	%11111111
    443  2629		       ff		      BYTE.b	%11111111
    444  262a		       ff		      BYTE.b	%11111111
    445  262b		       ff		      BYTE.b	%11111111
    446  262c		       ff		      BYTE.b	%11111111
    447  262d		       ff		      BYTE.b	%11111111
    448  262e		       ff		      BYTE.b	%11111111
    449  262f		       ff		      BYTE.b	%11111111
    450  2630		       ff		      BYTE.b	%11111111
    451  2631		       ff		      BYTE.b	%11111111
    452  2632		       ff		      BYTE.b	%11111111
    453  2633		       ff		      BYTE.b	%11111111
    454  2634		       ff		      BYTE.b	%11111111
    455  2635		       ff		      BYTE.b	%11111111
    456  2636		       ff		      BYTE.b	%11111111
    457  2637		       ff		      BYTE.b	%11111111
    458  2638		       ff		      BYTE.b	%11111111
    459  2639		       7f		      BYTE.b	%01111111
    460  263a		       7f		      BYTE.b	%01111111
    461  263b		       7f		      BYTE.b	%01111111
    462  263c		       3f		      BYTE.b	%00111111
    463  263d		       bf		      BYTE.b	%10111111
    464  263e		       9f		      BYTE.b	%10011111
    465  263f		       9f		      BYTE.b	%10011111
    466  2640		       cf		      BYTE.b	%11001111
    467  2641		       cf		      BYTE.b	%11001111
    468  2642		       e7		      BYTE.b	%11100111
    469  2643		       e7		      BYTE.b	%11100111
    470  2644		       e7		      BYTE.b	%11100111
    471  2645		       f3		      BYTE.b	%11110011
    472  2646		       d1		      BYTE.b	%11010001
    473  2647		       d9		      BYTE.b	%11011001
    474  2648		       cc		      BYTE.b	%11001100
    475  2649		       8c		      BYTE.b	%10001100
    476  264a		       8c		      BYTE.b	%10001100
    477  264b		       8c		      BYTE.b	%10001100
    478  264c		       98		      BYTE.b	%10011000
    479  264d		       d8		      BYTE.b	%11011000
    480  264e		       f8		      BYTE.b	%11111000
    481  264f		       f8		      BYTE.b	%11111000
    482  2650		       f0		      BYTE.b	%11110000
    483  2651		       60		      BYTE.b	%01100000
    484  2652		       00		      BYTE.b	%00000000
    485  2653		       e0		      BYTE.b	%11100000
    486  2654		       e0		      BYTE.b	%11100000
    487  2655		       c0		      BYTE.b	%11000000
    488  2656		       80		      BYTE.b	%10000000
    489  2657		       f0		      BYTE.b	%11110000
    490  2658		       e0		      BYTE.b	%11100000
    491  2659		       e0		      BYTE.b	%11100000
    492  265a		       e0		      BYTE.b	%11100000
    493  265b		       e0		      BYTE.b	%11100000
    494  265c		       e0		      BYTE.b	%11100000
    495  265d		       c3		      BYTE.b	%11000011
    496  265e		       c7		      BYTE.b	%11000111
    497  265f		       cf		      BYTE.b	%11001111
    498  2660		       df		      BYTE.b	%11011111
    499  2661		       bd		      BYTE.b	%10111101
    500  2662		       78		      BYTE.b	%01111000
    501  2663		       f0		      BYTE.b	%11110000
    502  2664		       f2		      BYTE.b	%11110010
    503  2665		       e7		      BYTE.b	%11100111
    504  2666		       ef		      BYTE.b	%11101111
    505  2667		       ef		      BYTE.b	%11101111
    506  2668		       ef		      BYTE.b	%11101111
    507  2669		       df		      BYTE.b	%11011111
    508  266a		       df		      BYTE.b	%11011111
    509  266b		       df		      BYTE.b	%11011111
    510  266c		       9f		      BYTE.b	%10011111
    511  266d		       9e		      BYTE.b	%10011110
    512  266e		       98		      BYTE.b	%10011000
    513  266f		       98		      BYTE.b	%10011000
    514  2670		       c0		      BYTE.b	%11000000
    515  2671		       c0		      BYTE.b	%11000000
    516  2672		       c0		      BYTE.b	%11000000
    517  2673		       c0		      BYTE.b	%11000000
    518  2674		       c0		      BYTE.b	%11000000
    519  2675		       c0		      BYTE.b	%11000000
    520  2676		       c0		      BYTE.b	%11000000
    521  2677		       c0		      BYTE.b	%11000000
    522  2678		       c0		      BYTE.b	%11000000
    523  2679		       c0		      BYTE.b	%11000000
    524  267a		       80		      BYTE.b	%10000000
    525  267b		       80		      BYTE.b	%10000000
    526  267c		       00		      BYTE.b	%00000000
    527  267d		       00		      BYTE.b	%00000000
    528  267e		       00		      BYTE.b	%00000000
    529  267f		       00		      BYTE.b	%00000000
    530  2680		       00		      BYTE.b	%00000000
    531  2681		       00		      BYTE.b	%00000000
    532  2682		       00		      BYTE.b	%00000000
    533  2683		       00		      BYTE.b	%00000000
    534  2684		       00		      BYTE.b	%00000000
    535  2685		       00		      BYTE.b	%00000000
    536  2686		       00		      BYTE.b	%00000000
    537  2687		       00		      BYTE.b	%00000000
    538  2688		       00		      BYTE.b	%00000000
    539  2689		       00		      BYTE.b	%00000000
    540  268a		       00		      BYTE.b	%00000000
    541  268b		       00		      BYTE.b	%00000000
    542  268c		       00		      BYTE.b	%00000000
    543  268d		       00		      BYTE.b	%00000000
    544  268e		       00		      BYTE.b	%00000000
    545  268f		       00		      BYTE.b	%00000000
    546  2690		       00		      BYTE.b	%00000000
    547  2691		       00		      BYTE.b	%00000000
    548  2692		       00		      BYTE.b	%00000000
    549  2693		       00		      BYTE.b	%00000000
    550  2694		       80		      BYTE.b	%10000000
    551  2695		       80		      BYTE.b	%10000000
    552  2696		       80		      BYTE.b	%10000000
    553  2697		       c0		      BYTE.b	%11000000
    554  2698		       c0		      BYTE.b	%11000000
    555  2699		       e0		      BYTE.b	%11100000
    556  269a		       e0		      BYTE.b	%11100000
    557  269b		       e0		      BYTE.b	%11100000
    558  269c		       f0		      BYTE.b	%11110000
    559  269d		       d0		      BYTE.b	%11010000
    560  269e		       d8		      BYTE.b	%11011000
    561  269f		       cc		      BYTE.b	%11001100
    562  26a0		       8c		      BYTE.b	%10001100
    563  26a1		       8c		      BYTE.b	%10001100
    564  26a2		       8c		      BYTE.b	%10001100
    565  26a3		       98		      BYTE.b	%10011000
    566  26a4		       d8		      BYTE.b	%11011000
    567  26a5		       f8		      BYTE.b	%11111000
    568  26a6		       f8		      BYTE.b	%11111000
    569  26a7		       f0		      BYTE.b	%11110000
    570  26a8		       60		      BYTE.b	%01100000
    571  26a9		       00		      BYTE.b	%00000000
    572  26aa		       00		      BYTE.b	%00000000
    573  26ab		       00		      BYTE.b	%00000000
    574  26ac		       00		      BYTE.b	%00000000
    575  26ad		       00		      BYTE.b	%00000000
    576  26ae
    577  26ae
    578  26ae					      if	>. != >[.+bmp_48x1_1_height]
    579  2700		       00 00 00 00*	      align	256
    580  2700					      endif
    581  2700
    582  2700				   bmp_48x1_1_03
    583  2700
    584  2700		       f0		      BYTE.b	%11110000
    585  2701		       f8		      BYTE.b	%11111000
    586  2702		       fc		      BYTE.b	%11111100
    587  2703		       ff		      BYTE.b	%11111111
    588  2704		       7f		      BYTE.b	%01111111
    589  2705		       3f		      BYTE.b	%00111111
    590  2706		       3f		      BYTE.b	%00111111
    591  2707		       9f		      BYTE.b	%10011111
    592  2708		       8f		      BYTE.b	%10001111
    593  2709		       c1		      BYTE.b	%11000001
    594  270a		       c0		      BYTE.b	%11000000
    595  270b		       c0		      BYTE.b	%11000000
    596  270c		       c0		      BYTE.b	%11000000
    597  270d		       40		      BYTE.b	%01000000
    598  270e		       40		      BYTE.b	%01000000
    599  270f		       40		      BYTE.b	%01000000
    600  2710		       40		      BYTE.b	%01000000
    601  2711		       40		      BYTE.b	%01000000
    602  2712		       40		      BYTE.b	%01000000
    603  2713		       40		      BYTE.b	%01000000
    604  2714		       40		      BYTE.b	%01000000
    605  2715		       00		      BYTE.b	%00000000
    606  2716		       00		      BYTE.b	%00000000
    607  2717		       00		      BYTE.b	%00000000
    608  2718		       ff		      BYTE.b	%11111111
    609  2719		       ff		      BYTE.b	%11111111
    610  271a		       ff		      BYTE.b	%11111111
    611  271b		       ff		      BYTE.b	%11111111
    612  271c		       ff		      BYTE.b	%11111111
    613  271d		       ff		      BYTE.b	%11111111
    614  271e		       ff		      BYTE.b	%11111111
    615  271f		       ff		      BYTE.b	%11111111
    616  2720		       ff		      BYTE.b	%11111111
    617  2721		       ff		      BYTE.b	%11111111
    618  2722		       ff		      BYTE.b	%11111111
    619  2723		       ff		      BYTE.b	%11111111
    620  2724		       ff		      BYTE.b	%11111111
    621  2725		       ff		      BYTE.b	%11111111
    622  2726		       ff		      BYTE.b	%11111111
    623  2727		       ff		      BYTE.b	%11111111
    624  2728		       ff		      BYTE.b	%11111111
    625  2729		       ff		      BYTE.b	%11111111
    626  272a		       ff		      BYTE.b	%11111111
    627  272b		       ff		      BYTE.b	%11111111
    628  272c		       ff		      BYTE.b	%11111111
    629  272d		       ff		      BYTE.b	%11111111
    630  272e		       ff		      BYTE.b	%11111111
    631  272f		       ff		      BYTE.b	%11111111
    632  2730		       ff		      BYTE.b	%11111111
    633  2731		       ff		      BYTE.b	%11111111
    634  2732		       ff		      BYTE.b	%11111111
    635  2733		       ff		      BYTE.b	%11111111
    636  2734		       ff		      BYTE.b	%11111111
    637  2735		       ff		      BYTE.b	%11111111
    638  2736		       ff		      BYTE.b	%11111111
    639  2737		       ff		      BYTE.b	%11111111
    640  2738		       ff		      BYTE.b	%11111111
    641  2739		       ff		      BYTE.b	%11111111
    642  273a		       ff		      BYTE.b	%11111111
    643  273b		       ff		      BYTE.b	%11111111
    644  273c		       ff		      BYTE.b	%11111111
    645  273d		       ff		      BYTE.b	%11111111
    646  273e		       ff		      BYTE.b	%11111111
    647  273f		       ff		      BYTE.b	%11111111
    648  2740		       ff		      BYTE.b	%11111111
    649  2741		       fd		      BYTE.b	%11111101
    650  2742		       ed		      BYTE.b	%11101101
    651  2743		       e3		      BYTE.b	%11100011
    652  2744		       f7		      BYTE.b	%11110111
    653  2745		       ff		      BYTE.b	%11111111
    654  2746		       ff		      BYTE.b	%11111111
    655  2747		       ff		      BYTE.b	%11111111
    656  2748		       ff		      BYTE.b	%11111111
    657  2749		       7f		      BYTE.b	%01111111
    658  274a		       3f		      BYTE.b	%00111111
    659  274b		       00		      BYTE.b	%00000000
    660  274c		       00		      BYTE.b	%00000000
    661  274d		       00		      BYTE.b	%00000000
    662  274e		       00		      BYTE.b	%00000000
    663  274f		       00		      BYTE.b	%00000000
    664  2750		       00		      BYTE.b	%00000000
    665  2751		       00		      BYTE.b	%00000000
    666  2752		       00		      BYTE.b	%00000000
    667  2753		       00		      BYTE.b	%00000000
    668  2754		       00		      BYTE.b	%00000000
    669  2755		       00		      BYTE.b	%00000000
    670  2756		       00		      BYTE.b	%00000000
    671  2757		       00		      BYTE.b	%00000000
    672  2758		       00		      BYTE.b	%00000000
    673  2759		       00		      BYTE.b	%00000000
    674  275a		       00		      BYTE.b	%00000000
    675  275b		       00		      BYTE.b	%00000000
    676  275c		       00		      BYTE.b	%00000000
    677  275d		       00		      BYTE.b	%00000000
    678  275e		       80		      BYTE.b	%10000000
    679  275f		       80		      BYTE.b	%10000000
    680  2760		       c0		      BYTE.b	%11000000
    681  2761		       c0		      BYTE.b	%11000000
    682  2762		       c0		      BYTE.b	%11000000
    683  2763		       c0		      BYTE.b	%11000000
    684  2764		       40		      BYTE.b	%01000000
    685  2765		       40		      BYTE.b	%01000000
    686  2766		       40		      BYTE.b	%01000000
    687  2767		       40		      BYTE.b	%01000000
    688  2768		       40		      BYTE.b	%01000000
    689  2769		       40		      BYTE.b	%01000000
    690  276a		       40		      BYTE.b	%01000000
    691  276b		       40		      BYTE.b	%01000000
    692  276c		       00		      BYTE.b	%00000000
    693  276d		       00		      BYTE.b	%00000000
    694  276e		       00		      BYTE.b	%00000000
    695  276f		       00		      BYTE.b	%00000000
    696  2770		       00		      BYTE.b	%00000000
    697  2771		       00		      BYTE.b	%00000000
    698  2772		       00		      BYTE.b	%00000000
    699  2773		       00		      BYTE.b	%00000000
    700  2774		       00		      BYTE.b	%00000000
    701  2775		       00		      BYTE.b	%00000000
    702  2776		       00		      BYTE.b	%00000000
    703  2777		       00		      BYTE.b	%00000000
    704  2778		       00		      BYTE.b	%00000000
    705  2779		       00		      BYTE.b	%00000000
    706  277a		       00		      BYTE.b	%00000000
    707  277b		       00		      BYTE.b	%00000000
    708  277c		       00		      BYTE.b	%00000000
    709  277d		       00		      BYTE.b	%00000000
    710  277e		       00		      BYTE.b	%00000000
    711  277f		       00		      BYTE.b	%00000000
    712  2780		       00		      BYTE.b	%00000000
    713  2781		       00		      BYTE.b	%00000000
    714  2782		       00		      BYTE.b	%00000000
    715  2783		       00		      BYTE.b	%00000000
    716  2784		       00		      BYTE.b	%00000000
    717  2785		       00		      BYTE.b	%00000000
    718  2786		       00		      BYTE.b	%00000000
    719  2787		       00		      BYTE.b	%00000000
    720  2788		       00		      BYTE.b	%00000000
    721  2789		       00		      BYTE.b	%00000000
    722  278a		       00		      BYTE.b	%00000000
    723  278b		       00		      BYTE.b	%00000000
    724  278c		       00		      BYTE.b	%00000000
    725  278d		       00		      BYTE.b	%00000000
    726  278e		       00		      BYTE.b	%00000000
    727  278f		       00		      BYTE.b	%00000000
    728  2790		       00		      BYTE.b	%00000000
    729  2791		       00		      BYTE.b	%00000000
    730  2792		       00		      BYTE.b	%00000000
    731  2793		       00		      BYTE.b	%00000000
    732  2794		       00		      BYTE.b	%00000000
    733  2795		       00		      BYTE.b	%00000000
    734  2796		       00		      BYTE.b	%00000000
    735  2797		       00		      BYTE.b	%00000000
    736  2798		       00		      BYTE.b	%00000000
    737  2799		       00		      BYTE.b	%00000000
    738  279a		       00		      BYTE.b	%00000000
    739  279b		       00		      BYTE.b	%00000000
    740  279c		       00		      BYTE.b	%00000000
    741  279d		       00		      BYTE.b	%00000000
    742  279e		       00		      BYTE.b	%00000000
    743  279f		       00		      BYTE.b	%00000000
    744  27a0		       00		      BYTE.b	%00000000
    745  27a1		       00		      BYTE.b	%00000000
    746  27a2		       00		      BYTE.b	%00000000
    747  27a3		       00		      BYTE.b	%00000000
    748  27a4		       00		      BYTE.b	%00000000
    749  27a5		       00		      BYTE.b	%00000000
    750  27a6		       00		      BYTE.b	%00000000
    751  27a7		       00		      BYTE.b	%00000000
    752  27a8		       00		      BYTE.b	%00000000
    753  27a9		       00		      BYTE.b	%00000000
    754  27aa		       00		      BYTE.b	%00000000
    755  27ab		       00		      BYTE.b	%00000000
    756  27ac		       00		      BYTE.b	%00000000
    757  27ad		       00		      BYTE.b	%00000000
    758  27ae
    759  27ae
    760  27ae					      if	>. != >[.+bmp_48x1_1_height]
    761  2800		       00 00 00 00*	      align	256
    762  2800					      endif
    763  2800
    764  2800				   bmp_48x1_1_04
    765  2800
    766  2800		       00		      BYTE.b	%00000000
    767  2801		       00		      BYTE.b	%00000000
    768  2802		       00		      BYTE.b	%00000000
    769  2803		       3c		      BYTE.b	%00111100
    770  2804		       fe		      BYTE.b	%11111110
    771  2805		       ff		      BYTE.b	%11111111
    772  2806		       ff		      BYTE.b	%11111111
    773  2807		       ff		      BYTE.b	%11111111
    774  2808		       ff		      BYTE.b	%11111111
    775  2809		       ff		      BYTE.b	%11111111
    776  280a		       ff		      BYTE.b	%11111111
    777  280b		       ff		      BYTE.b	%11111111
    778  280c		       ff		      BYTE.b	%11111111
    779  280d		       fb		      BYTE.b	%11111011
    780  280e		       fb		      BYTE.b	%11111011
    781  280f		       fb		      BYTE.b	%11111011
    782  2810		       7b		      BYTE.b	%01111011
    783  2811		       7b		      BYTE.b	%01111011
    784  2812		       7b		      BYTE.b	%01111011
    785  2813		       7b		      BYTE.b	%01111011
    786  2814		       73		      BYTE.b	%01110011
    787  2815		       77		      BYTE.b	%01110111
    788  2816		       37		      BYTE.b	%00110111
    789  2817		       07		      BYTE.b	%00000111
    790  2818		       07		      BYTE.b	%00000111
    791  2819		       c7		      BYTE.b	%11000111
    792  281a		       c3		      BYTE.b	%11000011
    793  281b		       e3		      BYTE.b	%11100011
    794  281c		       f3		      BYTE.b	%11110011
    795  281d		       f9		      BYTE.b	%11111001
    796  281e		       f9		      BYTE.b	%11111001
    797  281f		       fc		      BYTE.b	%11111100
    798  2820		       fc		      BYTE.b	%11111100
    799  2821		       fe		      BYTE.b	%11111110
    800  2822		       fe		      BYTE.b	%11111110
    801  2823		       fe		      BYTE.b	%11111110
    802  2824		       ff		      BYTE.b	%11111111
    803  2825		       ff		      BYTE.b	%11111111
    804  2826		       ff		      BYTE.b	%11111111
    805  2827		       ff		      BYTE.b	%11111111
    806  2828		       ff		      BYTE.b	%11111111
    807  2829		       ff		      BYTE.b	%11111111
    808  282a		       ff		      BYTE.b	%11111111
    809  282b		       ff		      BYTE.b	%11111111
    810  282c		       ff		      BYTE.b	%11111111
    811  282d		       ff		      BYTE.b	%11111111
    812  282e		       ff		      BYTE.b	%11111111
    813  282f		       ff		      BYTE.b	%11111111
    814  2830		       ff		      BYTE.b	%11111111
    815  2831		       ff		      BYTE.b	%11111111
    816  2832		       ff		      BYTE.b	%11111111
    817  2833		       ff		      BYTE.b	%11111111
    818  2834		       ff		      BYTE.b	%11111111
    819  2835		       ff		      BYTE.b	%11111111
    820  2836		       ff		      BYTE.b	%11111111
    821  2837		       ff		      BYTE.b	%11111111
    822  2838		       ff		      BYTE.b	%11111111
    823  2839		       ff		      BYTE.b	%11111111
    824  283a		       ff		      BYTE.b	%11111111
    825  283b		       ff		      BYTE.b	%11111111
    826  283c		       ff		      BYTE.b	%11111111
    827  283d		       ff		      BYTE.b	%11111111
    828  283e		       ff		      BYTE.b	%11111111
    829  283f		       fe		      BYTE.b	%11111110
    830  2840		       fe		      BYTE.b	%11111110
    831  2841		       fe		      BYTE.b	%11111110
    832  2842		       fc		      BYTE.b	%11111100
    833  2843		       bc		      BYTE.b	%10111100
    834  2844		       bc		      BYTE.b	%10111100
    835  2845		       b8		      BYTE.b	%10111000
    836  2846		       90		      BYTE.b	%10010000
    837  2847		       f0		      BYTE.b	%11110000
    838  2848		       e0		      BYTE.b	%11100000
    839  2849		       c0		      BYTE.b	%11000000
    840  284a		       80		      BYTE.b	%10000000
    841  284b		       00		      BYTE.b	%00000000
    842  284c		       00		      BYTE.b	%00000000
    843  284d		       00		      BYTE.b	%00000000
    844  284e		       00		      BYTE.b	%00000000
    845  284f		       00		      BYTE.b	%00000000
    846  2850		       00		      BYTE.b	%00000000
    847  2851		       00		      BYTE.b	%00000000
    848  2852		       00		      BYTE.b	%00000000
    849  2853		       00		      BYTE.b	%00000000
    850  2854		       00		      BYTE.b	%00000000
    851  2855		       00		      BYTE.b	%00000000
    852  2856		       00		      BYTE.b	%00000000
    853  2857		       00		      BYTE.b	%00000000
    854  2858		       00		      BYTE.b	%00000000
    855  2859		       00		      BYTE.b	%00000000
    856  285a		       00		      BYTE.b	%00000000
    857  285b		       00		      BYTE.b	%00000000
    858  285c		       00		      BYTE.b	%00000000
    859  285d		       00		      BYTE.b	%00000000
    860  285e		       00		      BYTE.b	%00000000
    861  285f		       00		      BYTE.b	%00000000
    862  2860		       00		      BYTE.b	%00000000
    863  2861		       00		      BYTE.b	%00000000
    864  2862		       00		      BYTE.b	%00000000
    865  2863		       00		      BYTE.b	%00000000
    866  2864		       00		      BYTE.b	%00000000
    867  2865		       00		      BYTE.b	%00000000
    868  2866		       00		      BYTE.b	%00000000
    869  2867		       00		      BYTE.b	%00000000
    870  2868		       00		      BYTE.b	%00000000
    871  2869		       00		      BYTE.b	%00000000
    872  286a		       00		      BYTE.b	%00000000
    873  286b		       00		      BYTE.b	%00000000
    874  286c		       00		      BYTE.b	%00000000
    875  286d		       00		      BYTE.b	%00000000
    876  286e		       00		      BYTE.b	%00000000
    877  286f		       00		      BYTE.b	%00000000
    878  2870		       00		      BYTE.b	%00000000
    879  2871		       00		      BYTE.b	%00000000
    880  2872		       00		      BYTE.b	%00000000
    881  2873		       00		      BYTE.b	%00000000
    882  2874		       00		      BYTE.b	%00000000
    883  2875		       00		      BYTE.b	%00000000
    884  2876		       00		      BYTE.b	%00000000
    885  2877		       00		      BYTE.b	%00000000
    886  2878		       00		      BYTE.b	%00000000
    887  2879		       00		      BYTE.b	%00000000
    888  287a		       00		      BYTE.b	%00000000
    889  287b		       00		      BYTE.b	%00000000
    890  287c		       00		      BYTE.b	%00000000
    891  287d		       00		      BYTE.b	%00000000
    892  287e		       00		      BYTE.b	%00000000
    893  287f		       00		      BYTE.b	%00000000
    894  2880		       00		      BYTE.b	%00000000
    895  2881		       00		      BYTE.b	%00000000
    896  2882		       00		      BYTE.b	%00000000
    897  2883		       00		      BYTE.b	%00000000
    898  2884		       00		      BYTE.b	%00000000
    899  2885		       00		      BYTE.b	%00000000
    900  2886		       00		      BYTE.b	%00000000
    901  2887		       00		      BYTE.b	%00000000
    902  2888		       00		      BYTE.b	%00000000
    903  2889		       00		      BYTE.b	%00000000
    904  288a		       00		      BYTE.b	%00000000
    905  288b		       00		      BYTE.b	%00000000
    906  288c		       00		      BYTE.b	%00000000
    907  288d		       00		      BYTE.b	%00000000
    908  288e		       00		      BYTE.b	%00000000
    909  288f		       00		      BYTE.b	%00000000
    910  2890		       00		      BYTE.b	%00000000
    911  2891		       00		      BYTE.b	%00000000
    912  2892		       00		      BYTE.b	%00000000
    913  2893		       00		      BYTE.b	%00000000
    914  2894		       00		      BYTE.b	%00000000
    915  2895		       00		      BYTE.b	%00000000
    916  2896		       00		      BYTE.b	%00000000
    917  2897		       00		      BYTE.b	%00000000
    918  2898		       00		      BYTE.b	%00000000
    919  2899		       00		      BYTE.b	%00000000
    920  289a		       00		      BYTE.b	%00000000
    921  289b		       00		      BYTE.b	%00000000
    922  289c		       00		      BYTE.b	%00000000
    923  289d		       00		      BYTE.b	%00000000
    924  289e		       00		      BYTE.b	%00000000
    925  289f		       00		      BYTE.b	%00000000
    926  28a0		       00		      BYTE.b	%00000000
    927  28a1		       00		      BYTE.b	%00000000
    928  28a2		       00		      BYTE.b	%00000000
    929  28a3		       00		      BYTE.b	%00000000
    930  28a4		       00		      BYTE.b	%00000000
    931  28a5		       00		      BYTE.b	%00000000
    932  28a6		       00		      BYTE.b	%00000000
    933  28a7		       00		      BYTE.b	%00000000
    934  28a8		       00		      BYTE.b	%00000000
    935  28a9		       00		      BYTE.b	%00000000
    936  28aa		       00		      BYTE.b	%00000000
    937  28ab		       00		      BYTE.b	%00000000
    938  28ac		       00		      BYTE.b	%00000000
    939  28ad		       00		      BYTE.b	%00000000
    940  28ae
    941  28ae					      if	>. != >[.+bmp_48x1_1_height]
    942  2900		       00 00 00 00*	      align	256
    943  2900					      endif
    944  2900
    945  2900				   bmp_48x1_1_05
    946  2900
    947  2900		       00		      BYTE.b	%00000000
    948  2901		       00		      BYTE.b	%00000000
    949  2902		       00		      BYTE.b	%00000000
    950  2903		       00		      BYTE.b	%00000000
    951  2904		       00		      BYTE.b	%00000000
    952  2905		       00		      BYTE.b	%00000000
    953  2906		       00		      BYTE.b	%00000000
    954  2907		       8c		      BYTE.b	%10001100
    955  2908		       fe		      BYTE.b	%11111110
    956  2909		       ff		      BYTE.b	%11111111
    957  290a		       ff		      BYTE.b	%11111111
    958  290b		       ff		      BYTE.b	%11111111
    959  290c		       bf		      BYTE.b	%10111111
    960  290d		       82		      BYTE.b	%10000010
    961  290e		       80		      BYTE.b	%10000000
    962  290f		       80		      BYTE.b	%10000000
    963  2910		       80		      BYTE.b	%10000000
    964  2911		       e0		      BYTE.b	%11100000
    965  2912		       70		      BYTE.b	%01110000
    966  2913		       78		      BYTE.b	%01111000
    967  2914		       7c		      BYTE.b	%01111100
    968  2915		       7c		      BYTE.b	%01111100
    969  2916		       3e		      BYTE.b	%00111110
    970  2917		       3e		      BYTE.b	%00111110
    971  2918		       9e		      BYTE.b	%10011110
    972  2919		       8e		      BYTE.b	%10001110
    973  291a		       ce		      BYTE.b	%11001110
    974  291b		       c4		      BYTE.b	%11000100
    975  291c		       c0		      BYTE.b	%11000000
    976  291d		       e0		      BYTE.b	%11100000
    977  291e		       e0		      BYTE.b	%11100000
    978  291f		       e0		      BYTE.b	%11100000
    979  2920		       e0		      BYTE.b	%11100000
    980  2921		       40		      BYTE.b	%01000000
    981  2922		       40		      BYTE.b	%01000000
    982  2923		       00		      BYTE.b	%00000000
    983  2924		       00		      BYTE.b	%00000000
    984  2925		       00		      BYTE.b	%00000000
    985  2926		       00		      BYTE.b	%00000000
    986  2927		       00		      BYTE.b	%00000000
    987  2928		       80		      BYTE.b	%10000000
    988  2929		       80		      BYTE.b	%10000000
    989  292a		       80		      BYTE.b	%10000000
    990  292b		       80		      BYTE.b	%10000000
    991  292c		       80		      BYTE.b	%10000000
    992  292d		       80		      BYTE.b	%10000000
    993  292e		       80		      BYTE.b	%10000000
    994  292f		       80		      BYTE.b	%10000000
    995  2930		       c0		      BYTE.b	%11000000
    996  2931		       c0		      BYTE.b	%11000000
    997  2932		       c0		      BYTE.b	%11000000
    998  2933		       c0		      BYTE.b	%11000000
    999  2934		       c0		      BYTE.b	%11000000
   1000  2935		       80		      BYTE.b	%10000000
   1001  2936		       80		      BYTE.b	%10000000
   1002  2937		       80		      BYTE.b	%10000000
   1003  2938		       80		      BYTE.b	%10000000
   1004  2939		       80		      BYTE.b	%10000000
   1005  293a		       80		      BYTE.b	%10000000
   1006  293b		       80		      BYTE.b	%10000000
   1007  293c		       00		      BYTE.b	%00000000
   1008  293d		       00		      BYTE.b	%00000000
   1009  293e		       00		      BYTE.b	%00000000
   1010  293f		       00		      BYTE.b	%00000000
   1011  2940		       00		      BYTE.b	%00000000
   1012  2941		       00		      BYTE.b	%00000000
   1013  2942		       00		      BYTE.b	%00000000
   1014  2943		       00		      BYTE.b	%00000000
   1015  2944		       00		      BYTE.b	%00000000
   1016  2945		       00		      BYTE.b	%00000000
   1017  2946		       00		      BYTE.b	%00000000
   1018  2947		       00		      BYTE.b	%00000000
   1019  2948		       00		      BYTE.b	%00000000
   1020  2949		       00		      BYTE.b	%00000000
   1021  294a		       00		      BYTE.b	%00000000
   1022  294b		       00		      BYTE.b	%00000000
   1023  294c		       00		      BYTE.b	%00000000
   1024  294d		       00		      BYTE.b	%00000000
   1025  294e		       00		      BYTE.b	%00000000
   1026  294f		       00		      BYTE.b	%00000000
   1027  2950		       00		      BYTE.b	%00000000
   1028  2951		       00		      BYTE.b	%00000000
   1029  2952		       00		      BYTE.b	%00000000
   1030  2953		       00		      BYTE.b	%00000000
   1031  2954		       00		      BYTE.b	%00000000
   1032  2955		       00		      BYTE.b	%00000000
   1033  2956		       00		      BYTE.b	%00000000
   1034  2957		       00		      BYTE.b	%00000000
   1035  2958		       00		      BYTE.b	%00000000
   1036  2959		       00		      BYTE.b	%00000000
   1037  295a		       00		      BYTE.b	%00000000
   1038  295b		       00		      BYTE.b	%00000000
   1039  295c		       00		      BYTE.b	%00000000
   1040  295d		       00		      BYTE.b	%00000000
   1041  295e		       00		      BYTE.b	%00000000
   1042  295f		       00		      BYTE.b	%00000000
   1043  2960		       00		      BYTE.b	%00000000
   1044  2961		       00		      BYTE.b	%00000000
   1045  2962		       00		      BYTE.b	%00000000
   1046  2963		       00		      BYTE.b	%00000000
   1047  2964		       00		      BYTE.b	%00000000
   1048  2965		       00		      BYTE.b	%00000000
   1049  2966		       00		      BYTE.b	%00000000
   1050  2967		       00		      BYTE.b	%00000000
   1051  2968		       00		      BYTE.b	%00000000
   1052  2969		       00		      BYTE.b	%00000000
   1053  296a		       00		      BYTE.b	%00000000
   1054  296b		       00		      BYTE.b	%00000000
   1055  296c		       00		      BYTE.b	%00000000
   1056  296d		       00		      BYTE.b	%00000000
   1057  296e		       00		      BYTE.b	%00000000
   1058  296f		       00		      BYTE.b	%00000000
   1059  2970		       00		      BYTE.b	%00000000
   1060  2971		       00		      BYTE.b	%00000000
   1061  2972		       00		      BYTE.b	%00000000
   1062  2973		       00		      BYTE.b	%00000000
   1063  2974		       00		      BYTE.b	%00000000
   1064  2975		       00		      BYTE.b	%00000000
   1065  2976		       00		      BYTE.b	%00000000
   1066  2977		       00		      BYTE.b	%00000000
   1067  2978		       00		      BYTE.b	%00000000
   1068  2979		       00		      BYTE.b	%00000000
   1069  297a		       00		      BYTE.b	%00000000
   1070  297b		       00		      BYTE.b	%00000000
   1071  297c		       00		      BYTE.b	%00000000
   1072  297d		       00		      BYTE.b	%00000000
   1073  297e		       00		      BYTE.b	%00000000
   1074  297f		       00		      BYTE.b	%00000000
   1075  2980		       00		      BYTE.b	%00000000
   1076  2981		       00		      BYTE.b	%00000000
   1077  2982		       00		      BYTE.b	%00000000
   1078  2983		       00		      BYTE.b	%00000000
   1079  2984		       00		      BYTE.b	%00000000
   1080  2985		       00		      BYTE.b	%00000000
   1081  2986		       00		      BYTE.b	%00000000
   1082  2987		       00		      BYTE.b	%00000000
   1083  2988		       00		      BYTE.b	%00000000
   1084  2989		       00		      BYTE.b	%00000000
   1085  298a		       00		      BYTE.b	%00000000
   1086  298b		       00		      BYTE.b	%00000000
   1087  298c		       00		      BYTE.b	%00000000
   1088  298d		       00		      BYTE.b	%00000000
   1089  298e		       00		      BYTE.b	%00000000
   1090  298f		       00		      BYTE.b	%00000000
   1091  2990		       00		      BYTE.b	%00000000
   1092  2991		       00		      BYTE.b	%00000000
   1093  2992		       00		      BYTE.b	%00000000
   1094  2993		       00		      BYTE.b	%00000000
   1095  2994		       00		      BYTE.b	%00000000
   1096  2995		       00		      BYTE.b	%00000000
   1097  2996		       00		      BYTE.b	%00000000
   1098  2997		       00		      BYTE.b	%00000000
   1099  2998		       00		      BYTE.b	%00000000
   1100  2999		       00		      BYTE.b	%00000000
   1101  299a		       00		      BYTE.b	%00000000
   1102  299b		       00		      BYTE.b	%00000000
   1103  299c		       00		      BYTE.b	%00000000
   1104  299d		       00		      BYTE.b	%00000000
   1105  299e		       00		      BYTE.b	%00000000
   1106  299f		       00		      BYTE.b	%00000000
   1107  29a0		       00		      BYTE.b	%00000000
   1108  29a1		       00		      BYTE.b	%00000000
   1109  29a2		       00		      BYTE.b	%00000000
   1110  29a3		       00		      BYTE.b	%00000000
   1111  29a4		       00		      BYTE.b	%00000000
   1112  29a5		       00		      BYTE.b	%00000000
   1113  29a6		       00		      BYTE.b	%00000000
   1114  29a7		       00		      BYTE.b	%00000000
   1115  29a8		       00		      BYTE.b	%00000000
   1116  29a9		       00		      BYTE.b	%00000000
   1117  29aa		       00		      BYTE.b	%00000000
   1118  29ab		       00		      BYTE.b	%00000000
   1119  29ac		       00		      BYTE.b	%00000000
   1120  29ad		       00		      BYTE.b	%00000000
   1121  29ae
------- FILE titlescreen/asm/titlescreen.asm
    221  29ae					      endif
    222  29ae					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  29ae					      include	"titlescreen/48x1_2_image.asm"
      1  29ae
      2  29ae
      3  29ae							; *** if you want to modify the bitmap color on the fly, just dim a
      4  29ae							; *** variable in bB called "bmp_48x1_2_color", and use it to set the
      5  29ae							; *** color.
      6  29ae
      7  29ae
      8  29ae							;*** this is the height of the displayed data
      9  29ae		       00 0b	   bmp_48x1_2_window =	11
     10  29ae
     11  29ae							;*** this is the height of the bitmap data
     12  29ae		       00 0b	   bmp_48x1_2_height =	11
     13  29ae
     14  29ae				  -	      ifnconst	bmp_48x1_2_color
     15  29ae				  -bmp_48x1_2_color
     16  29ae					      endif
     17  29ae		       0f		      .byte.b	$0f
     18  29af
     19  29af				  -	      ifnconst	bmp_48x1_2_PF1
     20  29af				  -bmp_48x1_2_PF1
     21  29af					      endif
     22  29af		       00		      BYTE.b	%00000000
     23  29b0				  -	      ifnconst	bmp_48x1_2_PF2
     24  29b0				  -bmp_48x1_2_PF2
     25  29b0					      endif
     26  29b0		       00		      BYTE.b	%00000000
     27  29b1				  -	      ifnconst	bmp_48x1_2_background
     28  29b1				  -bmp_48x1_2_background
     29  29b1					      endif
     30  29b1		       00		      BYTE.b	$00
     31  29b2
     32  29b2				  -	      if	>. != >[.+bmp_48x1_2_height]
     33  29b2				  -	      align	256
     34  29b2					      endif
     35  29b2
     36  29b2				   bmp_48x1_2_00
     37  29b2
     38  29b2		       00		      BYTE.b	%00000000
     39  29b3		       00		      BYTE.b	%00000000
     40  29b4		       00		      BYTE.b	%00000000
     41  29b5		       00		      BYTE.b	%00000000
     42  29b6		       00		      BYTE.b	%00000000
     43  29b7		       00		      BYTE.b	%00000000
     44  29b8		       04		      BYTE.b	%00000100
     45  29b9		       04		      BYTE.b	%00000100
     46  29ba		       07		      BYTE.b	%00000111
     47  29bb		       05		      BYTE.b	%00000101
     48  29bc		       07		      BYTE.b	%00000111
     49  29bd
     50  29bd				  -	      if	>. != >[.+bmp_48x1_2_height]
     51  29bd				  -	      align	256
     52  29bd					      endif
     53  29bd
     54  29bd				   bmp_48x1_2_01
     55  29bd
     56  29bd		       4e		      BYTE.b	%01001110
     57  29be		       4a		      BYTE.b	%01001010
     58  29bf		       4a		      BYTE.b	%01001010
     59  29c0		       4a		      BYTE.b	%01001010
     60  29c1		       ee		      BYTE.b	%11101110
     61  29c2		       00		      BYTE.b	%00000000
     62  29c3		       57		      BYTE.b	%01010111
     63  29c4		       64		      BYTE.b	%01100100
     64  29c5		       76		      BYTE.b	%01110110
     65  29c6		       54		      BYTE.b	%01010100
     66  29c7		       77		      BYTE.b	%01110111
     67  29c8
     68  29c8				  -	      if	>. != >[.+bmp_48x1_2_height]
     69  29c8				  -	      align	256
     70  29c8					      endif
     71  29c8
     72  29c8				   bmp_48x1_2_02
     73  29c8
     74  29c8		       0e		      BYTE.b	%00001110
     75  29c9		       02		      BYTE.b	%00000010
     76  29ca		       0e		      BYTE.b	%00001110
     77  29cb		       08		      BYTE.b	%00001000
     78  29cc		       0e		      BYTE.b	%00001110
     79  29cd		       00		      BYTE.b	%00000000
     80  29ce		       77		      BYTE.b	%01110111
     81  29cf		       11		      BYTE.b	%00010001
     82  29d0		       77		      BYTE.b	%01110111
     83  29d1		       44		      BYTE.b	%01000100
     84  29d2		       77		      BYTE.b	%01110111
     85  29d3
     86  29d3
     87  29d3
     88  29d3				  -	      if	>. != >[.+bmp_48x1_2_height]
     89  29d3				  -	      align	256
     90  29d3					      endif
     91  29d3
     92  29d3				   bmp_48x1_2_03
     93  29d3
     94  29d3		       4a		      BYTE.b	%01001010
     95  29d4		       4a		      BYTE.b	%01001010
     96  29d5		       4e		      BYTE.b	%01001110
     97  29d6		       4a		      BYTE.b	%01001010
     98  29d7		       ee		      BYTE.b	%11101110
     99  29d8		       00		      BYTE.b	%00000000
    100  29d9		       04		      BYTE.b	%00000100
    101  29da		       04		      BYTE.b	%00000100
    102  29db		       06		      BYTE.b	%00000110
    103  29dc		       04		      BYTE.b	%00000100
    104  29dd		       07		      BYTE.b	%00000111
    105  29de
    106  29de				  -	      if	>. != >[.+bmp_48x1_2_height]
    107  29de				  -	      align	256
    108  29de					      endif
    109  29de
    110  29de				   bmp_48x1_2_04
    111  29de
    112  29de		       a4		      BYTE.b	%10100100
    113  29df		       c4		      BYTE.b	%11000100
    114  29e0		       e4		      BYTE.b	%11100100
    115  29e1		       a4		      BYTE.b	%10100100
    116  29e2		       ee		      BYTE.b	%11101110
    117  29e3		       00		      BYTE.b	%00000000
    118  29e4		       55		      BYTE.b	%01010101
    119  29e5		       59		      BYTE.b	%01011001
    120  29e6		       5d		      BYTE.b	%01011101
    121  29e7		       55		      BYTE.b	%01010101
    122  29e8		       5d		      BYTE.b	%01011101
    123  29e9
    124  29e9
    125  29e9				  -	      if	>. != >[.+bmp_48x1_2_height]
    126  29e9				  -	      align	256
    127  29e9					      endif
    128  29e9
    129  29e9				   bmp_48x1_2_05
    130  29e9
    131  29e9		       00		      BYTE.b	%00000000
    132  29ea		       00		      BYTE.b	%00000000
    133  29eb		       00		      BYTE.b	%00000000
    134  29ec		       00		      BYTE.b	%00000000
    135  29ed		       00		      BYTE.b	%00000000
    136  29ee		       00		      BYTE.b	%00000000
    137  29ef		       c0		      BYTE.b	%11000000
    138  29f0		       00		      BYTE.b	%00000000
    139  29f1		       80		      BYTE.b	%10000000
    140  29f2		       00		      BYTE.b	%00000000
    141  29f3		       c0		      BYTE.b	%11000000
    142  29f4
    143  29f4
------- FILE titlescreen/asm/titlescreen.asm
    224  29f4					      endif
    225  29f4				  -	      ifconst	mk_48x1_3_on
    226  29f4				  -	      include	"titlescreen/48x1_3_image.asm"
    227  29f4					      endif
    228  29f4				  -	      ifconst	mk_48x1_4_on
    229  29f4				  -	      include	"titlescreen/48x1_4_image.asm"
    230  29f4					      endif
    231  29f4				  -	      ifconst	mk_48x1_5_on
    232  29f4				  -	      include	"titlescreen/48x1_5_image.asm"
    233  29f4					      endif
    234  29f4				  -	      ifconst	mk_48x1_6_on
    235  29f4				  -	      include	"titlescreen/48x1_6_image.asm"
    236  29f4					      endif
    237  29f4				  -	      ifconst	mk_48x1_7_on
    238  29f4				  -	      include	"titlescreen/48x1_7_image.asm"
    239  29f4					      endif
    240  29f4				  -	      ifconst	mk_48x1_8_on
    241  29f4				  -	      include	"titlescreen/48x1_8_image.asm"
    242  29f4					      endif
    243  29f4
    244  29f4
    245  29f4					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  29f4					      include	"titlescreen/48x2_1_image.asm"
      1  29f4
      2  29f4							; *** if you want to modify the bitmap color on the fly, just dim a
      3  29f4							; *** variable in bB called "bmp_48x2_1_color", and use it to set the
      4  29f4							; *** color.
      5  29f4
      6  29f4
      7  29f4							;*** this is the height of the displayed data
      8  29f4		       00 16	   bmp_48x2_1_window =	22
      9  29f4
     10  29f4							;*** this is the height of the bitmap data
     11  29f4		       00 16	   bmp_48x2_1_height =	22
     12  29f4
     13  29f4					      if	>. != >[.+bmp_48x2_1_height+1]
     14  2a00		       00 00 00 00*	      align	256
     15  2a00					      endif
     16  2a00		       00		      BYTE.b	0
     17  2a01
     18  2a01							;*** this is the color of each line in the bitmap data
     19  2a01				   bmp_48x2_1_colors
     20  2a01		       b6		      BYTE.b	$b6
     21  2a02		       a6		      BYTE.b	$a6
     22  2a03		       a8		      BYTE.b	$a8
     23  2a04		       a8		      BYTE.b	$a8
     24  2a05		       9a		      BYTE.b	$9a
     25  2a06		       9a		      BYTE.b	$9a
     26  2a07		       9a		      BYTE.b	$9a
     27  2a08		       8a		      BYTE.b	$8a
     28  2a09		       8c		      BYTE.b	$8c
     29  2a0a		       8c		      BYTE.b	$8c
     30  2a0b		       7c		      BYTE.b	$7c
     31  2a0c		       7c		      BYTE.b	$7c
     32  2a0d		       7c		      BYTE.b	$7c
     33  2a0e		       6a		      BYTE.b	$6a
     34  2a0f		       6a		      BYTE.b	$6a
     35  2a10		       6a		      BYTE.b	$6a
     36  2a11		       5a		      BYTE.b	$5a
     37  2a12		       5a		      BYTE.b	$5a
     38  2a13		       58		      BYTE.b	$58
     39  2a14		       48		      BYTE.b	$48
     40  2a15		       46		      BYTE.b	$46
     41  2a16		       46		      BYTE.b	$46
     42  2a17
     43  2a17				  -	      ifnconst	bmp_48x2_1_PF1
     44  2a17				  -bmp_48x2_1_PF1
     45  2a17					      endif
     46  2a17		       00		      BYTE.b	%00000000
     47  2a18				  -	      ifnconst	bmp_48x2_1_PF2
     48  2a18				  -bmp_48x2_1_PF2
     49  2a18					      endif
     50  2a18		       00		      BYTE.b	%00000000
     51  2a19				  -	      ifnconst	bmp_48x2_1_background
     52  2a19				  -bmp_48x2_1_background
     53  2a19					      endif
     54  2a19		       00		      BYTE.b	$00
     55  2a1a
     56  2a1a				  -	      if	>. != >[.+bmp_48x2_1_height]
     57  2a1a				  -	      align	256
     58  2a1a					      endif
     59  2a1a
     60  2a1a
     61  2a1a
     62  2a1a				  -	      if	>. != >[.+bmp_48x2_1_height]
     63  2a1a				  -	      align	256
     64  2a1a					      endif
     65  2a1a
     66  2a1a				   bmp_48x2_1_00
     67  2a1a
     68  2a1a		       00		      BYTE.b	%00000000
     69  2a1b		       00		      BYTE.b	%00000000
     70  2a1c		       00		      BYTE.b	%00000000
     71  2a1d		       00		      BYTE.b	%00000000
     72  2a1e		       01		      BYTE.b	%00000001
     73  2a1f		       01		      BYTE.b	%00000001
     74  2a20		       01		      BYTE.b	%00000001
     75  2a21		       01		      BYTE.b	%00000001
     76  2a22		       01		      BYTE.b	%00000001
     77  2a23		       01		      BYTE.b	%00000001
     78  2a24		       03		      BYTE.b	%00000011
     79  2a25		       03		      BYTE.b	%00000011
     80  2a26		       07		      BYTE.b	%00000111
     81  2a27		       07		      BYTE.b	%00000111
     82  2a28		       0f		      BYTE.b	%00001111
     83  2a29		       0f		      BYTE.b	%00001111
     84  2a2a		       1f		      BYTE.b	%00011111
     85  2a2b		       3f		      BYTE.b	%00111111
     86  2a2c		       3f		      BYTE.b	%00111111
     87  2a2d		       7e		      BYTE.b	%01111110
     88  2a2e		       7e		      BYTE.b	%01111110
     89  2a2f		       00		      BYTE.b	%00000000
     90  2a30
     91  2a30
     92  2a30				  -	      if	>. != >[.+bmp_48x2_1_height]
     93  2a30				  -	      align	256
     94  2a30					      endif
     95  2a30
     96  2a30				   bmp_48x2_1_01
     97  2a30
     98  2a30		       ef		      BYTE.b	%11101111
     99  2a31		       df		      BYTE.b	%11011111
    100  2a32		       bf		      BYTE.b	%10111111
    101  2a33		       bf		      BYTE.b	%10111111
    102  2a34		       48		      BYTE.b	%01001000
    103  2a35		       5a		      BYTE.b	%01011010
    104  2a36		       48		      BYTE.b	%01001000
    105  2a37		       6b		      BYTE.b	%01101011
    106  2a38		       4b		      BYTE.b	%01001011
    107  2a39		       bf		      BYTE.b	%10111111
    108  2a3a		       bf		      BYTE.b	%10111111
    109  2a3b		       df		      BYTE.b	%11011111
    110  2a3c		       df		      BYTE.b	%11011111
    111  2a3d		       ef		      BYTE.b	%11101111
    112  2a3e		       b7		      BYTE.b	%10110111
    113  2a3f		       bb		      BYTE.b	%10111011
    114  2a40		       1d		      BYTE.b	%00011101
    115  2a41		       1e		      BYTE.b	%00011110
    116  2a42		       1f		      BYTE.b	%00011111
    117  2a43		       1f		      BYTE.b	%00011111
    118  2a44		       1f		      BYTE.b	%00011111
    119  2a45		       1f		      BYTE.b	%00011111
    120  2a46
    121  2a46				  -	      if	>. != >[.+bmp_48x2_1_height]
    122  2a46				  -	      align	256
    123  2a46					      endif
    124  2a46
    125  2a46				   bmp_48x2_1_02
    126  2a46
    127  2a46		       fc		      BYTE.b	%11111100
    128  2a47		       fe		      BYTE.b	%11111110
    129  2a48		       ff		      BYTE.b	%11111111
    130  2a49		       ff		      BYTE.b	%11111111
    131  2a4a		       88		      BYTE.b	%10001000
    132  2a4b		       aa		      BYTE.b	%10101010
    133  2a4c		       aa		      BYTE.b	%10101010
    134  2a4d		       aa		      BYTE.b	%10101010
    135  2a4e		       88		      BYTE.b	%10001000
    136  2a4f		       ff		      BYTE.b	%11111111
    137  2a50		       ff		      BYTE.b	%11111111
    138  2a51		       fe		      BYTE.b	%11111110
    139  2a52		       fe		      BYTE.b	%11111110
    140  2a53		       fd		      BYTE.b	%11111101
    141  2a54		       fd		      BYTE.b	%11111101
    142  2a55		       fb		      BYTE.b	%11111011
    143  2a56		       f3		      BYTE.b	%11110011
    144  2a57		       03		      BYTE.b	%00000011
    145  2a58		       01		      BYTE.b	%00000001
    146  2a59		       00		      BYTE.b	%00000000
    147  2a5a		       80		      BYTE.b	%10000000
    148  2a5b		       80		      BYTE.b	%10000000
    149  2a5c
    150  2a5c				  -	      if	>. != >[.+bmp_48x2_1_height]
    151  2a5c				  -	      align	256
    152  2a5c					      endif
    153  2a5c
    154  2a5c				   bmp_48x2_1_03
    155  2a5c
    156  2a5c		       f0		      BYTE.b	%11110000
    157  2a5d		       78		      BYTE.b	%01111000
    158  2a5e		       38		      BYTE.b	%00111000
    159  2a5f		       1c		      BYTE.b	%00011100
    160  2a60		       9c		      BYTE.b	%10011100
    161  2a61		       9c		      BYTE.b	%10011100
    162  2a62		       bc		      BYTE.b	%10111100
    163  2a63		       b8		      BYTE.b	%10111000
    164  2a64		       b8		      BYTE.b	%10111000
    165  2a65		       70		      BYTE.b	%01110000
    166  2a66		       60		      BYTE.b	%01100000
    167  2a67		       e0		      BYTE.b	%11100000
    168  2a68		       c0		      BYTE.b	%11000000
    169  2a69		       c0		      BYTE.b	%11000000
    170  2a6a		       c0		      BYTE.b	%11000000
    171  2a6b		       c0		      BYTE.b	%11000000
    172  2a6c		       f0		      BYTE.b	%11110000
    173  2a6d		       fc		      BYTE.b	%11111100
    174  2a6e		       fc		      BYTE.b	%11111100
    175  2a6f		       78		      BYTE.b	%01111000
    176  2a70		       00		      BYTE.b	%00000000
    177  2a71		       00		      BYTE.b	%00000000
    178  2a72
    179  2a72
    180  2a72				  -	      if	>. != >[.+bmp_48x2_1_height]
    181  2a72				  -	      align	256
    182  2a72					      endif
    183  2a72
    184  2a72				   bmp_48x2_1_04
    185  2a72
    186  2a72		       02		      BYTE.b	%00000010
    187  2a73		       86		      BYTE.b	%10000110
    188  2a74		       86		      BYTE.b	%10000110
    189  2a75		       c6		      BYTE.b	%11000110
    190  2a76		       c7		      BYTE.b	%11000111
    191  2a77		       c7		      BYTE.b	%11000111
    192  2a78		       c3		      BYTE.b	%11000011
    193  2a79		       cf		      BYTE.b	%11001111
    194  2a7a		       ff		      BYTE.b	%11111111
    195  2a7b		       ff		      BYTE.b	%11111111
    196  2a7c		       ff		      BYTE.b	%11111111
    197  2a7d		       ff		      BYTE.b	%11111111
    198  2a7e		       e1		      BYTE.b	%11100001
    199  2a7f		       e1		      BYTE.b	%11100001
    200  2a80		       f1		      BYTE.b	%11110001
    201  2a81		       f1		      BYTE.b	%11110001
    202  2a82		       f0		      BYTE.b	%11110000
    203  2a83		       00		      BYTE.b	%00000000
    204  2a84		       00		      BYTE.b	%00000000
    205  2a85		       00		      BYTE.b	%00000000
    206  2a86		       00		      BYTE.b	%00000000
    207  2a87		       00		      BYTE.b	%00000000
    208  2a88
    209  2a88				  -	      if	>. != >[.+bmp_48x2_1_height]
    210  2a88				  -	      align	256
    211  2a88					      endif
    212  2a88
    213  2a88				   bmp_48x2_1_05
    214  2a88
    215  2a88		       08		      BYTE.b	%00001000
    216  2a89		       1c		      BYTE.b	%00011100
    217  2a8a		       1c		      BYTE.b	%00011100
    218  2a8b		       1c		      BYTE.b	%00011100
    219  2a8c		       1c		      BYTE.b	%00011100
    220  2a8d		       0c		      BYTE.b	%00001100
    221  2a8e		       0c		      BYTE.b	%00001100
    222  2a8f		       8c		      BYTE.b	%10001100
    223  2a90		       8e		      BYTE.b	%10001110
    224  2a91		       8e		      BYTE.b	%10001110
    225  2a92		       ce		      BYTE.b	%11001110
    226  2a93		       ce		      BYTE.b	%11001110
    227  2a94		       cf		      BYTE.b	%11001111
    228  2a95		       ef		      BYTE.b	%11101111
    229  2a96		       ef		      BYTE.b	%11101111
    230  2a97		       cf		      BYTE.b	%11001111
    231  2a98		       04		      BYTE.b	%00000100
    232  2a99		       00		      BYTE.b	%00000000
    233  2a9a		       00		      BYTE.b	%00000000
    234  2a9b		       00		      BYTE.b	%00000000
    235  2a9c		       00		      BYTE.b	%00000000
    236  2a9d		       00		      BYTE.b	%00000000
    237  2a9e
    238  2a9e
    239  2a9e
    240  2a9e
------- FILE titlescreen/asm/titlescreen.asm
    247  2a9e					      endif
    248  2a9e				  -	      ifconst	mk_48x2_2_on
    249  2a9e				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2a9e					      endif
    251  2a9e				  -	      ifconst	mk_48x2_3_on
    252  2a9e				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2a9e					      endif
    254  2a9e				  -	      ifconst	mk_48x2_4_on
    255  2a9e				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2a9e					      endif
    257  2a9e				  -	      ifconst	mk_48x2_5_on
    258  2a9e				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2a9e					      endif
    260  2a9e				  -	      ifconst	mk_48x2_6_on
    261  2a9e				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2a9e					      endif
    263  2a9e				  -	      ifconst	mk_48x2_7_on
    264  2a9e				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2a9e					      endif
    266  2a9e
    267  2a9e				  -	      ifconst	mk_48x2_8_on
    268  2a9e				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2a9e					      endif
    270  2a9e
    271  2a9e
    272  2a9e				  -	      ifconst	mk_96x2_1_on
    273  2a9e				  -	      include	"titlescreen/96x2_1_image.asm"
    274  2a9e					      endif
    275  2a9e				  -	      ifconst	mk_96x2_2_on
    276  2a9e				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2a9e					      endif
    278  2a9e				  -	      ifconst	mk_96x2_3_on
    279  2a9e				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2a9e					      endif
    281  2a9e				  -	      ifconst	mk_96x2_4_on
    282  2a9e				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2a9e					      endif
    284  2a9e				  -	      ifconst	mk_96x2_5_on
    285  2a9e				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2a9e					      endif
    287  2a9e				  -	      ifconst	mk_96x2_6_on
    288  2a9e				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2a9e					      endif
    290  2a9e				  -	      ifconst	mk_96x2_7_on
    291  2a9e				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2a9e					      endif
    293  2a9e				  -	      ifconst	mk_96x2_8_on
    294  2a9e				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2a9e					      endif
    296  2a9e
    297  2a9e				  -	      ifconst	mk_player_on
    298  2a9e				  -	      include	"titlescreen/player_image.asm"
    299  2a9e					      endif
    300  2a9e
    301  2a9e					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  2a9e					      include	"titlescreen/score_image.asm"
      1  2a9e							; feel free to modify the score graphics - just keep each digit 8 high
      2  2a9e							; if you're looking to want to modify any one font, pick on the 
      3  2a9e
      4  2a9e				  -	      ifnconst	NOFONT
      5  2a9e				  -NOFONT     =	0
      6  2a9e					      endif
      7  2a9e				  -	      ifnconst	STOCK
      8  2a9e				  -STOCK      =	1	;_FONTNAME
      9  2a9e					      endif
     10  2a9e				  -	      ifnconst	NEWCENTURY
     11  2a9e				  -NEWCENTURY =	2	;_FONTNAME
     12  2a9e					      endif
     13  2a9e				  -	      ifnconst	WHIMSEY
     14  2a9e				  -WHIMSEY    =	3	;_FONTNAME
     15  2a9e					      endif
     16  2a9e				  -	      ifnconst	ALARMCLOCK
     17  2a9e				  -ALARMCLOCK =	4	;_FONTNAME
     18  2a9e					      endif
     19  2a9e				  -	      ifnconst	HANDWRITTEN
     20  2a9e				  -HANDWRITTEN =	5	;_FONTNAME
     21  2a9e					      endif
     22  2a9e				  -	      ifnconst	INTERRUPTED
     23  2a9e				  -INTERRUPTED =	6	;_FONTNAME
     24  2a9e					      endif
     25  2a9e				  -	      ifnconst	TINY
     26  2a9e				  -TINY       =	7	;_FONTNAME
     27  2a9e					      endif
     28  2a9e				  -	      ifnconst	RETROPUTER
     29  2a9e				  -RETROPUTER =	8	;_FONTNAME
     30  2a9e					      endif
     31  2a9e				  -	      ifnconst	CURVES
     32  2a9e				  -CURVES     =	9	;_FONTNAME
     33  2a9e					      endif
     34  2a9e				  -	      ifnconst	HUSKY
     35  2a9e				  -HUSKY      =	10	;_FONTNAME
     36  2a9e					      endif
     37  2a9e				  -	      ifnconst	SNAKE
     38  2a9e				  -SNAKE      =	11	;_FONTNAME
     39  2a9e					      endif
     40  2a9e				  -	      ifnconst	PLOK
     41  2a9e				  -PLOK       =	13	;_FONTNAME
     42  2a9e					      endif
     43  2a9e
     44  2a9e				  -	      ifnconst	SYMBOLS
     45  2a9e				  -SYMBOLS    =	0	;_FONTNAME 
     46  2a9e					      endif
     47  2a9e
     48  2a9e							; ### setup some defaults
     49  2a9e				  -	      ifnconst	fontstyle
     50  2a9e				  -fontstyle  =	STOCK
     51  2a9e					      endif
     52  2a9e
     53  2a9e							;fix up the table alignment, if necessary
     54  2a9e				  -	      if	>. != >[.+81]
     55  2a9e				  -	      align	256
     56  2a9e					      endif
     57  2a9e
     58  2a9e
     59  2a9e				   miniscoretable
     60  2a9e
     61  2a9e					      if	fontstyle == STOCK
     62  2a9e
     63  2a9e							;byte %00000000 ; STOCK
     64  2a9e
     65  2a9e		       3c		      .byte.b	%00111100	; STOCK
     66  2a9f		       66		      .byte.b	%01100110	; STOCK
     67  2aa0		       66		      .byte.b	%01100110	; STOCK
     68  2aa1		       66		      .byte.b	%01100110	; STOCK
     69  2aa2		       66		      .byte.b	%01100110	; STOCK
     70  2aa3		       66		      .byte.b	%01100110	; STOCK
     71  2aa4		       66		      .byte.b	%01100110	; STOCK
     72  2aa5		       3c		      .byte.b	%00111100	; STOCK
     73  2aa6
     74  2aa6							;byte %00000000 ; STOCK
     75  2aa6
     76  2aa6		       7e		      .byte.b	%01111110	; STOCK
     77  2aa7		       18		      .byte.b	%00011000	; STOCK
     78  2aa8		       18		      .byte.b	%00011000	; STOCK
     79  2aa9		       18		      .byte.b	%00011000	; STOCK
     80  2aaa		       18		      .byte.b	%00011000	; STOCK
     81  2aab		       38		      .byte.b	%00111000	; STOCK
     82  2aac		       18		      .byte.b	%00011000	; STOCK
     83  2aad		       08		      .byte.b	%00001000	; STOCK
     84  2aae
     85  2aae							;byte %00000000 ; STOCK
     86  2aae
     87  2aae		       7e		      .byte.b	%01111110	; STOCK
     88  2aaf		       60		      .byte.b	%01100000	; STOCK
     89  2ab0		       60		      .byte.b	%01100000	; STOCK
     90  2ab1		       3c		      .byte.b	%00111100	; STOCK
     91  2ab2		       06		      .byte.b	%00000110	; STOCK
     92  2ab3		       06		      .byte.b	%00000110	; STOCK
     93  2ab4		       46		      .byte.b	%01000110	; STOCK
     94  2ab5		       3c		      .byte.b	%00111100	; STOCK
     95  2ab6
     96  2ab6							;byte %00000000 ; STOCK
     97  2ab6
     98  2ab6		       3c		      .byte.b	%00111100	; STOCK
     99  2ab7		       46		      .byte.b	%01000110	; STOCK
    100  2ab8		       06		      .byte.b	%00000110	; STOCK
    101  2ab9		       06		      .byte.b	%00000110	; STOCK
    102  2aba		       1c		      .byte.b	%00011100	; STOCK
    103  2abb		       06		      .byte.b	%00000110	; STOCK
    104  2abc		       46		      .byte.b	%01000110	; STOCK
    105  2abd		       3c		      .byte.b	%00111100	; STOCK
    106  2abe
    107  2abe							;byte %00000000 ; STOCK
    108  2abe
    109  2abe		       0c		      .byte.b	%00001100	; STOCK
    110  2abf		       0c		      .byte.b	%00001100	; STOCK
    111  2ac0		       7e		      .byte.b	%01111110	; STOCK
    112  2ac1		       4c		      .byte.b	%01001100	; STOCK
    113  2ac2		       4c		      .byte.b	%01001100	; STOCK
    114  2ac3		       2c		      .byte.b	%00101100	; STOCK
    115  2ac4		       1c		      .byte.b	%00011100	; STOCK
    116  2ac5		       0c		      .byte.b	%00001100	; STOCK
    117  2ac6
    118  2ac6							;byte %00000000 ; STOCK
    119  2ac6
    120  2ac6		       3c		      .byte.b	%00111100	; STOCK
    121  2ac7		       46		      .byte.b	%01000110	; STOCK
    122  2ac8		       06		      .byte.b	%00000110	; STOCK
    123  2ac9		       06		      .byte.b	%00000110	; STOCK
    124  2aca		       3c		      .byte.b	%00111100	; STOCK
    125  2acb		       60		      .byte.b	%01100000	; STOCK
    126  2acc		       60		      .byte.b	%01100000	; STOCK
    127  2acd		       7e		      .byte.b	%01111110	; STOCK
    128  2ace
    129  2ace							;byte %00000000 ; STOCK
    130  2ace
    131  2ace		       3c		      .byte.b	%00111100	; STOCK
    132  2acf		       66		      .byte.b	%01100110	; STOCK
    133  2ad0		       66		      .byte.b	%01100110	; STOCK
    134  2ad1		       66		      .byte.b	%01100110	; STOCK
    135  2ad2		       7c		      .byte.b	%01111100	; STOCK
    136  2ad3		       60		      .byte.b	%01100000	; STOCK
    137  2ad4		       62		      .byte.b	%01100010	; STOCK
    138  2ad5		       3c		      .byte.b	%00111100	; STOCK
    139  2ad6
    140  2ad6							;byte %00000000 ; STOCK
    141  2ad6
    142  2ad6		       30		      .byte.b	%00110000	; STOCK
    143  2ad7		       30		      .byte.b	%00110000	; STOCK
    144  2ad8		       30		      .byte.b	%00110000	; STOCK
    145  2ad9		       18		      .byte.b	%00011000	; STOCK
    146  2ada		       0c		      .byte.b	%00001100	; STOCK
    147  2adb		       06		      .byte.b	%00000110	; STOCK
    148  2adc		       42		      .byte.b	%01000010	; STOCK
    149  2add		       3e		      .byte.b	%00111110	; STOCK
    150  2ade
    151  2ade							;byte %00000000 ; STOCK
    152  2ade
    153  2ade		       3c		      .byte.b	%00111100	; STOCK
    154  2adf		       66		      .byte.b	%01100110	; STOCK
    155  2ae0		       66		      .byte.b	%01100110	; STOCK
    156  2ae1		       66		      .byte.b	%01100110	; STOCK
    157  2ae2		       3c		      .byte.b	%00111100	; STOCK
    158  2ae3		       66		      .byte.b	%01100110	; STOCK
    159  2ae4		       66		      .byte.b	%01100110	; STOCK
    160  2ae5		       3c		      .byte.b	%00111100	; STOCK
    161  2ae6
    162  2ae6							;byte %00000000 ; STOCK
    163  2ae6
    164  2ae6		       3c		      .byte.b	%00111100	; STOCK
    165  2ae7		       46		      .byte.b	%01000110	; STOCK
    166  2ae8		       06		      .byte.b	%00000110	; STOCK
    167  2ae9		       3e		      .byte.b	%00111110	; STOCK
    168  2aea		       66		      .byte.b	%01100110	; STOCK
    169  2aeb		       66		      .byte.b	%01100110	; STOCK
    170  2aec		       66		      .byte.b	%01100110	; STOCK
    171  2aed		       3c		      .byte.b	%00111100	; STOCK
    172  2aee
    173  2aee					      endif		; STOCK
    174  2aee
    175  2aee				  -	      if	fontstyle == NEWCENTURY
    176  2aee				  -			;byte %00000000 ; NEWCENTURY
    177  2aee				  -
    178  2aee				  -	      .byte	%00111100	; NEWCENTURY
    179  2aee				  -	      .byte	%01000010	; NEWCENTURY
    180  2aee				  -	      .byte	%01000010	; NEWCENTURY
    181  2aee				  -	      .byte	%01000010	; NEWCENTURY
    182  2aee				  -	      .byte	%00100100	; NEWCENTURY
    183  2aee				  -	      .byte	%00100100	; NEWCENTURY
    184  2aee				  -	      .byte	%00100100	; NEWCENTURY
    185  2aee				  -	      .byte	%00011000	; NEWCENTURY
    186  2aee				  -
    187  2aee				  -			;byte %00000000 ; NEWCENTURY
    188  2aee				  -
    189  2aee				  -	      .byte	%00001000	; NEWCENTURY
    190  2aee				  -	      .byte	%00001000	; NEWCENTURY
    191  2aee				  -	      .byte	%00001000	; NEWCENTURY
    192  2aee				  -	      .byte	%00001000	; NEWCENTURY
    193  2aee				  -	      .byte	%00001000	; NEWCENTURY
    194  2aee				  -	      .byte	%00001000	; NEWCENTURY
    195  2aee				  -	      .byte	%00001000	; NEWCENTURY
    196  2aee				  -	      .byte	%00001000	; NEWCENTURY
    197  2aee				  -
    198  2aee				  -			;byte %00000000 ; NEWCENTURY
    199  2aee				  -
    200  2aee				  -	      .byte	%01111110	; NEWCENTURY
    201  2aee				  -	      .byte	%01000000	; NEWCENTURY
    202  2aee				  -	      .byte	%01000000	; NEWCENTURY
    203  2aee				  -	      .byte	%00100000	; NEWCENTURY
    204  2aee				  -	      .byte	%00011100	; NEWCENTURY
    205  2aee				  -	      .byte	%00000010	; NEWCENTURY
    206  2aee				  -	      .byte	%00000010	; NEWCENTURY
    207  2aee				  -	      .byte	%00011100	; NEWCENTURY
    208  2aee				  -
    209  2aee				  -			;byte %00000000 ; NEWCENTURY
    210  2aee				  -
    211  2aee				  -	      .byte	%01111100	; NEWCENTURY
    212  2aee				  -	      .byte	%00000010	; NEWCENTURY
    213  2aee				  -	      .byte	%00000010	; NEWCENTURY
    214  2aee				  -	      .byte	%00000010	; NEWCENTURY
    215  2aee				  -	      .byte	%00111100	; NEWCENTURY
    216  2aee				  -	      .byte	%00000010	; NEWCENTURY
    217  2aee				  -	      .byte	%00000010	; NEWCENTURY
    218  2aee				  -	      .byte	%00011100	; NEWCENTURY
    219  2aee				  -
    220  2aee				  -			;byte %00000000 ; NEWCENTURY
    221  2aee				  -
    222  2aee				  -	      .byte	%00000010	; NEWCENTURY
    223  2aee				  -	      .byte	%00000010	; NEWCENTURY
    224  2aee				  -	      .byte	%00000010	; NEWCENTURY
    225  2aee				  -	      .byte	%00111110	; NEWCENTURY
    226  2aee				  -	      .byte	%00100010	; NEWCENTURY
    227  2aee				  -	      .byte	%00100010	; NEWCENTURY
    228  2aee				  -	      .byte	%00010010	; NEWCENTURY
    229  2aee				  -	      .byte	%00010010	; NEWCENTURY
    230  2aee				  -
    231  2aee				  -			;byte %00000000 ; NEWCENTURY
    232  2aee				  -
    233  2aee				  -	      .byte	%01111100	; NEWCENTURY
    234  2aee				  -	      .byte	%00000010	; NEWCENTURY
    235  2aee				  -	      .byte	%00000010	; NEWCENTURY
    236  2aee				  -	      .byte	%00000010	; NEWCENTURY
    237  2aee				  -	      .byte	%01111100	; NEWCENTURY
    238  2aee				  -	      .byte	%01000000	; NEWCENTURY
    239  2aee				  -	      .byte	%01000000	; NEWCENTURY
    240  2aee				  -	      .byte	%01111000	; NEWCENTURY
    241  2aee				  -
    242  2aee				  -			;byte %00000000 ; NEWCENTURY
    243  2aee				  -
    244  2aee				  -	      .byte	%00111100	; NEWCENTURY
    245  2aee				  -	      .byte	%01000010	; NEWCENTURY
    246  2aee				  -	      .byte	%01000010	; NEWCENTURY
    247  2aee				  -	      .byte	%01000010	; NEWCENTURY
    248  2aee				  -	      .byte	%01111100	; NEWCENTURY
    249  2aee				  -	      .byte	%01000000	; NEWCENTURY
    250  2aee				  -	      .byte	%01000000	; NEWCENTURY
    251  2aee				  -	      .byte	%00110000	; NEWCENTURY
    252  2aee				  -
    253  2aee				  -			;byte %00000000 ; NEWCENTURY
    254  2aee				  -
    255  2aee				  -	      .byte	%00010000	; NEWCENTURY
    256  2aee				  -	      .byte	%00010000	; NEWCENTURY
    257  2aee				  -	      .byte	%00001000	; NEWCENTURY
    258  2aee				  -	      .byte	%00001000	; NEWCENTURY
    259  2aee				  -	      .byte	%00000100	; NEWCENTURY
    260  2aee				  -	      .byte	%00000100	; NEWCENTURY
    261  2aee				  -	      .byte	%00000010	; NEWCENTURY
    262  2aee				  -	      .byte	%00011110	; NEWCENTURY
    263  2aee				  -
    264  2aee				  -			;byte %00000000 ; NEWCENTURY
    265  2aee				  -
    266  2aee				  -	      .byte	%00111100	; NEWCENTURY
    267  2aee				  -	      .byte	%01000010	; NEWCENTURY
    268  2aee				  -	      .byte	%01000010	; NEWCENTURY
    269  2aee				  -	      .byte	%01000010	; NEWCENTURY
    270  2aee				  -	      .byte	%00111100	; NEWCENTURY
    271  2aee				  -	      .byte	%00100100	; NEWCENTURY
    272  2aee				  -	      .byte	%00100100	; NEWCENTURY
    273  2aee				  -	      .byte	%00011000	; NEWCENTURY
    274  2aee				  -
    275  2aee				  -			;byte %00000000 ; NEWCENTURY
    276  2aee				  -
    277  2aee				  -	      .byte	%00111100	; NEWCENTURY
    278  2aee				  -	      .byte	%00000010	; NEWCENTURY
    279  2aee				  -	      .byte	%00000010	; NEWCENTURY
    280  2aee				  -	      .byte	%00000010	; NEWCENTURY
    281  2aee				  -	      .byte	%00001110	; NEWCENTURY
    282  2aee				  -	      .byte	%00010010	; NEWCENTURY
    283  2aee				  -	      .byte	%00010010	; NEWCENTURY
    284  2aee				  -	      .byte	%00001100	; NEWCENTURY
    285  2aee				  -
    286  2aee					      endif		; NEWCENTURY
    287  2aee
    288  2aee				  -	      if	fontstyle == WHIMSEY
    289  2aee				  -			;byte %00000000 ; WHIMSEY
    290  2aee				  -
    291  2aee				  -	      .byte	%00111100	; WHIMSEY
    292  2aee				  -	      .byte	%01111110	; WHIMSEY
    293  2aee				  -	      .byte	%01111110	; WHIMSEY
    294  2aee				  -	      .byte	%01111110	; WHIMSEY
    295  2aee				  -	      .byte	%01110110	; WHIMSEY
    296  2aee				  -	      .byte	%01110110	; WHIMSEY
    297  2aee				  -	      .byte	%01110110	; WHIMSEY
    298  2aee				  -	      .byte	%00111100	; WHIMSEY
    299  2aee				  -
    300  2aee				  -			;byte %00000000 ; WHIMSEY
    301  2aee				  -
    302  2aee				  -	      .byte	%01111110	; WHIMSEY
    303  2aee				  -	      .byte	%01111110	; WHIMSEY
    304  2aee				  -	      .byte	%01111110	; WHIMSEY
    305  2aee				  -	      .byte	%00011000	; WHIMSEY
    306  2aee				  -	      .byte	%00011000	; WHIMSEY
    307  2aee				  -	      .byte	%00011000	; WHIMSEY
    308  2aee				  -	      .byte	%01111000	; WHIMSEY
    309  2aee				  -	      .byte	%00011000	; WHIMSEY
    310  2aee				  -
    311  2aee				  -			;byte %00000000 ; WHIMSEY
    312  2aee				  -
    313  2aee				  -	      .byte	%01111110	; WHIMSEY
    314  2aee				  -	      .byte	%01111110	; WHIMSEY
    315  2aee				  -	      .byte	%01111110	; WHIMSEY
    316  2aee				  -	      .byte	%01111000	; WHIMSEY
    317  2aee				  -	      .byte	%00111100	; WHIMSEY
    318  2aee				  -	      .byte	%00001110	; WHIMSEY
    319  2aee				  -	      .byte	%01100110	; WHIMSEY
    320  2aee				  -	      .byte	%00111100	; WHIMSEY
    321  2aee				  -
    322  2aee				  -			;byte %00000000 ; WHIMSEY
    323  2aee				  -
    324  2aee				  -	      .byte	%00111100	; WHIMSEY
    325  2aee				  -	      .byte	%01111110	; WHIMSEY
    326  2aee				  -	      .byte	%01111110	; WHIMSEY
    327  2aee				  -	      .byte	%01101110	; WHIMSEY
    328  2aee				  -	      .byte	%00001110	; WHIMSEY
    329  2aee				  -	      .byte	%00111100	; WHIMSEY
    330  2aee				  -	      .byte	%00011100	; WHIMSEY
    331  2aee				  -	      .byte	%01111110	; WHIMSEY
    332  2aee				  -
    333  2aee				  -			;byte %00000000 ; WHIMSEY
    334  2aee				  -
    335  2aee				  -	      .byte	%00011100	; WHIMSEY
    336  2aee				  -	      .byte	%00011100	; WHIMSEY
    337  2aee				  -	      .byte	%01111110	; WHIMSEY
    338  2aee				  -	      .byte	%01011100	; WHIMSEY
    339  2aee				  -	      .byte	%01011100	; WHIMSEY
    340  2aee				  -	      .byte	%00011100	; WHIMSEY
    341  2aee				  -	      .byte	%00011100	; WHIMSEY
    342  2aee				  -	      .byte	%00011100	; WHIMSEY
    343  2aee				  -
    344  2aee				  -			;byte %00000000 ; WHIMSEY
    345  2aee				  -
    346  2aee				  -	      .byte	%00111100	; WHIMSEY
    347  2aee				  -	      .byte	%01111110	; WHIMSEY
    348  2aee				  -	      .byte	%01111110	; WHIMSEY
    349  2aee				  -	      .byte	%01101110	; WHIMSEY
    350  2aee				  -	      .byte	%00001110	; WHIMSEY
    351  2aee				  -	      .byte	%01111100	; WHIMSEY
    352  2aee				  -	      .byte	%01110000	; WHIMSEY
    353  2aee				  -	      .byte	%01111110	; WHIMSEY
    354  2aee				  -
    355  2aee				  -			;byte %00000000 ; WHIMSEY
    356  2aee				  -
    357  2aee				  -	      .byte	%00111100	; WHIMSEY
    358  2aee				  -	      .byte	%01111110	; WHIMSEY
    359  2aee				  -	      .byte	%01111110	; WHIMSEY
    360  2aee				  -	      .byte	%01110110	; WHIMSEY
    361  2aee				  -	      .byte	%01110110	; WHIMSEY
    362  2aee				  -	      .byte	%01111100	; WHIMSEY
    363  2aee				  -	      .byte	%01110000	; WHIMSEY
    364  2aee				  -	      .byte	%00111110	; WHIMSEY
    365  2aee				  -
    366  2aee				  -			;byte %00000000 ; WHIMSEY
    367  2aee				  -
    368  2aee				  -	      .byte	%01111000	; WHIMSEY
    369  2aee				  -	      .byte	%01111000	; WHIMSEY
    370  2aee				  -	      .byte	%01111000	; WHIMSEY
    371  2aee				  -	      .byte	%00111100	; WHIMSEY
    372  2aee				  -	      .byte	%00011100	; WHIMSEY
    373  2aee				  -	      .byte	%00001110	; WHIMSEY
    374  2aee				  -	      .byte	%00001110	; WHIMSEY
    375  2aee				  -	      .byte	%01111110	; WHIMSEY
    376  2aee				  -
    377  2aee				  -			;byte %00000000 ; WHIMSEY
    378  2aee				  -
    379  2aee				  -	      .byte	%00111100	; WHIMSEY
    380  2aee				  -	      .byte	%01111110	; WHIMSEY
    381  2aee				  -	      .byte	%01111110	; WHIMSEY
    382  2aee				  -	      .byte	%01110110	; WHIMSEY
    383  2aee				  -	      .byte	%01110110	; WHIMSEY
    384  2aee				  -	      .byte	%00111100	; WHIMSEY
    385  2aee				  -	      .byte	%01110110	; WHIMSEY
    386  2aee				  -	      .byte	%00111100	; WHIMSEY
    387  2aee				  -
    388  2aee				  -			;byte %00000000 ; WHIMSEY
    389  2aee				  -
    390  2aee				  -	      .byte	%00111100	; WHIMSEY
    391  2aee				  -	      .byte	%01111110	; WHIMSEY
    392  2aee				  -	      .byte	%01111110	; WHIMSEY
    393  2aee				  -	      .byte	%01110110	; WHIMSEY
    394  2aee				  -	      .byte	%00000110	; WHIMSEY
    395  2aee				  -	      .byte	%00111110	; WHIMSEY
    396  2aee				  -	      .byte	%01110110	; WHIMSEY
    397  2aee				  -	      .byte	%00111100	; WHIMSEY
    398  2aee				  -
    399  2aee					      endif		; WHIMSEY
    400  2aee
    401  2aee				  -	      if	fontstyle == ALARMCLOCK
    402  2aee				  -
    403  2aee				  -			;byte %00000000 ; ALARMCLOCK
    404  2aee				  -
    405  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    406  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    407  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    408  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    409  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    410  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    411  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    412  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    413  2aee				  -
    414  2aee				  -			;byte %00000000 ; ALARMCLOCK
    415  2aee				  -
    416  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    417  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    418  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    419  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    420  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    421  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    422  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    423  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    424  2aee				  -
    425  2aee				  -			;byte %00000000 ; ALARMCLOCK
    426  2aee				  -
    427  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    428  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    429  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    430  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    431  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    432  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    433  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    434  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    435  2aee				  -
    436  2aee				  -			;byte %00000000 ; ALARMCLOCK
    437  2aee				  -
    438  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    439  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    440  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    441  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    442  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    443  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    444  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    445  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    446  2aee				  -
    447  2aee				  -			;byte %00000000 ; ALARMCLOCK
    448  2aee				  -
    449  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    450  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    451  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    452  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    453  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    454  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    455  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    456  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    457  2aee				  -
    458  2aee				  -			;byte %00000000 ; ALARMCLOCK
    459  2aee				  -
    460  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    461  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    462  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    463  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    464  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    465  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    466  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    467  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    468  2aee				  -
    469  2aee				  -			;byte %00000000 ; ALARMCLOCK
    470  2aee				  -
    471  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    472  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    473  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    474  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    475  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    476  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    477  2aee				  -	      .byte	%01000000	; ALARMCLOCK
    478  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    479  2aee				  -
    480  2aee				  -			;byte %00000000 ; ALARMCLOCK
    481  2aee				  -
    482  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    483  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    484  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    485  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    486  2aee				  -	      .byte	%00000000	; ALARMCLOCK
    487  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    488  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    489  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    490  2aee				  -
    491  2aee				  -			;byte %00000000 ; ALARMCLOCK
    492  2aee				  -
    493  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    494  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    495  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    496  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    497  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    498  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    499  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    500  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    501  2aee				  -
    502  2aee				  -			;byte %00000000 ; ALARMCLOCK
    503  2aee				  -
    504  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    505  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    506  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    507  2aee				  -	      .byte	%00000010	; ALARMCLOCK
    508  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    509  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    510  2aee				  -	      .byte	%01000010	; ALARMCLOCK
    511  2aee				  -	      .byte	%00111100	; ALARMCLOCK
    512  2aee				  -
    513  2aee				  -
    514  2aee					      endif		; ALARMCLOCK
    515  2aee
    516  2aee				  -	      if	fontstyle == HANDWRITTEN
    517  2aee				  -
    518  2aee				  -			;byte %00000000 ; HANDWRITTEN
    519  2aee				  -
    520  2aee				  -	      .byte	%00110000	; HANDWRITTEN
    521  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    522  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    523  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    524  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    525  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    526  2aee				  -	      .byte	%00010010	; HANDWRITTEN
    527  2aee				  -	      .byte	%00001100	; HANDWRITTEN
    528  2aee				  -
    529  2aee				  -			;byte %00000000 ; HANDWRITTEN
    530  2aee				  -
    531  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    532  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    533  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    534  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    535  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    536  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    537  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    538  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    539  2aee				  -
    540  2aee				  -			;byte %00000000 ; HANDWRITTEN
    541  2aee				  -
    542  2aee				  -	      .byte	%01110000	; HANDWRITTEN
    543  2aee				  -	      .byte	%01001100	; HANDWRITTEN
    544  2aee				  -	      .byte	%01000000	; HANDWRITTEN
    545  2aee				  -	      .byte	%00100000	; HANDWRITTEN
    546  2aee				  -	      .byte	%00011000	; HANDWRITTEN
    547  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    548  2aee				  -	      .byte	%00100010	; HANDWRITTEN
    549  2aee				  -	      .byte	%00011100	; HANDWRITTEN
    550  2aee				  -
    551  2aee				  -			;byte %00000000 ; HANDWRITTEN
    552  2aee				  -
    553  2aee				  -	      .byte	%00110000	; HANDWRITTEN
    554  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    555  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    556  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    557  2aee				  -	      .byte	%00011000	; HANDWRITTEN
    558  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    559  2aee				  -	      .byte	%00100010	; HANDWRITTEN
    560  2aee				  -	      .byte	%00011100	; HANDWRITTEN
    561  2aee				  -
    562  2aee				  -			;byte %00000000 ; HANDWRITTEN
    563  2aee				  -
    564  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    565  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    566  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    567  2aee				  -	      .byte	%01111000	; HANDWRITTEN
    568  2aee				  -	      .byte	%01000100	; HANDWRITTEN
    569  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    570  2aee				  -	      .byte	%00010010	; HANDWRITTEN
    571  2aee				  -	      .byte	%00000010	; HANDWRITTEN
    572  2aee				  -
    573  2aee				  -			;byte %00000000 ; HANDWRITTEN
    574  2aee				  -
    575  2aee				  -	      .byte	%00110000	; HANDWRITTEN
    576  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    577  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    578  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    579  2aee				  -	      .byte	%00011000	; HANDWRITTEN
    580  2aee				  -	      .byte	%00100000	; HANDWRITTEN
    581  2aee				  -	      .byte	%00010010	; HANDWRITTEN
    582  2aee				  -	      .byte	%00001100	; HANDWRITTEN
    583  2aee				  -
    584  2aee				  -			;byte %00000000 ; HANDWRITTEN
    585  2aee				  -
    586  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    587  2aee				  -	      .byte	%00101000	; HANDWRITTEN
    588  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    589  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    590  2aee				  -	      .byte	%00011000	; HANDWRITTEN
    591  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    592  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    593  2aee				  -	      .byte	%00000110	; HANDWRITTEN
    594  2aee				  -
    595  2aee				  -			;byte %00000000 ; HANDWRITTEN
    596  2aee				  -
    597  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    598  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    599  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    600  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    601  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    602  2aee				  -	      .byte	%00000100	; HANDWRITTEN
    603  2aee				  -	      .byte	%00110010	; HANDWRITTEN
    604  2aee				  -	      .byte	%00001110	; HANDWRITTEN
    605  2aee				  -
    606  2aee				  -			;byte %00000000 ; HANDWRITTEN
    607  2aee				  -
    608  2aee				  -	      .byte	%00110000	; HANDWRITTEN
    609  2aee				  -	      .byte	%01001000	; HANDWRITTEN
    610  2aee				  -	      .byte	%01000100	; HANDWRITTEN
    611  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    612  2aee				  -	      .byte	%00011100	; HANDWRITTEN
    613  2aee				  -	      .byte	%00010010	; HANDWRITTEN
    614  2aee				  -	      .byte	%00001010	; HANDWRITTEN
    615  2aee				  -	      .byte	%00000110	; HANDWRITTEN
    616  2aee				  -
    617  2aee				  -			;byte %00000000 ; HANDWRITTEN
    618  2aee				  -
    619  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    620  2aee				  -	      .byte	%00010000	; HANDWRITTEN
    621  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    622  2aee				  -	      .byte	%00001000	; HANDWRITTEN
    623  2aee				  -	      .byte	%00011100	; HANDWRITTEN
    624  2aee				  -	      .byte	%00100100	; HANDWRITTEN
    625  2aee				  -	      .byte	%00010010	; HANDWRITTEN
    626  2aee				  -	      .byte	%00001100	; HANDWRITTEN
    627  2aee				  -
    628  2aee					      endif		; HANDWRITTEN
    629  2aee
    630  2aee				  -	      if	fontstyle == INTERRUPTED
    631  2aee				  -
    632  2aee				  -			;byte %00000000 ; INTERRUPTED
    633  2aee				  -
    634  2aee				  -	      .byte	%00110100	; INTERRUPTED
    635  2aee				  -	      .byte	%01100110	; INTERRUPTED
    636  2aee				  -	      .byte	%01100110	; INTERRUPTED
    637  2aee				  -	      .byte	%01100110	; INTERRUPTED
    638  2aee				  -	      .byte	%01100110	; INTERRUPTED
    639  2aee				  -	      .byte	%01100110	; INTERRUPTED
    640  2aee				  -	      .byte	%01100110	; INTERRUPTED
    641  2aee				  -	      .byte	%00110100	; INTERRUPTED
    642  2aee				  -
    643  2aee				  -			;byte %00000000 ; INTERRUPTED
    644  2aee				  -
    645  2aee				  -	      .byte	%00111100	; INTERRUPTED
    646  2aee				  -	      .byte	%00000000	; INTERRUPTED
    647  2aee				  -	      .byte	%00011000	; INTERRUPTED
    648  2aee				  -	      .byte	%00011000	; INTERRUPTED
    649  2aee				  -	      .byte	%00011000	; INTERRUPTED
    650  2aee				  -	      .byte	%00011000	; INTERRUPTED
    651  2aee				  -	      .byte	%00011000	; INTERRUPTED
    652  2aee				  -	      .byte	%00111000	; INTERRUPTED
    653  2aee				  -
    654  2aee				  -			;byte %00000000 ; INTERRUPTED
    655  2aee				  -
    656  2aee				  -	      .byte	%01101110	; INTERRUPTED
    657  2aee				  -	      .byte	%01100000	; INTERRUPTED
    658  2aee				  -	      .byte	%00110000	; INTERRUPTED
    659  2aee				  -	      .byte	%00011000	; INTERRUPTED
    660  2aee				  -	      .byte	%00001100	; INTERRUPTED
    661  2aee				  -	      .byte	%00000110	; INTERRUPTED
    662  2aee				  -	      .byte	%01000110	; INTERRUPTED
    663  2aee				  -	      .byte	%00111100	; INTERRUPTED
    664  2aee				  -
    665  2aee				  -			;byte %00000000 ; INTERRUPTED
    666  2aee				  -
    667  2aee				  -	      .byte	%01111100	; INTERRUPTED
    668  2aee				  -	      .byte	%00000110	; INTERRUPTED
    669  2aee				  -	      .byte	%00000110	; INTERRUPTED
    670  2aee				  -	      .byte	%00000110	; INTERRUPTED
    671  2aee				  -	      .byte	%01110110	; INTERRUPTED
    672  2aee				  -	      .byte	%00000110	; INTERRUPTED
    673  2aee				  -	      .byte	%00000110	; INTERRUPTED
    674  2aee				  -	      .byte	%01110100	; INTERRUPTED
    675  2aee				  -
    676  2aee				  -			;byte %00000000 ; INTERRUPTED
    677  2aee				  -
    678  2aee				  -	      .byte	%00000110	; INTERRUPTED
    679  2aee				  -	      .byte	%00000110	; INTERRUPTED
    680  2aee				  -	      .byte	%00000110	; INTERRUPTED
    681  2aee				  -	      .byte	%00000110	; INTERRUPTED
    682  2aee				  -	      .byte	%01110110	; INTERRUPTED
    683  2aee				  -	      .byte	%01100110	; INTERRUPTED
    684  2aee				  -	      .byte	%01100110	; INTERRUPTED
    685  2aee				  -	      .byte	%01100110	; INTERRUPTED
    686  2aee				  -
    687  2aee				  -			;byte %00000000 ; INTERRUPTED
    688  2aee				  -
    689  2aee				  -	      .byte	%01111100	; INTERRUPTED
    690  2aee				  -	      .byte	%00000110	; INTERRUPTED
    691  2aee				  -	      .byte	%00000110	; INTERRUPTED
    692  2aee				  -	      .byte	%00000110	; INTERRUPTED
    693  2aee				  -	      .byte	%01111100	; INTERRUPTED
    694  2aee				  -	      .byte	%01100000	; INTERRUPTED
    695  2aee				  -	      .byte	%01100000	; INTERRUPTED
    696  2aee				  -	      .byte	%01101110	; INTERRUPTED
    697  2aee				  -
    698  2aee				  -			;byte %00000000 ; INTERRUPTED
    699  2aee				  -
    700  2aee				  -	      .byte	%00101100	; INTERRUPTED
    701  2aee				  -	      .byte	%01100110	; INTERRUPTED
    702  2aee				  -	      .byte	%01100110	; INTERRUPTED
    703  2aee				  -	      .byte	%01100110	; INTERRUPTED
    704  2aee				  -	      .byte	%01101100	; INTERRUPTED
    705  2aee				  -	      .byte	%01100000	; INTERRUPTED
    706  2aee				  -	      .byte	%00110000	; INTERRUPTED
    707  2aee				  -	      .byte	%00011100	; INTERRUPTED
    708  2aee				  -
    709  2aee				  -			;byte %00000000 ; INTERRUPTED
    710  2aee				  -
    711  2aee				  -	      .byte	%00011000	; INTERRUPTED
    712  2aee				  -	      .byte	%00011000	; INTERRUPTED
    713  2aee				  -	      .byte	%00011000	; INTERRUPTED
    714  2aee				  -	      .byte	%00011100	; INTERRUPTED
    715  2aee				  -	      .byte	%00001110	; INTERRUPTED
    716  2aee				  -	      .byte	%00000110	; INTERRUPTED
    717  2aee				  -	      .byte	%00000000	; INTERRUPTED
    718  2aee				  -	      .byte	%01111110	; INTERRUPTED
    719  2aee				  -
    720  2aee				  -			;byte %00000000 ; INTERRUPTED
    721  2aee				  -
    722  2aee				  -	      .byte	%00110100	; INTERRUPTED
    723  2aee				  -	      .byte	%01100110	; INTERRUPTED
    724  2aee				  -	      .byte	%01100110	; INTERRUPTED
    725  2aee				  -	      .byte	%01100110	; INTERRUPTED
    726  2aee				  -	      .byte	%00110100	; INTERRUPTED
    727  2aee				  -	      .byte	%01100110	; INTERRUPTED
    728  2aee				  -	      .byte	%01100110	; INTERRUPTED
    729  2aee				  -	      .byte	%00110100	; INTERRUPTED
    730  2aee				  -
    731  2aee				  -			;byte %00000000 ; INTERRUPTED
    732  2aee				  -
    733  2aee				  -	      .byte	%00111000	; INTERRUPTED
    734  2aee				  -	      .byte	%00001100	; INTERRUPTED
    735  2aee				  -	      .byte	%00000110	; INTERRUPTED
    736  2aee				  -	      .byte	%00110110	; INTERRUPTED
    737  2aee				  -	      .byte	%01100110	; INTERRUPTED
    738  2aee				  -	      .byte	%01100110	; INTERRUPTED
    739  2aee				  -	      .byte	%01100110	; INTERRUPTED
    740  2aee				  -	      .byte	%00110100	; INTERRUPTED
    741  2aee				  -
    742  2aee					      endif		; INTERRUPTED
    743  2aee
    744  2aee
    745  2aee				  -	      if	fontstyle == TINY
    746  2aee				  -
    747  2aee				  -			;byte %00000000 ; TINY
    748  2aee				  -
    749  2aee				  -	      .byte	%00000000	; TINY
    750  2aee				  -	      .byte	%00111000	; TINY
    751  2aee				  -	      .byte	%00101000	; TINY
    752  2aee				  -	      .byte	%00101000	; TINY
    753  2aee				  -	      .byte	%00101000	; TINY
    754  2aee				  -	      .byte	%00111000	; TINY
    755  2aee				  -	      .byte	%00000000	; TINY
    756  2aee				  -	      .byte	%00000000	; TINY
    757  2aee				  -
    758  2aee				  -			;byte %00000000 ; TINY
    759  2aee				  -
    760  2aee				  -	      .byte	%00000000	; TINY
    761  2aee				  -	      .byte	%00010000	; TINY
    762  2aee				  -	      .byte	%00010000	; TINY
    763  2aee				  -	      .byte	%00010000	; TINY
    764  2aee				  -	      .byte	%00010000	; TINY
    765  2aee				  -	      .byte	%00010000	; TINY
    766  2aee				  -	      .byte	%00000000	; TINY
    767  2aee				  -	      .byte	%00000000	; TINY
    768  2aee				  -
    769  2aee				  -			;byte %00000000 ; TINY
    770  2aee				  -
    771  2aee				  -	      .byte	%00000000	; TINY
    772  2aee				  -	      .byte	%00111000	; TINY
    773  2aee				  -	      .byte	%00100000	; TINY
    774  2aee				  -	      .byte	%00111000	; TINY
    775  2aee				  -	      .byte	%00001000	; TINY
    776  2aee				  -	      .byte	%00111000	; TINY
    777  2aee				  -	      .byte	%00000000	; TINY
    778  2aee				  -	      .byte	%00000000	; TINY
    779  2aee				  -
    780  2aee				  -			;byte %00000000 ; TINY
    781  2aee				  -
    782  2aee				  -	      .byte	%00000000	; TINY
    783  2aee				  -	      .byte	%00111000	; TINY
    784  2aee				  -	      .byte	%00001000	; TINY
    785  2aee				  -	      .byte	%00111000	; TINY
    786  2aee				  -	      .byte	%00001000	; TINY
    787  2aee				  -	      .byte	%00111000	; TINY
    788  2aee				  -	      .byte	%00000000	; TINY
    789  2aee				  -	      .byte	%00000000	; TINY
    790  2aee				  -
    791  2aee				  -			;byte %00000000 ; TINY
    792  2aee				  -
    793  2aee				  -	      .byte	%00000000	; TINY
    794  2aee				  -	      .byte	%00001000	; TINY
    795  2aee				  -	      .byte	%00001000	; TINY
    796  2aee				  -	      .byte	%00111000	; TINY
    797  2aee				  -	      .byte	%00101000	; TINY
    798  2aee				  -	      .byte	%00101000	; TINY
    799  2aee				  -	      .byte	%00000000	; TINY
    800  2aee				  -	      .byte	%00000000	; TINY
    801  2aee				  -
    802  2aee				  -			;byte %00000000 ; TINY
    803  2aee				  -
    804  2aee				  -	      .byte	%00000000	; TINY
    805  2aee				  -	      .byte	%00111000	; TINY
    806  2aee				  -	      .byte	%00001000	; TINY
    807  2aee				  -	      .byte	%00111000	; TINY
    808  2aee				  -	      .byte	%00100000	; TINY
    809  2aee				  -	      .byte	%00111000	; TINY
    810  2aee				  -	      .byte	%00000000	; TINY
    811  2aee				  -	      .byte	%00000000	; TINY
    812  2aee				  -
    813  2aee				  -			;byte %00000000 ; TINY
    814  2aee				  -
    815  2aee				  -	      .byte	%00000000	; TINY
    816  2aee				  -	      .byte	%00111000	; TINY
    817  2aee				  -	      .byte	%00101000	; TINY
    818  2aee				  -	      .byte	%00111000	; TINY
    819  2aee				  -	      .byte	%00100000	; TINY
    820  2aee				  -	      .byte	%00111000	; TINY
    821  2aee				  -	      .byte	%00000000	; TINY
    822  2aee				  -	      .byte	%00000000	; TINY
    823  2aee				  -
    824  2aee				  -			;byte %00000000 ; TINY
    825  2aee				  -
    826  2aee				  -	      .byte	%00000000	; TINY
    827  2aee				  -	      .byte	%00001000	; TINY
    828  2aee				  -	      .byte	%00001000	; TINY
    829  2aee				  -	      .byte	%00001000	; TINY
    830  2aee				  -	      .byte	%00001000	; TINY
    831  2aee				  -	      .byte	%00111000	; TINY
    832  2aee				  -	      .byte	%00000000	; TINY
    833  2aee				  -	      .byte	%00000000	; TINY
    834  2aee				  -
    835  2aee				  -			;byte %00000000 ; TINY
    836  2aee				  -
    837  2aee				  -	      .byte	%00000000	; TINY
    838  2aee				  -	      .byte	%00111000	; TINY
    839  2aee				  -	      .byte	%00101000	; TINY
    840  2aee				  -	      .byte	%00111000	; TINY
    841  2aee				  -	      .byte	%00101000	; TINY
    842  2aee				  -	      .byte	%00111000	; TINY
    843  2aee				  -	      .byte	%00000000	; TINY
    844  2aee				  -	      .byte	%00000000	; TINY
    845  2aee				  -
    846  2aee				  -			;byte %00000000 ; TINY
    847  2aee				  -
    848  2aee				  -	      .byte	%00000000	; TINY
    849  2aee				  -	      .byte	%00001000	; TINY
    850  2aee				  -	      .byte	%00001000	; TINY
    851  2aee				  -	      .byte	%00111000	; TINY
    852  2aee				  -	      .byte	%00101000	; TINY
    853  2aee				  -	      .byte	%00111000	; TINY
    854  2aee				  -	      .byte	%00000000	; TINY
    855  2aee				  -	      .byte	%00000000	; TINY
    856  2aee				  -
    857  2aee					      endif		; TINY
    858  2aee
    859  2aee				  -	      if	fontstyle == RETROPUTER
    860  2aee				  -
    861  2aee				  -			;byte %00000000 ; RETROPUTER
    862  2aee				  -
    863  2aee				  -	      .byte	%01111110	; RETROPUTER
    864  2aee				  -	      .byte	%01000110	; RETROPUTER
    865  2aee				  -	      .byte	%01000110	; RETROPUTER
    866  2aee				  -	      .byte	%01000110	; RETROPUTER
    867  2aee				  -	      .byte	%01100010	; RETROPUTER
    868  2aee				  -	      .byte	%01100010	; RETROPUTER
    869  2aee				  -	      .byte	%01100010	; RETROPUTER
    870  2aee				  -	      .byte	%01111110	; RETROPUTER
    871  2aee				  -
    872  2aee				  -			;byte %00000000 ; RETROPUTER
    873  2aee				  -
    874  2aee				  -	      .byte	%00111000	; RETROPUTER
    875  2aee				  -	      .byte	%00111000	; RETROPUTER
    876  2aee				  -	      .byte	%00111000	; RETROPUTER
    877  2aee				  -	      .byte	%00111000	; RETROPUTER
    878  2aee				  -	      .byte	%00011000	; RETROPUTER
    879  2aee				  -	      .byte	%00011000	; RETROPUTER
    880  2aee				  -	      .byte	%00011000	; RETROPUTER
    881  2aee				  -	      .byte	%00011000	; RETROPUTER
    882  2aee				  -
    883  2aee				  -			;byte %00000000 ; RETROPUTER
    884  2aee				  -
    885  2aee				  -	      .byte	%01111110	; RETROPUTER
    886  2aee				  -	      .byte	%01100000	; RETROPUTER
    887  2aee				  -	      .byte	%01100000	; RETROPUTER
    888  2aee				  -	      .byte	%01100000	; RETROPUTER
    889  2aee				  -	      .byte	%00111110	; RETROPUTER
    890  2aee				  -	      .byte	%00000010	; RETROPUTER
    891  2aee				  -	      .byte	%01000010	; RETROPUTER
    892  2aee				  -	      .byte	%01111110	; RETROPUTER
    893  2aee				  -
    894  2aee				  -			;byte %00000000 ; RETROPUTER
    895  2aee				  -
    896  2aee				  -	      .byte	%01111110	; RETROPUTER
    897  2aee				  -	      .byte	%01000110	; RETROPUTER
    898  2aee				  -	      .byte	%00000110	; RETROPUTER
    899  2aee				  -	      .byte	%00000110	; RETROPUTER
    900  2aee				  -	      .byte	%00111110	; RETROPUTER
    901  2aee				  -	      .byte	%00000010	; RETROPUTER
    902  2aee				  -	      .byte	%01000010	; RETROPUTER
    903  2aee				  -	      .byte	%01111110	; RETROPUTER
    904  2aee				  -
    905  2aee				  -			;byte %00000000 ; RETROPUTER
    906  2aee				  -
    907  2aee				  -	      .byte	%00001100	; RETROPUTER
    908  2aee				  -	      .byte	%00001100	; RETROPUTER
    909  2aee				  -	      .byte	%00001100	; RETROPUTER
    910  2aee				  -	      .byte	%01111110	; RETROPUTER
    911  2aee				  -	      .byte	%01000100	; RETROPUTER
    912  2aee				  -	      .byte	%01000100	; RETROPUTER
    913  2aee				  -	      .byte	%01000100	; RETROPUTER
    914  2aee				  -	      .byte	%00000100	; RETROPUTER
    915  2aee				  -
    916  2aee				  -			;byte %00000000 ; RETROPUTER
    917  2aee				  -
    918  2aee				  -	      .byte	%01111110	; RETROPUTER
    919  2aee				  -	      .byte	%01000110	; RETROPUTER
    920  2aee				  -	      .byte	%00000110	; RETROPUTER
    921  2aee				  -	      .byte	%00000110	; RETROPUTER
    922  2aee				  -	      .byte	%01111100	; RETROPUTER
    923  2aee				  -	      .byte	%01000000	; RETROPUTER
    924  2aee				  -	      .byte	%01000000	; RETROPUTER
    925  2aee				  -	      .byte	%01111110	; RETROPUTER
    926  2aee				  -
    927  2aee				  -			;byte %00000000 ; RETROPUTER
    928  2aee				  -
    929  2aee				  -	      .byte	%01111110	; RETROPUTER
    930  2aee				  -	      .byte	%01000110	; RETROPUTER
    931  2aee				  -	      .byte	%01000110	; RETROPUTER
    932  2aee				  -	      .byte	%01000110	; RETROPUTER
    933  2aee				  -	      .byte	%01111100	; RETROPUTER
    934  2aee				  -	      .byte	%01000000	; RETROPUTER
    935  2aee				  -	      .byte	%01000010	; RETROPUTER
    936  2aee				  -	      .byte	%01111110	; RETROPUTER
    937  2aee				  -
    938  2aee				  -			;byte %00000000 ; RETROPUTER
    939  2aee				  -
    940  2aee				  -	      .byte	%00001100	; RETROPUTER
    941  2aee				  -	      .byte	%00001100	; RETROPUTER
    942  2aee				  -	      .byte	%00001100	; RETROPUTER
    943  2aee				  -	      .byte	%00001100	; RETROPUTER
    944  2aee				  -	      .byte	%00000100	; RETROPUTER
    945  2aee				  -	      .byte	%00000010	; RETROPUTER
    946  2aee				  -	      .byte	%01000010	; RETROPUTER
    947  2aee				  -	      .byte	%01111110	; RETROPUTER
    948  2aee				  -
    949  2aee				  -			;byte %00000000 ; RETROPUTER
    950  2aee				  -
    951  2aee				  -	      .byte	%01111110	; RETROPUTER
    952  2aee				  -	      .byte	%01000110	; RETROPUTER
    953  2aee				  -	      .byte	%01000110	; RETROPUTER
    954  2aee				  -	      .byte	%01000110	; RETROPUTER
    955  2aee				  -	      .byte	%01111110	; RETROPUTER
    956  2aee				  -	      .byte	%01000010	; RETROPUTER
    957  2aee				  -	      .byte	%01000010	; RETROPUTER
    958  2aee				  -	      .byte	%01111110	; RETROPUTER
    959  2aee				  -
    960  2aee				  -			;byte %00000000 ; RETROPUTER
    961  2aee				  -
    962  2aee				  -	      .byte	%00000110	; RETROPUTER
    963  2aee				  -	      .byte	%00000110	; RETROPUTER
    964  2aee				  -	      .byte	%00000110	; RETROPUTER
    965  2aee				  -	      .byte	%00000010	; RETROPUTER
    966  2aee				  -	      .byte	%01111110	; RETROPUTER
    967  2aee				  -	      .byte	%01000010	; RETROPUTER
    968  2aee				  -	      .byte	%01000010	; RETROPUTER
    969  2aee				  -	      .byte	%01111110	; RETROPUTER
    970  2aee				  -
    971  2aee					      endif		; RETROPUTER
    972  2aee
    973  2aee				  -	      if	fontstyle == CURVES
    974  2aee				  -
    975  2aee				  -			;byte %00000000 ; CURVES
    976  2aee				  -
    977  2aee				  -	      .byte	%00111100	; CURVES
    978  2aee				  -	      .byte	%01111110	; CURVES
    979  2aee				  -	      .byte	%01100110	; CURVES
    980  2aee				  -	      .byte	%01100110	; CURVES
    981  2aee				  -	      .byte	%01100110	; CURVES
    982  2aee				  -	      .byte	%01100110	; CURVES
    983  2aee				  -	      .byte	%01111110	; CURVES
    984  2aee				  -	      .byte	%00111100	; CURVES
    985  2aee				  -
    986  2aee				  -			;byte %00000000 ; CURVES
    987  2aee				  -
    988  2aee				  -	      .byte	%00011000	; CURVES
    989  2aee				  -	      .byte	%00011000	; CURVES
    990  2aee				  -	      .byte	%00011000	; CURVES
    991  2aee				  -	      .byte	%00011000	; CURVES
    992  2aee				  -	      .byte	%00011000	; CURVES
    993  2aee				  -	      .byte	%00011000	; CURVES
    994  2aee				  -	      .byte	%01111000	; CURVES
    995  2aee				  -	      .byte	%01110000	; CURVES
    996  2aee				  -
    997  2aee				  -			;byte %00000000 ; CURVES
    998  2aee				  -
    999  2aee				  -	      .byte	%01111110	; CURVES
   1000  2aee				  -	      .byte	%01111110	; CURVES
   1001  2aee				  -	      .byte	%01100000	; CURVES
   1002  2aee				  -	      .byte	%01111100	; CURVES
   1003  2aee				  -	      .byte	%00111110	; CURVES
   1004  2aee				  -	      .byte	%00000110	; CURVES
   1005  2aee				  -	      .byte	%01111110	; CURVES
   1006  2aee				  -	      .byte	%01111100	; CURVES
   1007  2aee				  -
   1008  2aee				  -			;byte %00000000 ; CURVES
   1009  2aee				  -
   1010  2aee				  -	      .byte	%01111100	; CURVES
   1011  2aee				  -	      .byte	%01111110	; CURVES
   1012  2aee				  -	      .byte	%00001110	; CURVES
   1013  2aee				  -	      .byte	%00111100	; CURVES
   1014  2aee				  -	      .byte	%00111100	; CURVES
   1015  2aee				  -	      .byte	%00001110	; CURVES
   1016  2aee				  -	      .byte	%01111110	; CURVES
   1017  2aee				  -	      .byte	%01111100	; CURVES
   1018  2aee				  -
   1019  2aee				  -			;byte %00000000 ; CURVES
   1020  2aee				  -
   1021  2aee				  -	      .byte	%00000110	; CURVES
   1022  2aee				  -	      .byte	%00000110	; CURVES
   1023  2aee				  -	      .byte	%00111110	; CURVES
   1024  2aee				  -	      .byte	%01111110	; CURVES
   1025  2aee				  -	      .byte	%01100110	; CURVES
   1026  2aee				  -	      .byte	%01100110	; CURVES
   1027  2aee				  -	      .byte	%01100110	; CURVES
   1028  2aee				  -	      .byte	%01100110	; CURVES
   1029  2aee				  -
   1030  2aee				  -			;byte %00000000 ; CURVES
   1031  2aee				  -
   1032  2aee				  -	      .byte	%01111100	; CURVES
   1033  2aee				  -	      .byte	%01111110	; CURVES
   1034  2aee				  -	      .byte	%00000110	; CURVES
   1035  2aee				  -	      .byte	%01111110	; CURVES
   1036  2aee				  -	      .byte	%01111100	; CURVES
   1037  2aee				  -	      .byte	%01100000	; CURVES
   1038  2aee				  -	      .byte	%01111110	; CURVES
   1039  2aee				  -	      .byte	%01111110	; CURVES
   1040  2aee				  -
   1041  2aee				  -			;byte %00000000 ; CURVES
   1042  2aee				  -
   1043  2aee				  -	      .byte	%00111100	; CURVES
   1044  2aee				  -	      .byte	%01111110	; CURVES
   1045  2aee				  -	      .byte	%01100110	; CURVES
   1046  2aee				  -	      .byte	%01111110	; CURVES
   1047  2aee				  -	      .byte	%01111100	; CURVES
   1048  2aee				  -	      .byte	%01100000	; CURVES
   1049  2aee				  -	      .byte	%01111110	; CURVES
   1050  2aee				  -	      .byte	%00111110	; CURVES
   1051  2aee				  -
   1052  2aee				  -			;byte %00000000 ; CURVES
   1053  2aee				  -
   1054  2aee				  -	      .byte	%00000110	; CURVES
   1055  2aee				  -	      .byte	%00000110	; CURVES
   1056  2aee				  -	      .byte	%00000110	; CURVES
   1057  2aee				  -	      .byte	%00000110	; CURVES
   1058  2aee				  -	      .byte	%00000110	; CURVES
   1059  2aee				  -	      .byte	%01100110	; CURVES
   1060  2aee				  -	      .byte	%01111110	; CURVES
   1061  2aee				  -	      .byte	%00111100	; CURVES
   1062  2aee				  -
   1063  2aee				  -			;byte %00000000 ; CURVES
   1064  2aee				  -
   1065  2aee				  -	      .byte	%00111100	; CURVES
   1066  2aee				  -	      .byte	%01111110	; CURVES
   1067  2aee				  -	      .byte	%01100110	; CURVES
   1068  2aee				  -	      .byte	%01111110	; CURVES
   1069  2aee				  -	      .byte	%00111100	; CURVES
   1070  2aee				  -	      .byte	%01100110	; CURVES
   1071  2aee				  -	      .byte	%01111110	; CURVES
   1072  2aee				  -	      .byte	%00111100	; CURVES
   1073  2aee				  -
   1074  2aee				  -			;byte %00000000 ; CURVES
   1075  2aee				  -
   1076  2aee				  -	      .byte	%01111100	; CURVES
   1077  2aee				  -	      .byte	%01111110	; CURVES
   1078  2aee				  -	      .byte	%00000110	; CURVES
   1079  2aee				  -	      .byte	%00111110	; CURVES
   1080  2aee				  -	      .byte	%01111110	; CURVES
   1081  2aee				  -	      .byte	%01100110	; CURVES
   1082  2aee				  -	      .byte	%01111110	; CURVES
   1083  2aee				  -	      .byte	%00111100	; CURVES
   1084  2aee				  -
   1085  2aee					      endif		; CURVES
   1086  2aee
   1087  2aee
   1088  2aee				  -	      if	fontstyle == HUSKY
   1089  2aee				  -
   1090  2aee				  -			;byte %00000000 ; HUSKY
   1091  2aee				  -
   1092  2aee				  -	      .byte	%01111100	; HUSKY
   1093  2aee				  -	      .byte	%11111110	; HUSKY
   1094  2aee				  -	      .byte	%11101110	; HUSKY
   1095  2aee				  -	      .byte	%11101110	; HUSKY
   1096  2aee				  -	      .byte	%11101110	; HUSKY
   1097  2aee				  -	      .byte	%11101110	; HUSKY
   1098  2aee				  -	      .byte	%11111110	; HUSKY
   1099  2aee				  -	      .byte	%01111100	; HUSKY
   1100  2aee				  -
   1101  2aee				  -			;byte %00000000 ; HUSKY
   1102  2aee				  -
   1103  2aee				  -	      .byte	%00111000	; HUSKY
   1104  2aee				  -	      .byte	%00111000	; HUSKY
   1105  2aee				  -	      .byte	%00111000	; HUSKY
   1106  2aee				  -	      .byte	%00111000	; HUSKY
   1107  2aee				  -	      .byte	%00111000	; HUSKY
   1108  2aee				  -	      .byte	%00111000	; HUSKY
   1109  2aee				  -	      .byte	%00111000	; HUSKY
   1110  2aee				  -	      .byte	%00111000	; HUSKY
   1111  2aee				  -
   1112  2aee				  -			;byte %00000000 ; HUSKY
   1113  2aee				  -
   1114  2aee				  -	      .byte	%11111110	; HUSKY
   1115  2aee				  -	      .byte	%11111110	; HUSKY
   1116  2aee				  -	      .byte	%11100000	; HUSKY
   1117  2aee				  -	      .byte	%11111100	; HUSKY
   1118  2aee				  -	      .byte	%01111110	; HUSKY
   1119  2aee				  -	      .byte	%00001110	; HUSKY
   1120  2aee				  -	      .byte	%11111110	; HUSKY
   1121  2aee				  -	      .byte	%11111100	; HUSKY
   1122  2aee				  -
   1123  2aee				  -			;byte %00000000 ; HUSKY
   1124  2aee				  -
   1125  2aee				  -	      .byte	%11111100	; HUSKY
   1126  2aee				  -	      .byte	%11111110	; HUSKY
   1127  2aee				  -	      .byte	%00001110	; HUSKY
   1128  2aee				  -	      .byte	%11111100	; HUSKY
   1129  2aee				  -	      .byte	%11111100	; HUSKY
   1130  2aee				  -	      .byte	%00001110	; HUSKY
   1131  2aee				  -	      .byte	%11111110	; HUSKY
   1132  2aee				  -	      .byte	%11111100	; HUSKY
   1133  2aee				  -
   1134  2aee				  -			;byte %00000000 ; HUSKY
   1135  2aee				  -
   1136  2aee				  -	      .byte	%00011100	; HUSKY
   1137  2aee				  -	      .byte	%00011100	; HUSKY
   1138  2aee				  -	      .byte	%11111110	; HUSKY
   1139  2aee				  -	      .byte	%11111110	; HUSKY
   1140  2aee				  -	      .byte	%11011100	; HUSKY
   1141  2aee				  -	      .byte	%11011100	; HUSKY
   1142  2aee				  -	      .byte	%00011100	; HUSKY
   1143  2aee				  -	      .byte	%00011100	; HUSKY
   1144  2aee				  -
   1145  2aee				  -			;byte %00000000 ; HUSKY
   1146  2aee				  -
   1147  2aee				  -	      .byte	%11111100	; HUSKY
   1148  2aee				  -	      .byte	%11111110	; HUSKY
   1149  2aee				  -	      .byte	%00001110	; HUSKY
   1150  2aee				  -	      .byte	%11111110	; HUSKY
   1151  2aee				  -	      .byte	%11111100	; HUSKY
   1152  2aee				  -	      .byte	%11100000	; HUSKY
   1153  2aee				  -	      .byte	%11111110	; HUSKY
   1154  2aee				  -	      .byte	%11111110	; HUSKY
   1155  2aee				  -
   1156  2aee				  -			;byte %00000000 ; HUSKY
   1157  2aee				  -
   1158  2aee				  -	      .byte	%01111100	; HUSKY
   1159  2aee				  -	      .byte	%11111110	; HUSKY
   1160  2aee				  -	      .byte	%11101110	; HUSKY
   1161  2aee				  -	      .byte	%11111110	; HUSKY
   1162  2aee				  -	      .byte	%11111100	; HUSKY
   1163  2aee				  -	      .byte	%11100000	; HUSKY
   1164  2aee				  -	      .byte	%11111110	; HUSKY
   1165  2aee				  -	      .byte	%01111110	; HUSKY
   1166  2aee				  -
   1167  2aee				  -			;byte %00000000 ; HUSKY
   1168  2aee				  -
   1169  2aee				  -	      .byte	%00111000	; HUSKY
   1170  2aee				  -	      .byte	%00111000	; HUSKY
   1171  2aee				  -	      .byte	%00111000	; HUSKY
   1172  2aee				  -	      .byte	%00111000	; HUSKY
   1173  2aee				  -	      .byte	%00011100	; HUSKY
   1174  2aee				  -	      .byte	%00001110	; HUSKY
   1175  2aee				  -	      .byte	%11111110	; HUSKY
   1176  2aee				  -	      .byte	%11111110	; HUSKY
   1177  2aee				  -
   1178  2aee				  -			;byte %00000000 ; HUSKY
   1179  2aee				  -
   1180  2aee				  -	      .byte	%01111100	; HUSKY
   1181  2aee				  -	      .byte	%11111110	; HUSKY
   1182  2aee				  -	      .byte	%11101110	; HUSKY
   1183  2aee				  -	      .byte	%11111110	; HUSKY
   1184  2aee				  -	      .byte	%01111100	; HUSKY
   1185  2aee				  -	      .byte	%11101110	; HUSKY
   1186  2aee				  -	      .byte	%11111110	; HUSKY
   1187  2aee				  -	      .byte	%01111100	; HUSKY
   1188  2aee				  -
   1189  2aee				  -			;byte %00000000 ; HUSKY
   1190  2aee				  -
   1191  2aee				  -	      .byte	%11111100	; HUSKY
   1192  2aee				  -	      .byte	%11111110	; HUSKY
   1193  2aee				  -	      .byte	%00001110	; HUSKY
   1194  2aee				  -	      .byte	%01111110	; HUSKY
   1195  2aee				  -	      .byte	%11111110	; HUSKY
   1196  2aee				  -	      .byte	%11101110	; HUSKY
   1197  2aee				  -	      .byte	%11111110	; HUSKY
   1198  2aee				  -	      .byte	%01111100	; HUSKY
   1199  2aee				  -
   1200  2aee					      endif		; HUSKY
   1201  2aee
   1202  2aee
   1203  2aee				  -	      if	fontstyle == SNAKE
   1204  2aee				  -
   1205  2aee				  -			;byte %00000000 ; SNAKE
   1206  2aee				  -
   1207  2aee				  -	      .byte	%01111110	; SNAKE
   1208  2aee				  -	      .byte	%01000010	; SNAKE
   1209  2aee				  -	      .byte	%01000010	; SNAKE
   1210  2aee				  -	      .byte	%01000010	; SNAKE
   1211  2aee				  -	      .byte	%01000010	; SNAKE
   1212  2aee				  -	      .byte	%01000010	; SNAKE
   1213  2aee				  -	      .byte	%01000010	; SNAKE
   1214  2aee				  -	      .byte	%01111110	; SNAKE
   1215  2aee				  -
   1216  2aee				  -			;byte %00000000 ; SNAKE
   1217  2aee				  -
   1218  2aee				  -	      .byte	%00111000	; SNAKE
   1219  2aee				  -	      .byte	%00101000	; SNAKE
   1220  2aee				  -	      .byte	%00001000	; SNAKE
   1221  2aee				  -	      .byte	%00001000	; SNAKE
   1222  2aee				  -	      .byte	%00001000	; SNAKE
   1223  2aee				  -	      .byte	%00001000	; SNAKE
   1224  2aee				  -	      .byte	%00001000	; SNAKE
   1225  2aee				  -	      .byte	%00111000	; SNAKE
   1226  2aee				  -
   1227  2aee				  -			;byte %00000000 ; SNAKE
   1228  2aee				  -
   1229  2aee				  -	      .byte	%01111110	; SNAKE
   1230  2aee				  -	      .byte	%01000010	; SNAKE
   1231  2aee				  -	      .byte	%01000110	; SNAKE
   1232  2aee				  -	      .byte	%01000000	; SNAKE
   1233  2aee				  -	      .byte	%01111110	; SNAKE
   1234  2aee				  -	      .byte	%00000010	; SNAKE
   1235  2aee				  -	      .byte	%01000010	; SNAKE
   1236  2aee				  -	      .byte	%01111110	; SNAKE
   1237  2aee				  -
   1238  2aee				  -			;byte %00000000 ; SNAKE
   1239  2aee				  -
   1240  2aee				  -	      .byte	%01111110	; SNAKE
   1241  2aee				  -	      .byte	%01000010	; SNAKE
   1242  2aee				  -	      .byte	%01100010	; SNAKE
   1243  2aee				  -	      .byte	%00000010	; SNAKE
   1244  2aee				  -	      .byte	%01111110	; SNAKE
   1245  2aee				  -	      .byte	%00000010	; SNAKE
   1246  2aee				  -	      .byte	%01000010	; SNAKE
   1247  2aee				  -	      .byte	%01111110	; SNAKE
   1248  2aee				  -
   1249  2aee				  -			;byte %00000000 ; SNAKE
   1250  2aee				  -
   1251  2aee				  -	      .byte	%00001110	; SNAKE
   1252  2aee				  -	      .byte	%00001010	; SNAKE
   1253  2aee				  -	      .byte	%00000010	; SNAKE
   1254  2aee				  -	      .byte	%01111110	; SNAKE
   1255  2aee				  -	      .byte	%01000010	; SNAKE
   1256  2aee				  -	      .byte	%01000010	; SNAKE
   1257  2aee				  -	      .byte	%01000010	; SNAKE
   1258  2aee				  -	      .byte	%01100110	; SNAKE
   1259  2aee				  -
   1260  2aee				  -			;byte %00000000 ; SNAKE
   1261  2aee				  -
   1262  2aee				  -	      .byte	%01111110	; SNAKE
   1263  2aee				  -	      .byte	%01000010	; SNAKE
   1264  2aee				  -	      .byte	%01100010	; SNAKE
   1265  2aee				  -	      .byte	%00000010	; SNAKE
   1266  2aee				  -	      .byte	%01111110	; SNAKE
   1267  2aee				  -	      .byte	%01000000	; SNAKE
   1268  2aee				  -	      .byte	%01000010	; SNAKE
   1269  2aee				  -	      .byte	%01111110	; SNAKE
   1270  2aee				  -
   1271  2aee				  -			;byte %00000000 ; SNAKE
   1272  2aee				  -
   1273  2aee				  -	      .byte	%01111110	; SNAKE
   1274  2aee				  -	      .byte	%01000010	; SNAKE
   1275  2aee				  -	      .byte	%01000010	; SNAKE
   1276  2aee				  -	      .byte	%01111110	; SNAKE
   1277  2aee				  -	      .byte	%01000000	; SNAKE
   1278  2aee				  -	      .byte	%01000110	; SNAKE
   1279  2aee				  -	      .byte	%01000010	; SNAKE
   1280  2aee				  -	      .byte	%01111110	; SNAKE
   1281  2aee				  -
   1282  2aee				  -			;byte %00000000 ; SNAKE
   1283  2aee				  -
   1284  2aee				  -	      .byte	%00000110	; SNAKE
   1285  2aee				  -	      .byte	%00000010	; SNAKE
   1286  2aee				  -	      .byte	%00000010	; SNAKE
   1287  2aee				  -	      .byte	%00000010	; SNAKE
   1288  2aee				  -	      .byte	%00000010	; SNAKE
   1289  2aee				  -	      .byte	%01100010	; SNAKE
   1290  2aee				  -	      .byte	%01000010	; SNAKE
   1291  2aee				  -	      .byte	%01111110	; SNAKE
   1292  2aee				  -
   1293  2aee				  -			;byte %00000000 ; SNAKE
   1294  2aee				  -
   1295  2aee				  -	      .byte	%01111110	; SNAKE
   1296  2aee				  -	      .byte	%01000010	; SNAKE
   1297  2aee				  -	      .byte	%01000010	; SNAKE
   1298  2aee				  -	      .byte	%01000010	; SNAKE
   1299  2aee				  -	      .byte	%01111110	; SNAKE
   1300  2aee				  -	      .byte	%01000010	; SNAKE
   1301  2aee				  -	      .byte	%01000010	; SNAKE
   1302  2aee				  -	      .byte	%01111110	; SNAKE
   1303  2aee				  -
   1304  2aee				  -			;byte %00000000 ; SNAKE
   1305  2aee				  -
   1306  2aee				  -	      .byte	%00001110	; SNAKE
   1307  2aee				  -	      .byte	%00001010	; SNAKE
   1308  2aee				  -	      .byte	%00000010	; SNAKE
   1309  2aee				  -	      .byte	%00000010	; SNAKE
   1310  2aee				  -	      .byte	%01111110	; SNAKE
   1311  2aee				  -	      .byte	%01000010	; SNAKE
   1312  2aee				  -	      .byte	%01000010	; SNAKE
   1313  2aee				  -	      .byte	%01111110	; SNAKE
   1314  2aee				  -
   1315  2aee				  -
   1316  2aee					      endif		; SNAKE
   1317  2aee
   1318  2aee				  -	      if	fontstyle == PLOK
   1319  2aee				  -
   1320  2aee				  -			;byte %00000000 ; PLOK
   1321  2aee				  -
   1322  2aee				  -	      .byte	%00000000	; PLOK
   1323  2aee				  -	      .byte	%00111000	; PLOK
   1324  2aee				  -	      .byte	%01100100	; PLOK
   1325  2aee				  -	      .byte	%01100010	; PLOK
   1326  2aee				  -	      .byte	%01100010	; PLOK
   1327  2aee				  -	      .byte	%00110110	; PLOK
   1328  2aee				  -	      .byte	%00011100	; PLOK
   1329  2aee				  -	      .byte	%00000000	; PLOK
   1330  2aee				  -
   1331  2aee				  -			;byte %00000000 ; PLOK
   1332  2aee				  -
   1333  2aee				  -	      .byte	%00000000	; PLOK
   1334  2aee				  -	      .byte	%00010000	; PLOK
   1335  2aee				  -	      .byte	%00011100	; PLOK
   1336  2aee				  -	      .byte	%00011100	; PLOK
   1337  2aee				  -	      .byte	%00011000	; PLOK
   1338  2aee				  -	      .byte	%00111000	; PLOK
   1339  2aee				  -	      .byte	%00011000	; PLOK
   1340  2aee				  -	      .byte	%00000000	; PLOK
   1341  2aee				  -
   1342  2aee				  -			;byte %00000000 ; PLOK
   1343  2aee				  -
   1344  2aee				  -	      .byte	%00000000	; PLOK
   1345  2aee				  -	      .byte	%00001110	; PLOK
   1346  2aee				  -	      .byte	%01111110	; PLOK
   1347  2aee				  -	      .byte	%00011000	; PLOK
   1348  2aee				  -	      .byte	%00001100	; PLOK
   1349  2aee				  -	      .byte	%00000110	; PLOK
   1350  2aee				  -	      .byte	%00111100	; PLOK
   1351  2aee				  -	      .byte	%00000000	; PLOK
   1352  2aee				  -
   1353  2aee				  -			;byte %00000000 ; PLOK
   1354  2aee				  -
   1355  2aee				  -	      .byte	%00000000	; PLOK
   1356  2aee				  -	      .byte	%00111100	; PLOK
   1357  2aee				  -	      .byte	%01101110	; PLOK
   1358  2aee				  -	      .byte	%00001110	; PLOK
   1359  2aee				  -	      .byte	%00011100	; PLOK
   1360  2aee				  -	      .byte	%00000110	; PLOK
   1361  2aee				  -	      .byte	%01111100	; PLOK
   1362  2aee				  -	      .byte	%00000000	; PLOK
   1363  2aee				  -
   1364  2aee				  -			;byte %00000000 ; PLOK
   1365  2aee				  -
   1366  2aee				  -	      .byte	%00000000	; PLOK
   1367  2aee				  -	      .byte	%00011000	; PLOK
   1368  2aee				  -	      .byte	%01111110	; PLOK
   1369  2aee				  -	      .byte	%01101100	; PLOK
   1370  2aee				  -	      .byte	%00100100	; PLOK
   1371  2aee				  -	      .byte	%00110000	; PLOK
   1372  2aee				  -	      .byte	%00110000	; PLOK
   1373  2aee				  -	      .byte	%00000000	; PLOK
   1374  2aee				  -
   1375  2aee				  -			;byte %00000000 ; PLOK
   1376  2aee				  -
   1377  2aee				  -	      .byte	%00000000	; PLOK
   1378  2aee				  -	      .byte	%00111100	; PLOK
   1379  2aee				  -	      .byte	%01001110	; PLOK
   1380  2aee				  -	      .byte	%00011100	; PLOK
   1381  2aee				  -	      .byte	%01100000	; PLOK
   1382  2aee				  -	      .byte	%01111100	; PLOK
   1383  2aee				  -	      .byte	%00011100	; PLOK
   1384  2aee				  -	      .byte	%00000000	; PLOK
   1385  2aee				  -
   1386  2aee				  -			;byte %00000000 ; PLOK
   1387  2aee				  -
   1388  2aee				  -	      .byte	%00000000	; PLOK
   1389  2aee				  -	      .byte	%00111100	; PLOK
   1390  2aee				  -	      .byte	%01000110	; PLOK
   1391  2aee				  -	      .byte	%01101100	; PLOK
   1392  2aee				  -	      .byte	%01110000	; PLOK
   1393  2aee				  -	      .byte	%00111000	; PLOK
   1394  2aee				  -	      .byte	%00010000	; PLOK
   1395  2aee				  -	      .byte	%00000000	; PLOK
   1396  2aee				  -
   1397  2aee				  -			;byte %00000000 ; PLOK
   1398  2aee				  -
   1399  2aee				  -	      .byte	%00000000	; PLOK
   1400  2aee				  -	      .byte	%00111100	; PLOK
   1401  2aee				  -	      .byte	%00011100	; PLOK
   1402  2aee				  -	      .byte	%00001100	; PLOK
   1403  2aee				  -	      .byte	%00000110	; PLOK
   1404  2aee				  -	      .byte	%01111110	; PLOK
   1405  2aee				  -	      .byte	%00110000	; PLOK
   1406  2aee				  -	      .byte	%00000000	; PLOK
   1407  2aee				  -
   1408  2aee				  -			;byte %00000000 ; PLOK
   1409  2aee				  -
   1410  2aee				  -	      .byte	%00000000	; PLOK
   1411  2aee				  -	      .byte	%00111100	; PLOK
   1412  2aee				  -	      .byte	%01001110	; PLOK
   1413  2aee				  -	      .byte	%01101110	; PLOK
   1414  2aee				  -	      .byte	%00111100	; PLOK
   1415  2aee				  -	      .byte	%01100100	; PLOK
   1416  2aee				  -	      .byte	%00111000	; PLOK
   1417  2aee				  -	      .byte	%00000000	; PLOK
   1418  2aee				  -
   1419  2aee				  -			;byte %00000000 ; PLOK
   1420  2aee				  -
   1421  2aee				  -	      .byte	%00000000	; PLOK
   1422  2aee				  -	      .byte	%00011000	; PLOK
   1423  2aee				  -	      .byte	%00001100	; PLOK
   1424  2aee				  -	      .byte	%00011100	; PLOK
   1425  2aee				  -	      .byte	%00100110	; PLOK
   1426  2aee				  -	      .byte	%01001110	; PLOK
   1427  2aee				  -	      .byte	%00111100	; PLOK
   1428  2aee				  -	      .byte	%00000000	; PLOK
   1429  2aee				  -
   1430  2aee					      endif		; PLOK
   1431  2aee
   1432  2aee							; ### any characters that aren't font specific follow... 
   1433  2aee
   1434  2aee				  -	      ifconst	fontcharSPACE
   1435  2aee				  -			;byte %00000000 ; SYMBOLS
   1436  2aee				  -
   1437  2aee				  -	      .byte	%00000000	; SYMBOLS
   1438  2aee				  -	      .byte	%00000000	; SYMBOLS
   1439  2aee				  -	      .byte	%00000000	; SYMBOLS
   1440  2aee				  -	      .byte	%00000000	; SYMBOLS
   1441  2aee				  -	      .byte	%00000000	; SYMBOLS
   1442  2aee				  -	      .byte	%00000000	; SYMBOLS
   1443  2aee				  -	      .byte	%00000000	; SYMBOLS
   1444  2aee				  -	      .byte	%00000000	; SYMBOLS
   1445  2aee				  -
   1446  2aee				  -			;byte %00000000 ; SYMBOLS
   1447  2aee					      endif		; fontcharSPACE
   1448  2aee
   1449  2aee				  -	      ifconst	fontcharDOLLAR
   1450  2aee				  -			;byte %00000000 ; SYMBOLS
   1451  2aee				  -
   1452  2aee				  -	      .byte	%00000000	; SYMBOLS
   1453  2aee				  -	      .byte	%00010000	; SYMBOLS
   1454  2aee				  -	      .byte	%01111100	; SYMBOLS
   1455  2aee				  -	      .byte	%00010010	; SYMBOLS
   1456  2aee				  -	      .byte	%01111100	; SYMBOLS
   1457  2aee				  -	      .byte	%10010000	; SYMBOLS
   1458  2aee				  -	      .byte	%01111100	; SYMBOLS
   1459  2aee				  -	      .byte	%00010000	; SYMBOLS
   1460  2aee				  -
   1461  2aee				  -			;byte %00000000 ; SYMBOLS
   1462  2aee				  -
   1463  2aee					      endif		; fontcharDOLLAR
   1464  2aee
   1465  2aee				  -	      ifconst	fontcharPOUND
   1466  2aee				  -			;byte %00000000 ; SYMBOLS
   1467  2aee				  -
   1468  2aee				  -	      .byte	%01111110	; SYMBOLS
   1469  2aee				  -	      .byte	%01000000	; SYMBOLS
   1470  2aee				  -	      .byte	%00100000	; SYMBOLS
   1471  2aee				  -	      .byte	%00100000	; SYMBOLS
   1472  2aee				  -	      .byte	%01111000	; SYMBOLS
   1473  2aee				  -	      .byte	%00100000	; SYMBOLS
   1474  2aee				  -	      .byte	%00100010	; SYMBOLS
   1475  2aee				  -	      .byte	%00011100	; SYMBOLS
   1476  2aee				  -
   1477  2aee				  -			;byte %00000000 ; SYMBOLS
   1478  2aee				  -
   1479  2aee					      endif		; fontcharPOUND
   1480  2aee
   1481  2aee
   1482  2aee				  -	      ifconst	fontcharMRHAPPY
   1483  2aee				  -			;byte %00000000 ; SYMBOLS
   1484  2aee				  -
   1485  2aee				  -	      .byte	%00111100	; SYMBOLS
   1486  2aee				  -	      .byte	%01100110	; SYMBOLS
   1487  2aee				  -	      .byte	%01011010	; SYMBOLS
   1488  2aee				  -	      .byte	%01111110	; SYMBOLS
   1489  2aee				  -	      .byte	%01111110	; SYMBOLS
   1490  2aee				  -	      .byte	%01011010	; SYMBOLS
   1491  2aee				  -	      .byte	%01111110	; SYMBOLS
   1492  2aee				  -	      .byte	%00111100	; SYMBOLS
   1493  2aee				  -
   1494  2aee				  -			;byte %00000000 ; SYMBOLS
   1495  2aee				  -
   1496  2aee					      endif		; fontcharMRHAPPY
   1497  2aee
   1498  2aee				  -	      ifconst	fontcharMRSAD
   1499  2aee				  -			;byte %00000000 ; SYMBOLS
   1500  2aee				  -
   1501  2aee				  -	      .byte	%00111100	; SYMBOLS
   1502  2aee				  -	      .byte	%01011010	; SYMBOLS
   1503  2aee				  -	      .byte	%01100110	; SYMBOLS
   1504  2aee				  -	      .byte	%01111110	; SYMBOLS
   1505  2aee				  -	      .byte	%01111110	; SYMBOLS
   1506  2aee				  -	      .byte	%01011010	; SYMBOLS
   1507  2aee				  -	      .byte	%01111110	; SYMBOLS
   1508  2aee				  -	      .byte	%00111100	; SYMBOLS
   1509  2aee				  -
   1510  2aee				  -			;byte %00000000 ; SYMBOLS
   1511  2aee				  -
   1512  2aee					      endif		; fontcharMRSAD
   1513  2aee
   1514  2aee
   1515  2aee				  -	      ifconst	fontcharCOPYRIGHT
   1516  2aee				  -			;byte %00000000 ; SYMBOLS
   1517  2aee				  -
   1518  2aee				  -	      .byte	%00000000	; SYMBOLS
   1519  2aee				  -	      .byte	%00111000	; SYMBOLS
   1520  2aee				  -	      .byte	%01000100	; SYMBOLS
   1521  2aee				  -	      .byte	%10111010	; SYMBOLS
   1522  2aee				  -	      .byte	%10100010	; SYMBOLS
   1523  2aee				  -	      .byte	%10111010	; SYMBOLS
   1524  2aee				  -	      .byte	%01000100	; SYMBOLS
   1525  2aee				  -	      .byte	%00111000	; SYMBOLS
   1526  2aee				  -
   1527  2aee				  -			;byte %00000000 ; SYMBOLS
   1528  2aee				  -
   1529  2aee					      endif		; fontcharCOPYRIGHT
   1530  2aee
   1531  2aee
   1532  2aee				  -	      ifconst	fontcharFUJI
   1533  2aee				  -
   1534  2aee				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1535  2aee				  -
   1536  2aee				  -	      .byte	%01110000	; SYMBOLS
   1537  2aee				  -	      .byte	%01111001	; SYMBOLS
   1538  2aee				  -	      .byte	%00011101	; SYMBOLS
   1539  2aee				  -	      .byte	%00001101	; SYMBOLS
   1540  2aee				  -	      .byte	%00001101	; SYMBOLS
   1541  2aee				  -	      .byte	%00001101	; SYMBOLS
   1542  2aee				  -	      .byte	%00001101	; SYMBOLS
   1543  2aee				  -	      .byte	%00000000	; SYMBOLS
   1544  2aee				  -
   1545  2aee				  -			;byte %00000000 ; SYMBOLS
   1546  2aee				  -
   1547  2aee				  -	      .byte	%00001110	; SYMBOLS
   1548  2aee				  -	      .byte	%10011110	; SYMBOLS
   1549  2aee				  -	      .byte	%10111000	; SYMBOLS
   1550  2aee				  -	      .byte	%10110000	; SYMBOLS
   1551  2aee				  -	      .byte	%10110000	; SYMBOLS
   1552  2aee				  -	      .byte	%10110000	; SYMBOLS
   1553  2aee				  -	      .byte	%10110000	; SYMBOLS
   1554  2aee				  -	      .byte	%00000000	; SYMBOLS
   1555  2aee				  -
   1556  2aee				  -			;byte %00000000 ; SYMBOLS
   1557  2aee				  -
   1558  2aee					      endif		; fontcharFUJI
   1559  2aee
   1560  2aee
   1561  2aee				  -	      ifconst	fontcharHEART
   1562  2aee				  -			;byte %00000000 ; SYMBOLS
   1563  2aee				  -
   1564  2aee				  -	      .byte	%00010000	; SYMBOLS
   1565  2aee				  -	      .byte	%00111000	; SYMBOLS
   1566  2aee				  -	      .byte	%01111100	; SYMBOLS
   1567  2aee				  -	      .byte	%01111100	; SYMBOLS
   1568  2aee				  -	      .byte	%11111110	; SYMBOLS
   1569  2aee				  -	      .byte	%11111110	; SYMBOLS
   1570  2aee				  -	      .byte	%11101110	; SYMBOLS
   1571  2aee				  -	      .byte	%01000100	; SYMBOLS
   1572  2aee				  -
   1573  2aee				  -			;byte %00000000 ; SYMBOLS
   1574  2aee				  -
   1575  2aee					      endif		; fontcharHEART
   1576  2aee
   1577  2aee				  -	      ifconst	fontcharDIAMOND
   1578  2aee				  -			;byte %00000000 ; SYMBOLS
   1579  2aee				  -
   1580  2aee				  -	      .byte	%00010000	; SYMBOLS
   1581  2aee				  -	      .byte	%00111000	; SYMBOLS
   1582  2aee				  -	      .byte	%01111100	; SYMBOLS
   1583  2aee				  -	      .byte	%11111110	; SYMBOLS
   1584  2aee				  -	      .byte	%11111110	; SYMBOLS
   1585  2aee				  -	      .byte	%01111100	; SYMBOLS
   1586  2aee				  -	      .byte	%00111000	; SYMBOLS
   1587  2aee				  -	      .byte	%00010000	; SYMBOLS
   1588  2aee				  -
   1589  2aee				  -			;byte %00000000 ; SYMBOLS
   1590  2aee				  -
   1591  2aee					      endif		; fontcharDIAMOND
   1592  2aee
   1593  2aee				  -	      ifconst	fontcharSPADE
   1594  2aee				  -			;byte %00000000 ; SYMBOLS
   1595  2aee				  -
   1596  2aee				  -	      .byte	%00111000	; SYMBOLS
   1597  2aee				  -	      .byte	%00010000	; SYMBOLS
   1598  2aee				  -	      .byte	%01010100	; SYMBOLS
   1599  2aee				  -	      .byte	%11111110	; SYMBOLS
   1600  2aee				  -	      .byte	%11111110	; SYMBOLS
   1601  2aee				  -	      .byte	%01111100	; SYMBOLS
   1602  2aee				  -	      .byte	%00111000	; SYMBOLS
   1603  2aee				  -	      .byte	%00010000	; SYMBOLS
   1604  2aee				  -
   1605  2aee				  -			;byte %00000000 ; SYMBOLS
   1606  2aee				  -
   1607  2aee					      endif		; fontcharSPADE
   1608  2aee
   1609  2aee				  -	      ifconst	fontcharCLUB
   1610  2aee				  -			;byte %00000000 ; SYMBOLS
   1611  2aee				  -
   1612  2aee				  -	      .byte	%00111000	; SYMBOLS
   1613  2aee				  -	      .byte	%00010000	; SYMBOLS
   1614  2aee				  -	      .byte	%11010110	; SYMBOLS
   1615  2aee				  -	      .byte	%11111110	; SYMBOLS
   1616  2aee				  -	      .byte	%11010110	; SYMBOLS
   1617  2aee				  -	      .byte	%00111000	; SYMBOLS
   1618  2aee				  -	      .byte	%00111000	; SYMBOLS
   1619  2aee				  -	      .byte	%00000000	; SYMBOLS
   1620  2aee				  -
   1621  2aee				  -			;byte %00000000 ; SYMBOLS
   1622  2aee				  -
   1623  2aee					      endif		; fontcharCLUB
   1624  2aee
   1625  2aee
   1626  2aee				  -	      ifconst	fontcharCOLON
   1627  2aee				  -			;byte %00000000 ; SYMBOLS
   1628  2aee				  -
   1629  2aee				  -	      .byte	%00000000	; SYMBOLS
   1630  2aee				  -	      .byte	%00011000	; SYMBOLS
   1631  2aee				  -	      .byte	%00011000	; SYMBOLS
   1632  2aee				  -	      .byte	%00000000	; SYMBOLS
   1633  2aee				  -	      .byte	%00000000	; SYMBOLS
   1634  2aee				  -	      .byte	%00011000	; SYMBOLS
   1635  2aee				  -	      .byte	%00011000	; SYMBOLS
   1636  2aee				  -	      .byte	%00000000	; SYMBOLS
   1637  2aee				  -
   1638  2aee				  -			;byte %00000000 ; SYMBOLS
   1639  2aee				  -
   1640  2aee					      endif		; fontcharCOLON
   1641  2aee
   1642  2aee
   1643  2aee				  -	      ifconst	fontcharBLOCK
   1644  2aee				  -
   1645  2aee				  -			;byte %00000000 ; SYMBOLS
   1646  2aee				  -
   1647  2aee				  -	      .byte	%11111111	; SYMBOLS
   1648  2aee				  -	      .byte	%11111111	; SYMBOLS
   1649  2aee				  -	      .byte	%11111111	; SYMBOLS
   1650  2aee				  -	      .byte	%11111111	; SYMBOLS
   1651  2aee				  -	      .byte	%11111111	; SYMBOLS
   1652  2aee				  -	      .byte	%11111111	; SYMBOLS
   1653  2aee				  -	      .byte	%11111111	; SYMBOLS
   1654  2aee				  -	      .byte	%11111111	; SYMBOLS
   1655  2aee				  -
   1656  2aee				  -			;byte %00000000 ; SYMBOLS
   1657  2aee				  -
   1658  2aee					      endif		; fontcharBLOCK
   1659  2aee
   1660  2aee				  -	      ifconst	fontcharUNDERLINE
   1661  2aee				  -
   1662  2aee				  -			;byte %00000000 ; SYMBOLS
   1663  2aee				  -
   1664  2aee				  -	      .byte	%11111111	; SYMBOLS
   1665  2aee				  -	      .byte	%00000000	; SYMBOLS
   1666  2aee				  -	      .byte	%00000000	; SYMBOLS
   1667  2aee				  -	      .byte	%00000000	; SYMBOLS
   1668  2aee				  -	      .byte	%00000000	; SYMBOLS
   1669  2aee				  -	      .byte	%00000000	; SYMBOLS
   1670  2aee				  -	      .byte	%00000000	; SYMBOLS
   1671  2aee				  -	      .byte	%00000000	; SYMBOLS
   1672  2aee				  -
   1673  2aee				  -			;byte %00000000 ; SYMBOLS
   1674  2aee				  -
   1675  2aee					      endif		; fontcharUNDERLINE
   1676  2aee
   1677  2aee				  -	      ifconst	fontcharARISIDE
   1678  2aee				  -			;byte %00000000 ; SYMBOLS
   1679  2aee				  -
   1680  2aee				  -	      .byte	%00000000	; SYMBOLS
   1681  2aee				  -	      .byte	%00101010	; SYMBOLS
   1682  2aee				  -	      .byte	%00101010	; SYMBOLS
   1683  2aee				  -	      .byte	%00101100	; SYMBOLS
   1684  2aee				  -	      .byte	%01111111	; SYMBOLS
   1685  2aee				  -	      .byte	%00110111	; SYMBOLS
   1686  2aee				  -	      .byte	%00000010	; SYMBOLS
   1687  2aee				  -	      .byte	%00000001	; SYMBOLS
   1688  2aee				  -
   1689  2aee				  -			;byte %00000000 ; SYMBOLS
   1690  2aee				  -
   1691  2aee					      endif		; fontcharARISIDE
   1692  2aee
   1693  2aee				  -	      ifconst	fontcharARIFACE
   1694  2aee				  -			;byte %00000000 ; SYMBOLS
   1695  2aee				  -
   1696  2aee				  -	      .byte	%00001000	; SYMBOLS
   1697  2aee				  -	      .byte	%00011100	; SYMBOLS
   1698  2aee				  -	      .byte	%00111110	; SYMBOLS
   1699  2aee				  -	      .byte	%00101010	; SYMBOLS
   1700  2aee				  -	      .byte	%00011100	; SYMBOLS
   1701  2aee				  -	      .byte	%01010100	; SYMBOLS
   1702  2aee				  -	      .byte	%00100100	; SYMBOLS
   1703  2aee				  -	      .byte	%00000010	; SYMBOLS
   1704  2aee				  -
   1705  2aee				  -			;byte %00000000 ; SYMBOLS
   1706  2aee				  -
   1707  2aee				  -
   1708  2aee					      endif		; fontcharARIRACE
   1709  2aee
------- FILE titlescreen/asm/titlescreen.asm
    303  2aee					      endif
    304  2aee
    305  2aee				  -	      ifconst	mk_gameselect_on
    306  2aee				  -	      include	"titlescreen/gameselect_image.asm"
    307  2aee					      endif
    308  2aee
    309  2aee				  -	      ifconst	mk_player_on
    310  2aee				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2aee					      endif		;mk_player_on
    312  2aee
    313  2aee
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex4-color_by_flicker\ex4-color_by_flicker.bas.asm
    282  2aee
    283  2aee				   .
    284  2aee							; 
    285  2aee
    286  2aee					      if	ECHO2
      1254 bytes of ROM space left in bank 2
    287  2aee					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    288  2aee					      endif
    289  2aee		       00 01	   ECHO2      =	1
    290  2fd4					      ORG	$2FF4-bscode_length
    291  2fd4					      RORG	$BFF4-bscode_length
    292  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    293  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    294  2fd6				  -	      stx	FASTFETCH
    295  2fd6					      endif
    296  2fd6		       9a		      txs
    297  2fd7				  -	      if	bankswitch == 64
    298  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    299  2fd7					      else
    300  2fd7		       a9 f2		      lda	#>(start-1)
    301  2fd9					      endif
    302  2fd9		       48		      pha
    303  2fda		       a9 4f		      lda	#<(start-1)
    304  2fdc		       48		      pha
    305  2fdd		       48		      pha
    306  2fde		       8a		      txa
    307  2fdf		       48		      pha
    308  2fe0		       ba		      tsx
    309  2fe1					      if	bankswitch != 64
    310  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    311  2fe3		       2a		      rol
    312  2fe4		       2a		      rol
    313  2fe5		       2a		      rol
    314  2fe6		       2a		      rol
    315  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    316  2fe9		       aa		      tax
    317  2fea		       e8		      inx
    318  2feb				  -	      else
    319  2feb				  -	      lda	4,x	; get high byte of return address
    320  2feb				  -	      tay
    321  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    322  2feb				  -	      sta	4,x
    323  2feb				  -	      tya
    324  2feb				  -	      lsr
    325  2feb				  -	      lsr
    326  2feb				  -	      lsr
    327  2feb				  -	      lsr
    328  2feb				  -	      tax
    329  2feb				  -	      inx
    330  2feb					      endif
    331  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    332  2fee		       68		      pla
    333  2fef		       aa		      tax
    334  2ff0		       68		      pla
    335  2ff1		       60		      rts
    336  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    337  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    338  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    339  2ff2					      endif
    340  2ffc					      ORG	$2FFC
    341  2ffc					      RORG	$BFFC
    342  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    343  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    344  3000					      ORG	$3000
    345  3000					      RORG	$D000
    346  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    347  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    348  3000					      endif
    349  3000		       00 01	   ECHO3      =	1
    350  3fd4					      ORG	$3FF4-bscode_length
    351  3fd4					      RORG	$DFF4-bscode_length
    352  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    353  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    354  3fd6				  -	      stx	FASTFETCH
    355  3fd6					      endif
    356  3fd6		       9a		      txs
    357  3fd7				  -	      if	bankswitch == 64
    358  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    359  3fd7					      else
    360  3fd7		       a9 f2		      lda	#>(start-1)
    361  3fd9					      endif
    362  3fd9		       48		      pha
    363  3fda		       a9 4f		      lda	#<(start-1)
    364  3fdc		       48		      pha
    365  3fdd		       48		      pha
    366  3fde		       8a		      txa
    367  3fdf		       48		      pha
    368  3fe0		       ba		      tsx
    369  3fe1					      if	bankswitch != 64
    370  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    371  3fe3		       2a		      rol
    372  3fe4		       2a		      rol
    373  3fe5		       2a		      rol
    374  3fe6		       2a		      rol
    375  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    376  3fe9		       aa		      tax
    377  3fea		       e8		      inx
    378  3feb				  -	      else
    379  3feb				  -	      lda	4,x	; get high byte of return address
    380  3feb				  -	      tay
    381  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    382  3feb				  -	      sta	4,x
    383  3feb				  -	      tya
    384  3feb				  -	      lsr
    385  3feb				  -	      lsr
    386  3feb				  -	      lsr
    387  3feb				  -	      lsr
    388  3feb				  -	      tax
    389  3feb				  -	      inx
    390  3feb					      endif
    391  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    392  3fee		       68		      pla
    393  3fef		       aa		      tax
    394  3ff0		       68		      pla
    395  3ff1		       60		      rts
    396  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    397  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    398  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    399  3ff2					      endif
    400  3ffc					      ORG	$3FFC
    401  3ffc					      RORG	$DFFC
    402  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    403  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    404  4000					      ORG	$4000
    405  4000					      RORG	$F000
    406  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
    407  4000
    408  4000							; This is a 2-line kernel!
    409  4000					      ifnconst	vertical_reflect
    410  4000				   kernel
    411  4000					      endif
    412  4000		       85 02		      sta	WSYNC
    413  4002		       a9 ff		      lda	#255
    414  4004		       8d 96 02 	      sta	TIM64T
    415  4007
    416  4007		       a9 01		      lda	#1
    417  4009		       85 27		      sta	VDELBL
    418  400b		       85 25		      sta	VDELP0
    419  400d		       a6 92		      ldx	ballheight
    420  400f		       e8		      inx
    421  4010		       e8		      inx
    422  4011		       86 9f		      stx	temp4
    423  4013		       a5 86		      lda	player1y
    424  4015		       85 9e		      sta	temp3
    425  4017
    426  4017				  -	      ifconst	shakescreen
    427  4017				  -	      jsr	doshakescreen
    428  4017					      else
    429  4017		       a6 90		      ldx	missile0height
    430  4019		       e8		      inx
    431  401a					      endif
    432  401a
    433  401a		       e8		      inx
    434  401b		       86 f6		      stx	stack1
    435  401d
    436  401d		       a5 89		      lda	bally
    437  401f		       85 f7		      sta	stack2
    438  4021
    439  4021		       a5 85		      lda	player0y
    440  4023		       a2 00		      ldx	#0
    441  4025		       85 02		      sta	WSYNC
    442  4027		       86 1b		      stx	GRP0
    443  4029		       86 1c		      stx	GRP1
    444  402b		       86 0e		      stx	PF1L
    445  402d		       86 0f		      stx	PF2
    446  402f		       86 2c		      stx	CXCLR
    447  4031				  -	      ifconst	readpaddle
    448  4031				  -	      stx	paddle
    449  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    451  4033					      endif
    452  4033
    453  4033		       95 9d		      sta	temp2,x
    454  4035
    455  4035							;store these so they can be retrieved later
    456  4035					      ifnconst	pfres
    457  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    458  4037				  -	      else
    459  4037				  -	      ldx	#132-pfres*pfwidth
    460  4037					      endif
    461  4037
    462  4037		       c6 85		      dec	player0y
    463  4039
    464  4039		       a5 91		      lda	missile0y
    465  403b		       85 a0		      sta	temp5
    466  403d		       a5 88		      lda	missile1y
    467  403f		       85 a1		      sta	temp6
    468  4041
    469  4041		       a5 ef		      lda	playfieldpos
    470  4043		       85 9c		      sta	temp1
    471  4045
    472  4045				  -	      ifconst	pfrowheight
    473  4045				  -	      lda	#pfrowheight+2
    474  4045					      else
    475  4045					      ifnconst	pfres
    476  4045		       a9 0a		      lda	#10
    477  4047				  -	      else
    478  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    479  4047					      endif
    480  4047					      endif
    481  4047		       18		      clc
    482  4048		       e5 ef		      sbc	playfieldpos
    483  404a		       85 ef		      sta	playfieldpos
    484  404c		       4c 74 f0 	      jmp	.startkernel
    485  404f
    486  404f				   .skipDrawP0
    487  404f		       a9 00		      lda	#0
    488  4051		       a8		      tay
    489  4052		       4c a2 f0 	      jmp	.continueP0
    490  4055
    491  4055				   .skipDrawP1
    492  4055		       a9 00		      lda	#0
    493  4057		       a8		      tay
    494  4058		       4c 7e f0 	      jmp	.continueP1
    495  405b
    496  405b				   .kerloop		; enter at cycle 59??
    497  405b
    498  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    500  405c				   continuekernel2
    501  405c		       a5 92		      lda	ballheight
    502  405e
    503  405e				  -	      ifconst	pfres
    504  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    505  405e				  -	      sty	PF1L	;3
    506  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    507  405e				  -	      sty	PF2L	;3
    508  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    509  405e				  -	      sty	PF1R	; 3 too early?
    510  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    511  405e				  -	      sty	PF2R	;3
    512  405e					      else
    513  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    514  4060		       84 0e		      sty	PF1L	;3
    515  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    516  4064		       84 0f		      sty	PF2L	;3
    517  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    518  4068		       84 0e		      sty	PF1R	; 3 too early?
    519  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    520  406c		       84 0f		      sty	PF2R	;3
    521  406e					      endif
    522  406e
    523  406e							; should be playfield+$38 for width=2
    524  406e
    525  406e		       c7 89		      dcp	bally
    526  4070		       2a		      rol
    527  4071		       2a		      rol
    528  4072							; rol
    529  4072							; rol
    530  4072				   goback
    531  4072		       85 1f		      sta	ENABL
    532  4074				   .startkernel
    533  4074		       a5 8f		      lda	player1height	;3
    534  4076		       c7 86		      dcp	player1y	;5
    535  4078		       90 db		      bcc	.skipDrawP1	;2
    536  407a		       a4 86		      ldy	player1y	;3
    537  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    538  407e							; so it doesn't cross a page boundary!
    539  407e
    540  407e				   .continueP1
    541  407e		       85 1c		      sta	GRP1	;3
    542  4080
    543  4080					      ifnconst	player1colors
    544  4080		       a5 87		      lda	missile1height	;3
    545  4082		       c7 88		      dcp	missile1y	;5
    546  4084		       2a		      rol		;2
    547  4085		       2a		      rol		;2
    548  4086		       85 1e		      sta	ENAM1	;3
    549  4088				  -	      else
    550  4088				  -	      lda	(player1color),y
    551  4088				  -	      sta	COLUP1
    552  4088				  -	      ifnconst	playercolors
    553  4088				  -	      sleep	7
    554  4088				  -	      else
    555  4088				  -	      lda.w	player0colorstore
    556  4088				  -	      sta	COLUP0
    557  4088				  -	      endif
    558  4088					      endif
    559  4088
    560  4088				  -	      ifconst	pfres
    561  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    562  4088				  -	      sta	PF1L	;3
    563  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    564  4088				  -	      sta	PF2L	;3
    565  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    566  4088				  -	      sta	PF1R	; 3 too early?
    567  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    568  4088				  -	      sta	PF2R	;3
    569  4088					      else
    570  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    571  408a		       85 0e		      sta	PF1L	;3
    572  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    573  408e		       85 0f		      sta	PF2L	;3
    574  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    575  4092		       85 0e		      sta	PF1R	; 3 too early?
    576  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    577  4096		       85 0f		      sta	PF2R	;3
    578  4098					      endif
    579  4098							; sleep 3
    580  4098
    581  4098		       a5 8e		      lda	player0height
    582  409a		       c7 85		      dcp	player0y
    583  409c		       90 b1		      bcc	.skipDrawP0
    584  409e		       a4 85		      ldy	player0y
    585  40a0		       b1 8a		      lda	(player0pointer),y
    586  40a2				   .continueP0
    587  40a2		       85 1b		      sta	GRP0
    588  40a4
    589  40a4					      ifnconst	no_blank_lines
    590  40a4					      ifnconst	playercolors
    591  40a4		       a5 90		      lda	missile0height	;3
    592  40a6		       c7 91		      dcp	missile0y	;5
    593  40a8		       e5 f6		      sbc	stack1
    594  40aa		       85 1d		      sta	ENAM0	;3
    595  40ac				  -	      else
    596  40ac				  -	      lda	(player0color),y
    597  40ac				  -	      sta	player0colorstore
    598  40ac				  -	      sleep	6
    599  40ac					      endif
    600  40ac		       c6 9c		      dec	temp1
    601  40ae		       d0 ab		      bne	continuekernel
    602  40b0				  -	      else
    603  40b0				  -	      dec	temp1
    604  40b0				  -	      beq	altkernel2
    605  40b0				  -	      ifconst	readpaddle
    606  40b0				  -	      ldy	currentpaddle
    607  40b0				  -	      lda	INPT0,y
    608  40b0				  -	      bpl	noreadpaddle
    609  40b0				  -	      inc	paddle
    610  40b0				  -	      jmp	continuekernel2
    611  40b0				  -noreadpaddle
    612  40b0				  -	      sleep	2
    613  40b0				  -	      jmp	continuekernel
    614  40b0				  -	      else
    615  40b0				  -	      ifnconst	playercolors
    616  40b0				  -	      ifconst	PFcolors
    617  40b0				  -	      txa
    618  40b0				  -	      tay
    619  40b0				  -	      lda	(pfcolortable),y
    620  40b0				  -	      ifnconst	backgroundchange
    621  40b0				  -	      sta	COLUPF
    622  40b0				  -	      else
    623  40b0				  -	      sta	COLUBK
    624  40b0				  -	      endif
    625  40b0				  -	      jmp	continuekernel
    626  40b0				  -	      else
    627  40b0				  -	      ifconst	kernelmacrodef
    628  40b0				  -	      kernelmacro
    629  40b0				  -	      else
    630  40b0				  -	      sleep	12
    631  40b0				  -	      endif
    632  40b0				  -	      endif
    633  40b0				  -	      else
    634  40b0				  -	      lda	(player0color),y
    635  40b0				  -	      sta	player0colorstore
    636  40b0				  -	      sleep	4
    637  40b0				  -	      endif
    638  40b0				  -	      jmp	continuekernel
    639  40b0				  -	      endif
    640  40b0				  -altkernel2
    641  40b0				  -	      txa
    642  40b0				  -	      ifnconst	vertical_reflect
    643  40b0				  -	      sbx	#256-pfwidth
    644  40b0				  -	      else
    645  40b0				  -	      sbx	#256-pfwidth/2
    646  40b0				  -	      endif
    647  40b0				  -	      bmi	lastkernelline
    648  40b0				  -	      ifconst	pfrowheight
    649  40b0				  -	      lda	#pfrowheight
    650  40b0				  -	      else
    651  40b0				  -	      ifnconst	pfres
    652  40b0				  -	      lda	#8
    653  40b0				  -	      else
    654  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    655  40b0				  -	      endif
    656  40b0				  -	      endif
    657  40b0				  -	      sta	temp1
    658  40b0				  -	      jmp	continuekernel
    659  40b0					      endif
    660  40b0
    661  40b0				   altkernel
    662  40b0
    663  40b0				  -	      ifconst	PFmaskvalue
    664  40b0				  -	      lda	#PFmaskvalue
    665  40b0					      else
    666  40b0		       a9 00		      lda	#0
    667  40b2					      endif
    668  40b2		       85 0e		      sta	PF1L
    669  40b4		       85 0f		      sta	PF2
    670  40b6
    671  40b6
    672  40b6							;sleep 3
    673  40b6
    674  40b6							;28 cycles to fix things
    675  40b6							;minus 11=17
    676  40b6
    677  40b6							; lax temp4
    678  40b6							; clc
    679  40b6		       8a		      txa
    680  40b7					      ifnconst	vertical_reflect
    681  40b7		       cb fc		      sbx	#256-pfwidth
    682  40b9				  -	      else
    683  40b9				  -	      sbx	#256-pfwidth/2
    684  40b9					      endif
    685  40b9
    686  40b9		       30 12		      bmi	lastkernelline
    687  40bb
    688  40bb				  -	      ifconst	PFcolorandheight
    689  40bb				  -	      ifconst	pfres
    690  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    691  40bb				  -	      else
    692  40bb				  -	      ldy	playfieldcolorandheight-87,x
    693  40bb				  -	      endif
    694  40bb				  -	      ifnconst	backgroundchange
    695  40bb				  -	      sty	COLUPF
    696  40bb				  -	      else
    697  40bb				  -	      sty	COLUBK
    698  40bb				  -	      endif
    699  40bb				  -	      ifconst	pfres
    700  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    701  40bb				  -	      else
    702  40bb				  -	      lda	playfieldcolorandheight-88,x
    703  40bb				  -	      endif
    704  40bb				  -	      sta.w	temp1
    705  40bb					      endif
    706  40bb				  -	      ifconst	PFheights
    707  40bb				  -	      lsr
    708  40bb				  -	      lsr
    709  40bb				  -	      tay
    710  40bb				  -	      lda	(pfheighttable),y
    711  40bb				  -	      sta.w	temp1
    712  40bb					      endif
    713  40bb				  -	      ifconst	PFcolors
    714  40bb				  -	      tay
    715  40bb				  -	      lda	(pfcolortable),y
    716  40bb				  -	      ifnconst	backgroundchange
    717  40bb				  -	      sta	COLUPF
    718  40bb				  -	      else
    719  40bb				  -	      sta	COLUBK
    720  40bb				  -	      endif
    721  40bb				  -	      ifconst	pfrowheight
    722  40bb				  -	      lda	#pfrowheight
    723  40bb				  -	      else
    724  40bb				  -	      ifnconst	pfres
    725  40bb				  -	      lda	#8
    726  40bb				  -	      else
    727  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    728  40bb				  -	      endif
    729  40bb				  -	      endif
    730  40bb				  -	      sta	temp1
    731  40bb					      endif
    732  40bb					      ifnconst	PFcolorandheight
    733  40bb					      ifnconst	PFcolors
    734  40bb					      ifnconst	PFheights
    735  40bb					      ifnconst	no_blank_lines
    736  40bb							; read paddle 0
    737  40bb							; lo-res paddle read
    738  40bb							; bit INPT0
    739  40bb							; bmi paddleskipread
    740  40bb							; inc paddle0
    741  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    743  40c0				  -	      ifconst	pfrowheight
    744  40c0				  -	      lda	#pfrowheight
    745  40c0					      else
    746  40c0					      ifnconst	pfres
    747  40c0		       a9 08		      lda	#8
    748  40c2				  -	      else
    749  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    750  40c2					      endif
    751  40c2					      endif
    752  40c2		       85 9c		      sta	temp1
    753  40c4					      endif
    754  40c4					      endif
    755  40c4					      endif
    756  40c4					      endif
    757  40c4
    758  40c4
    759  40c4		       a5 92		      lda	ballheight
    760  40c6		       c7 89		      dcp	bally
    761  40c8		       e5 9f		      sbc	temp4
    762  40ca
    763  40ca
    764  40ca		       4c 72 f0 	      jmp	goback
    765  40cd
    766  40cd
    767  40cd					      ifnconst	no_blank_lines
    768  40cd				   lastkernelline
    769  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    771  40d2				  -	      else
    772  40d2				  -	      ldy	#124
    773  40d2				  -	      lda	(pfcolortable),y
    774  40d2				  -	      sta	COLUPF
    775  40d2					      endif
    776  40d2
    777  40d2				  -	      ifconst	PFheights
    778  40d2				  -	      ldx	#1
    779  40d2				  -			;sleep 4
    780  40d2				  -	      sleep	3	; this was over 1 cycle
    781  40d2					      else
    782  40d2		       a6 ef		      ldx	playfieldpos
    783  40d4							;sleep 3
      0  40d4					      sleep	2	; this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    785  40d5					      endif
    786  40d5
    787  40d5		       4c 1b f1 	      jmp	enterlastkernel
    788  40d8
    789  40d8				  -	      else
    790  40d8				  -lastkernelline
    791  40d8				  -
    792  40d8				  -	      ifconst	PFheights
    793  40d8				  -	      ldx	#1
    794  40d8				  -			;sleep 5
    795  40d8				  -	      sleep	4	; this was over 1 cycle
    796  40d8				  -	      else
    797  40d8				  -	      ldx	playfieldpos
    798  40d8				  -			;sleep 4
    799  40d8				  -	      sleep	3	; this was over 1 cycle
    800  40d8				  -	      endif
    801  40d8				  -
    802  40d8				  -	      cpx	#0
    803  40d8				  -	      bne	.enterfromNBL
    804  40d8				  -	      jmp	no_blank_lines_bailout
    805  40d8					      endif
    806  40d8
    807  40d8					      if	((<*)>$d5)
    808  4100		       00 00 00 00*	      align	256
    809  4100					      endif
    810  4100							; this is a kludge to prevent page wrapping - fix!!!
    811  4100
    812  4100				   .skipDrawlastP1
    813  4100		       a9 00		      lda	#0
    814  4102		       a8		      tay		; added so we don't cross a page
    815  4103		       4c 2d f1 	      jmp	.continuelastP1
    816  4106
    817  4106				   .endkerloop		; enter at cycle 59??
    818  4106
    819  4106		       ea		      nop
    820  4107
    821  4107				   .enterfromNBL
    822  4107				  -	      ifconst	pfres
    823  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    824  4107				  -	      sty	PF1L	;3
    825  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    826  4107				  -	      sty	PF2L	;3
    827  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    828  4107				  -	      sty	PF1R	; possibly too early?
    829  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    830  4107				  -	      sty	PF2R	;3
    831  4107					      else
    832  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    833  410a		       84 0e		      sty	PF1L	;3
    834  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    835  410f		       84 0f		      sty	PF2L	;3
    836  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    837  4114		       84 0e		      sty	PF1R	; possibly too early?
    838  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    839  4119		       84 0f		      sty	PF2R	;3
    840  411b					      endif
    841  411b
    842  411b				   enterlastkernel
    843  411b		       a5 92		      lda	ballheight
    844  411d
    845  411d							; tya
    846  411d		       c7 89		      dcp	bally
    847  411f							; sleep 4
    848  411f
    849  411f							; sbc stack3
    850  411f		       2a		      rol
    851  4120		       2a		      rol
    852  4121		       85 1f		      sta	ENABL
    853  4123
    854  4123		       a5 8f		      lda	player1height	;3
    855  4125		       c7 86		      dcp	player1y	;5
    856  4127		       90 d7		      bcc	.skipDrawlastP1
    857  4129		       a4 86		      ldy	player1y	;3
    858  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    859  412d							; so it doesn't cross a page boundary!
    860  412d
    861  412d				   .continuelastP1
    862  412d		       85 1c		      sta	GRP1	;3
    863  412f
    864  412f					      ifnconst	player1colors
    865  412f		       a5 87		      lda	missile1height	;3
    866  4131		       c7 88		      dcp	missile1y	;5
    867  4133				  -	      else
    868  4133				  -	      lda	(player1color),y
    869  4133				  -	      sta	COLUP1
    870  4133					      endif
    871  4133
    872  4133		       ca		      dex
    873  4134							;dec temp4 ; might try putting this above PF writes
    874  4134		       f0 36		      beq	endkernel
    875  4136
    876  4136
    877  4136				  -	      ifconst	pfres
    878  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    879  4136				  -	      sty	PF1L	;3
    880  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    881  4136				  -	      sty	PF2L	;3
    882  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    883  4136				  -	      sty	PF1R	; possibly too early?
    884  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    885  4136				  -	      sty	PF2R	;3
    886  4136					      else
    887  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    888  4139		       84 0e		      sty	PF1L	;3
    889  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    890  413e		       84 0f		      sty	PF2L	;3
    891  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    892  4143		       84 0e		      sty	PF1R	; possibly too early?
    893  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    894  4148		       84 0f		      sty	PF2R	;3
    895  414a					      endif
    896  414a
    897  414a					      ifnconst	player1colors
    898  414a		       2a		      rol		;2
    899  414b		       2a		      rol		;2
    900  414c		       85 1e		      sta	ENAM1	;3
    901  414e				  -	      else
    902  414e				  -	      ifnconst	playercolors
    903  414e				  -	      sleep	7
    904  414e				  -	      else
    905  414e				  -	      lda.w	player0colorstore
    906  414e				  -	      sta	COLUP0
    907  414e				  -	      endif
    908  414e					      endif
    909  414e
    910  414e		       ad 8e 00 	      lda.w	player0height
    911  4151		       c7 85		      dcp	player0y
    912  4153		       90 11		      bcc	.skipDrawlastP0
    913  4155		       a4 85		      ldy	player0y
    914  4157		       b1 8a		      lda	(player0pointer),y
    915  4159				   .continuelastP0
    916  4159		       85 1b		      sta	GRP0
    917  415b
    918  415b
    919  415b
    920  415b					      ifnconst	no_blank_lines
    921  415b		       a5 90		      lda	missile0height	;3
    922  415d		       c7 91		      dcp	missile0y	;5
    923  415f		       e5 f6		      sbc	stack1
    924  4161		       85 1d		      sta	ENAM0	;3
    925  4163		       4c 06 f1 	      jmp	.endkerloop
    926  4166				  -	      else
    927  4166				  -	      ifconst	readpaddle
    928  4166				  -	      ldy	currentpaddle
    929  4166				  -	      lda	INPT0,y
    930  4166				  -	      bpl	noreadpaddle2
    931  4166				  -	      inc	paddle
    932  4166				  -	      jmp	.endkerloop
    933  4166				  -noreadpaddle2
    934  4166				  -	      sleep	4
    935  4166				  -	      jmp	.endkerloop
    936  4166				  -	      else		; no_blank_lines and no paddle reading
    937  4166				  -	      pla
    938  4166				  -	      pha		; 14 cycles in 4 bytes
    939  4166				  -	      pla
    940  4166				  -	      pha
    941  4166				  -			; sleep 14
    942  4166				  -	      jmp	.endkerloop
    943  4166				  -	      endif
    944  4166					      endif
    945  4166
    946  4166
    947  4166							; ifconst donepaddleskip
    948  4166							;paddleskipread
    949  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    950  4166							; plus we get a lo-res paddle read
    951  4166							; bmi donepaddleskip
    952  4166							; endif
    953  4166
    954  4166				   .skipDrawlastP0
    955  4166		       a9 00		      lda	#0
    956  4168		       a8		      tay
    957  4169		       4c 59 f1 	      jmp	.continuelastP0
    958  416c
    959  416c				  -	      ifconst	no_blank_lines
    960  416c				  -no_blank_lines_bailout
    961  416c				  -	      ldx	#0
    962  416c					      endif
    963  416c
    964  416c				   endkernel
    965  416c							; 6 digit score routine
    966  416c		       86 0e		      stx	PF1
    967  416e		       86 0f		      stx	PF2
    968  4170		       86 0d		      stx	PF0
    969  4172		       18		      clc
    970  4173
    971  4173				  -	      ifconst	pfrowheight
    972  4173				  -	      lda	#pfrowheight+2
    973  4173					      else
    974  4173					      ifnconst	pfres
    975  4173		       a9 0a		      lda	#10
    976  4175				  -	      else
    977  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    978  4175					      endif
    979  4175					      endif
    980  4175
    981  4175		       e5 ef		      sbc	playfieldpos
    982  4177		       85 ef		      sta	playfieldpos
    983  4179		       8a		      txa
    984  417a
    985  417a				  -	      ifconst	shakescreen
    986  417a				  -	      bit	shakescreen
    987  417a				  -	      bmi	noshakescreen2
    988  417a				  -	      ldx	#$3D
    989  417a				  -noshakescreen2
    990  417a					      endif
    991  417a
    992  417a		       95 02		      sta	WSYNC,x
    993  417c
    994  417c							; STA WSYNC ;first one, need one more
    995  417c		       85 0b		      sta	REFP0
    996  417e		       85 0c		      sta	REFP1
    997  4180		       85 1b		      STA	GRP0
    998  4182		       85 1c		      STA	GRP1
    999  4184							; STA PF1
   1000  4184							; STA PF2
   1001  4184		       85 2b		      sta	HMCLR
   1002  4186		       85 1d		      sta	ENAM0
   1003  4188		       85 1e		      sta	ENAM1
   1004  418a		       85 1f		      sta	ENABL
   1005  418c
   1006  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1007  418e		       85 85		      sta	player0y
   1008  4190		       a5 9e		      lda	temp3
   1009  4192		       85 86		      sta	player1y
   1010  4194					      ifnconst	player1colors
   1011  4194		       a5 a1		      lda	temp6
   1012  4196		       85 88		      sta	missile1y
   1013  4198					      endif
   1014  4198					      ifnconst	playercolors
   1015  4198					      ifnconst	readpaddle
   1016  4198		       a5 a0		      lda	temp5
   1017  419a		       85 91		      sta	missile0y
   1018  419c					      endif
   1019  419c					      endif
   1020  419c		       a5 f7		      lda	stack2
   1021  419e		       85 89		      sta	bally
   1022  41a0
   1023  41a0							; strangely, this isn't required any more. might have
   1024  41a0							; resulted from the no_blank_lines score bounce fix
   1025  41a0							;ifconst no_blank_lines
   1026  41a0							;sta WSYNC
   1027  41a0							;endif
   1028  41a0
   1029  41a0		       ad 84 02 	      lda	INTIM
   1030  41a3		       18		      clc
   1031  41a4					      ifnconst	vblank_time
   1032  41a4		       69 8e		      adc	#43+12+87
   1033  41a6				  -	      else
   1034  41a6				  -	      adc	#vblank_time+12+87
   1035  41a6				  -
   1036  41a6					      endif
   1037  41a6							; sta WSYNC
   1038  41a6		       8d 96 02 	      sta	TIM64T
   1039  41a9
   1040  41a9				  -	      ifconst	minikernel
   1041  41a9				  -	      jsr	minikernel
   1042  41a9					      endif
   1043  41a9
   1044  41a9							; now reassign temp vars for score pointers
   1045  41a9
   1046  41a9							; score pointers contain:
   1047  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1048  41a9							; swap lo2->temp1
   1049  41a9							; swap lo4->temp3
   1050  41a9							; swap lo6->temp5
   1051  41a9					      ifnconst	noscore
   1052  41a9		       a5 97		      lda	scorepointers+1
   1053  41ab							; ldy temp1
   1054  41ab		       85 9c		      sta	temp1
   1055  41ad							; sty scorepointers+1
   1056  41ad
   1057  41ad		       a5 99		      lda	scorepointers+3
   1058  41af							; ldy temp3
   1059  41af		       85 9e		      sta	temp3
   1060  41b1							; sty scorepointers+3
   1061  41b1
   1062  41b1
   1063  41b1		       85 2b		      sta	HMCLR
   1064  41b3		       ba		      tsx
   1065  41b4		       86 f6		      stx	stack1
   1066  41b6		       a2 e0		      ldx	#$E0
   1067  41b8		       86 20		      stx	HMP0
   1068  41ba
   1069  41ba		       a5 a3		      LDA	scorecolor
   1070  41bc		       85 06		      STA	COLUP0
   1071  41be		       85 07		      STA	COLUP1
   1072  41c0				  -	      ifconst	scorefade
   1073  41c0				  -	      STA	stack2
   1074  41c0					      endif
   1075  41c0				  -	      ifconst	pfscore
   1076  41c0				  -	      lda	pfscorecolor
   1077  41c0				  -	      sta	COLUPF
   1078  41c0					      endif
   1079  41c0		       85 02		      sta	WSYNC
   1080  41c2		       a2 00		      ldx	#0
   1081  41c4		       86 1b		      STx	GRP0
   1082  41c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1083  41c8
   1084  41c8		       a5 9b		      lda	scorepointers+5
   1085  41ca							; ldy temp5
   1086  41ca		       95 a0		      sta	temp5,x
   1087  41cc							; sty scorepointers+5
   1088  41cc		       a9 ff		      lda	#>scoretable
   1089  41ce		       85 97		      sta	scorepointers+1
   1090  41d0		       85 99		      sta	scorepointers+3
   1091  41d2		       85 9b		      sta	scorepointers+5
   1092  41d4		       85 9d		      sta	temp2
   1093  41d6		       85 9f		      sta	temp4
   1094  41d8		       85 a1		      sta	temp6
   1095  41da		       a0 07		      LDY	#7
   1096  41dc		       84 25		      STY	VDELP0
   1097  41de		       85 10		      STA	RESP0
   1098  41e0		       85 11		      STA	RESP1
   1099  41e2
   1100  41e2
   1101  41e2		       a9 03		      LDA	#$03
   1102  41e4		       85 04		      STA	NUSIZ0
   1103  41e6		       85 05		      STA	NUSIZ1
   1104  41e8		       85 26		      STA	VDELP1
   1105  41ea		       a9 f0		      LDA	#$F0
   1106  41ec		       85 21		      STA	HMP1
   1107  41ee		       b1 96		      lda	(scorepointers),y
   1108  41f0		       85 1b		      sta	GRP0
   1109  41f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   1110  41f4		       4c 08 f2 	      jmp	beginscore
   1111  41f7
   1112  41f7
   1113  41f7					      if	((<*)>$d4)
   1114  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1115  4200					      endif
   1116  4200
   1117  4200				   loop2
   1118  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1119  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1120  4204				  -	      ifconst	pfscore
   1121  4204				  -	      lda.w	pfscore1
   1122  4204				  -	      sta	PF1
   1123  4204					      else
   1124  4204				  -	      ifconst	scorefade
   1125  4204				  -	      sleep	2
   1126  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   1127  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   1129  4208					      endif
   1130  4208					      endif
   1131  4208							; cycle 0
   1132  4208				   beginscore
   1133  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1134  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1135  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1136  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1137  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1138  4212		       9a		      txs
   1139  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1140  4215				  -	      ifconst	scorefade
   1141  4215				  -	      lda	stack2
   1142  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   1144  4217					      endif
   1145  4217
   1146  4217				  -	      ifconst	pfscore
   1147  4217				  -	      lda	pfscore2
   1148  4217				  -	      sta	PF1
   1149  4217					      else
   1150  4217				  -	      ifconst	scorefade
   1151  4217				  -	      sta	COLUP0
   1152  4217				  -	      sta	COLUP1
   1153  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   1155  421a					      endif
   1156  421a					      endif
   1157  421a
   1158  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1159  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1160  421e		       ba		      tsx
   1161  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1162  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1163  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1164  4225		       88		      dey
   1165  4226		       10 d8		      bpl	loop2	;+2 60 180
   1166  4228
   1167  4228		       a6 f6		      ldx	stack1
   1168  422a		       9a		      txs
   1169  422b							; lda scorepointers+1
   1170  422b		       a4 9c		      ldy	temp1
   1171  422d							; sta temp1
   1172  422d		       84 97		      sty	scorepointers+1
   1173  422f
   1174  422f		       a9 00		      LDA	#0
   1175  4231		       85 0e		      sta	PF1
   1176  4233		       85 1b		      STA	GRP0
   1177  4235		       85 1c		      STA	GRP1
   1178  4237		       85 25		      STA	VDELP0
   1179  4239		       85 26		      STA	VDELP1	;do we need these
   1180  423b		       85 04		      STA	NUSIZ0
   1181  423d		       85 05		      STA	NUSIZ1
   1182  423f
   1183  423f							; lda scorepointers+3
   1184  423f		       a4 9e		      ldy	temp3
   1185  4241							; sta temp3
   1186  4241		       84 99		      sty	scorepointers+3
   1187  4243
   1188  4243							; lda scorepointers+5
   1189  4243		       a4 a0		      ldy	temp5
   1190  4245							; sta temp5
   1191  4245		       84 9b		      sty	scorepointers+5
   1192  4247					      endif		;noscore
   1193  4247				  -	      ifconst	readpaddle
   1194  4247				  -	      lda	#%11000010
   1195  4247					      else
   1196  4247				  -	      ifconst	qtcontroller
   1197  4247				  -	      lda	qtcontroller
   1198  4247				  -	      lsr		; bit 0 in carry
   1199  4247				  -	      lda	#4
   1200  4247				  -	      ror		; carry into top of A
   1201  4247					      else
   1202  4247		       a9 02		      lda	#2
   1203  4249					      endif		; qtcontroller
   1204  4249					      endif		; readpaddle
   1205  4249		       85 02		      sta	WSYNC
   1206  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1208  4250				  -	      ifconst	shakescreen
   1209  4250				  -doshakescreen
   1210  4250				  -	      bit	shakescreen
   1211  4250				  -	      bmi	noshakescreen
   1212  4250				  -	      sta	WSYNC
   1213  4250				  -noshakescreen
   1214  4250				  -	      ldx	missile0height
   1215  4250				  -	      inx
   1216  4250				  -	      rts
   1217  4250					      endif
   1218  4250
   1219  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1220  4250
   1221  4250				   start
   1222  4250		       78		      sei
   1223  4251		       d8		      cld
   1224  4252		       a0 00		      ldy	#0
   1225  4254		       a5 d0		      lda	$D0
   1226  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1227  4258		       d0 07		      bne	MachineIs2600
   1228  425a		       a5 d1		      lda	$D1
   1229  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1230  425e		       d0 01		      bne	MachineIs2600
   1231  4260		       88		      dey
   1232  4261				   MachineIs2600
   1233  4261		       a2 00		      ldx	#0
   1234  4263		       8a		      txa
   1235  4264				   clearmem
   1236  4264		       e8		      inx
   1237  4265		       9a		      txs
   1238  4266		       48		      pha
   1239  4267		       d0 fb		      bne	clearmem
   1240  4269		       84 9c		      sty	temp1
   1241  426b					      ifnconst	multisprite
   1242  426b				  -	      ifconst	pfrowheight
   1243  426b				  -	      lda	#pfrowheight
   1244  426b					      else
   1245  426b				  -	      ifconst	pfres
   1246  426b				  -	      lda	#(96/pfres)
   1247  426b					      else
   1248  426b		       a9 08		      lda	#8
   1249  426d					      endif
   1250  426d					      endif
   1251  426d		       85 ef		      sta	playfieldpos
   1252  426f					      endif
   1253  426f		       a2 05		      ldx	#5
   1254  4271				   initscore
   1255  4271		       a9 74		      lda	#<scoretable
   1256  4273		       95 96		      sta	scorepointers,x
   1257  4275		       ca		      dex
   1258  4276		       10 f9		      bpl	initscore
   1259  4278		       a9 01		      lda	#1
   1260  427a		       85 0a		      sta	CTRLPF
   1261  427c		       0d 84 02 	      ora	INTIM
   1262  427f		       85 a2		      sta	rand
   1263  4281
   1264  4281				  -	      ifconst	multisprite
   1265  4281				  -	      jsr	multisprite_setup
   1266  4281					      endif
   1267  4281
   1268  4281				  -	      ifnconst	bankswitch
   1269  4281				  -	      jmp	game
   1270  4281					      else
   1271  4281		       a9 8f		      lda	#>(game-1)
   1272  4283		       48		      pha
   1273  4284		       a9 ff		      lda	#<(game-1)
   1274  4286		       48		      pha
   1275  4287		       48		      pha
   1276  4288		       48		      pha
   1277  4289		       a2 01		      ldx	#1
   1278  428b		       4c eb ff 	      jmp	BS_jsr
   1279  428e					      endif
   1280  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1281  428e
   1282  428e							; playfield drawing routines
   1283  428e							; you get a 32x12 bitmapped display in a single color :)
   1284  428e							; 0-31 and 0-11
   1285  428e
   1286  428e				   pfclear		; clears playfield - or fill with pattern
   1287  428e				  -	      ifconst	pfres
   1288  428e				  -	      ldx	#pfres*pfwidth-1
   1289  428e					      else
   1290  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1291  4290					      endif
   1292  4290				   pfclear_loop
   1293  4290					      ifnconst	superchip
   1294  4290		       95 a4		      sta	playfield,x
   1295  4292				  -	      else
   1296  4292				  -	      sta	playfield-128,x
   1297  4292					      endif
   1298  4292		       ca		      dex
   1299  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1301  4298
   1302  4298				   setuppointers
   1303  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1304  429a		       aa		      tax		; put x-value in x 
   1305  429b		       4a		      lsr
   1306  429c		       4a		      lsr
   1307  429d		       4a		      lsr		; divide x pos by 8 
   1308  429e		       85 9c		      sta	temp1
   1309  42a0		       98		      tya
   1310  42a1		       0a		      asl
   1311  42a2					      if	pfwidth=4
   1312  42a2		       0a		      asl		; multiply y pos by 4
   1313  42a3					      endif		; else multiply by 2
   1314  42a3		       18		      clc
   1315  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1316  42a6		       a8		      tay		; put the value in y
   1317  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1318  42a9		       60		      rts
   1319  42aa
   1320  42aa				   pfread
   1321  42aa							;x=xvalue, y=yvalue
   1322  42aa		       20 98 f2 	      jsr	setuppointers
   1323  42ad		       bd 42 f3 	      lda	setbyte,x
   1324  42b0		       39 a4 00 	      and	playfield,y
   1325  42b3		       5d 42 f3 	      eor	setbyte,x
   1326  42b6							; beq readzero
   1327  42b6							; lda #1
   1328  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1330  42b9
   1331  42b9				   pfpixel
   1332  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1333  42b9		       20 98 f2 	      jsr	setuppointers
   1334  42bc
   1335  42bc					      ifconst	bankswitch
   1336  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1337  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1338  42c0		       4a		      lsr
   1339  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1340  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1341  42c6		       5d 42 f3 	      eor	setbyte,x
   1342  42c9				  -	      ifconst	superchip
   1343  42c9				  -	      sta	playfield-128,y
   1344  42c9					      else
   1345  42c9		       99 a4 00 	      sta	playfield,y
   1346  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1348  42cf				   pixelon_r
   1349  42cf		       b9 a4 00 	      lda	playfield,y
   1350  42d2		       1d 42 f3 	      ora	setbyte,x
   1351  42d5				  -	      ifconst	superchip
   1352  42d5				  -	      sta	playfield-128,y
   1353  42d5					      else
   1354  42d5		       99 a4 00 	      sta	playfield,y
   1355  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1357  42db				   pixeloff_r
   1358  42db		       bd 42 f3 	      lda	setbyte,x
   1359  42de		       49 ff		      eor	#$ff
   1360  42e0		       39 a4 00 	      and	playfield,y
   1361  42e3				  -	      ifconst	superchip
   1362  42e3				  -	      sta	playfield-128,y
   1363  42e3					      else
   1364  42e3		       99 a4 00 	      sta	playfield,y
   1365  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1367  42e9
   1368  42e9				  -	      else
   1369  42e9				  -	      jmp	plotpoint
   1370  42e9					      endif
   1371  42e9
   1372  42e9				   pfhline
   1373  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1374  42e9		       20 98 f2 	      jsr	setuppointers
   1375  42ec		       4c f6 f2 	      jmp	noinc
   1376  42ef				   keepgoing
   1377  42ef		       e8		      inx
   1378  42f0		       8a		      txa
   1379  42f1		       29 07		      and	#7
   1380  42f3		       d0 01		      bne	noinc
   1381  42f5		       c8		      iny
   1382  42f6				   noinc
   1383  42f6		       20 1b f3 	      jsr	plotpoint
   1384  42f9		       e4 9e		      cpx	temp3
   1385  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1387  4300
   1388  4300				   pfvline
   1389  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1390  4300		       20 98 f2 	      jsr	setuppointers
   1391  4303		       84 9c		      sty	temp1	; store memory location offset
   1392  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1393  4307		       a5 9e		      lda	temp3
   1394  4309		       0a		      asl
   1395  430a					      if	pfwidth=4
   1396  430a		       0a		      asl		; multiply by 4
   1397  430b					      endif		; else multiply by 2
   1398  430b		       85 9e		      sta	temp3	; store it
   1399  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1400  430d							; right now, temp1=y=starting memory location, temp3=final
   1401  430d							; x should equal original x value
   1402  430d				   keepgoingy
   1403  430d		       20 1b f3 	      jsr	plotpoint
   1404  4310		       c8		      iny
   1405  4311		       c8		      iny
   1406  4312					      if	pfwidth=4
   1407  4312		       c8		      iny
   1408  4313		       c8		      iny
   1409  4314					      endif
   1410  4314		       c4 9e		      cpy	temp3
   1411  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1413  431b
   1414  431b				   plotpoint
   1415  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1416  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1417  431f		       4a		      lsr
   1418  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1419  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1420  4325		       5d 42 f3 	      eor	setbyte,x
   1421  4328				  -	      ifconst	superchip
   1422  4328				  -	      sta	playfield-128,y
   1423  4328					      else
   1424  4328		       99 a4 00 	      sta	playfield,y
   1425  432b					      endif
   1426  432b		       60		      rts
   1427  432c				   pixelon
   1428  432c		       b9 a4 00 	      lda	playfield,y
   1429  432f		       1d 42 f3 	      ora	setbyte,x
   1430  4332				  -	      ifconst	superchip
   1431  4332				  -	      sta	playfield-128,y
   1432  4332					      else
   1433  4332		       99 a4 00 	      sta	playfield,y
   1434  4335					      endif
   1435  4335		       60		      rts
   1436  4336				   pixeloff
   1437  4336		       bd 42 f3 	      lda	setbyte,x
   1438  4339		       49 ff		      eor	#$ff
   1439  433b		       39 a4 00 	      and	playfield,y
   1440  433e				  -	      ifconst	superchip
   1441  433e				  -	      sta	playfield-128,y
   1442  433e					      else
   1443  433e		       99 a4 00 	      sta	playfield,y
   1444  4341					      endif
   1445  4341		       60		      rts
   1446  4342
   1447  4342				   setbyte
   1448  4342					      ifnconst	pfcenter
   1449  4342		       80		      .byte.b	$80
   1450  4343		       40		      .byte.b	$40
   1451  4344		       20		      .byte.b	$20
   1452  4345		       10		      .byte.b	$10
   1453  4346		       08		      .byte.b	$08
   1454  4347		       04		      .byte.b	$04
   1455  4348		       02		      .byte.b	$02
   1456  4349		       01		      .byte.b	$01
   1457  434a					      endif
   1458  434a		       01		      .byte.b	$01
   1459  434b		       02		      .byte.b	$02
   1460  434c		       04		      .byte.b	$04
   1461  434d		       08		      .byte.b	$08
   1462  434e		       10		      .byte.b	$10
   1463  434f		       20		      .byte.b	$20
   1464  4350		       40		      .byte.b	$40
   1465  4351		       80		      .byte.b	$80
   1466  4352		       80		      .byte.b	$80
   1467  4353		       40		      .byte.b	$40
   1468  4354		       20		      .byte.b	$20
   1469  4355		       10		      .byte.b	$10
   1470  4356		       08		      .byte.b	$08
   1471  4357		       04		      .byte.b	$04
   1472  4358		       02		      .byte.b	$02
   1473  4359		       01		      .byte.b	$01
   1474  435a		       01		      .byte.b	$01
   1475  435b		       02		      .byte.b	$02
   1476  435c		       04		      .byte.b	$04
   1477  435d		       08		      .byte.b	$08
   1478  435e		       10		      .byte.b	$10
   1479  435f		       20		      .byte.b	$20
   1480  4360		       40		      .byte.b	$40
   1481  4361		       80		      .byte.b	$80
   1482  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1483  4362
   1484  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1485  4362		       d0 15		      bne	notleft
   1486  4364							;left
   1487  4364				  -	      ifconst	pfres
   1488  4364				  -	      ldx	#pfres*4
   1489  4364					      else
   1490  4364		       a2 30		      ldx	#48
   1491  4366					      endif
   1492  4366				   leftloop
   1493  4366		       b5 a3		      lda	playfield-1,x
   1494  4368		       4a		      lsr
   1495  4369
   1496  4369				  -	      ifconst	superchip
   1497  4369				  -	      lda	playfield-2,x
   1498  4369				  -	      rol
   1499  4369				  -	      sta	playfield-130,x
   1500  4369				  -	      lda	playfield-3,x
   1501  4369				  -	      ror
   1502  4369				  -	      sta	playfield-131,x
   1503  4369				  -	      lda	playfield-4,x
   1504  4369				  -	      rol
   1505  4369				  -	      sta	playfield-132,x
   1506  4369				  -	      lda	playfield-1,x
   1507  4369				  -	      ror
   1508  4369				  -	      sta	playfield-129,x
   1509  4369					      else
   1510  4369		       36 a2		      rol	playfield-2,x
   1511  436b		       76 a1		      ror	playfield-3,x
   1512  436d		       36 a0		      rol	playfield-4,x
   1513  436f		       76 a3		      ror	playfield-1,x
   1514  4371					      endif
   1515  4371
   1516  4371		       8a		      txa
   1517  4372		       cb 04		      sbx	#4
   1518  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1520  4379
   1521  4379				   notleft
   1522  4379		       4a		      lsr
   1523  437a		       90 15		      bcc	notright
   1524  437c							;right
   1525  437c
   1526  437c				  -	      ifconst	pfres
   1527  437c				  -	      ldx	#pfres*4
   1528  437c					      else
   1529  437c		       a2 30		      ldx	#48
   1530  437e					      endif
   1531  437e				   rightloop
   1532  437e		       b5 a0		      lda	playfield-4,x
   1533  4380		       4a		      lsr
   1534  4381				  -	      ifconst	superchip
   1535  4381				  -	      lda	playfield-3,x
   1536  4381				  -	      rol
   1537  4381				  -	      sta	playfield-131,x
   1538  4381				  -	      lda	playfield-2,x
   1539  4381				  -	      ror
   1540  4381				  -	      sta	playfield-130,x
   1541  4381				  -	      lda	playfield-1,x
   1542  4381				  -	      rol
   1543  4381				  -	      sta	playfield-129,x
   1544  4381				  -	      lda	playfield-4,x
   1545  4381				  -	      ror
   1546  4381				  -	      sta	playfield-132,x
   1547  4381					      else
   1548  4381		       36 a1		      rol	playfield-3,x
   1549  4383		       76 a2		      ror	playfield-2,x
   1550  4385		       36 a3		      rol	playfield-1,x
   1551  4387		       76 a0		      ror	playfield-4,x
   1552  4389					      endif
   1553  4389		       8a		      txa
   1554  438a		       cb 04		      sbx	#4
   1555  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1557  4391
   1558  4391				   notright
   1559  4391		       4a		      lsr
   1560  4392		       90 4b		      bcc	notup
   1561  4394							;up
   1562  4394		       4a		      lsr
   1563  4395		       90 02		      bcc	onedecup
   1564  4397		       c6 ef		      dec	playfieldpos
   1565  4399				   onedecup
   1566  4399		       c6 ef		      dec	playfieldpos
   1567  439b		       f0 02		      beq	shiftdown
   1568  439d		       10 3d		      bpl	noshiftdown2
   1569  439f				   shiftdown
   1570  439f				  -	      ifconst	pfrowheight
   1571  439f				  -	      lda	#pfrowheight
   1572  439f					      else
   1573  439f					      ifnconst	pfres
   1574  439f		       a9 08		      lda	#8
   1575  43a1				  -	      else
   1576  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1577  43a1					      endif
   1578  43a1					      endif
   1579  43a1
   1580  43a1		       85 ef		      sta	playfieldpos
   1581  43a3		       a5 a7		      lda	playfield+3
   1582  43a5		       85 9f		      sta	temp4
   1583  43a7		       a5 a6		      lda	playfield+2
   1584  43a9		       85 9e		      sta	temp3
   1585  43ab		       a5 a5		      lda	playfield+1
   1586  43ad		       85 9d		      sta	temp2
   1587  43af		       a5 a4		      lda	playfield
   1588  43b1		       85 9c		      sta	temp1
   1589  43b3		       a2 00		      ldx	#0
   1590  43b5				   up2
   1591  43b5		       b5 a8		      lda	playfield+4,x
   1592  43b7				  -	      ifconst	superchip
   1593  43b7				  -	      sta	playfield-128,x
   1594  43b7				  -	      lda	playfield+5,x
   1595  43b7				  -	      sta	playfield-127,x
   1596  43b7				  -	      lda	playfield+6,x
   1597  43b7				  -	      sta	playfield-126,x
   1598  43b7				  -	      lda	playfield+7,x
   1599  43b7				  -	      sta	playfield-125,x
   1600  43b7					      else
   1601  43b7		       95 a4		      sta	playfield,x
   1602  43b9		       b5 a9		      lda	playfield+5,x
   1603  43bb		       95 a5		      sta	playfield+1,x
   1604  43bd		       b5 aa		      lda	playfield+6,x
   1605  43bf		       95 a6		      sta	playfield+2,x
   1606  43c1		       b5 ab		      lda	playfield+7,x
   1607  43c3		       95 a7		      sta	playfield+3,x
   1608  43c5					      endif
   1609  43c5		       8a		      txa
   1610  43c6		       cb fc		      sbx	#252
   1611  43c8				  -	      ifconst	pfres
   1612  43c8				  -	      cpx	#(pfres-1)*4
   1613  43c8					      else
   1614  43c8		       e0 2c		      cpx	#44
   1615  43ca					      endif
   1616  43ca		       d0 e9		      bne	up2
   1617  43cc
   1618  43cc		       a5 9f		      lda	temp4
   1619  43ce
   1620  43ce				  -	      ifconst	superchip
   1621  43ce				  -	      ifconst	pfres
   1622  43ce				  -	      sta	playfield+pfres*4-129
   1623  43ce				  -	      lda	temp3
   1624  43ce				  -	      sta	playfield+pfres*4-130
   1625  43ce				  -	      lda	temp2
   1626  43ce				  -	      sta	playfield+pfres*4-131
   1627  43ce				  -	      lda	temp1
   1628  43ce				  -	      sta	playfield+pfres*4-132
   1629  43ce				  -	      else
   1630  43ce				  -	      sta	playfield+47-128
   1631  43ce				  -	      lda	temp3
   1632  43ce				  -	      sta	playfield+46-128
   1633  43ce				  -	      lda	temp2
   1634  43ce				  -	      sta	playfield+45-128
   1635  43ce				  -	      lda	temp1
   1636  43ce				  -	      sta	playfield+44-128
   1637  43ce				  -	      endif
   1638  43ce					      else
   1639  43ce				  -	      ifconst	pfres
   1640  43ce				  -	      sta	playfield+pfres*4-1
   1641  43ce				  -	      lda	temp3
   1642  43ce				  -	      sta	playfield+pfres*4-2
   1643  43ce				  -	      lda	temp2
   1644  43ce				  -	      sta	playfield+pfres*4-3
   1645  43ce				  -	      lda	temp1
   1646  43ce				  -	      sta	playfield+pfres*4-4
   1647  43ce					      else
   1648  43ce		       85 d3		      sta	playfield+47
   1649  43d0		       a5 9e		      lda	temp3
   1650  43d2		       85 d2		      sta	playfield+46
   1651  43d4		       a5 9d		      lda	temp2
   1652  43d6		       85 d1		      sta	playfield+45
   1653  43d8		       a5 9c		      lda	temp1
   1654  43da		       85 d0		      sta	playfield+44
   1655  43dc					      endif
   1656  43dc					      endif
   1657  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1659  43df
   1660  43df
   1661  43df				   notup
   1662  43df							;down
   1663  43df		       4a		      lsr
   1664  43e0		       b0 02		      bcs	oneincup
   1665  43e2		       e6 ef		      inc	playfieldpos
   1666  43e4				   oneincup
   1667  43e4		       e6 ef		      inc	playfieldpos
   1668  43e6		       a5 ef		      lda	playfieldpos
   1669  43e8
   1670  43e8				  -	      ifconst	pfrowheight
   1671  43e8				  -	      cmp	#pfrowheight+1
   1672  43e8					      else
   1673  43e8					      ifnconst	pfres
   1674  43e8		       c9 09		      cmp	#9
   1675  43ea				  -	      else
   1676  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1677  43ea					      endif
   1678  43ea					      endif
   1679  43ea
   1680  43ea		       90 3b		      bcc	noshiftdown
   1681  43ec		       a9 01		      lda	#1
   1682  43ee		       85 ef		      sta	playfieldpos
   1683  43f0
   1684  43f0				  -	      ifconst	pfres
   1685  43f0				  -	      lda	playfield+pfres*4-1
   1686  43f0				  -	      sta	temp4
   1687  43f0				  -	      lda	playfield+pfres*4-2
   1688  43f0				  -	      sta	temp3
   1689  43f0				  -	      lda	playfield+pfres*4-3
   1690  43f0				  -	      sta	temp2
   1691  43f0				  -	      lda	playfield+pfres*4-4
   1692  43f0					      else
   1693  43f0		       a5 d3		      lda	playfield+47
   1694  43f2		       85 9f		      sta	temp4
   1695  43f4		       a5 d2		      lda	playfield+46
   1696  43f6		       85 9e		      sta	temp3
   1697  43f8		       a5 d1		      lda	playfield+45
   1698  43fa		       85 9d		      sta	temp2
   1699  43fc		       a5 d0		      lda	playfield+44
   1700  43fe					      endif
   1701  43fe
   1702  43fe		       85 9c		      sta	temp1
   1703  4400
   1704  4400				  -	      ifconst	pfres
   1705  4400				  -	      ldx	#(pfres-1)*4
   1706  4400					      else
   1707  4400		       a2 2c		      ldx	#44
   1708  4402					      endif
   1709  4402				   down2
   1710  4402		       b5 a3		      lda	playfield-1,x
   1711  4404				  -	      ifconst	superchip
   1712  4404				  -	      sta	playfield-125,x
   1713  4404				  -	      lda	playfield-2,x
   1714  4404				  -	      sta	playfield-126,x
   1715  4404				  -	      lda	playfield-3,x
   1716  4404				  -	      sta	playfield-127,x
   1717  4404				  -	      lda	playfield-4,x
   1718  4404				  -	      sta	playfield-128,x
   1719  4404					      else
   1720  4404		       95 a7		      sta	playfield+3,x
   1721  4406		       b5 a2		      lda	playfield-2,x
   1722  4408		       95 a6		      sta	playfield+2,x
   1723  440a		       b5 a1		      lda	playfield-3,x
   1724  440c		       95 a5		      sta	playfield+1,x
   1725  440e		       b5 a0		      lda	playfield-4,x
   1726  4410		       95 a4		      sta	playfield,x
   1727  4412					      endif
   1728  4412		       8a		      txa
   1729  4413		       cb 04		      sbx	#4
   1730  4415		       d0 eb		      bne	down2
   1731  4417
   1732  4417		       a5 9f		      lda	temp4
   1733  4419				  -	      ifconst	superchip
   1734  4419				  -	      sta	playfield-125
   1735  4419				  -	      lda	temp3
   1736  4419				  -	      sta	playfield-126
   1737  4419				  -	      lda	temp2
   1738  4419				  -	      sta	playfield-127
   1739  4419				  -	      lda	temp1
   1740  4419				  -	      sta	playfield-128
   1741  4419					      else
   1742  4419		       85 a7		      sta	playfield+3
   1743  441b		       a5 9e		      lda	temp3
   1744  441d		       85 a6		      sta	playfield+2
   1745  441f		       a5 9d		      lda	temp2
   1746  4421		       85 a5		      sta	playfield+1
   1747  4423		       a5 9c		      lda	temp1
   1748  4425		       85 a4		      sta	playfield
   1749  4427					      endif
   1750  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1752  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1753  442a
   1754  442a							;standard routines needed for pretty much all games
   1755  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1756  442a							; repositioning code and score pointer setup moved to overscan
   1757  442a							; read switches, joysticks now compiler generated (more efficient)
   1758  442a
   1759  442a				   randomize
   1760  442a		       a5 a2		      lda	rand
   1761  442c		       4a		      lsr
   1762  442d				  -	      ifconst	rand16
   1763  442d				  -	      rol	rand16
   1764  442d					      endif
   1765  442d		       90 02		      bcc	noeor
   1766  442f		       49 b4		      eor	#$B4
   1767  4431				   noeor
   1768  4431		       85 a2		      sta	rand
   1769  4433				  -	      ifconst	rand16
   1770  4433				  -	      eor	rand16
   1771  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1773  4436							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1774  4436
   1775  4436				   drawscreen
   1776  4436				  -	      ifconst	debugscore
   1777  4436				  -	      ldx	#14
   1778  4436				  -	      lda	INTIM	; display # cycles left in the score
   1779  4436				  -
   1780  4436				  -	      ifconst	mincycles
   1781  4436				  -	      lda	mincycles
   1782  4436				  -	      cmp	INTIM
   1783  4436				  -	      lda	mincycles
   1784  4436				  -	      bcc	nochange
   1785  4436				  -	      lda	INTIM
   1786  4436				  -	      sta	mincycles
   1787  4436				  -nochange
   1788  4436				  -	      endif
   1789  4436				  -
   1790  4436				  -			; cmp #$2B
   1791  4436				  -			; bcs no_cycles_left
   1792  4436				  -	      bmi	cycles_left
   1793  4436				  -	      ldx	#64
   1794  4436				  -	      eor	#$ff	;make negative
   1795  4436				  -cycles_left
   1796  4436				  -	      stx	scorecolor
   1797  4436				  -	      and	#$7f	; clear sign bit
   1798  4436				  -	      tax
   1799  4436				  -	      lda	scorebcd,x
   1800  4436				  -	      sta	score+2
   1801  4436				  -	      lda	scorebcd1,x
   1802  4436				  -	      sta	score+1
   1803  4436				  -	      jmp	done_debugscore
   1804  4436				  -scorebcd
   1805  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1806  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1807  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1808  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1809  4436				  -scorebcd1
   1810  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1811  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1812  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1813  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1814  4436				  -done_debugscore
   1815  4436					      endif
   1816  4436
   1817  4436				  -	      ifconst	debugcycles
   1818  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1819  4436				  -			; cmp #$2B
   1820  4436				  -			; BCC overscan
   1821  4436				  -	      bmi	overscan
   1822  4436				  -	      sta	COLUBK
   1823  4436				  -	      bcs	doneoverscan
   1824  4436					      endif
   1825  4436
   1826  4436				   overscan
   1827  4436				  -	      ifconst	interlaced
   1828  4436				  -	      PHP
   1829  4436				  -	      PLA
   1830  4436				  -	      EOR	#4	; flip interrupt bit
   1831  4436				  -	      PHA
   1832  4436				  -	      PLP
   1833  4436				  -	      AND	#4	; isolate the interrupt bit
   1834  4436				  -	      TAX		; save it for later
   1835  4436					      endif
   1836  4436
   1837  4436				   overscanloop
   1838  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1839  4439		       30 fb		      bmi	overscanloop
   1840  443b				   doneoverscan
   1841  443b
   1842  443b							;do VSYNC
   1843  443b
   1844  443b				  -	      ifconst	interlaced
   1845  443b				  -	      CPX	#4
   1846  443b				  -	      BNE	oddframevsync
   1847  443b					      endif
   1848  443b
   1849  443b		       a9 02		      lda	#2
   1850  443d		       85 02		      sta	WSYNC
   1851  443f		       85 00		      sta	VSYNC
   1852  4441		       85 02		      STA	WSYNC
   1853  4443		       85 02		      STA	WSYNC
   1854  4445		       4a		      lsr
   1855  4446		       85 02		      STA	WSYNC
   1856  4448		       85 00		      STA	VSYNC
   1857  444a		       85 01		      sta	VBLANK
   1858  444c					      ifnconst	overscan_time
   1859  444c		       a9 a5		      lda	#37+128
   1860  444e				  -	      else
   1861  444e				  -	      lda	#overscan_time+128
   1862  444e					      endif
   1863  444e		       8d 96 02 	      sta	TIM64T
   1864  4451
   1865  4451				  -	      ifconst	interlaced
   1866  4451				  -	      jmp	postsync
   1867  4451				  -
   1868  4451				  -oddframevsync
   1869  4451				  -	      sta	WSYNC
   1870  4451				  -
   1871  4451				  -	      LDA	($80,X)	; 11 waste
   1872  4451				  -	      LDA	($80,X)	; 11 waste
   1873  4451				  -	      LDA	($80,X)	; 11 waste
   1874  4451				  -
   1875  4451				  -	      lda	#2
   1876  4451				  -	      sta	VSYNC
   1877  4451				  -	      sta	WSYNC
   1878  4451				  -	      sta	WSYNC
   1879  4451				  -	      sta	WSYNC
   1880  4451				  -
   1881  4451				  -	      LDA	($80,X)	; 11 waste
   1882  4451				  -	      LDA	($80,X)	; 11 waste
   1883  4451				  -	      LDA	($80,X)	; 11 waste
   1884  4451				  -
   1885  4451				  -	      lda	#0
   1886  4451				  -	      sta	VSYNC
   1887  4451				  -	      sta	VBLANK
   1888  4451				  -	      ifnconst	overscan_time
   1889  4451				  -	      lda	#37+128
   1890  4451				  -	      else
   1891  4451				  -	      lda	#overscan_time+128
   1892  4451				  -	      endif
   1893  4451				  -	      sta	TIM64T
   1894  4451				  -
   1895  4451				  -postsync
   1896  4451					      endif
   1897  4451
   1898  4451				  -	      ifconst	legacy
   1899  4451				  -	      if	legacy < 100
   1900  4451				  -	      ldx	#4
   1901  4451				  -adjustloop
   1902  4451				  -	      lda	player0x,x
   1903  4451				  -	      sec
   1904  4451				  -	      sbc	#14	;?
   1905  4451				  -	      sta	player0x,x
   1906  4451				  -	      dex
   1907  4451				  -	      bpl	adjustloop
   1908  4451				  -	      endif
   1909  4451					      endif
   1910  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1911  4451				  -	      repeat	($fa-(<*))
   1912  4451				  -	      nop
   1913  4451				  -	      repend
   1914  4451					      endif
   1915  4451		       85 02		      sta	WSYNC
   1916  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1918  4457				   HorPosLoop		; 5
   1919  4457		       b5 80		      lda	player0x,X	;+4 9
   1920  4459		       38		      sec		;+2 11
   1921  445a				   DivideLoop
   1922  445a		       e9 0f		      sbc	#15
   1923  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1924  445e		       95 9c		      sta	temp1,X	;+4 19
   1925  4460		       95 10		      sta	RESP0,X	;+4 23
   1926  4462		       85 02		      sta	WSYNC
   1927  4464		       ca		      dex
   1928  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1929  4467							; 4
   1930  4467
   1931  4467		       a2 04		      ldx	#4
   1932  4469		       b4 9c		      ldy	temp1,X
   1933  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1934  446e		       95 20		      sta	HMP0,X	;+14 18
   1935  4470
   1936  4470		       ca		      dex
   1937  4471		       b4 9c		      ldy	temp1,X
   1938  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1939  4476		       95 20		      sta	HMP0,X	;+14 32
   1940  4478
   1941  4478		       ca		      dex
   1942  4479		       b4 9c		      ldy	temp1,X
   1943  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1944  447e		       95 20		      sta	HMP0,X	;+14 46
   1945  4480
   1946  4480		       ca		      dex
   1947  4481		       b4 9c		      ldy	temp1,X
   1948  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1949  4486		       95 20		      sta	HMP0,X	;+14 60
   1950  4488
   1951  4488		       ca		      dex
   1952  4489		       b4 9c		      ldy	temp1,X
   1953  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1954  448e		       95 20		      sta	HMP0,X	;+14 74
   1955  4490
   1956  4490		       85 02		      sta	WSYNC
   1957  4492
   1958  4492		       85 2a		      sta	HMOVE	;+3 3
   1959  4494
   1960  4494
   1961  4494				  -	      ifconst	legacy
   1962  4494				  -	      if	legacy < 100
   1963  4494				  -	      ldx	#4
   1964  4494				  -adjustloop2
   1965  4494				  -	      lda	player0x,x
   1966  4494				  -	      clc
   1967  4494				  -	      adc	#14	;?
   1968  4494				  -	      sta	player0x,x
   1969  4494				  -	      dex
   1970  4494				  -	      bpl	adjustloop2
   1971  4494				  -	      endif
   1972  4494					      endif
   1973  4494
   1974  4494
   1975  4494
   1976  4494
   1977  4494							;set score pointers
   1978  4494		       a7 95		      lax	score+2
   1979  4496		       20 c7 f4 	      jsr	scorepointerset
   1980  4499		       84 9b		      sty	scorepointers+5
   1981  449b		       86 98		      stx	scorepointers+2
   1982  449d		       a7 94		      lax	score+1
   1983  449f		       20 c7 f4 	      jsr	scorepointerset
   1984  44a2		       84 9a		      sty	scorepointers+4
   1985  44a4		       86 97		      stx	scorepointers+1
   1986  44a6		       a7 93		      lax	score
   1987  44a8		       20 c7 f4 	      jsr	scorepointerset
   1988  44ab		       84 99		      sty	scorepointers+3
   1989  44ad		       86 96		      stx	scorepointers
   1990  44af
   1991  44af				   vblk
   1992  44af							; run possible vblank bB code
   1993  44af				  -	      ifconst	vblank_bB_code
   1994  44af				  -	      jsr	vblank_bB_code
   1995  44af					      endif
   1996  44af				   vblk2
   1997  44af		       ad 84 02 	      LDA	INTIM
   1998  44b2		       30 fb		      bmi	vblk2
   1999  44b4		       4c 00 f0 	      jmp	kernel
   2000  44b7
   2001  44b7
   2002  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2003  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2004  44c7				   repostable
   2005  44c7
   2006  44c7				   scorepointerset
   2007  44c7		       29 0f		      and	#$0F
   2008  44c9		       0a		      asl
   2009  44ca		       0a		      asl
   2010  44cb		       0a		      asl
   2011  44cc		       69 74		      adc	#<scoretable
   2012  44ce		       a8		      tay
   2013  44cf		       8a		      txa
   2014  44d0							; and #$F0
   2015  44d0							; lsr
   2016  44d0		       4b f0		      asr	#$F0
   2017  44d2		       69 74		      adc	#<scoretable
   2018  44d4		       aa		      tax
   2019  44d5		       60		      rts
   2020  44d6							;bB.asm
   2021  44d6							; bB.asm file is split here
   2022  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2023  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2024  44d6					      endif
   2025  44d6		       00 01	   ECHOFIRST  =	1
   2026  44d6
   2027  44d6
   2028  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2029  44d6
   2030  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2031  44d6							; and keep the conditional compilation stuff intact
   2032  44d6				  -	      ifconst	ROM2k
   2033  44d6				  -	      ORG	$F7AC-8
   2034  44d6					      else
   2035  44d6					      ifconst	bankswitch
   2036  44d6				  -	      if	bankswitch == 8
   2037  44d6				  -	      ORG	$2F94-bscode_length
   2038  44d6				  -	      RORG	$FF94-bscode_length
   2039  44d6					      endif
   2040  44d6					      if	bankswitch == 16
   2041  4f74					      ORG	$4F94-bscode_length
   2042  4f74					      RORG	$FF94-bscode_length
   2043  4f74					      endif
   2044  4f74				  -	      if	bankswitch == 32
   2045  4f74				  -	      ORG	$8F94-bscode_length
   2046  4f74				  -	      RORG	$FF94-bscode_length
   2047  4f74					      endif
   2048  4f74				  -	      if	bankswitch == 64
   2049  4f74				  -	      ORG	$10F80-bscode_length
   2050  4f74				  -	      RORG	$1FF80-bscode_length
   2051  4f74					      endif
   2052  4f74				  -	      else
   2053  4f74				  -	      ORG	$FF9C
   2054  4f74					      endif
   2055  4f74					      endif
   2056  4f74
   2057  4f74							; font equates
   2058  4f74		       00 01	   .21stcentury =	1
   2059  4f74		       00 02	   alarmclock =	2
   2060  4f74		       00 03	   handwritten =	3
   2061  4f74		       00 04	   interrupted =	4
   2062  4f74		       00 05	   retroputer =	5
   2063  4f74		       00 06	   whimsey    =	6
   2064  4f74		       00 07	   tiny       =	7
   2065  4f74		       00 08	   hex	      =	8
   2066  4f74
   2067  4f74				  -	      ifconst	font
   2068  4f74				  -	      if	font == hex
   2069  4f74				  -	      ORG	. - 48
   2070  4f74				  -	      endif
   2071  4f74					      endif
   2072  4f74
   2073  4f74				   scoretable
   2074  4f74
   2075  4f74				  -	      ifconst	font
   2076  4f74				  -	      if	font == .21stcentury
   2077  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2078  4f74				  -	      endif
   2079  4f74				  -	      if	font == alarmclock
   2080  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2081  4f74				  -	      endif
   2082  4f74				  -	      if	font == handwritten
   2083  4f74				  -	      include	"score_graphics.asm.handwritten"
   2084  4f74				  -	      endif
   2085  4f74				  -	      if	font == interrupted
   2086  4f74				  -	      include	"score_graphics.asm.interrupted"
   2087  4f74				  -	      endif
   2088  4f74				  -	      if	font == retroputer
   2089  4f74				  -	      include	"score_graphics.asm.retroputer"
   2090  4f74				  -	      endif
   2091  4f74				  -	      if	font == whimsey
   2092  4f74				  -	      include	"score_graphics.asm.whimsey"
   2093  4f74				  -	      endif
   2094  4f74				  -	      if	font == tiny
   2095  4f74				  -	      include	"score_graphics.asm.tiny"
   2096  4f74				  -	      endif
   2097  4f74				  -	      if	font == hex
   2098  4f74				  -	      include	"score_graphics.asm.hex"
   2099  4f74				  -	      endif
   2100  4f74					      else		; default font
   2101  4f74
   2102  4f74		       3c		      .byte.b	%00111100
   2103  4f75		       66		      .byte.b	%01100110
   2104  4f76		       66		      .byte.b	%01100110
   2105  4f77		       66		      .byte.b	%01100110
   2106  4f78		       66		      .byte.b	%01100110
   2107  4f79		       66		      .byte.b	%01100110
   2108  4f7a		       66		      .byte.b	%01100110
   2109  4f7b		       3c		      .byte.b	%00111100
   2110  4f7c
   2111  4f7c		       7e		      .byte.b	%01111110
   2112  4f7d		       18		      .byte.b	%00011000
   2113  4f7e		       18		      .byte.b	%00011000
   2114  4f7f		       18		      .byte.b	%00011000
   2115  4f80		       18		      .byte.b	%00011000
   2116  4f81		       38		      .byte.b	%00111000
   2117  4f82		       18		      .byte.b	%00011000
   2118  4f83		       08		      .byte.b	%00001000
   2119  4f84
   2120  4f84		       7e		      .byte.b	%01111110
   2121  4f85		       60		      .byte.b	%01100000
   2122  4f86		       60		      .byte.b	%01100000
   2123  4f87		       3c		      .byte.b	%00111100
   2124  4f88		       06		      .byte.b	%00000110
   2125  4f89		       06		      .byte.b	%00000110
   2126  4f8a		       46		      .byte.b	%01000110
   2127  4f8b		       3c		      .byte.b	%00111100
   2128  4f8c
   2129  4f8c		       3c		      .byte.b	%00111100
   2130  4f8d		       46		      .byte.b	%01000110
   2131  4f8e		       06		      .byte.b	%00000110
   2132  4f8f		       06		      .byte.b	%00000110
   2133  4f90		       1c		      .byte.b	%00011100
   2134  4f91		       06		      .byte.b	%00000110
   2135  4f92		       46		      .byte.b	%01000110
   2136  4f93		       3c		      .byte.b	%00111100
   2137  4f94
   2138  4f94		       0c		      .byte.b	%00001100
   2139  4f95		       0c		      .byte.b	%00001100
   2140  4f96		       7e		      .byte.b	%01111110
   2141  4f97		       4c		      .byte.b	%01001100
   2142  4f98		       4c		      .byte.b	%01001100
   2143  4f99		       2c		      .byte.b	%00101100
   2144  4f9a		       1c		      .byte.b	%00011100
   2145  4f9b		       0c		      .byte.b	%00001100
   2146  4f9c
   2147  4f9c		       3c		      .byte.b	%00111100
   2148  4f9d		       46		      .byte.b	%01000110
   2149  4f9e		       06		      .byte.b	%00000110
   2150  4f9f		       06		      .byte.b	%00000110
   2151  4fa0		       3c		      .byte.b	%00111100
   2152  4fa1		       60		      .byte.b	%01100000
   2153  4fa2		       60		      .byte.b	%01100000
   2154  4fa3		       7e		      .byte.b	%01111110
   2155  4fa4
   2156  4fa4		       3c		      .byte.b	%00111100
   2157  4fa5		       66		      .byte.b	%01100110
   2158  4fa6		       66		      .byte.b	%01100110
   2159  4fa7		       66		      .byte.b	%01100110
   2160  4fa8		       7c		      .byte.b	%01111100
   2161  4fa9		       60		      .byte.b	%01100000
   2162  4faa		       62		      .byte.b	%01100010
   2163  4fab		       3c		      .byte.b	%00111100
   2164  4fac
   2165  4fac		       30		      .byte.b	%00110000
   2166  4fad		       30		      .byte.b	%00110000
   2167  4fae		       30		      .byte.b	%00110000
   2168  4faf		       18		      .byte.b	%00011000
   2169  4fb0		       0c		      .byte.b	%00001100
   2170  4fb1		       06		      .byte.b	%00000110
   2171  4fb2		       42		      .byte.b	%01000010
   2172  4fb3		       3e		      .byte.b	%00111110
   2173  4fb4
   2174  4fb4		       3c		      .byte.b	%00111100
   2175  4fb5		       66		      .byte.b	%01100110
   2176  4fb6		       66		      .byte.b	%01100110
   2177  4fb7		       66		      .byte.b	%01100110
   2178  4fb8		       3c		      .byte.b	%00111100
   2179  4fb9		       66		      .byte.b	%01100110
   2180  4fba		       66		      .byte.b	%01100110
   2181  4fbb		       3c		      .byte.b	%00111100
   2182  4fbc
   2183  4fbc		       3c		      .byte.b	%00111100
   2184  4fbd		       46		      .byte.b	%01000110
   2185  4fbe		       06		      .byte.b	%00000110
   2186  4fbf		       3e		      .byte.b	%00111110
   2187  4fc0		       66		      .byte.b	%01100110
   2188  4fc1		       66		      .byte.b	%01100110
   2189  4fc2		       66		      .byte.b	%01100110
   2190  4fc3		       3c		      .byte.b	%00111100
   2191  4fc4
   2192  4fc4					      ifnconst	DPC_kernel_options
   2193  4fc4
   2194  4fc4		       00		      .byte.b	%00000000
   2195  4fc5		       00		      .byte.b	%00000000
   2196  4fc6		       00		      .byte.b	%00000000
   2197  4fc7		       00		      .byte.b	%00000000
   2198  4fc8		       00		      .byte.b	%00000000
   2199  4fc9		       00		      .byte.b	%00000000
   2200  4fca		       00		      .byte.b	%00000000
   2201  4fcb		       00		      .byte.b	%00000000
   2202  4fcc
   2203  4fcc					      endif
   2204  4fcc
   2205  4fcc					      endif
   2206  4fcc
   2207  4fcc				  -	      ifconst	ROM2k
   2208  4fcc				  -	      ORG	$F7FC
   2209  4fcc					      else
   2210  4fcc					      ifconst	bankswitch
   2211  4fcc				  -	      if	bankswitch == 8
   2212  4fcc				  -	      ORG	$2FF4-bscode_length
   2213  4fcc				  -	      RORG	$FFF4-bscode_length
   2214  4fcc					      endif
   2215  4fcc					      if	bankswitch == 16
   2216  4fd4					      ORG	$4FF4-bscode_length
   2217  4fd4					      RORG	$FFF4-bscode_length
   2218  4fd4					      endif
   2219  4fd4				  -	      if	bankswitch == 32
   2220  4fd4				  -	      ORG	$8FF4-bscode_length
   2221  4fd4				  -	      RORG	$FFF4-bscode_length
   2222  4fd4					      endif
   2223  4fd4				  -	      if	bankswitch == 64
   2224  4fd4				  -	      ORG	$10FE0-bscode_length
   2225  4fd4				  -	      RORG	$1FFE0-bscode_length
   2226  4fd4					      endif
   2227  4fd4				  -	      else
   2228  4fd4				  -	      ORG	$FFFC
   2229  4fd4					      endif
   2230  4fd4					      endif
   2231  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2232  4fd4
   2233  4fd4							; every bank has this stuff at the same place
   2234  4fd4							; this code can switch to/from any bank at any entry point
   2235  4fd4							; and can preserve register values
   2236  4fd4							; note: lines not starting with a space are not placed in all banks
   2237  4fd4							;
   2238  4fd4							; line below tells the compiler how long this is - do not remove
   2239  4fd4							;size=32
   2240  4fd4
   2241  4fd4				   begin_bscode
   2242  4fd4		       a2 ff		      ldx	#$ff
   2243  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2244  4fd6				  -	      stx	FASTFETCH
   2245  4fd6					      endif
   2246  4fd6		       9a		      txs
   2247  4fd7				  -	      if	bankswitch == 64
   2248  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2249  4fd7					      else
   2250  4fd7		       a9 f2		      lda	#>(start-1)
   2251  4fd9					      endif
   2252  4fd9		       48		      pha
   2253  4fda		       a9 4f		      lda	#<(start-1)
   2254  4fdc		       48		      pha
   2255  4fdd
   2256  4fdd				   BS_return
   2257  4fdd		       48		      pha
   2258  4fde		       8a		      txa
   2259  4fdf		       48		      pha
   2260  4fe0		       ba		      tsx
   2261  4fe1
   2262  4fe1					      if	bankswitch != 64
   2263  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2264  4fe3
   2265  4fe3		       2a		      rol
   2266  4fe4		       2a		      rol
   2267  4fe5		       2a		      rol
   2268  4fe6		       2a		      rol
   2269  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2270  4fe9		       aa		      tax
   2271  4fea		       e8		      inx
   2272  4feb				  -	      else
   2273  4feb				  -	      lda	4,x	; get high byte of return address
   2274  4feb				  -	      tay
   2275  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2276  4feb				  -	      sta	4,x
   2277  4feb				  -	      tya
   2278  4feb				  -	      lsr
   2279  4feb				  -	      lsr
   2280  4feb				  -	      lsr
   2281  4feb				  -	      lsr
   2282  4feb				  -	      tax
   2283  4feb				  -	      inx
   2284  4feb					      endif
   2285  4feb
   2286  4feb				   BS_jsr
   2287  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2288  4fee		       68		      pla
   2289  4fef		       aa		      tax
   2290  4ff0		       68		      pla
   2291  4ff1		       60		      rts
   2292  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2293  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2294  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2295  4ff2					      endif
   2296  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2297  4ff2
   2298  4ff2					      ifconst	bankswitch
   2299  4ff2				  -	      if	bankswitch == 8
   2300  4ff2				  -	      ORG	$2FFC
   2301  4ff2				  -	      RORG	$FFFC
   2302  4ff2					      endif
   2303  4ff2					      if	bankswitch == 16
   2304  4ffc					      ORG	$4FFC
   2305  4ffc					      RORG	$FFFC
   2306  4ffc					      endif
   2307  4ffc				  -	      if	bankswitch == 32
   2308  4ffc				  -	      ORG	$8FFC
   2309  4ffc				  -	      RORG	$FFFC
   2310  4ffc					      endif
   2311  4ffc				  -	      if	bankswitch == 64
   2312  4ffc				  -	      ORG	$10FF0
   2313  4ffc				  -	      RORG	$1FFF0
   2314  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2315  4ffc				  -	      ORG	$10FF8
   2316  4ffc				  -	      RORG	$1FFF8
   2317  4ffc				  -	      ifconst	superchip
   2318  4ffc				  -	      .byte	"E","F","S","C"
   2319  4ffc				  -	      else
   2320  4ffc				  -	      .byte	"E","F","E","F"
   2321  4ffc				  -	      endif
   2322  4ffc				  -	      ORG	$10FFC
   2323  4ffc				  -	      RORG	$1FFFC
   2324  4ffc					      endif
   2325  4ffc				  -	      else
   2326  4ffc				  -	      ifconst	ROM2k
   2327  4ffc				  -	      ORG	$F7FC
   2328  4ffc				  -	      else
   2329  4ffc				  -	      ORG	$FFFC
   2330  4ffc				  -	      endif
   2331  4ffc					      endif
   2332  4ffc		       50 f2		      .word.w	(start & $ffff)
   2333  4ffe		       50 f2		      .word.w	(start & $ffff)

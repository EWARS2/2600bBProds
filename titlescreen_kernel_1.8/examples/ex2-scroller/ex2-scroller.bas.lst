------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   frame      =	b
      5  5000 ????
      6  5000 ????	       00 d4	   bmp_48x1_2_index =	a
      7  5000 ????
      8  5000 ????	       00 03	   bs_mask    =	3
      9  5000 ????	       00 10	   bankswitch =	16
     10  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   frame      =	b
      5  5000 ????
      6  5000 ????	       00 d4	   bmp_48x1_2_index =	a
      7  5000 ????
      8  5000 ????	       00 03	   bs_mask    =	3
      9  5000 ????	       00 10	   bankswitch =	16
     10  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .L00 		;  rem *** any romsize should work
     39  1000
     40  1000				   .L01 		;  set romsize 16k
     41  1000
     42  1000				   .
     43  1000							; 
     44  1000
     45  1000				   .L02 		;  dim bmp_48x1_2_index = a
     46  1000
     47  1000				   .L03 		;  dim frame = b
     48  1000
     49  1000				   .
     50  1000							; 
     51  1000
     52  1000				   .L04 		;  scorecolor = $1a
     53  1000
     54  1000		       a9 1a		      LDA	#$1a
     55  1002		       85 a3		      STA	scorecolor
     56  1004				   .
     57  1004							; 
     58  1004
     59  1004				   .resettitlepage
     60  1004							; resettitlepage
     61  1004
     62  1004				   .L05 		;  frame = 0
     63  1004
     64  1004		       a9 00		      LDA	#0
     65  1006		       85 d5		      STA	frame
     66  1008				   .L06 		;  bmp_48x1_2_index = 0
     67  1008
     68  1008		       a9 00		      LDA	#0
     69  100a		       85 d4		      STA	bmp_48x1_2_index
     70  100c				   .
     71  100c							; 
     72  100c
     73  100c				   .titlepage
     74  100c							; titlepage
     75  100c
     76  100c				   .L07 		;  gosub titledrawscreen bank2
     77  100c
     78  100c		       85 ee		      sta	temp7
     79  100e		       a9 90		      lda	#>(ret_point1-1)
     80  1010		       48		      pha
     81  1011		       a9 23		      lda	#<(ret_point1-1)
     82  1013		       48		      pha
     83  1014		       a9 af		      lda	#>(.titledrawscreen-1)
     84  1016		       48		      pha
     85  1017		       a9 ff		      lda	#<(.titledrawscreen-1)
     86  1019		       48		      pha
     87  101a		       a5 ee		      lda	temp7
     88  101c		       48		      pha
     89  101d		       8a		      txa
     90  101e		       48		      pha
     91  101f		       a2 02		      ldx	#2
     92  1021		       4c eb ff 	      jmp	BS_jsr
     93  1024				   ret_point1
     94  1024				   .L08 		;  frame = frame + 1
     95  1024
     96  1024		       e6 d5		      INC	frame
     97  1026				   .L09 		;  temp1 = frame & %00000111
     98  1026
     99  1026		       a5 d5		      LDA	frame
    100  1028		       29 07		      AND	#%00000111
    101  102a		       85 9c		      STA	temp1
    102  102c				   .L010		;  if temp1 = 0  &&  bmp_48x1_2_index < 190 then bmp_48x1_2_index = bmp_48x1_2_index + 1
    103  102c
    104  102c		       a5 9c		      LDA	temp1
    105  102e		       c9 00		      CMP	#0
    106  1030		       d0 08		      BNE	.skipL010
    107  1032				   .condpart0
    108  1032		       a5 d4		      LDA	bmp_48x1_2_index
    109  1034		       c9 be		      CMP	#190
    110  1036		       b0 02		      BCS	.skip0then
    111  1038				   .condpart1
    112  1038		       e6 d4		      INC	bmp_48x1_2_index
    113  103a				   .skip0then
    114  103a				   .skipL010
    115  103a				   .L011		;  if joy0fire  ||  switchreset then goto gamestart
    116  103a
    117  103a		       24 0c		      bit	INPT4
    118  103c		       30 03		      BMI	.skipL011
    119  103e				   .condpart2
    120  103e		       4c 48 90 	      jmp	.condpart3
    121  1041				   .skipL011
    122  1041		       a9 01		      lda	#1
    123  1043		       2c 82 02 	      bit	SWCHB
    124  1046		       d0 03		      BNE	.skip1OR
    125  1048				   .condpart3
    126  1048		       4c 4e 90 	      jmp	.gamestart
    127  104b
    128  104b				   .skip1OR
    129  104b				   .L012		;  goto titlepage
    130  104b
    131  104b		       4c 0c 90 	      jmp	.titlepage
    132  104e
    133  104e				   .
    134  104e							; 
    135  104e
    136  104e				   .L013		;  rem *** Our fake game start. If you move the joystick it goes back to the
    137  104e
    138  104e				   .L014		;  rem *** title screen.
    139  104e
    140  104e				   .gamestart
    141  104e							; gamestart
    142  104e
    143  104e				   .L015		;  drawscreen
    144  104e
    145  104e		       85 ee		      sta	temp7
    146  1050		       a9 90		      lda	#>(ret_point2-1)
    147  1052		       48		      pha
    148  1053		       a9 65		      lda	#<(ret_point2-1)
    149  1055		       48		      pha
    150  1056		       a9 f4		      lda	#>(drawscreen-1)
    151  1058		       48		      pha
    152  1059		       a9 35		      lda	#<(drawscreen-1)
    153  105b		       48		      pha
    154  105c		       a5 ee		      lda	temp7
    155  105e		       48		      pha
    156  105f		       8a		      txa
    157  1060		       48		      pha
    158  1061		       a2 04		      ldx	#4
    159  1063		       4c eb ff 	      jmp	BS_jsr
    160  1066				   ret_point2
    161  1066				   .L016		;  if joy0left  ||  joy0right then goto resettitlepage
    162  1066
    163  1066		       2c 80 02 	      bit	SWCHA
    164  1069		       70 03		      BVS	.skipL016
    165  106b				   .condpart4
    166  106b		       4c 73 90 	      jmp	.condpart5
    167  106e				   .skipL016
    168  106e		       2c 80 02 	      bit	SWCHA
    169  1071		       30 03		      BMI	.skip2OR
    170  1073				   .condpart5
    171  1073		       4c 04 90 	      jmp	.resettitlepage
    172  1076
    173  1076				   .skip2OR
    174  1076				   .L017		;  if joy0up  ||  joy0down then goto resettitlepage
    175  1076
    176  1076		       a9 10		      lda	#$10
    177  1078		       2c 80 02 	      bit	SWCHA
    178  107b		       d0 03		      BNE	.skipL017
    179  107d				   .condpart6
    180  107d		       4c 87 90 	      jmp	.condpart7
    181  1080				   .skipL017
    182  1080		       a9 20		      lda	#$20
    183  1082		       2c 80 02 	      bit	SWCHA
    184  1085		       d0 03		      BNE	.skip3OR
    185  1087				   .condpart7
    186  1087		       4c 04 90 	      jmp	.resettitlepage
    187  108a
    188  108a				   .skip3OR
    189  108a				   .L018		;  goto gamestart
    190  108a
    191  108a		       4c 4e 90 	      jmp	.gamestart
    192  108d
    193  108d				   .
    194  108d							; 
    195  108d
    196  108d				   .L019		;  bank 2
    197  108d
    198  108d					      if	ECHO1
      3911 bytes of ROM space left in bank 1
    199  108d					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    200  108d					      endif
    201  108d		       00 01	   ECHO1      =	1
    202  1fd4					      ORG	$1FF4-bscode_length
    203  1fd4					      RORG	$9FF4-bscode_length
    204  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    205  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    206  1fd6				  -	      stx	FASTFETCH
    207  1fd6					      endif
    208  1fd6		       9a		      txs
    209  1fd7				  -	      if	bankswitch == 64
    210  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    211  1fd7					      else
    212  1fd7		       a9 f2		      lda	#>(start-1)
    213  1fd9					      endif
    214  1fd9		       48		      pha
    215  1fda		       a9 4f		      lda	#<(start-1)
    216  1fdc		       48		      pha
    217  1fdd		       48		      pha
    218  1fde		       8a		      txa
    219  1fdf		       48		      pha
    220  1fe0		       ba		      tsx
    221  1fe1					      if	bankswitch != 64
    222  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    223  1fe3		       2a		      rol
    224  1fe4		       2a		      rol
    225  1fe5		       2a		      rol
    226  1fe6		       2a		      rol
    227  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    228  1fe9		       aa		      tax
    229  1fea		       e8		      inx
    230  1feb				  -	      else
    231  1feb				  -	      lda	4,x	; get high byte of return address
    232  1feb				  -	      tay
    233  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    234  1feb				  -	      sta	4,x
    235  1feb				  -	      tya
    236  1feb				  -	      lsr
    237  1feb				  -	      lsr
    238  1feb				  -	      lsr
    239  1feb				  -	      lsr
    240  1feb				  -	      tax
    241  1feb				  -	      inx
    242  1feb					      endif
    243  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    244  1fee		       68		      pla
    245  1fef		       aa		      tax
    246  1ff0		       68		      pla
    247  1ff1		       60		      rts
    248  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    249  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    250  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    251  1ff2					      endif
    252  1ffc					      ORG	$1FFC
    253  1ffc					      RORG	$9FFC
    254  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    255  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    256  2000					      ORG	$2000
    257  2000					      RORG	$B000
    258  2000				   .L020		;  rem *** We're putting the title kernel here, but it can go in any bank you
    259  2000
    260  2000				   .L021		;  rem *** like. Just don't let your program flow accidentally fall into the
    261  2000
    262  2000				   .L022		;  rem *** line below.
    263  2000
    264  2000				   .L023		;  asm
    265  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_96x2_1
     10  2000					      draw_48x1_1
     11  2000					      draw_space	10
     12  2000					      draw_48x1_2
     13  2000					      draw_space	20
     14  2000					      draw_score
     15  2000					      ENDM
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019					      ifnconst	vblank_time
     26  2019		       a9 aa		      lda	#42+128
     27  201b				  -	      else
     28  201b				  -	      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 8b b0 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_96x2_1
      1  2046		       00 01	   mk_96x2_1_on =	1
      2  2046		       20 9a b1 	      jsr	draw_bmp_96x2_1
      0  2049					      draw_48x1_1
      1  2049		       00 01	   mk_48x1_X_on =	1
      2  2049		       00 01	   mk_48x1_1_on =	1
      3  2049		       20 8c b0 	      jsr	draw_bmp_48x1_1
      0  204c					      draw_space	10
      1  204c		       a0 0a		      ldy	#10
      2  204e				   .loop
      3  204e		       85 02		      sta	WSYNC
      4  2050		       88		      dey
      5  2051		       d0 fb		      bne	.loop
      0  2053					      draw_48x1_2
      1  2053		       00 01	   mk_48x1_X_on =	1
      2  2053		       00 01	   mk_48x1_2_on =	1
      3  2053		       20 d4 b0 	      jsr	draw_bmp_48x1_2
      0  2056					      draw_space	20
      1  2056		       a0 14		      ldy	#20
      2  2058				   .loop
      3  2058		       85 02		      sta	WSYNC
      4  205a		       88		      dey
      5  205b		       d0 fb		      bne	.loop
      0  205d					      draw_score
      1  205d		       00 01	   mk_score_on =	1
      2  205d		       00 01	   mk_48x1_X_on =	1
      3  205d		       20 71 b3 	      jsr	draw_score_display
     68  2060
     69  2060		       4c 53 b4 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2063
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  2063					      include	"titlescreen/asm/position48.asm"
      1  2063
      2  2063				   position48
      3  2063
      4  2063							;postion P0 and P1
      5  2063
      6  2063		       85 02		      sta	WSYNC
      7  2065
      8  2065		       a9 90		      lda	#$90	;2
      9  2067		       85 20		      sta	HMP0	;3
     10  2069		       a9 a0		      lda	#$A0	;2
     11  206b		       85 21		      sta	HMP1	;3
     12  206d
     13  206d		       e6 9c		      inc	temp1
     14  206f		       c6 9c		      dec	temp1
     15  2071		       e6 9c		      inc	temp1
     16  2073		       c6 9c		      dec	temp1
     17  2075		       e6 9c		      inc	temp1
      0  2077					      sleep	2
      1  2077				   .CYCLES    SET	2
      2  2077
      3  2077				  -	      IF	.CYCLES < 2
      4  2077				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2077				  -	      ERR
      6  2077					      ENDIF
      7  2077
      8  2077				  -	      IF	.CYCLES & 1
      9  2077				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2077				  -	      nop	0
     11  2077				  -	      ELSE
     12  2077				  -	      bit	VSYNC
     13  2077				  -	      ENDIF
     14  2077				  -.CYCLES    SET	.CYCLES - 3
     15  2077					      ENDIF
     16  2077
     17  2077					      REPEAT	.CYCLES / 2
     18  2077		       ea		      nop
     19  2078					      REPEND
     19  2078		       85 10		      sta	RESP0	;  +3
     20  207a		       85 11		      sta	RESP1	;  +3
     21  207c		       c6 9c		      dec	temp1	;  +5
     22  207e		       e6 9c		      inc	temp1	;  +5
     23  2080		       c6 9c		      dec	temp1	;  +5
     24  2082		       e6 9c		      inc	temp1	;  +5
     25  2084		       c6 9c		      dec	temp1	;  +5
      0  2086					      sleep	3
      1  2086				   .CYCLES    SET	3
      2  2086
      3  2086				  -	      IF	.CYCLES < 2
      4  2086				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2086				  -	      ERR
      6  2086					      ENDIF
      7  2086
      8  2086					      IF	.CYCLES & 1
      9  2086					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2086		       04 00		      nop	0
     11  2088				  -	      ELSE
     12  2088				  -	      bit	VSYNC
     13  2088					      ENDIF
     14  2088				   .CYCLES    SET	.CYCLES - 3
     15  2088					      ENDIF
     16  2088
     17  2088				  -	      REPEAT	.CYCLES / 2
     18  2088				  -	      nop
     19  2088					      REPEND
     27  2088		       85 2a		      sta	HMOVE	; +76
     28  208a		       60		      RTS
     29  208b
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  208b					      include	"titlescreen/titlescreen_color.asm"
      1  208b
      2  208b							; This is where the titlescreen background color gets set. 
      3  208b							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  208b							; if you want to change the color on the fly.
      5  208b
      6  208b				  -	      ifnconst	titlescreencolor
      7  208b				  -titlescreencolor
      8  208b					      endif
      9  208b		       00		      .byte.b	$00
     10  208c
------- FILE titlescreen/asm/titlescreen.asm
     73  208c
     74  208c					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  208c					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  208c
      2  208c				   draw_bmp_48x1_1
      3  208c
      4  208c		       a9 00		      lda	#0
      5  208e		       85 1b		      sta	GRP0
      6  2090		       85 1c		      sta	GRP1
      7  2092
      8  2092		       a0 0b		      ldy	#11
      9  2094				   bmp_48x1_1_pointersetup
     10  2094		       b9 c8 b0 	      lda	bmp_48x1_1_values,y
     11  2097		       99 96 00 	      sta	scorepointers,y
     12  209a		       88		      dey
     13  209b		       b9 c8 b0 	      lda	bmp_48x1_1_values,y
     14  209e				  -	      ifconst	bmp_48x1_1_index
     15  209e				  -	      sec
     16  209e				  -	      sbc	bmp_48x1_1_index
     17  209e					      endif
     18  209e		       99 96 00 	      sta	scorepointers,y
     19  20a1		       88		      dey
     20  20a2		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  20a4
     22  20a4		       a0 1a		      ldy	(#bmp_48x1_1_window-1)
     23  20a6		       84 f1		      sty	aux2
     24  20a8
     25  20a8					      ifconst	bmp_48x1_1_background
     26  20a8		       ad 6b b4 	      lda	bmp_48x1_1_background
     27  20ab				  -	      else
     28  20ab				  -	      lda	titlescreencolor
     29  20ab					      endif
     30  20ab		       85 f3		      sta	aux4
     31  20ad
     32  20ad		       ad 68 b4 	      lda	bmp_48x1_1_color
     33  20b0		       85 06		      sta	COLUP0	;3
     34  20b2		       85 07		      sta	COLUP1	;3
     35  20b4		       85 2b		      sta	HMCLR	;3
     36  20b6
     37  20b6		       ad 8b b0 	      lda	titlescreencolor
     38  20b9		       85 08		      sta	COLUPF
     39  20bb
     40  20bb					      ifconst	bmp_48x1_1_PF1
     41  20bb		       ad 69 b4 	      lda	bmp_48x1_1_PF1
     42  20be				  -	      else
     43  20be				  -	      lda	#0
     44  20be				  -	      nop
     45  20be					      endif
     46  20be		       85 0e		      sta	PF1
     47  20c0
     48  20c0					      ifconst	bmp_48x1_1_PF2
     49  20c0		       ad 6a b4 	      lda	bmp_48x1_1_PF2
     50  20c3				  -	      else
     51  20c3				  -	      lda	#0
     52  20c3				  -	      nop
     53  20c3					      endif
     54  20c3		       85 0f		      sta	PF2
     55  20c5
     56  20c5		       4c 1f b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20c8
     58  20c8				   bmp_48x1_1_values
     59  20c8		       6c b4		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  20ca		       87 b4		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  20cc		       a2 b4		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  20ce		       bd b4		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  20d0		       d8 b4		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  20d2		       00 b5		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  20d4
------- FILE titlescreen/asm/titlescreen.asm
     76  20d4					      endif		;mk_48x1_1_on
     77  20d4
     78  20d4					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  20d4					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  20d4
      2  20d4				   draw_bmp_48x1_2
      3  20d4
      4  20d4		       a9 00		      lda	#0
      5  20d6		       85 1b		      sta	GRP0
      6  20d8		       85 1c		      sta	GRP1
      7  20da
      8  20da		       a0 0b		      ldy	#11
      9  20dc				   bmp_48x1_2_pointersetup
     10  20dc		       b9 13 b1 	      lda	bmp_48x1_2_values,y
     11  20df		       99 96 00 	      sta	scorepointers,y
     12  20e2		       88		      dey
     13  20e3		       b9 13 b1 	      lda	bmp_48x1_2_values,y
     14  20e6					      ifconst	bmp_48x1_2_index
     15  20e6		       38		      sec
     16  20e7		       e5 d4		      sbc	bmp_48x1_2_index
     17  20e9					      endif
     18  20e9		       99 96 00 	      sta	scorepointers,y
     19  20ec		       88		      dey
     20  20ed		       10 ed		      bpl	bmp_48x1_2_pointersetup
     21  20ef
     22  20ef		       a0 3f		      ldy	(#bmp_48x1_2_window-1)
     23  20f1		       84 f1		      sty	aux2
     24  20f3
     25  20f3					      ifconst	bmp_48x1_2_background
     26  20f3		       ad 1e b5 	      lda	bmp_48x1_2_background
     27  20f6				  -	      else
     28  20f6				  -	      lda	titlescreencolor
     29  20f6					      endif
     30  20f6		       85 f3		      sta	aux4
     31  20f8
     32  20f8		       ad 1b b5 	      lda	bmp_48x1_2_color
     33  20fb		       85 06		      sta	COLUP0	;3
     34  20fd		       85 07		      sta	COLUP1	;3
     35  20ff		       85 2b		      sta	HMCLR	;3
     36  2101
     37  2101		       ad 8b b0 	      lda	titlescreencolor
     38  2104		       85 08		      sta	COLUPF
     39  2106
     40  2106					      ifconst	bmp_48x1_2_PF1
     41  2106		       ad 1c b5 	      lda	bmp_48x1_2_PF1
     42  2109				  -	      else
     43  2109				  -	      lda	#0
     44  2109				  -	      nop
     45  2109					      endif
     46  2109		       85 0e		      sta	PF1
     47  210b
     48  210b					      ifconst	bmp_48x1_2_PF2
     49  210b		       ad 1d b5 	      lda	bmp_48x1_2_PF2
     50  210e				  -	      else
     51  210e				  -	      lda	#0
     52  210e				  -	      nop
     53  210e					      endif
     54  210e		       85 0f		      sta	PF2
     55  2110
     56  2110		       4c 1f b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  2113
     58  2113				   bmp_48x1_2_values
     59  2113		       bf b6		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  2115		       bf b7		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  2117		       bf b8		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2119		       bf b9		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  211b		       bf ba		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  211d		       bf bb		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  211f
------- FILE titlescreen/asm/titlescreen.asm
     80  211f					      endif		;mk_48x1_2_on
     81  211f
     82  211f				  -	      ifconst	mk_48x1_3_on
     83  211f				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  211f					      endif		;mk_48x1_3_on
     85  211f
     86  211f				  -	      ifconst	mk_48x1_4_on
     87  211f				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  211f					      endif		;mk_48x1_4_on
     89  211f
     90  211f				  -	      ifconst	mk_48x1_5_on
     91  211f				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  211f					      endif		;mk_48x1_5_on
     93  211f
     94  211f				  -	      ifconst	mk_48x1_6_on
     95  211f				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  211f					      endif		;mk_48x1_6_on
     97  211f
     98  211f				  -	      ifconst	mk_48x1_7_on
     99  211f				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  211f					      endif		;mk_48x1_7_on
    101  211f
    102  211f				  -	      ifconst	mk_48x1_8_on
    103  211f				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  211f					      endif		;mk_48x1_8_on
    105  211f
    106  211f				  -	      ifconst	mk_48x2_1_on
    107  211f				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  211f					      endif		;mk_48x2_1_on
    109  211f
    110  211f				  -	      ifconst	mk_48x2_2_on
    111  211f				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  211f					      endif		;mk_48x2_2_on
    113  211f
    114  211f				  -	      ifconst	mk_48x2_3_on
    115  211f				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  211f					      endif		;mk_48x2_3_on
    117  211f
    118  211f				  -	      ifconst	mk_48x2_4_on
    119  211f				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  211f					      endif		;mk_48x2_4_on
    121  211f
    122  211f				  -	      ifconst	mk_48x2_5_on
    123  211f				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  211f					      endif		;mk_48x2_5_on
    125  211f
    126  211f				  -	      ifconst	mk_48x2_6_on
    127  211f				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  211f					      endif		;mk_48x2_6_on
    129  211f
    130  211f				  -	      ifconst	mk_48x2_7_on
    131  211f				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  211f					      endif		;mk_48x2_7_on
    133  211f
    134  211f				  -	      ifconst	mk_48x2_8_on
    135  211f				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  211f					      endif		;mk_48x2_8_on
    137  211f
    138  211f					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  211f					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  211f				   draw_bmp_48x1_X
      2  211f
      3  211f		       a9 03		      lda	#3
      4  2121		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  2123		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  2125
      7  2125		       ba		      tsx
      8  2126		       86 f6		      stx	stack1	;save the stack pointer
      9  2128
     10  2128		       20 63 b0 	      jsr	position48
     11  212b
     12  212b		       a9 03		      lda	#3	;2
     13  212d		       85 25		      sta	VDELP0	;3
     14  212f		       85 26		      sta	VDELP1	;3
     15  2131
     16  2131		       a9 01		      lda	#1	;2
     17  2133		       85 0a		      sta	CTRLPF	;3
     18  2135
     19  2135							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2135		       85 2b		      sta	HMCLR
     21  2137
     22  2137		       85 02		      sta	WSYNC
     23  2139
     24  2139		       e6 9c		      inc	temp1	;5
     25  213b		       c6 9c		      dec	temp1	;5
     26  213d		       e6 9c		      inc	temp1	;5
     27  213f		       c6 9c		      dec	temp1	;5
     28  2141		       e6 9c		      inc	temp1	;5
     29  2143		       c6 9c		      dec	temp1	;5
     30  2145		       e6 9c		      inc	temp1	;5
     31  2147		       c6 9c		      dec	temp1	;5
     32  2149		       e6 9c		      inc	temp1	;5
     33  214b		       c6 9c		      dec	temp1	;5
     34  214d
      0  214d					      sleep	5
      1  214d				   .CYCLES    SET	5
      2  214d
      3  214d				  -	      IF	.CYCLES < 2
      4  214d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  214d				  -	      ERR
      6  214d					      ENDIF
      7  214d
      8  214d					      IF	.CYCLES & 1
      9  214d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  214d		       04 00		      nop	0
     11  214f				  -	      ELSE
     12  214f				  -	      bit	VSYNC
     13  214f					      ENDIF
     14  214f				   .CYCLES    SET	.CYCLES - 3
     15  214f					      ENDIF
     16  214f
     17  214f					      REPEAT	.CYCLES / 2
     18  214f		       ea		      nop
     19  2150					      REPEND
     36  2150
     37  2150		       c8		      iny
     38  2151
     39  2151		       4c 54 b1 	      jmp	pf48x1_X_loop_entry
     40  2154
     41  2154				  -	      if	>. != >[.+$2a]
     42  2154				  -	      align	256
     43  2154					      endif
     44  2154
     45  2154				   pf48x1_X_loop_entry
     46  2154				   pf48x1_X_loop
     47  2154		       88		      dey		;2
     48  2155		       84 f1		      sty	aux2	;3
     49  2157		       b1 96		      lda	(scorepointers+0),y	;5
     50  2159		       85 1b		      sta	GRP0	;3
     51  215b
     52  215b		       b1 98		      lda	(scorepointers+2),y	;5
     53  215d		       85 1c		      sta	GRP1	;3
     54  215f		       b1 9a		      lda	(scorepointers+4),y	;5
     55  2161		       85 1b		      sta	GRP0	;3
     56  2163
      0  2163					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  2163				   .CYCLES    SET	2
      2  2163
      3  2163				  -	      IF	.CYCLES < 2
      4  2163				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2163				  -	      ERR
      6  2163					      ENDIF
      7  2163
      8  2163				  -	      IF	.CYCLES & 1
      9  2163				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2163				  -	      nop	0
     11  2163				  -	      ELSE
     12  2163				  -	      bit	VSYNC
     13  2163				  -	      ENDIF
     14  2163				  -.CYCLES    SET	.CYCLES - 3
     15  2163					      ENDIF
     16  2163
     17  2163					      REPEAT	.CYCLES / 2
     18  2163		       ea		      nop
     19  2164					      REPEND
     58  2164		       a5 f3		      lda	aux4	;3
     59  2166		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2168
     61  2168		       b3 a0		      lax	(scorepointers+10),y	;5
     62  216a		       b1 9e		      lda	(scorepointers+8),y	;5
     63  216c		       85 f7		      sta	stack2	;3
     64  216e		       b1 9c		      lda	(scorepointers+6),y	;5
     65  2170		       a4 f7		      ldy	stack2	;3
     66  2172
     67  2172		       85 1c		      sta	GRP1	;3
     68  2174		       84 1b		      sty	GRP0	;3
     69  2176		       86 1c		      stx	GRP1	;3
     70  2178		       84 1b		      sty	GRP0	;3
     71  217a
     72  217a		       a4 f1		      ldy	aux2	;3
     73  217c		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  217e
     75  217e				   pf48x1_X_codeend
     76  217e							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  217e
     78  217e		       a9 00		      lda	#0
     79  2180		       85 1b		      sta	GRP0
     80  2182		       85 1c		      sta	GRP1
     81  2184		       85 1b		      sta	GRP0
     82  2186		       85 1c		      sta	GRP1
     83  2188		       85 1f		      sta	ENABL
     84  218a		       85 1d		      sta	ENAM0
     85  218c		       85 25		      sta	VDELP0
     86  218e		       85 26		      sta	VDELP1
     87  2190		       85 0d		      sta	PF0
     88  2192		       85 0e		      sta	PF1
     89  2194		       85 0f		      sta	PF2
     90  2196
     91  2196		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2198		       9a		      txs
     93  2199		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  219a					      endif		;mk_48x1_X_on
    141  219a
    142  219a				  -	      ifconst	mk_48x2_X_on
    143  219a				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  219a					      endif		;mk_48x2_X_on
    145  219a
    146  219a
    147  219a					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 2
      0  219a					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  219a				   draw_bmp_96x2_1
      2  219a
      3  219a				  -	      ifconst	bmp_96x2_1_index
      4  219a				  -	      lda	#(bmp_96x2_1_height-1)
      5  219a				  -	      sec
      6  219a				  -	      sbc	bmp_96x2_1_index
      7  219a				  -	      tay
      8  219a				  -	      sbc	#bmp_96x2_1_window
      9  219a				  -	      sta	temp1
     10  219a					      else
     11  219a		       a0 0c		      ldy	#(bmp_96x2_1_window-1)
     12  219c		       a9 ff		      lda	#255
     13  219e		       85 9c		      sta	temp1
     14  21a0					      endif
     15  21a0
     16  21a0		       a9 03		      lda	#3
     17  21a2		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  21a4		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  21a6		       a9 00		      lda	#0
     20  21a8
     21  21a8		       b9 01 bc 	      lda	bmp_96x2_1_colors,y	;4
     22  21ab				  -	      ifconst	bmp_96x2_1_fade
     23  21ab				  -	      and	bmp_96x2_1_fade
     24  21ab					      endif
     25  21ab		       85 06		      sta	COLUP0	;3
     26  21ad		       85 07		      sta	COLUP1	;3
     27  21af		       85 2b		      sta	HMCLR	;3
     28  21b1
     29  21b1		       a5 82		      lda	titleframe
     30  21b3		       29 01		      and	#1
     31  21b5		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  21b7		       4c 70 b2 	      jmp	pf96x2_1_frame1
     33  21ba				   jmp_pf96x2_1_frame0
     34  21ba		       4c bd b1 	      jmp	pf96x2_1_frame0
     35  21bd
     36  21bd				   pf96x2_1_frame0
     37  21bd							;postion P0 and P1
     38  21bd		       85 02		      sta	WSYNC
     39  21bf		       a9 e0		      lda	#%11100000
     40  21c1		       85 20		      sta	HMP0
     41  21c3		       a9 10		      lda	#%00010000
     42  21c5		       85 21		      sta	HMP1
     43  21c7		       85 02		      sta	WSYNC
      0  21c9					      sleep	28
      1  21c9				   .CYCLES    SET	28
      2  21c9
      3  21c9				  -	      IF	.CYCLES < 2
      4  21c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c9				  -	      ERR
      6  21c9					      ENDIF
      7  21c9
      8  21c9				  -	      IF	.CYCLES & 1
      9  21c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c9				  -	      nop	0
     11  21c9				  -	      ELSE
     12  21c9				  -	      bit	VSYNC
     13  21c9				  -	      ENDIF
     14  21c9				  -.CYCLES    SET	.CYCLES - 3
     15  21c9					      ENDIF
     16  21c9
     17  21c9					      REPEAT	.CYCLES / 2
     18  21c9		       ea		      nop
     17  21c9					      REPEND
     18  21ca		       ea		      nop
     17  21ca					      REPEND
     18  21cb		       ea		      nop
     17  21cb					      REPEND
     18  21cc		       ea		      nop
     17  21cc					      REPEND
     18  21cd		       ea		      nop
     17  21cd					      REPEND
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     17  21cf					      REPEND
     18  21d0		       ea		      nop
     17  21d0					      REPEND
     18  21d1		       ea		      nop
     17  21d1					      REPEND
     18  21d2		       ea		      nop
     17  21d2					      REPEND
     18  21d3		       ea		      nop
     17  21d3					      REPEND
     18  21d4		       ea		      nop
     17  21d4					      REPEND
     18  21d5		       ea		      nop
     17  21d5					      REPEND
     18  21d6		       ea		      nop
     19  21d7					      REPEND
     45  21d7		       85 10		      sta	RESP0
      0  21d9					      sleep	14
      1  21d9				   .CYCLES    SET	14
      2  21d9
      3  21d9				  -	      IF	.CYCLES < 2
      4  21d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21d9				  -	      ERR
      6  21d9					      ENDIF
      7  21d9
      8  21d9				  -	      IF	.CYCLES & 1
      9  21d9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21d9				  -	      nop	0
     11  21d9				  -	      ELSE
     12  21d9				  -	      bit	VSYNC
     13  21d9				  -	      ENDIF
     14  21d9				  -.CYCLES    SET	.CYCLES - 3
     15  21d9					      ENDIF
     16  21d9
     17  21d9					      REPEAT	.CYCLES / 2
     18  21d9		       ea		      nop
     17  21d9					      REPEND
     18  21da		       ea		      nop
     17  21da					      REPEND
     18  21db		       ea		      nop
     17  21db					      REPEND
     18  21dc		       ea		      nop
     17  21dc					      REPEND
     18  21dd		       ea		      nop
     17  21dd					      REPEND
     18  21de		       ea		      nop
     17  21de					      REPEND
     18  21df		       ea		      nop
     19  21e0					      REPEND
     47  21e0		       85 11		      sta	RESP1
     48  21e2		       85 02		      sta	WSYNC
     49  21e4		       85 2a		      sta	HMOVE
     50  21e6
     51  21e6		       85 02		      sta	WSYNC
     52  21e8		       85 2b		      sta	HMCLR
     53  21ea		       85 02		      sta	WSYNC
     54  21ec
      0  21ec					      sleep	4
      1  21ec				   .CYCLES    SET	4
      2  21ec
      3  21ec				  -	      IF	.CYCLES < 2
      4  21ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ec				  -	      ERR
      6  21ec					      ENDIF
      7  21ec
      8  21ec				  -	      IF	.CYCLES & 1
      9  21ec				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ec				  -	      nop	0
     11  21ec				  -	      ELSE
     12  21ec				  -	      bit	VSYNC
     13  21ec				  -	      ENDIF
     14  21ec				  -.CYCLES    SET	.CYCLES - 3
     15  21ec					      ENDIF
     16  21ec
     17  21ec					      REPEAT	.CYCLES / 2
     18  21ec		       ea		      nop
     17  21ec					      REPEND
     18  21ed		       ea		      nop
     19  21ee					      REPEND
     56  21ee		       4c 00 b2 	      jmp	pfline_96x2_1_frame0
     57  21f1							;align so our branch doesn't unexpectedly cross a page...
     58  21f1					      if	>. != >[.+$70]
     59  2200		       00 00 00 00*	      align	256
     60  2200					      endif
     61  2200
     62  2200				   pfline_96x2_1_frame0
     63  2200		       a9 80		      lda	#$80	;2
     64  2202		       85 20		      sta	HMP0	;3
     65  2204		       85 21		      sta	HMP1	;3
     66  2206
     67  2206		       b9 5c bc 	      lda	bmp_96x2_1_06,y	;4
     68  2209		       85 1c		      sta	GRP1	;3
     69  220b
     70  220b		       b9 0e bc 	      lda	bmp_96x2_1_00,y
     71  220e		       85 1b		      sta	GRP0
     72  2210		       b9 28 bc 	      lda	bmp_96x2_1_02,y
     73  2213		       85 1b		      sta	GRP0
     74  2215		       b9 42 bc 	      lda	bmp_96x2_1_04,y
     75  2218		       85 1b		      sta	GRP0
     76  221a
      0  221a					      sleep	2
      1  221a				   .CYCLES    SET	2
      2  221a
      3  221a				  -	      IF	.CYCLES < 2
      4  221a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  221a				  -	      ERR
      6  221a					      ENDIF
      7  221a
      8  221a				  -	      IF	.CYCLES & 1
      9  221a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  221a				  -	      nop	0
     11  221a				  -	      ELSE
     12  221a				  -	      bit	VSYNC
     13  221a				  -	      ENDIF
     14  221a				  -.CYCLES    SET	.CYCLES - 3
     15  221a					      ENDIF
     16  221a
     17  221a					      REPEAT	.CYCLES / 2
     18  221a		       ea		      nop
     19  221b					      REPEND
     78  221b
     79  221b		       b9 76 bc 	      lda	bmp_96x2_1_08,y
     80  221e		       85 1c		      sta	GRP1
     81  2220		       b9 90 bc 	      lda	bmp_96x2_1_10,y
     82  2223		       85 1c		      sta	GRP1
     83  2225
     84  2225		       b9 1b bc 	      lda	bmp_96x2_1_01,y
     85  2228		       85 1b		      sta	GRP0
     86  222a
      0  222a					      sleep	8
      1  222a				   .CYCLES    SET	8
      2  222a
      3  222a				  -	      IF	.CYCLES < 2
      4  222a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  222a				  -	      ERR
      6  222a					      ENDIF
      7  222a
      8  222a				  -	      IF	.CYCLES & 1
      9  222a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  222a				  -	      nop	0
     11  222a				  -	      ELSE
     12  222a				  -	      bit	VSYNC
     13  222a				  -	      ENDIF
     14  222a				  -.CYCLES    SET	.CYCLES - 3
     15  222a					      ENDIF
     16  222a
     17  222a					      REPEAT	.CYCLES / 2
     18  222a		       ea		      nop
     17  222a					      REPEND
     18  222b		       ea		      nop
     17  222b					      REPEND
     18  222c		       ea		      nop
     17  222c					      REPEND
     18  222d		       ea		      nop
     19  222e					      REPEND
     88  222e
     89  222e							;sta WSYNC	;=0
     90  222e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2230
     92  2230		       b9 00 bc 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2233				  -	      ifconst	bmp_96x2_1_fade
     94  2233				  -	      and	bmp_96x2_1_fade
     95  2233					      else
      0  2233					      sleep	3
      1  2233				   .CYCLES    SET	3
      2  2233
      3  2233				  -	      IF	.CYCLES < 2
      4  2233				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2233				  -	      ERR
      6  2233					      ENDIF
      7  2233
      8  2233					      IF	.CYCLES & 1
      9  2233					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2233		       04 00		      nop	0
     11  2235				  -	      ELSE
     12  2235				  -	      bit	VSYNC
     13  2235					      ENDIF
     14  2235				   .CYCLES    SET	.CYCLES - 3
     15  2235					      ENDIF
     16  2235
     17  2235				  -	      REPEAT	.CYCLES / 2
     18  2235				  -	      nop
     19  2235					      REPEND
     97  2235					      endif
     98  2235		       aa		      tax
     99  2236
    100  2236		       a9 00		      lda	#0	;2
    101  2238		       85 20		      sta	HMP0	;3
    102  223a		       85 21		      sta	HMP1	;3
    103  223c
      0  223c					      sleep	7
      1  223c				   .CYCLES    SET	7
      2  223c
      3  223c				  -	      IF	.CYCLES < 2
      4  223c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  223c				  -	      ERR
      6  223c					      ENDIF
      7  223c
      8  223c					      IF	.CYCLES & 1
      9  223c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  223c		       04 00		      nop	0
     11  223e				  -	      ELSE
     12  223e				  -	      bit	VSYNC
     13  223e					      ENDIF
     14  223e				   .CYCLES    SET	.CYCLES - 3
     15  223e					      ENDIF
     16  223e
     17  223e					      REPEAT	.CYCLES / 2
     18  223e		       ea		      nop
     17  223e					      REPEND
     18  223f		       ea		      nop
     19  2240					      REPEND
    105  2240
    106  2240		       b9 69 bc 	      lda	bmp_96x2_1_07,y
    107  2243		       85 1c		      sta	GRP1
    108  2245
    109  2245		       b9 35 bc 	      lda	bmp_96x2_1_03,y	;5
    110  2248		       85 1b		      sta	GRP0	;3 =  8
    111  224a		       b9 4f bc 	      lda	bmp_96x2_1_05,y	;5
    112  224d		       85 1b		      sta	GRP0	;3 =  8
    113  224f
      0  224f					      sleep	2
      1  224f				   .CYCLES    SET	2
      2  224f
      3  224f				  -	      IF	.CYCLES < 2
      4  224f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224f				  -	      ERR
      6  224f					      ENDIF
      7  224f
      8  224f				  -	      IF	.CYCLES & 1
      9  224f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  224f				  -	      nop	0
     11  224f				  -	      ELSE
     12  224f				  -	      bit	VSYNC
     13  224f				  -	      ENDIF
     14  224f				  -.CYCLES    SET	.CYCLES - 3
     15  224f					      ENDIF
     16  224f
     17  224f					      REPEAT	.CYCLES / 2
     18  224f		       ea		      nop
     19  2250					      REPEND
    115  2250
    116  2250		       b9 83 bc 	      lda	bmp_96x2_1_09,y	;5
    117  2253		       85 1c		      sta	GRP1	;3 =  8
    118  2255		       b9 9d bc 	      lda	bmp_96x2_1_11,y	;5
    119  2258		       85 1c		      sta	GRP1	;3 =  8
    120  225a
      0  225a					      sleep	2
      1  225a				   .CYCLES    SET	2
      2  225a
      3  225a				  -	      IF	.CYCLES < 2
      4  225a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225a				  -	      ERR
      6  225a					      ENDIF
      7  225a
      8  225a				  -	      IF	.CYCLES & 1
      9  225a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  225a				  -	      nop	0
     11  225a				  -	      ELSE
     12  225a				  -	      bit	VSYNC
     13  225a				  -	      ENDIF
     14  225a				  -.CYCLES    SET	.CYCLES - 3
     15  225a					      ENDIF
     16  225a
     17  225a					      REPEAT	.CYCLES / 2
     18  225a		       ea		      nop
     19  225b					      REPEND
    122  225b		       86 07		      stx	COLUP1
    123  225d		       86 06		      stx	COLUP0
    124  225f
    125  225f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  2261					      sleep	2
      1  2261				   .CYCLES    SET	2
      2  2261
      3  2261				  -	      IF	.CYCLES < 2
      4  2261				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2261				  -	      ERR
      6  2261					      ENDIF
      7  2261
      8  2261				  -	      IF	.CYCLES & 1
      9  2261				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2261				  -	      nop	0
     11  2261				  -	      ELSE
     12  2261				  -	      bit	VSYNC
     13  2261				  -	      ENDIF
     14  2261				  -.CYCLES    SET	.CYCLES - 3
     15  2261					      ENDIF
     16  2261
     17  2261					      REPEAT	.CYCLES / 2
     18  2261		       ea		      nop
     19  2262					      REPEND
    127  2262		       88		      dey
    128  2263
    129  2263		       c4 9c		      cpy	temp1	;3
    130  2265		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  2267
    132  2267				   pf96x2_1_0codeend
    133  2267							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  2267
    135  2267		       a9 00		      lda	#0
    136  2269		       85 1b		      sta	GRP0
    137  226b		       85 1c		      sta	GRP1
    138  226d		       4c 6e b3 	      jmp	pfdone_96x2_1
    139  2270
    140  2270
    141  2270				   pf96x2_1_frame1
    142  2270
    143  2270							;postion P0 and P1
    144  2270		       85 02		      sta	WSYNC
    145  2272		       a9 20		      lda	#%00100000
    146  2274		       85 20		      sta	HMP0
    147  2276		       a9 00		      lda	#0
    148  2278		       a9 f0		      lda	#%11110000
    149  227a		       85 21		      sta	HMP1
    150  227c		       85 02		      sta	WSYNC
      0  227e					      sleep	32
      1  227e				   .CYCLES    SET	32
      2  227e
      3  227e				  -	      IF	.CYCLES < 2
      4  227e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  227e				  -	      ERR
      6  227e					      ENDIF
      7  227e
      8  227e				  -	      IF	.CYCLES & 1
      9  227e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  227e				  -	      nop	0
     11  227e				  -	      ELSE
     12  227e				  -	      bit	VSYNC
     13  227e				  -	      ENDIF
     14  227e				  -.CYCLES    SET	.CYCLES - 3
     15  227e					      ENDIF
     16  227e
     17  227e					      REPEAT	.CYCLES / 2
     18  227e		       ea		      nop
     17  227e					      REPEND
     18  227f		       ea		      nop
     17  227f					      REPEND
     18  2280		       ea		      nop
     17  2280					      REPEND
     18  2281		       ea		      nop
     17  2281					      REPEND
     18  2282		       ea		      nop
     17  2282					      REPEND
     18  2283		       ea		      nop
     17  2283					      REPEND
     18  2284		       ea		      nop
     17  2284					      REPEND
     18  2285		       ea		      nop
     17  2285					      REPEND
     18  2286		       ea		      nop
     17  2286					      REPEND
     18  2287		       ea		      nop
     17  2287					      REPEND
     18  2288		       ea		      nop
     17  2288					      REPEND
     18  2289		       ea		      nop
     17  2289					      REPEND
     18  228a		       ea		      nop
     17  228a					      REPEND
     18  228b		       ea		      nop
     17  228b					      REPEND
     18  228c		       ea		      nop
     17  228c					      REPEND
     18  228d		       ea		      nop
     19  228e					      REPEND
    152  228e		       85 10		      sta	RESP0
      0  2290					      sleep	12
      1  2290				   .CYCLES    SET	12
      2  2290
      3  2290				  -	      IF	.CYCLES < 2
      4  2290				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2290				  -	      ERR
      6  2290					      ENDIF
      7  2290
      8  2290				  -	      IF	.CYCLES & 1
      9  2290				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2290				  -	      nop	0
     11  2290				  -	      ELSE
     12  2290				  -	      bit	VSYNC
     13  2290				  -	      ENDIF
     14  2290				  -.CYCLES    SET	.CYCLES - 3
     15  2290					      ENDIF
     16  2290
     17  2290					      REPEAT	.CYCLES / 2
     18  2290		       ea		      nop
     17  2290					      REPEND
     18  2291		       ea		      nop
     17  2291					      REPEND
     18  2292		       ea		      nop
     17  2292					      REPEND
     18  2293		       ea		      nop
     17  2293					      REPEND
     18  2294		       ea		      nop
     17  2294					      REPEND
     18  2295		       ea		      nop
     19  2296					      REPEND
    154  2296		       85 11		      sta	RESP1
    155  2298		       85 02		      sta	WSYNC
    156  229a		       85 2a		      sta	HMOVE
    157  229c
    158  229c		       85 02		      sta	WSYNC
    159  229e		       85 2b		      sta	HMCLR
    160  22a0
    161  22a0
    162  22a0
    163  22a0		       85 02		      sta	WSYNC
      0  22a2					      sleep	3
      1  22a2				   .CYCLES    SET	3
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2					      IF	.CYCLES & 1
      9  22a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2		       04 00		      nop	0
     11  22a4				  -	      ELSE
     12  22a4				  -	      bit	VSYNC
     13  22a4					      ENDIF
     14  22a4				   .CYCLES    SET	.CYCLES - 3
     15  22a4					      ENDIF
     16  22a4
     17  22a4				  -	      REPEAT	.CYCLES / 2
     18  22a4				  -	      nop
     19  22a4					      REPEND
    165  22a4		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    166  22a7
    167  22a7							;align so our branch doesn't unexpectedly cross a page...
    168  22a7					      if	>. != >[.+$70]
    169  2300		       00 00 00 00*	      align	256
    170  2300					      endif
    171  2300
    172  2300				   pfline_96x2_1_frame1
    173  2300
    174  2300		       85 2a		      sta	HMOVE
    175  2302
    176  2302		       b9 69 bc 	      lda	bmp_96x2_1_07,y	;4
    177  2305		       85 1c		      sta	GRP1	;3
    178  2307
    179  2307		       a9 00		      lda	#$0	;2
    180  2309		       85 20		      sta	HMP0	;3
    181  230b		       85 21		      sta	HMP1	;3
    182  230d
    183  230d		       b9 1b bc 	      lda	bmp_96x2_1_01,y
    184  2310		       8d 1b 00 	      sta.w	GRP0
    185  2313		       b9 35 bc 	      lda	bmp_96x2_1_03,y
    186  2316		       85 1b		      sta	GRP0
    187  2318		       b9 4f bc 	      lda	bmp_96x2_1_05,y
    188  231b		       85 1b		      sta	GRP0
    189  231d
      0  231d					      sleep	2
      1  231d				   .CYCLES    SET	2
      2  231d
      3  231d				  -	      IF	.CYCLES < 2
      4  231d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  231d				  -	      ERR
      6  231d					      ENDIF
      7  231d
      8  231d				  -	      IF	.CYCLES & 1
      9  231d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  231d				  -	      nop	0
     11  231d				  -	      ELSE
     12  231d				  -	      bit	VSYNC
     13  231d				  -	      ENDIF
     14  231d				  -.CYCLES    SET	.CYCLES - 3
     15  231d					      ENDIF
     16  231d
     17  231d					      REPEAT	.CYCLES / 2
     18  231d		       ea		      nop
     19  231e					      REPEND
    191  231e
    192  231e		       b9 83 bc 	      lda	bmp_96x2_1_09,y
    193  2321		       85 1c		      sta	GRP1
    194  2323		       b9 9d bc 	      lda	bmp_96x2_1_11,y
    195  2326		       85 1c		      sta	GRP1
    196  2328
    197  2328		       b9 0e bc 	      lda	bmp_96x2_1_00,y
    198  232b		       85 1b		      sta	GRP0
    199  232d
    200  232d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2330
    202  2330							;sta WSYNC	;=0 -----------------------------------------
    203  2330
    204  2330		       b9 5c bc 	      lda	bmp_96x2_1_06,y
    205  2333		       85 1c		      sta	GRP1
    206  2335
      0  2335					      sleep	8
      1  2335				   .CYCLES    SET	8
      2  2335
      3  2335				  -	      IF	.CYCLES < 2
      4  2335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2335				  -	      ERR
      6  2335					      ENDIF
      7  2335
      8  2335				  -	      IF	.CYCLES & 1
      9  2335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2335				  -	      nop	0
     11  2335				  -	      ELSE
     12  2335				  -	      bit	VSYNC
     13  2335				  -	      ENDIF
     14  2335				  -.CYCLES    SET	.CYCLES - 3
     15  2335					      ENDIF
     16  2335
     17  2335					      REPEAT	.CYCLES / 2
     18  2335		       ea		      nop
     17  2335					      REPEND
     18  2336		       ea		      nop
     17  2336					      REPEND
     18  2337		       ea		      nop
     17  2337					      REPEND
     18  2338		       ea		      nop
     19  2339					      REPEND
    208  2339
    209  2339		       b9 00 bc 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  233c		       aa		      tax		;2
    211  233d
      0  233d					      sleep	3
      1  233d				   .CYCLES    SET	3
      2  233d
      3  233d				  -	      IF	.CYCLES < 2
      4  233d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  233d				  -	      ERR
      6  233d					      ENDIF
      7  233d
      8  233d					      IF	.CYCLES & 1
      9  233d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  233d		       04 00		      nop	0
     11  233f				  -	      ELSE
     12  233f				  -	      bit	VSYNC
     13  233f					      ENDIF
     14  233f				   .CYCLES    SET	.CYCLES - 3
     15  233f					      ENDIF
     16  233f
     17  233f				  -	      REPEAT	.CYCLES / 2
     18  233f				  -	      nop
     19  233f					      REPEND
    213  233f
    214  233f		       a9 80		      lda	#$80	;2
    215  2341		       85 20		      sta	HMP0	;3
    216  2343		       85 21		      sta	HMP1	;3
    217  2345
    218  2345
    219  2345		       b9 28 bc 	      lda	bmp_96x2_1_02,y	;5
    220  2348		       85 1b		      sta	GRP0	;3 =  8
    221  234a
    222  234a		       b9 42 bc 	      lda	bmp_96x2_1_04,y	;5
    223  234d		       85 1b		      sta	GRP0	;3 =  8
    224  234f
      0  234f					      sleep	2
      1  234f				   .CYCLES    SET	2
      2  234f
      3  234f				  -	      IF	.CYCLES < 2
      4  234f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  234f				  -	      ERR
      6  234f					      ENDIF
      7  234f
      8  234f				  -	      IF	.CYCLES & 1
      9  234f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  234f				  -	      nop	0
     11  234f				  -	      ELSE
     12  234f				  -	      bit	VSYNC
     13  234f				  -	      ENDIF
     14  234f				  -.CYCLES    SET	.CYCLES - 3
     15  234f					      ENDIF
     16  234f
     17  234f					      REPEAT	.CYCLES / 2
     18  234f		       ea		      nop
     19  2350					      REPEND
    226  2350
    227  2350		       b9 76 bc 	      lda	bmp_96x2_1_08,y	;5
    228  2353		       85 1c		      sta	GRP1	;3 =  8
    229  2355
    230  2355		       b9 90 bc 	      lda	bmp_96x2_1_10,y	;5
    231  2358		       85 1c		      sta	GRP1	;3 =  8
    232  235a
      0  235a					      sleep	4
      1  235a				   .CYCLES    SET	4
      2  235a
      3  235a				  -	      IF	.CYCLES < 2
      4  235a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235a				  -	      ERR
      6  235a					      ENDIF
      7  235a
      8  235a				  -	      IF	.CYCLES & 1
      9  235a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  235a				  -	      nop	0
     11  235a				  -	      ELSE
     12  235a				  -	      bit	VSYNC
     13  235a				  -	      ENDIF
     14  235a				  -.CYCLES    SET	.CYCLES - 3
     15  235a					      ENDIF
     16  235a
     17  235a					      REPEAT	.CYCLES / 2
     18  235a		       ea		      nop
     17  235a					      REPEND
     18  235b		       ea		      nop
     19  235c					      REPEND
    234  235c
    235  235c		       88		      dey
    236  235d
    237  235d		       8a		      txa
    238  235e				  -	      ifconst	bmp_96x2_1_fade
    239  235e				  -	      and	bmp_96x2_1_fade
    240  235e					      else
      0  235e					      sleep	3
      1  235e				   .CYCLES    SET	3
      2  235e
      3  235e				  -	      IF	.CYCLES < 2
      4  235e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235e				  -	      ERR
      6  235e					      ENDIF
      7  235e
      8  235e					      IF	.CYCLES & 1
      9  235e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  235e		       04 00		      nop	0
     11  2360				  -	      ELSE
     12  2360				  -	      bit	VSYNC
     13  2360					      ENDIF
     14  2360				   .CYCLES    SET	.CYCLES - 3
     15  2360					      ENDIF
     16  2360
     17  2360				  -	      REPEAT	.CYCLES / 2
     18  2360				  -	      nop
     19  2360					      REPEND
    242  2360					      endif
    243  2360		       85 07		      sta	COLUP1	;3
    244  2362		       85 06		      sta	COLUP0	;3
    245  2364
    246  2364		       c4 9c		      cpy	temp1	;2
    247  2366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2368
    249  2368				   pf96x2_1_1codeend
    250  2368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2368
    252  2368		       a9 00		      lda	#0
    253  236a		       85 1b		      sta	GRP0
    254  236c		       85 1c		      sta	GRP1
    255  236e
    256  236e				   pfdone_96x2_1
    257  236e		       85 02		      sta	WSYNC	; debug
    258  2370
    259  2370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2371					      endif		;mk_96x2_1_on
    150  2371
    151  2371				  -	      ifconst	mk_96x2_2_on
    152  2371				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2371					      endif		;mk_96x2_2_on
    154  2371
    155  2371				  -	      ifconst	mk_96x2_3_on
    156  2371				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2371					      endif		;mk_96x2_3_on
    158  2371
    159  2371				  -	      ifconst	mk_96x2_4_on
    160  2371				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2371					      endif		;mk_96x2_4_on
    162  2371
    163  2371				  -	      ifconst	mk_96x2_5_on
    164  2371				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2371					      endif		;mk_96x2_5_on
    166  2371
    167  2371				  -	      ifconst	mk_96x2_6_on
    168  2371				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2371					      endif		;mk_96x2_6_on
    170  2371
    171  2371				  -	      ifconst	mk_96x2_7_on
    172  2371				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2371					      endif		;mk_96x2_7_on
    174  2371
    175  2371				  -	      ifconst	mk_96x2_8_on
    176  2371				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2371					      endif		;mk_96x2_8_on
    178  2371
    179  2371					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  2371					      include	"titlescreen/asm/score_kernel.asm"
      1  2371							; The batari Basic score kernel
      2  2371							; This minikernel is not under the same license as the rest of the
      3  2371							; titlescreen code. Refer to the bB license before you use this in
      4  2371							; a non-bB program.
      5  2371
      6  2371				   draw_score_display
      7  2371
      8  2371		       a7 93		      lax	score+0
      9  2373		       20 43 b4 	      jsr	miniscorepointerset
     10  2376		       84 9e		      sty	scorepointers+8
     11  2378		       86 96		      stx	scorepointers+0
     12  237a		       a7 94		      lax	score+1
     13  237c		       20 43 b4 	      jsr	miniscorepointerset
     14  237f		       84 9a		      sty	scorepointers+4
     15  2381		       86 9c		      stx	scorepointers+6
     16  2383		       a7 95		      lax	score+2
     17  2385		       20 43 b4 	      jsr	miniscorepointerset
     18  2388		       84 a0		      sty	scorepointers+10
     19  238a		       86 98		      stx	scorepointers+2
     20  238c
     21  238c		       85 2b		      sta	HMCLR
     22  238e		       ba		      tsx
     23  238f		       86 f6		      stx	stack1
     24  2391							;ldx #$20
     25  2391		       a2 60		      ldx	#$60
     26  2393		       86 20		      stx	HMP0
     27  2395
     28  2395		       a2 00		      ldx	#0
     29  2397		       85 02		      sta	WSYNC	;   0
     30  2399		       86 1b		      STx	GRP0	; 3 3
     31  239b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  239d
      0  239d					      sleep	7	; 7 13
      1  239d				   .CYCLES    SET	7
      2  239d
      3  239d				  -	      IF	.CYCLES < 2
      4  239d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  239d				  -	      ERR
      6  239d					      ENDIF
      7  239d
      8  239d					      IF	.CYCLES & 1
      9  239d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  239d		       04 00		      nop	0
     11  239f				  -	      ELSE
     12  239f				  -	      bit	VSYNC
     13  239f					      ENDIF
     14  239f				   .CYCLES    SET	.CYCLES - 3
     15  239f					      ENDIF
     16  239f
     17  239f					      REPEAT	.CYCLES / 2
     18  239f		       ea		      nop
     17  239f					      REPEND
     18  23a0		       ea		      nop
     19  23a1					      REPEND
     34  23a1
     35  23a1		       a9 bc		      lda	#>miniscoretable	; 2 15
     36  23a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  23a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  23a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  23a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  23ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  23ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  23af
     43  23af		       a0 07		      LDY	#7	; 2 41
     44  23b1		       85 10		      STA	RESP0	; 3 44
     45  23b3		       85 11		      STA	RESP1	; 3 47
     46  23b5
     47  23b5		       a9 03		      LDA	#$03	; 2 49
     48  23b7		       85 04		      STA	NUSIZ0	; 3 52
     49  23b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  23bb		       85 25		      STA	VDELP0	; 3 59
     51  23bd		       85 26		      STA	VDELP1	; 3 62
     52  23bf							;LDA #$30		; 2 64
     53  23bf		       a9 70		      LDA	#$70	; 2 64
     54  23c1		       85 21		      STA	HMP1	; 3 67
     55  23c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  23c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  23c7				  -	      ifconst	score_kernel_fade
     58  23c7				  -	      and	score_kernel_fade
     59  23c7					      endif
     60  23c7
     61  23c7		       85 06		      STA	COLUP0
     62  23c9		       85 07		      STA	COLUP1
     63  23cb				  -	      ifconst	scorefade
     64  23cb				  -	      STA	stack2	; scorefade
     65  23cb					      endif
     66  23cb		       b1 96		      lda	(scorepointers),y
     67  23cd		       85 1b		      sta	GRP0
     68  23cf		       b1 9e		      lda	(scorepointers+8),y
     69  23d1		       85 02		      sta	WSYNC
      0  23d3					      sleep	2
      1  23d3				   .CYCLES    SET	2
      2  23d3
      3  23d3				  -	      IF	.CYCLES < 2
      4  23d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d3				  -	      ERR
      6  23d3					      ENDIF
      7  23d3
      8  23d3				  -	      IF	.CYCLES & 1
      9  23d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d3				  -	      nop	0
     11  23d3				  -	      ELSE
     12  23d3				  -	      bit	VSYNC
     13  23d3				  -	      ENDIF
     14  23d3				  -.CYCLES    SET	.CYCLES - 3
     15  23d3					      ENDIF
     16  23d3
     17  23d3					      REPEAT	.CYCLES / 2
     18  23d3		       ea		      nop
     19  23d4					      REPEND
     71  23d4		       4c 0b b4 	      jmp	beginscoreloop
     72  23d7
     73  23d7					      if	((<*)>$28)
     74  2400		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2400					      endif
     76  2400
     77  2400				   scoreloop2
     78  2400				  -	      ifconst	scorefade
     79  2400				  -	      lda	stack2
     80  2400				  -	      sta	COLUP0
     81  2400				  -	      sta	COLUP1
     82  2400					      else
      0  2400					      sleep	9
      1  2400				   .CYCLES    SET	9
      2  2400
      3  2400				  -	      IF	.CYCLES < 2
      4  2400				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2400				  -	      ERR
      6  2400					      ENDIF
      7  2400
      8  2400					      IF	.CYCLES & 1
      9  2400					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2400		       04 00		      nop	0
     11  2402				  -	      ELSE
     12  2402				  -	      bit	VSYNC
     13  2402					      ENDIF
     14  2402				   .CYCLES    SET	.CYCLES - 3
     15  2402					      ENDIF
     16  2402
     17  2402					      REPEAT	.CYCLES / 2
     18  2402		       ea		      nop
     17  2402					      REPEND
     18  2403		       ea		      nop
     17  2403					      REPEND
     18  2404		       ea		      nop
     19  2405					      REPEND
     84  2405					      endif
     85  2405		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2407		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2409		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  240b							; cycle 0
     89  240b				   beginscoreloop
     90  240b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  240d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  240f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2411		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2413		       9a		      txs
     95  2414		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2416
     97  2416				  -	      ifconst	scorefade
     98  2416				  -	      dec	stack2
     99  2416					      else
      0  2416					      sleep	5
      1  2416				   .CYCLES    SET	5
      2  2416
      3  2416				  -	      IF	.CYCLES < 2
      4  2416				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2416				  -	      ERR
      6  2416					      ENDIF
      7  2416
      8  2416					      IF	.CYCLES & 1
      9  2416					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2416		       04 00		      nop	0
     11  2418				  -	      ELSE
     12  2418				  -	      bit	VSYNC
     13  2418					      ENDIF
     14  2418				   .CYCLES    SET	.CYCLES - 3
     15  2418					      ENDIF
     16  2418
     17  2418					      REPEAT	.CYCLES / 2
     18  2418		       ea		      nop
     19  2419					      REPEND
    101  2419					      endif
      0  2419					      sleep	2
      1  2419				   .CYCLES    SET	2
      2  2419
      3  2419				  -	      IF	.CYCLES < 2
      4  2419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2419				  -	      ERR
      6  2419					      ENDIF
      7  2419
      8  2419				  -	      IF	.CYCLES & 1
      9  2419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2419				  -	      nop	0
     11  2419				  -	      ELSE
     12  2419				  -	      bit	VSYNC
     13  2419				  -	      ENDIF
     14  2419				  -.CYCLES    SET	.CYCLES - 3
     15  2419					      ENDIF
     16  2419
     17  2419					      REPEAT	.CYCLES / 2
     18  2419		       ea		      nop
     19  241a					      REPEND
    103  241a
    104  241a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  241c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  241e		       ba		      tsx
    107  241f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2421		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2423
    110  2423		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2425		       88		      dey
    112  2426		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2428				   scoreloop2end
    114  2428
    115  2428							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2428
    117  2428
    118  2428		       a6 f6		      ldx	stack1
    119  242a		       9a		      txs
    120  242b
    121  242b		       a9 00		      LDA	#0
    122  242d		       85 0e		      sta	PF1
    123  242f		       85 1b		      STA	GRP0
    124  2431		       85 1c		      STA	GRP1
    125  2433		       85 25		      STA	VDELP0
    126  2435		       85 26		      STA	VDELP1
    127  2437		       85 04		      STA	NUSIZ0
    128  2439		       85 05		      STA	NUSIZ1
    129  243b
    130  243b							; clear out the score pointers in case they're stolen DPC variables...
    131  243b		       a2 0b		      ldx	#11
    132  243d				   clearscoreploop
    133  243d		       95 96		      sta	scorepointers,x
    134  243f		       ca		      dex
    135  2440		       10 fb		      bpl	clearscoreploop
    136  2442
    137  2442
    138  2442							;;ldy temp3
    139  2442							;ldy scorepointers+8
    140  2442							;sty scorepointers+3
    141  2442
    142  2442							;;ldy temp5
    143  2442							;ldy scorepointers+10
    144  2442							;sty scorepointers+5
    145  2442		       60		      rts
    146  2443
    147  2443				   miniscorepointerset
    148  2443		       29 0f		      and	#$0F
    149  2445		       0a		      asl
    150  2446		       0a		      asl
    151  2447		       0a		      asl
    152  2448		       69 aa		      adc	#<miniscoretable
    153  244a		       a8		      tay
    154  244b		       8a		      txa
    155  244c		       29 f0		      and	#$F0
    156  244e		       4a		      lsr
    157  244f		       69 aa		      adc	#<miniscoretable
    158  2451		       aa		      tax
    159  2452		       60		      rts
    160  2453
------- FILE titlescreen/asm/titlescreen.asm
    181  2453					      endif		;mk_score_on
    182  2453
    183  2453				  -	      ifconst	mk_gameselect_on
    184  2453				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  2453					      endif		;mk_gameselect_on
    186  2453
    187  2453				   PFWAIT
    188  2453		       ad 84 02 	      lda	INTIM
    189  2456		       d0 fb		      bne	PFWAIT
    190  2458		       85 02		      sta	WSYNC
    191  245a
    192  245a				   OVERSCAN
    193  245a					      ifnconst	overscan_time
    194  245a		       a9 a2		      lda	#34+128
    195  245c				  -	      else
    196  245c				  -	      lda	#overscan_time+128-5
    197  245c					      endif
    198  245c		       8d 96 02 	      sta	TIM64T
    199  245f
    200  245f							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  245f				  -	      ifconst	player9height
    202  245f				  -	      ldy	#8
    203  245f				  -	      lda	#0
    204  245f				  -	      sta	player0height
    205  245f				  -.playerheightfixloop
    206  245f				  -	      sta	player1height,y
    207  245f				  -	      ifconst	_NUSIZ1
    208  245f				  -	      sta	_NUSIZ1,y
    209  245f				  -	      endif
    210  245f				  -	      dey
    211  245f				  -	      bpl	.playerheightfixloop
    212  245f					      endif
    213  245f
    214  245f		       a9 c2		      lda	#%11000010
    215  2461		       85 02		      sta	WSYNC
    216  2463		       85 01		      sta	VBLANK
      0  2465					      RETURN
      1  2465				  -	      ifnconst	bankswitch
      2  2465				  -	      rts
      3  2465					      else
      4  2465		       4c dd ff 	      jmp	BS_return
      5  2468					      endif
    218  2468
    219  2468					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  2468					      include	"titlescreen/48x1_1_image.asm"
      1  2468
      2  2468
      3  2468							; *** if you want to modify the bitmap color on the fly, just dim a
      4  2468							; *** variable in bB called "bmp_48x1_1_color", and use it to set the
      5  2468							; *** color.
      6  2468
      7  2468
      8  2468							;*** this is the height of the displayed data
      9  2468		       00 1b	   bmp_48x1_1_window =	27
     10  2468
     11  2468							;*** this is the height of the bitmap data
     12  2468		       00 1b	   bmp_48x1_1_height =	27
     13  2468
     14  2468				  -	      ifnconst	bmp_48x1_1_color
     15  2468				  -bmp_48x1_1_color
     16  2468					      endif
     17  2468		       1a		      .byte.b	$1a
     18  2469
     19  2469				  -	      if	>. != >[.+bmp_48x1_1_height]
     20  2469				  -	      align	256
     21  2469					      endif
     22  2469
     23  2469				  -	      ifnconst	bmp_48x1_1_PF1
     24  2469				  -bmp_48x1_1_PF1
     25  2469					      endif
     26  2469		       00		      BYTE.b	%00000000
     27  246a				  -	      ifnconst	bmp_48x1_1_PF2
     28  246a				  -bmp_48x1_1_PF2
     29  246a					      endif
     30  246a		       00		      BYTE.b	%00000000
     31  246b				  -	      ifnconst	bmp_48x1_1_background
     32  246b				  -bmp_48x1_1_background
     33  246b					      endif
     34  246b		       00		      BYTE.b	$00
     35  246c
     36  246c				   bmp_48x1_1_00
     37  246c		       00		      BYTE.b	%00000000
     38  246d		       00		      BYTE.b	%00000000
     39  246e		       00		      BYTE.b	%00000000
     40  246f		       00		      BYTE.b	%00000000
     41  2470		       00		      BYTE.b	%00000000
     42  2471		       00		      BYTE.b	%00000000
     43  2472		       ff		      BYTE.b	%11111111
     44  2473		       ff		      BYTE.b	%11111111
     45  2474		       7f		      BYTE.b	%01111111
     46  2475		       3c		      BYTE.b	%00111100
     47  2476		       1e		      BYTE.b	%00011110
     48  2477		       0f		      BYTE.b	%00001111
     49  2478		       07		      BYTE.b	%00000111
     50  2479		       03		      BYTE.b	%00000011
     51  247a		       01		      BYTE.b	%00000001
     52  247b		       00		      BYTE.b	%00000000
     53  247c		       00		      BYTE.b	%00000000
     54  247d		       0c		      BYTE.b	%00001100
     55  247e		       07		      BYTE.b	%00000111
     56  247f		       07		      BYTE.b	%00000111
     57  2480		       03		      BYTE.b	%00000011
     58  2481		       00		      BYTE.b	%00000000
     59  2482		       00		      BYTE.b	%00000000
     60  2483		       00		      BYTE.b	%00000000
     61  2484		       00		      BYTE.b	%00000000
     62  2485		       00		      BYTE.b	%00000000
     63  2486		       00		      BYTE.b	%00000000
     64  2487
     65  2487
     66  2487				  -	      if	>. != >[.+bmp_48x1_1_height]
     67  2487				  -	      align	256
     68  2487					      endif
     69  2487
     70  2487				   bmp_48x1_1_01
     71  2487		       00		      BYTE.b	%00000000
     72  2488		       00		      BYTE.b	%00000000
     73  2489		       00		      BYTE.b	%00000000
     74  248a		       00		      BYTE.b	%00000000
     75  248b		       00		      BYTE.b	%00000000
     76  248c		       00		      BYTE.b	%00000000
     77  248d		       ff		      BYTE.b	%11111111
     78  248e		       ff		      BYTE.b	%11111111
     79  248f		       ff		      BYTE.b	%11111111
     80  2490		       1f		      BYTE.b	%00011111
     81  2491		       00		      BYTE.b	%00000000
     82  2492		       00		      BYTE.b	%00000000
     83  2493		       fc		      BYTE.b	%11111100
     84  2494		       fc		      BYTE.b	%11111100
     85  2495		       fc		      BYTE.b	%11111100
     86  2496		       1c		      BYTE.b	%00011100
     87  2497		       1c		      BYTE.b	%00011100
     88  2498		       1c		      BYTE.b	%00011100
     89  2499		       fc		      BYTE.b	%11111100
     90  249a		       fc		      BYTE.b	%11111100
     91  249b		       fc		      BYTE.b	%11111100
     92  249c		       00		      BYTE.b	%00000000
     93  249d		       00		      BYTE.b	%00000000
     94  249e		       00		      BYTE.b	%00000000
     95  249f		       00		      BYTE.b	%00000000
     96  24a0		       00		      BYTE.b	%00000000
     97  24a1		       00		      BYTE.b	%00000000
     98  24a2
     99  24a2
    100  24a2
    101  24a2
    102  24a2				  -	      if	>. != >[.+bmp_48x1_1_height]
    103  24a2				  -	      align	256
    104  24a2					      endif
    105  24a2
    106  24a2				   bmp_48x1_1_02
    107  24a2		       02		      BYTE.b	%00000010
    108  24a3		       06		      BYTE.b	%00000110
    109  24a4		       0e		      BYTE.b	%00001110
    110  24a5		       1e		      BYTE.b	%00011110
    111  24a6		       3e		      BYTE.b	%00111110
    112  24a7		       7e		      BYTE.b	%01111110
    113  24a8		       76		      BYTE.b	%01110110
    114  24a9		       66		      BYTE.b	%01100110
    115  24aa		       66		      BYTE.b	%01100110
    116  24ab		       66		      BYTE.b	%01100110
    117  24ac		       66		      BYTE.b	%01100110
    118  24ad		       66		      BYTE.b	%01100110
    119  24ae		       66		      BYTE.b	%01100110
    120  24af		       66		      BYTE.b	%01100110
    121  24b0		       66		      BYTE.b	%01100110
    122  24b1		       66		      BYTE.b	%01100110
    123  24b2		       66		      BYTE.b	%01100110
    124  24b3		       66		      BYTE.b	%01100110
    125  24b4		       66		      BYTE.b	%01100110
    126  24b5		       66		      BYTE.b	%01100110
    127  24b6		       66		      BYTE.b	%01100110
    128  24b7		       76		      BYTE.b	%01110110
    129  24b8		       3e		      BYTE.b	%00111110
    130  24b9		       1e		      BYTE.b	%00011110
    131  24ba		       0e		      BYTE.b	%00001110
    132  24bb		       06		      BYTE.b	%00000110
    133  24bc		       02		      BYTE.b	%00000010
    134  24bd
    135  24bd
    136  24bd
    137  24bd
    138  24bd				  -	      if	>. != >[.+bmp_48x1_1_height]
    139  24bd				  -	      align	256
    140  24bd					      endif
    141  24bd
    142  24bd				   bmp_48x1_1_03
    143  24bd		       80		      BYTE.b	%10000000
    144  24be		       c0		      BYTE.b	%11000000
    145  24bf		       e0		      BYTE.b	%11100000
    146  24c0		       f0		      BYTE.b	%11110000
    147  24c1		       f8		      BYTE.b	%11111000
    148  24c2		       fc		      BYTE.b	%11111100
    149  24c3		       de		      BYTE.b	%11011110
    150  24c4		       ce		      BYTE.b	%11001110
    151  24c5		       c6		      BYTE.b	%11000110
    152  24c6		       c6		      BYTE.b	%11000110
    153  24c7		       c6		      BYTE.b	%11000110
    154  24c8		       c6		      BYTE.b	%11000110
    155  24c9		       4c		      BYTE.b	%01001100
    156  24ca		       6c		      BYTE.b	%01101100
    157  24cb		       6c		      BYTE.b	%01101100
    158  24cc		       cc		      BYTE.b	%11001100
    159  24cd		       c6		      BYTE.b	%11000110
    160  24ce		       c6		      BYTE.b	%11000110
    161  24cf		       c6		      BYTE.b	%11000110
    162  24d0		       c6		      BYTE.b	%11000110
    163  24d1		       ce		      BYTE.b	%11001110
    164  24d2		       dc		      BYTE.b	%11011100
    165  24d3		       f8		      BYTE.b	%11111000
    166  24d4		       f0		      BYTE.b	%11110000
    167  24d5		       e0		      BYTE.b	%11100000
    168  24d6		       c0		      BYTE.b	%11000000
    169  24d7		       80		      BYTE.b	%10000000
    170  24d8
    171  24d8
    172  24d8				  -	      if	>. != >[.+bmp_48x1_1_height]
    173  24d8				  -	      align	256
    174  24d8					      endif
    175  24d8
    176  24d8				   bmp_48x1_1_04
    177  24d8		       00		      BYTE.b	%00000000
    178  24d9		       00		      BYTE.b	%00000000
    179  24da		       00		      BYTE.b	%00000000
    180  24db		       00		      BYTE.b	%00000000
    181  24dc		       00		      BYTE.b	%00000000
    182  24dd		       00		      BYTE.b	%00000000
    183  24de		       07		      BYTE.b	%00000111
    184  24df		       07		      BYTE.b	%00000111
    185  24e0		       07		      BYTE.b	%00000111
    186  24e1		       07		      BYTE.b	%00000111
    187  24e2		       ff		      BYTE.b	%11111111
    188  24e3		       ff		      BYTE.b	%11111111
    189  24e4		       ff		      BYTE.b	%11111111
    190  24e5		       c7		      BYTE.b	%11000111
    191  24e6		       c7		      BYTE.b	%11000111
    192  24e7		       e7		      BYTE.b	%11100111
    193  24e8		       77		      BYTE.b	%01110111
    194  24e9		       3f		      BYTE.b	%00111111
    195  24ea		       1f		      BYTE.b	%00011111
    196  24eb		       0f		      BYTE.b	%00001111
    197  24ec		       07		      BYTE.b	%00000111
    198  24ed		       00		      BYTE.b	%00000000
    199  24ee		       00		      BYTE.b	%00000000
    200  24ef		       00		      BYTE.b	%00000000
    201  24f0		       00		      BYTE.b	%00000000
    202  24f1		       00		      BYTE.b	%00000000
    203  24f2		       00		      BYTE.b	%00000000
    204  24f3
    205  24f3
    206  24f3					      if	>. != >[.+bmp_48x1_1_height]
    207  2500		       00 00 00 00*	      align	256
    208  2500					      endif
    209  2500
    210  2500				   bmp_48x1_1_05
    211  2500		       00		      BYTE.b	%00000000
    212  2501		       00		      BYTE.b	%00000000
    213  2502		       00		      BYTE.b	%00000000
    214  2503		       00		      BYTE.b	%00000000
    215  2504		       00		      BYTE.b	%00000000
    216  2505		       00		      BYTE.b	%00000000
    217  2506		       00		      BYTE.b	%00000000
    218  2507		       00		      BYTE.b	%00000000
    219  2508		       00		      BYTE.b	%00000000
    220  2509		       00		      BYTE.b	%00000000
    221  250a		       fe		      BYTE.b	%11111110
    222  250b		       fc		      BYTE.b	%11111100
    223  250c		       f8		      BYTE.b	%11111000
    224  250d		       30		      BYTE.b	%00110000
    225  250e		       00		      BYTE.b	%00000000
    226  250f		       00		      BYTE.b	%00000000
    227  2510		       00		      BYTE.b	%00000000
    228  2511		       00		      BYTE.b	%00000000
    229  2512		       00		      BYTE.b	%00000000
    230  2513		       00		      BYTE.b	%00000000
    231  2514		       00		      BYTE.b	%00000000
    232  2515		       00		      BYTE.b	%00000000
    233  2516		       00		      BYTE.b	%00000000
    234  2517		       00		      BYTE.b	%00000000
    235  2518		       00		      BYTE.b	%00000000
    236  2519		       00		      BYTE.b	%00000000
    237  251a		       00		      BYTE.b	%00000000
    238  251b
    239  251b
    240  251b
------- FILE titlescreen/asm/titlescreen.asm
    221  251b					      endif
    222  251b					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  251b					      include	"titlescreen/48x1_2_image.asm"
      1  251b
      2  251b
      3  251b							; *** if you want to modify the bitmap color on the fly, just dim a
      4  251b							; *** variable in bB called "bmp_48x1_2_color", and use it to set the
      5  251b							; *** color.
      6  251b
      7  251b
      8  251b							;*** this is the height of the displayed data
      9  251b		       00 40	   bmp_48x1_2_window =	64
     10  251b
     11  251b							;*** this is the height of the bitmap data
     12  251b		       00 ff	   bmp_48x1_2_height =	255
     13  251b
     14  251b				  -	      ifnconst	bmp_48x1_2_color
     15  251b				  -bmp_48x1_2_color
     16  251b					      endif
     17  251b		       0c		      .byte.b	$0c
     18  251c
     19  251c				  -	      ifnconst	bmp_48x1_2_PF1
     20  251c				  -bmp_48x1_2_PF1
     21  251c					      endif
     22  251c		       00		      BYTE.b	%00000000
     23  251d				  -	      ifnconst	bmp_48x1_2_PF2
     24  251d				  -bmp_48x1_2_PF2
     25  251d					      endif
     26  251d		       00		      BYTE.b	%00000000
     27  251e				  -	      ifnconst	bmp_48x1_2_background
     28  251e				  -bmp_48x1_2_background
     29  251e					      endif
     30  251e		       00		      BYTE.b	$00
     31  251f
     32  251f					      if	>. != >[.+bmp_48x1_2_height]
     33  2600		       00 00 00 00*	      align	256
     34  2600					      endif
     35  2600
     36  2600				   bmp_48x1_2_00
     37  2600		       00		      BYTE.b	%00000000
     38  2601		       2a		      BYTE.b	%00101010
     39  2602		       2a		      BYTE.b	%00101010
     40  2603		       2a		      BYTE.b	%00101010
     41  2604		       3e		      BYTE.b	%00111110
     42  2605		       00		      BYTE.b	%00000000
     43  2606		       00		      BYTE.b	%00000000
     44  2607		       00		      BYTE.b	%00000000
     45  2608		       2e		      BYTE.b	%00101110
     46  2609		       2e		      BYTE.b	%00101110
     47  260a		       22		      BYTE.b	%00100010
     48  260b		       26		      BYTE.b	%00100110
     49  260c		       20		      BYTE.b	%00100000
     50  260d		       20		      BYTE.b	%00100000
     51  260e		       00		      BYTE.b	%00000000
     52  260f		       13		      BYTE.b	%00010011
     53  2610		       12		      BYTE.b	%00010010
     54  2611		       12		      BYTE.b	%00010010
     55  2612		       2b		      BYTE.b	%00101011
     56  2613		       6c		      BYTE.b	%01101100
     57  2614		       00		      BYTE.b	%00000000
     58  2615		       00		      BYTE.b	%00000000
     59  2616		       00		      BYTE.b	%00000000
     60  2617		       00		      BYTE.b	%00000000
     61  2618		       00		      BYTE.b	%00000000
     62  2619		       00		      BYTE.b	%00000000
     63  261a		       00		      BYTE.b	%00000000
     64  261b		       00		      BYTE.b	%00000000
     65  261c		       00		      BYTE.b	%00000000
     66  261d		       3b		      BYTE.b	%00111011
     67  261e		       2a		      BYTE.b	%00101010
     68  261f		       2b		      BYTE.b	%00101011
     69  2620		       3b		      BYTE.b	%00111011
     70  2621		       08		      BYTE.b	%00001000
     71  2622		       08		      BYTE.b	%00001000
     72  2623		       00		      BYTE.b	%00000000
     73  2624		       2a		      BYTE.b	%00101010
     74  2625		       2a		      BYTE.b	%00101010
     75  2626		       2a		      BYTE.b	%00101010
     76  2627		       3e		      BYTE.b	%00111110
     77  2628		       00		      BYTE.b	%00000000
     78  2629		       00		      BYTE.b	%00000000
     79  262a		       00		      BYTE.b	%00000000
     80  262b		       3a		      BYTE.b	%00111010
     81  262c		       3a		      BYTE.b	%00111010
     82  262d		       0a		      BYTE.b	%00001010
     83  262e		       1b		      BYTE.b	%00011011
     84  262f		       00		      BYTE.b	%00000000
     85  2630		       00		      BYTE.b	%00000000
     86  2631		       00		      BYTE.b	%00000000
     87  2632		       2e		      BYTE.b	%00101110
     88  2633		       22		      BYTE.b	%00100010
     89  2634		       2c		      BYTE.b	%00101100
     90  2635		       0e		      BYTE.b	%00001110
     91  2636		       20		      BYTE.b	%00100000
     92  2637		       00		      BYTE.b	%00000000
     93  2638		       00		      BYTE.b	%00000000
     94  2639		       25		      BYTE.b	%00100101
     95  263a		       25		      BYTE.b	%00100101
     96  263b		       3d		      BYTE.b	%00111101
     97  263c		       25		      BYTE.b	%00100101
     98  263d		       24		      BYTE.b	%00100100
     99  263e		       00		      BYTE.b	%00000000
    100  263f		       00		      BYTE.b	%00000000
    101  2640		       1b		      BYTE.b	%00011011
    102  2641		       22		      BYTE.b	%00100010
    103  2642		       22		      BYTE.b	%00100010
    104  2643		       1b		      BYTE.b	%00011011
    105  2644		       00		      BYTE.b	%00000000
    106  2645		       00		      BYTE.b	%00000000
    107  2646		       00		      BYTE.b	%00000000
    108  2647		       2d		      BYTE.b	%00101101
    109  2648		       29		      BYTE.b	%00101001
    110  2649		       31		      BYTE.b	%00110001
    111  264a		       29		      BYTE.b	%00101001
    112  264b		       38		      BYTE.b	%00111000
    113  264c		       00		      BYTE.b	%00000000
    114  264d		       00		      BYTE.b	%00000000
    115  264e		       2e		      BYTE.b	%00101110
    116  264f		       2a		      BYTE.b	%00101010
    117  2650		       2a		      BYTE.b	%00101010
    118  2651		       2e		      BYTE.b	%00101110
    119  2652		       20		      BYTE.b	%00100000
    120  2653		       20		      BYTE.b	%00100000
    121  2654		       00		      BYTE.b	%00000000
    122  2655		       35		      BYTE.b	%00110101
    123  2656		       25		      BYTE.b	%00100101
    124  2657		       25		      BYTE.b	%00100101
    125  2658		       37		      BYTE.b	%00110111
    126  2659		       24		      BYTE.b	%00100100
    127  265a		       04		      BYTE.b	%00000100
    128  265b		       00		      BYTE.b	%00000000
    129  265c		       1d		      BYTE.b	%00011101
    130  265d		       25		      BYTE.b	%00100101
    131  265e		       2d		      BYTE.b	%00101101
    132  265f		       21		      BYTE.b	%00100001
    133  2660		       1c		      BYTE.b	%00011100
    134  2661		       00		      BYTE.b	%00000000
    135  2662		       00		      BYTE.b	%00000000
    136  2663		       00		      BYTE.b	%00000000
    137  2664		       00		      BYTE.b	%00000000
    138  2665		       00		      BYTE.b	%00000000
    139  2666		       00		      BYTE.b	%00000000
    140  2667		       00		      BYTE.b	%00000000
    141  2668		       00		      BYTE.b	%00000000
    142  2669		       00		      BYTE.b	%00000000
    143  266a		       39		      BYTE.b	%00111001
    144  266b		       29		      BYTE.b	%00101001
    145  266c		       2b		      BYTE.b	%00101011
    146  266d		       3a		      BYTE.b	%00111010
    147  266e		       00		      BYTE.b	%00000000
    148  266f		       00		      BYTE.b	%00000000
    149  2670		       00		      BYTE.b	%00000000
    150  2671		       2a		      BYTE.b	%00101010
    151  2672		       2a		      BYTE.b	%00101010
    152  2673		       2a		      BYTE.b	%00101010
    153  2674		       0e		      BYTE.b	%00001110
    154  2675		       20		      BYTE.b	%00100000
    155  2676		       00		      BYTE.b	%00000000
    156  2677		       00		      BYTE.b	%00000000
    157  2678		       35		      BYTE.b	%00110101
    158  2679		       25		      BYTE.b	%00100101
    159  267a		       25		      BYTE.b	%00100101
    160  267b		       37		      BYTE.b	%00110111
    161  267c		       24		      BYTE.b	%00100100
    162  267d		       04		      BYTE.b	%00000100
    163  267e		       00		      BYTE.b	%00000000
    164  267f		       3b		      BYTE.b	%00111011
    165  2680		       0a		      BYTE.b	%00001010
    166  2681		       32		      BYTE.b	%00110010
    167  2682		       3b		      BYTE.b	%00111011
    168  2683		       00		      BYTE.b	%00000000
    169  2684		       00		      BYTE.b	%00000000
    170  2685		       00		      BYTE.b	%00000000
    171  2686		       27		      BYTE.b	%00100111
    172  2687		       25		      BYTE.b	%00100101
    173  2688		       25		      BYTE.b	%00100101
    174  2689		       37		      BYTE.b	%00110111
    175  268a		       00		      BYTE.b	%00000000
    176  268b		       00		      BYTE.b	%00000000
    177  268c		       00		      BYTE.b	%00000000
    178  268d		       2d		      BYTE.b	%00101101
    179  268e		       29		      BYTE.b	%00101001
    180  268f		       31		      BYTE.b	%00110001
    181  2690		       29		      BYTE.b	%00101001
    182  2691		       38		      BYTE.b	%00111000
    183  2692		       00		      BYTE.b	%00000000
    184  2693		       20		      BYTE.b	%00100000
    185  2694		       3b		      BYTE.b	%00111011
    186  2695		       2a		      BYTE.b	%00101010
    187  2696		       2b		      BYTE.b	%00101011
    188  2697		       3b		      BYTE.b	%00111011
    189  2698		       00		      BYTE.b	%00000000
    190  2699		       00		      BYTE.b	%00000000
    191  269a		       00		      BYTE.b	%00000000
    192  269b		       2a		      BYTE.b	%00101010
    193  269c		       2a		      BYTE.b	%00101010
    194  269d		       2a		      BYTE.b	%00101010
    195  269e		       0e		      BYTE.b	%00001110
    196  269f		       20		      BYTE.b	%00100000
    197  26a0		       00		      BYTE.b	%00000000
    198  26a1		       00		      BYTE.b	%00000000
    199  26a2		       27		      BYTE.b	%00100111
    200  26a3		       25		      BYTE.b	%00100101
    201  26a4		       25		      BYTE.b	%00100101
    202  26a5		       37		      BYTE.b	%00110111
    203  26a6		       20		      BYTE.b	%00100000
    204  26a7		       30		      BYTE.b	%00110000
    205  26a8		       00		      BYTE.b	%00000000
    206  26a9		       3a		      BYTE.b	%00111010
    207  26aa		       22		      BYTE.b	%00100010
    208  26ab		       3a		      BYTE.b	%00111010
    209  26ac		       3b		      BYTE.b	%00111011
    210  26ad		       00		      BYTE.b	%00000000
    211  26ae		       00		      BYTE.b	%00000000
    212  26af		       00		      BYTE.b	%00000000
    213  26b0		       2a		      BYTE.b	%00101010
    214  26b1		       2a		      BYTE.b	%00101010
    215  26b2		       2a		      BYTE.b	%00101010
    216  26b3		       38		      BYTE.b	%00111000
    217  26b4		       22		      BYTE.b	%00100010
    218  26b5		       20		      BYTE.b	%00100000
    219  26b6		       00		      BYTE.b	%00000000
    220  26b7		       2a		      BYTE.b	%00101010
    221  26b8		       2a		      BYTE.b	%00101010
    222  26b9		       2a		      BYTE.b	%00101010
    223  26ba		       2e		      BYTE.b	%00101110
    224  26bb		       20		      BYTE.b	%00100000
    225  26bc		       00		      BYTE.b	%00000000
    226  26bd		       00		      BYTE.b	%00000000
    227  26be		       00		      BYTE.b	%00000000
    228  26bf		       00		      BYTE.b	%00000000
    229  26c0		       00		      BYTE.b	%00000000
    230  26c1		       00		      BYTE.b	%00000000
    231  26c2		       00		      BYTE.b	%00000000
    232  26c3		       00		      BYTE.b	%00000000
    233  26c4		       00		      BYTE.b	%00000000
    234  26c5		       00		      BYTE.b	%00000000
    235  26c6		       00		      BYTE.b	%00000000
    236  26c7		       00		      BYTE.b	%00000000
    237  26c8		       00		      BYTE.b	%00000000
    238  26c9		       00		      BYTE.b	%00000000
    239  26ca		       00		      BYTE.b	%00000000
    240  26cb		       00		      BYTE.b	%00000000
    241  26cc		       00		      BYTE.b	%00000000
    242  26cd		       00		      BYTE.b	%00000000
    243  26ce		       00		      BYTE.b	%00000000
    244  26cf		       00		      BYTE.b	%00000000
    245  26d0		       00		      BYTE.b	%00000000
    246  26d1		       00		      BYTE.b	%00000000
    247  26d2		       00		      BYTE.b	%00000000
    248  26d3		       00		      BYTE.b	%00000000
    249  26d4		       00		      BYTE.b	%00000000
    250  26d5		       00		      BYTE.b	%00000000
    251  26d6		       00		      BYTE.b	%00000000
    252  26d7		       00		      BYTE.b	%00000000
    253  26d8		       00		      BYTE.b	%00000000
    254  26d9		       00		      BYTE.b	%00000000
    255  26da		       00		      BYTE.b	%00000000
    256  26db		       00		      BYTE.b	%00000000
    257  26dc		       00		      BYTE.b	%00000000
    258  26dd		       00		      BYTE.b	%00000000
    259  26de		       00		      BYTE.b	%00000000
    260  26df		       00		      BYTE.b	%00000000
    261  26e0		       00		      BYTE.b	%00000000
    262  26e1		       00		      BYTE.b	%00000000
    263  26e2		       00		      BYTE.b	%00000000
    264  26e3		       00		      BYTE.b	%00000000
    265  26e4		       00		      BYTE.b	%00000000
    266  26e5		       00		      BYTE.b	%00000000
    267  26e6		       00		      BYTE.b	%00000000
    268  26e7		       00		      BYTE.b	%00000000
    269  26e8		       00		      BYTE.b	%00000000
    270  26e9		       00		      BYTE.b	%00000000
    271  26ea		       00		      BYTE.b	%00000000
    272  26eb		       00		      BYTE.b	%00000000
    273  26ec		       00		      BYTE.b	%00000000
    274  26ed		       00		      BYTE.b	%00000000
    275  26ee		       00		      BYTE.b	%00000000
    276  26ef		       00		      BYTE.b	%00000000
    277  26f0		       00		      BYTE.b	%00000000
    278  26f1		       00		      BYTE.b	%00000000
    279  26f2		       00		      BYTE.b	%00000000
    280  26f3		       00		      BYTE.b	%00000000
    281  26f4		       00		      BYTE.b	%00000000
    282  26f5		       00		      BYTE.b	%00000000
    283  26f6		       00		      BYTE.b	%00000000
    284  26f7		       00		      BYTE.b	%00000000
    285  26f8		       00		      BYTE.b	%00000000
    286  26f9		       00		      BYTE.b	%00000000
    287  26fa		       00		      BYTE.b	%00000000
    288  26fb		       00		      BYTE.b	%00000000
    289  26fc		       00		      BYTE.b	%00000000
    290  26fd		       00		      BYTE.b	%00000000
    291  26fe		       00		      BYTE.b	%00000000
    292  26ff		       00		      BYTE.b	%00000000
    293  2700
    294  2700
    295  2700
    296  2700				  -	      if	>. != >[.+bmp_48x1_2_height]
    297  2700				  -	      align	256
    298  2700					      endif
    299  2700
    300  2700				   bmp_48x1_2_01
    301  2700		       00		      BYTE.b	%00000000
    302  2701		       ea		      BYTE.b	%11101010
    303  2702		       ea		      BYTE.b	%11101010
    304  2703		       2a		      BYTE.b	%00101010
    305  2704		       6e		      BYTE.b	%01101110
    306  2705		       00		      BYTE.b	%00000000
    307  2706		       00		      BYTE.b	%00000000
    308  2707		       00		      BYTE.b	%00000000
    309  2708		       ec		      BYTE.b	%11101100
    310  2709		       28		      BYTE.b	%00101000
    311  270a		       c8		      BYTE.b	%11001000
    312  270b		       ec		      BYTE.b	%11101100
    313  270c		       08		      BYTE.b	%00001000
    314  270d		       00		      BYTE.b	%00000000
    315  270e		       00		      BYTE.b	%00000000
    316  270f		       b8		      BYTE.b	%10111000
    317  2710		       a8		      BYTE.b	%10101000
    318  2711		       a8		      BYTE.b	%10101000
    319  2712		       a8		      BYTE.b	%10101000
    320  2713		       00		      BYTE.b	%00000000
    321  2714		       00		      BYTE.b	%00000000
    322  2715		       00		      BYTE.b	%00000000
    323  2716		       00		      BYTE.b	%00000000
    324  2717		       00		      BYTE.b	%00000000
    325  2718		       00		      BYTE.b	%00000000
    326  2719		       00		      BYTE.b	%00000000
    327  271a		       00		      BYTE.b	%00000000
    328  271b		       00		      BYTE.b	%00000000
    329  271c		       00		      BYTE.b	%00000000
    330  271d		       bb		      BYTE.b	%10111011
    331  271e		       0a		      BYTE.b	%00001010
    332  271f		       b2		      BYTE.b	%10110010
    333  2720		       bb		      BYTE.b	%10111011
    334  2721		       02		      BYTE.b	%00000010
    335  2722		       00		      BYTE.b	%00000000
    336  2723		       00		      BYTE.b	%00000000
    337  2724		       ee		      BYTE.b	%11101110
    338  2725		       a2		      BYTE.b	%10100010
    339  2726		       ac		      BYTE.b	%10101100
    340  2727		       ae		      BYTE.b	%10101110
    341  2728		       00		      BYTE.b	%00000000
    342  2729		       00		      BYTE.b	%00000000
    343  272a		       00		      BYTE.b	%00000000
    344  272b		       b8		      BYTE.b	%10111000
    345  272c		       a8		      BYTE.b	%10101000
    346  272d		       a8		      BYTE.b	%10101000
    347  272e		       b8		      BYTE.b	%10111000
    348  272f		       08		      BYTE.b	%00001000
    349  2730		       08		      BYTE.b	%00001000
    350  2731		       00		      BYTE.b	%00000000
    351  2732		       2a		      BYTE.b	%00101010
    352  2733		       2a		      BYTE.b	%00101010
    353  2734		       2a		      BYTE.b	%00101010
    354  2735		       0e		      BYTE.b	%00001110
    355  2736		       20		      BYTE.b	%00100000
    356  2737		       00		      BYTE.b	%00000000
    357  2738		       00		      BYTE.b	%00000000
    358  2739		       d5		      BYTE.b	%11010101
    359  273a		       55		      BYTE.b	%01010101
    360  273b		       55		      BYTE.b	%01010101
    361  273c		       5f		      BYTE.b	%01011111
    362  273d		       00		      BYTE.b	%00000000
    363  273e		       00		      BYTE.b	%00000000
    364  273f		       00		      BYTE.b	%00000000
    365  2740		       a9		      BYTE.b	%10101001
    366  2741		       aa		      BYTE.b	%10101010
    367  2742		       aa		      BYTE.b	%10101010
    368  2743		       b9		      BYTE.b	%10111001
    369  2744		       00		      BYTE.b	%00000000
    370  2745		       00		      BYTE.b	%00000000
    371  2746		       00		      BYTE.b	%00000000
    372  2747		       dd		      BYTE.b	%11011101
    373  2748		       55		      BYTE.b	%01010101
    374  2749		       55		      BYTE.b	%01010101
    375  274a		       dd		      BYTE.b	%11011101
    376  274b		       10		      BYTE.b	%00010000
    377  274c		       d0		      BYTE.b	%11010000
    378  274d		       20		      BYTE.b	%00100000
    379  274e		       e9		      BYTE.b	%11101001
    380  274f		       aa		      BYTE.b	%10101010
    381  2750		       aa		      BYTE.b	%10101010
    382  2751		       e1		      BYTE.b	%11100001
    383  2752		       08		      BYTE.b	%00001000
    384  2753		       00		      BYTE.b	%00000000
    385  2754		       00		      BYTE.b	%00000000
    386  2755		       75		      BYTE.b	%01110101
    387  2756		       45		      BYTE.b	%01000101
    388  2757		       75		      BYTE.b	%01110101
    389  2758		       71		      BYTE.b	%01110001
    390  2759		       04		      BYTE.b	%00000100
    391  275a		       00		      BYTE.b	%00000000
    392  275b		       00		      BYTE.b	%00000000
    393  275c		       d7		      BYTE.b	%11010111
    394  275d		       55		      BYTE.b	%01010101
    395  275e		       55		      BYTE.b	%01010101
    396  275f		       47		      BYTE.b	%01000111
    397  2760		       11		      BYTE.b	%00010001
    398  2761		       01		      BYTE.b	%00000001
    399  2762		       00		      BYTE.b	%00000000
    400  2763		       00		      BYTE.b	%00000000
    401  2764		       00		      BYTE.b	%00000000
    402  2765		       00		      BYTE.b	%00000000
    403  2766		       00		      BYTE.b	%00000000
    404  2767		       00		      BYTE.b	%00000000
    405  2768		       00		      BYTE.b	%00000000
    406  2769		       00		      BYTE.b	%00000000
    407  276a		       4a		      BYTE.b	%01001010
    408  276b		       ca		      BYTE.b	%11001010
    409  276c		       ea		      BYTE.b	%11101010
    410  276d		       ae		      BYTE.b	%10101110
    411  276e		       00		      BYTE.b	%00000000
    412  276f		       00		      BYTE.b	%00000000
    413  2770		       00		      BYTE.b	%00000000
    414  2771		       ba		      BYTE.b	%10111010
    415  2772		       a2		      BYTE.b	%10100010
    416  2773		       ba		      BYTE.b	%10111010
    417  2774		       fb		      BYTE.b	%11111011
    418  2775		       80		      BYTE.b	%10000000
    419  2776		       c0		      BYTE.b	%11000000
    420  2777		       00		      BYTE.b	%00000000
    421  2778		       76		      BYTE.b	%01110110
    422  2779		       74		      BYTE.b	%01110100
    423  277a		       14		      BYTE.b	%00010100
    424  277b		       36		      BYTE.b	%00110110
    425  277c		       04		      BYTE.b	%00000100
    426  277d		       00		      BYTE.b	%00000000
    427  277e		       00		      BYTE.b	%00000000
    428  277f		       8e		      BYTE.b	%10001110
    429  2780		       8e		      BYTE.b	%10001110
    430  2781		       82		      BYTE.b	%10000010
    431  2782		       86		      BYTE.b	%10000110
    432  2783		       00		      BYTE.b	%00000000
    433  2784		       00		      BYTE.b	%00000000
    434  2785		       00		      BYTE.b	%00000000
    435  2786		       77		      BYTE.b	%01110111
    436  2787		       55		      BYTE.b	%01010101
    437  2788		       55		      BYTE.b	%01010101
    438  2789		       77		      BYTE.b	%01110111
    439  278a		       40		      BYTE.b	%01000000
    440  278b		       40		      BYTE.b	%01000000
    441  278c		       00		      BYTE.b	%00000000
    442  278d		       dd		      BYTE.b	%11011101
    443  278e		       55		      BYTE.b	%01010101
    444  278f		       55		      BYTE.b	%01010101
    445  2790		       dd		      BYTE.b	%11011101
    446  2791		       10		      BYTE.b	%00010000
    447  2792		       10		      BYTE.b	%00010000
    448  2793		       00		      BYTE.b	%00000000
    449  2794		       a5		      BYTE.b	%10100101
    450  2795		       25		      BYTE.b	%00100101
    451  2796		       a5		      BYTE.b	%10100101
    452  2797		       b7		      BYTE.b	%10110111
    453  2798		       04		      BYTE.b	%00000100
    454  2799		       06		      BYTE.b	%00000110
    455  279a		       00		      BYTE.b	%00000000
    456  279b		       3b		      BYTE.b	%00111011
    457  279c		       22		      BYTE.b	%00100010
    458  279d		       3a		      BYTE.b	%00111010
    459  279e		       0a		      BYTE.b	%00001010
    460  279f		       3b		      BYTE.b	%00111011
    461  27a0		       00		      BYTE.b	%00000000
    462  27a1		       02		      BYTE.b	%00000010
    463  27a2		       43		      BYTE.b	%01000011
    464  27a3		       42		      BYTE.b	%01000010
    465  27a4		       42		      BYTE.b	%01000010
    466  27a5		       63		      BYTE.b	%01100011
    467  27a6		       00		      BYTE.b	%00000000
    468  27a7		       00		      BYTE.b	%00000000
    469  27a8		       00		      BYTE.b	%00000000
    470  27a9		       ba		      BYTE.b	%10111010
    471  27aa		       aa		      BYTE.b	%10101010
    472  27ab		       aa		      BYTE.b	%10101010
    473  27ac		       b8		      BYTE.b	%10111000
    474  27ad		       0a		      BYTE.b	%00001010
    475  27ae		       08		      BYTE.b	%00001000
    476  27af		       00		      BYTE.b	%00000000
    477  27b0		       e2		      BYTE.b	%11100010
    478  27b1		       22		      BYTE.b	%00100010
    479  27b2		       c2		      BYTE.b	%11000010
    480  27b3		       e3		      BYTE.b	%11100011
    481  27b4		       00		      BYTE.b	%00000000
    482  27b5		       00		      BYTE.b	%00000000
    483  27b6		       08		      BYTE.b	%00001000
    484  27b7		       ee		      BYTE.b	%11101110
    485  27b8		       2a		      BYTE.b	%00101010
    486  27b9		       ca		      BYTE.b	%11001010
    487  27ba		       ee		      BYTE.b	%11101110
    488  27bb		       00		      BYTE.b	%00000000
    489  27bc		       00		      BYTE.b	%00000000
    490  27bd		       00		      BYTE.b	%00000000
    491  27be		       00		      BYTE.b	%00000000
    492  27bf		       00		      BYTE.b	%00000000
    493  27c0		       00		      BYTE.b	%00000000
    494  27c1		       00		      BYTE.b	%00000000
    495  27c2		       00		      BYTE.b	%00000000
    496  27c3		       00		      BYTE.b	%00000000
    497  27c4		       00		      BYTE.b	%00000000
    498  27c5		       00		      BYTE.b	%00000000
    499  27c6		       00		      BYTE.b	%00000000
    500  27c7		       00		      BYTE.b	%00000000
    501  27c8		       00		      BYTE.b	%00000000
    502  27c9		       00		      BYTE.b	%00000000
    503  27ca		       00		      BYTE.b	%00000000
    504  27cb		       00		      BYTE.b	%00000000
    505  27cc		       00		      BYTE.b	%00000000
    506  27cd		       00		      BYTE.b	%00000000
    507  27ce		       00		      BYTE.b	%00000000
    508  27cf		       00		      BYTE.b	%00000000
    509  27d0		       00		      BYTE.b	%00000000
    510  27d1		       00		      BYTE.b	%00000000
    511  27d2		       00		      BYTE.b	%00000000
    512  27d3		       00		      BYTE.b	%00000000
    513  27d4		       00		      BYTE.b	%00000000
    514  27d5		       00		      BYTE.b	%00000000
    515  27d6		       00		      BYTE.b	%00000000
    516  27d7		       00		      BYTE.b	%00000000
    517  27d8		       00		      BYTE.b	%00000000
    518  27d9		       00		      BYTE.b	%00000000
    519  27da		       00		      BYTE.b	%00000000
    520  27db		       00		      BYTE.b	%00000000
    521  27dc		       00		      BYTE.b	%00000000
    522  27dd		       00		      BYTE.b	%00000000
    523  27de		       00		      BYTE.b	%00000000
    524  27df		       00		      BYTE.b	%00000000
    525  27e0		       00		      BYTE.b	%00000000
    526  27e1		       00		      BYTE.b	%00000000
    527  27e2		       00		      BYTE.b	%00000000
    528  27e3		       00		      BYTE.b	%00000000
    529  27e4		       00		      BYTE.b	%00000000
    530  27e5		       00		      BYTE.b	%00000000
    531  27e6		       00		      BYTE.b	%00000000
    532  27e7		       00		      BYTE.b	%00000000
    533  27e8		       00		      BYTE.b	%00000000
    534  27e9		       00		      BYTE.b	%00000000
    535  27ea		       00		      BYTE.b	%00000000
    536  27eb		       00		      BYTE.b	%00000000
    537  27ec		       00		      BYTE.b	%00000000
    538  27ed		       00		      BYTE.b	%00000000
    539  27ee		       00		      BYTE.b	%00000000
    540  27ef		       00		      BYTE.b	%00000000
    541  27f0		       00		      BYTE.b	%00000000
    542  27f1		       00		      BYTE.b	%00000000
    543  27f2		       00		      BYTE.b	%00000000
    544  27f3		       00		      BYTE.b	%00000000
    545  27f4		       00		      BYTE.b	%00000000
    546  27f5		       00		      BYTE.b	%00000000
    547  27f6		       00		      BYTE.b	%00000000
    548  27f7		       00		      BYTE.b	%00000000
    549  27f8		       00		      BYTE.b	%00000000
    550  27f9		       00		      BYTE.b	%00000000
    551  27fa		       00		      BYTE.b	%00000000
    552  27fb		       00		      BYTE.b	%00000000
    553  27fc		       00		      BYTE.b	%00000000
    554  27fd		       00		      BYTE.b	%00000000
    555  27fe		       00		      BYTE.b	%00000000
    556  27ff		       00		      BYTE.b	%00000000
    557  2800
    558  2800
    559  2800				  -	      if	>. != >[.+bmp_48x1_2_height]
    560  2800				  -	      align	256
    561  2800					      endif
    562  2800
    563  2800				   bmp_48x1_2_02
    564  2800		       00		      BYTE.b	%00000000
    565  2801		       aa		      BYTE.b	%10101010
    566  2802		       ca		      BYTE.b	%11001010
    567  2803		       ca		      BYTE.b	%11001010
    568  2804		       e3		      BYTE.b	%11100011
    569  2805		       88		      BYTE.b	%10001000
    570  2806		       80		      BYTE.b	%10000000
    571  2807		       00		      BYTE.b	%00000000
    572  2808		       57		      BYTE.b	%01010111
    573  2809		       55		      BYTE.b	%01010101
    574  280a		       55		      BYTE.b	%01010101
    575  280b		       77		      BYTE.b	%01110111
    576  280c		       40		      BYTE.b	%01000000
    577  280d		       40		      BYTE.b	%01000000
    578  280e		       00		      BYTE.b	%00000000
    579  280f		       e9		      BYTE.b	%11101001
    580  2810		       e9		      BYTE.b	%11101001
    581  2811		       29		      BYTE.b	%00101001
    582  2812		       6d		      BYTE.b	%01101101
    583  2813		       00		      BYTE.b	%00000000
    584  2814		       00		      BYTE.b	%00000000
    585  2815		       00		      BYTE.b	%00000000
    586  2816		       00		      BYTE.b	%00000000
    587  2817		       00		      BYTE.b	%00000000
    588  2818		       00		      BYTE.b	%00000000
    589  2819		       00		      BYTE.b	%00000000
    590  281a		       00		      BYTE.b	%00000000
    591  281b		       00		      BYTE.b	%00000000
    592  281c		       00		      BYTE.b	%00000000
    593  281d		       4e		      BYTE.b	%01001110
    594  281e		       4a		      BYTE.b	%01001010
    595  281f		       4a		      BYTE.b	%01001010
    596  2820		       6e		      BYTE.b	%01101110
    597  2821		       00		      BYTE.b	%00000000
    598  2822		       00		      BYTE.b	%00000000
    599  2823		       00		      BYTE.b	%00000000
    600  2824		       c7		      BYTE.b	%11000111
    601  2825		       85		      BYTE.b	%10000101
    602  2826		       85		      BYTE.b	%10000101
    603  2827		       c7		      BYTE.b	%11000111
    604  2828		       84		      BYTE.b	%10000100
    605  2829		       04		      BYTE.b	%00000100
    606  282a		       00		      BYTE.b	%00000000
    607  282b		       d5		      BYTE.b	%11010101
    608  282c		       95		      BYTE.b	%10010101
    609  282d		       95		      BYTE.b	%10010101
    610  282e		       dd		      BYTE.b	%11011101
    611  282f		       90		      BYTE.b	%10010000
    612  2830		       10		      BYTE.b	%00010000
    613  2831		       00		      BYTE.b	%00000000
    614  2832		       ea		      BYTE.b	%11101010
    615  2833		       8a		      BYTE.b	%10001010
    616  2834		       ea		      BYTE.b	%11101010
    617  2835		       ef		      BYTE.b	%11101111
    618  2836		       0a		      BYTE.b	%00001010
    619  2837		       0f		      BYTE.b	%00001111
    620  2838		       00		      BYTE.b	%00000000
    621  2839		       75		      BYTE.b	%01110101
    622  283a		       75		      BYTE.b	%01110101
    623  283b		       15		      BYTE.b	%00010101
    624  283c		       37		      BYTE.b	%00110111
    625  283d		       00		      BYTE.b	%00000000
    626  283e		       00		      BYTE.b	%00000000
    627  283f		       00		      BYTE.b	%00000000
    628  2840		       ae		      BYTE.b	%10101110
    629  2841		       2a		      BYTE.b	%00101010
    630  2842		       2a		      BYTE.b	%00101010
    631  2843		       aa		      BYTE.b	%10101010
    632  2844		       20		      BYTE.b	%00100000
    633  2845		       20		      BYTE.b	%00100000
    634  2846		       00		      BYTE.b	%00000000
    635  2847		       da		      BYTE.b	%11011010
    636  2848		       52		      BYTE.b	%01010010
    637  2849		       52		      BYTE.b	%01010010
    638  284a		       db		      BYTE.b	%11011011
    639  284b		       10		      BYTE.b	%00010000
    640  284c		       00		      BYTE.b	%00000000
    641  284d		       20		      BYTE.b	%00100000
    642  284e		       a3		      BYTE.b	%10100011
    643  284f		       02		      BYTE.b	%00000010
    644  2850		       02		      BYTE.b	%00000010
    645  2851		       83		      BYTE.b	%10000011
    646  2852		       02		      BYTE.b	%00000010
    647  2853		       00		      BYTE.b	%00000000
    648  2854		       00		      BYTE.b	%00000000
    649  2855		       05		      BYTE.b	%00000101
    650  2856		       05		      BYTE.b	%00000101
    651  2857		       05		      BYTE.b	%00000101
    652  2858		       81		      BYTE.b	%10000001
    653  2859		       04		      BYTE.b	%00000100
    654  285a		       00		      BYTE.b	%00000000
    655  285b		       00		      BYTE.b	%00000000
    656  285c		       77		      BYTE.b	%01110111
    657  285d		       45		      BYTE.b	%01000101
    658  285e		       75		      BYTE.b	%01110101
    659  285f		       77		      BYTE.b	%01110111
    660  2860		       01		      BYTE.b	%00000001
    661  2861		       01		      BYTE.b	%00000001
    662  2862		       00		      BYTE.b	%00000000
    663  2863		       00		      BYTE.b	%00000000
    664  2864		       00		      BYTE.b	%00000000
    665  2865		       00		      BYTE.b	%00000000
    666  2866		       00		      BYTE.b	%00000000
    667  2867		       00		      BYTE.b	%00000000
    668  2868		       00		      BYTE.b	%00000000
    669  2869		       00		      BYTE.b	%00000000
    670  286a		       1a		      BYTE.b	%00011010
    671  286b		       22		      BYTE.b	%00100010
    672  286c		       22		      BYTE.b	%00100010
    673  286d		       1b		      BYTE.b	%00011011
    674  286e		       00		      BYTE.b	%00000000
    675  286f		       00		      BYTE.b	%00000000
    676  2870		       00		      BYTE.b	%00000000
    677  2871		       5d		      BYTE.b	%01011101
    678  2872		       55		      BYTE.b	%01010101
    679  2873		       55		      BYTE.b	%01010101
    680  2874		       1d		      BYTE.b	%00011101
    681  2875		       40		      BYTE.b	%01000000
    682  2876		       00		      BYTE.b	%00000000
    683  2877		       00		      BYTE.b	%00000000
    684  2878		       2a		      BYTE.b	%00101010
    685  2879		       2a		      BYTE.b	%00101010
    686  287a		       2a		      BYTE.b	%00101010
    687  287b		       3e		      BYTE.b	%00111110
    688  287c		       00		      BYTE.b	%00000000
    689  287d		       00		      BYTE.b	%00000000
    690  287e		       00		      BYTE.b	%00000000
    691  287f		       e6		      BYTE.b	%11100110
    692  2880		       a6		      BYTE.b	%10100110
    693  2881		       a6		      BYTE.b	%10100110
    694  2882		       e9		      BYTE.b	%11101001
    695  2883		       20		      BYTE.b	%00100000
    696  2884		       20		      BYTE.b	%00100000
    697  2885		       00		      BYTE.b	%00000000
    698  2886		       63		      BYTE.b	%01100011
    699  2887		       40		      BYTE.b	%01000000
    700  2888		       43		      BYTE.b	%01000011
    701  2889		       63		      BYTE.b	%01100011
    702  288a		       40		      BYTE.b	%01000000
    703  288b		       00		      BYTE.b	%00000000
    704  288c		       00		      BYTE.b	%00000000
    705  288d		       da		      BYTE.b	%11011010
    706  288e		       52		      BYTE.b	%01010010
    707  288f		       52		      BYTE.b	%01010010
    708  2890		       db		      BYTE.b	%11011011
    709  2891		       10		      BYTE.b	%00010000
    710  2892		       00		      BYTE.b	%00000000
    711  2893		       00		      BYTE.b	%00000000
    712  2894		       cd		      BYTE.b	%11001101
    713  2895		       11		      BYTE.b	%00010001
    714  2896		       d1		      BYTE.b	%11010001
    715  2897		       cd		      BYTE.b	%11001101
    716  2898		       01		      BYTE.b	%00000001
    717  2899		       00		      BYTE.b	%00000000
    718  289a		       00		      BYTE.b	%00000000
    719  289b		       b8		      BYTE.b	%10111000
    720  289c		       a8		      BYTE.b	%10101000
    721  289d		       bb		      BYTE.b	%10111011
    722  289e		       aa		      BYTE.b	%10101010
    723  289f		       ba		      BYTE.b	%10111010
    724  28a0		       00		      BYTE.b	%00000000
    725  28a1		       00		      BYTE.b	%00000000
    726  28a2		       a7		      BYTE.b	%10100111
    727  28a3		       a5		      BYTE.b	%10100101
    728  28a4		       a5		      BYTE.b	%10100101
    729  28a5		       b7		      BYTE.b	%10110111
    730  28a6		       00		      BYTE.b	%00000000
    731  28a7		       00		      BYTE.b	%00000000
    732  28a8		       0e		      BYTE.b	%00001110
    733  28a9		       ae		      BYTE.b	%10101110
    734  28aa		       aa		      BYTE.b	%10101010
    735  28ab		       aa		      BYTE.b	%10101010
    736  28ac		       ee		      BYTE.b	%11101110
    737  28ad		       00		      BYTE.b	%00000000
    738  28ae		       00		      BYTE.b	%00000000
    739  28af		       00		      BYTE.b	%00000000
    740  28b0		       b9		      BYTE.b	%10111001
    741  28b1		       a1		      BYTE.b	%10100001
    742  28b2		       b9		      BYTE.b	%10111001
    743  28b3		       ba		      BYTE.b	%10111010
    744  28b4		       00		      BYTE.b	%00000000
    745  28b5		       00		      BYTE.b	%00000000
    746  28b6		       00		      BYTE.b	%00000000
    747  28b7		       a7		      BYTE.b	%10100111
    748  28b8		       a4		      BYTE.b	%10100100
    749  28b9		       a7		      BYTE.b	%10100111
    750  28ba		       37		      BYTE.b	%00110111
    751  28bb		       80		      BYTE.b	%10000000
    752  28bc		       00		      BYTE.b	%00000000
    753  28bd		       00		      BYTE.b	%00000000
    754  28be		       00		      BYTE.b	%00000000
    755  28bf		       00		      BYTE.b	%00000000
    756  28c0		       00		      BYTE.b	%00000000
    757  28c1		       00		      BYTE.b	%00000000
    758  28c2		       00		      BYTE.b	%00000000
    759  28c3		       00		      BYTE.b	%00000000
    760  28c4		       00		      BYTE.b	%00000000
    761  28c5		       00		      BYTE.b	%00000000
    762  28c6		       00		      BYTE.b	%00000000
    763  28c7		       00		      BYTE.b	%00000000
    764  28c8		       00		      BYTE.b	%00000000
    765  28c9		       00		      BYTE.b	%00000000
    766  28ca		       00		      BYTE.b	%00000000
    767  28cb		       00		      BYTE.b	%00000000
    768  28cc		       00		      BYTE.b	%00000000
    769  28cd		       00		      BYTE.b	%00000000
    770  28ce		       00		      BYTE.b	%00000000
    771  28cf		       00		      BYTE.b	%00000000
    772  28d0		       00		      BYTE.b	%00000000
    773  28d1		       00		      BYTE.b	%00000000
    774  28d2		       00		      BYTE.b	%00000000
    775  28d3		       00		      BYTE.b	%00000000
    776  28d4		       00		      BYTE.b	%00000000
    777  28d5		       00		      BYTE.b	%00000000
    778  28d6		       00		      BYTE.b	%00000000
    779  28d7		       00		      BYTE.b	%00000000
    780  28d8		       00		      BYTE.b	%00000000
    781  28d9		       00		      BYTE.b	%00000000
    782  28da		       00		      BYTE.b	%00000000
    783  28db		       00		      BYTE.b	%00000000
    784  28dc		       00		      BYTE.b	%00000000
    785  28dd		       00		      BYTE.b	%00000000
    786  28de		       00		      BYTE.b	%00000000
    787  28df		       00		      BYTE.b	%00000000
    788  28e0		       00		      BYTE.b	%00000000
    789  28e1		       00		      BYTE.b	%00000000
    790  28e2		       00		      BYTE.b	%00000000
    791  28e3		       00		      BYTE.b	%00000000
    792  28e4		       00		      BYTE.b	%00000000
    793  28e5		       00		      BYTE.b	%00000000
    794  28e6		       00		      BYTE.b	%00000000
    795  28e7		       00		      BYTE.b	%00000000
    796  28e8		       00		      BYTE.b	%00000000
    797  28e9		       00		      BYTE.b	%00000000
    798  28ea		       00		      BYTE.b	%00000000
    799  28eb		       00		      BYTE.b	%00000000
    800  28ec		       00		      BYTE.b	%00000000
    801  28ed		       00		      BYTE.b	%00000000
    802  28ee		       00		      BYTE.b	%00000000
    803  28ef		       00		      BYTE.b	%00000000
    804  28f0		       00		      BYTE.b	%00000000
    805  28f1		       00		      BYTE.b	%00000000
    806  28f2		       00		      BYTE.b	%00000000
    807  28f3		       00		      BYTE.b	%00000000
    808  28f4		       00		      BYTE.b	%00000000
    809  28f5		       00		      BYTE.b	%00000000
    810  28f6		       00		      BYTE.b	%00000000
    811  28f7		       00		      BYTE.b	%00000000
    812  28f8		       00		      BYTE.b	%00000000
    813  28f9		       00		      BYTE.b	%00000000
    814  28fa		       00		      BYTE.b	%00000000
    815  28fb		       00		      BYTE.b	%00000000
    816  28fc		       00		      BYTE.b	%00000000
    817  28fd		       00		      BYTE.b	%00000000
    818  28fe		       00		      BYTE.b	%00000000
    819  28ff		       00		      BYTE.b	%00000000
    820  2900
    821  2900
    822  2900				  -	      if	>. != >[.+bmp_48x1_2_height]
    823  2900				  -	      align	256
    824  2900					      endif
    825  2900
    826  2900				   bmp_48x1_2_03
    827  2900		       00		      BYTE.b	%00000000
    828  2901		       ba		      BYTE.b	%10111010
    829  2902		       a8		      BYTE.b	%10101000
    830  2903		       a8		      BYTE.b	%10101000
    831  2904		       b8		      BYTE.b	%10111000
    832  2905		       08		      BYTE.b	%00001000
    833  2906		       08		      BYTE.b	%00001000
    834  2907		       40		      BYTE.b	%01000000
    835  2908		       77		      BYTE.b	%01110111
    836  2909		       54		      BYTE.b	%01010100
    837  290a		       57		      BYTE.b	%01010111
    838  290b		       77		      BYTE.b	%01110111
    839  290c		       00		      BYTE.b	%00000000
    840  290d		       00		      BYTE.b	%00000000
    841  290e		       00		      BYTE.b	%00000000
    842  290f		       c6		      BYTE.b	%11000110
    843  2910		       04		      BYTE.b	%00000100
    844  2911		       c4		      BYTE.b	%11000100
    845  2912		       c6		      BYTE.b	%11000110
    846  2913		       04		      BYTE.b	%00000100
    847  2914		       00		      BYTE.b	%00000000
    848  2915		       00		      BYTE.b	%00000000
    849  2916		       00		      BYTE.b	%00000000
    850  2917		       00		      BYTE.b	%00000000
    851  2918		       00		      BYTE.b	%00000000
    852  2919		       00		      BYTE.b	%00000000
    853  291a		       00		      BYTE.b	%00000000
    854  291b		       00		      BYTE.b	%00000000
    855  291c		       c0		      BYTE.b	%11000000
    856  291d		       47		      BYTE.b	%01000111
    857  291e		       64		      BYTE.b	%01100100
    858  291f		       67		      BYTE.b	%01100111
    859  2920		       97		      BYTE.b	%10010111
    860  2921		       00		      BYTE.b	%00000000
    861  2922		       00		      BYTE.b	%00000000
    862  2923		       00		      BYTE.b	%00000000
    863  2924		       70		      BYTE.b	%01110000
    864  2925		       40		      BYTE.b	%01000000
    865  2926		       70		      BYTE.b	%01110000
    866  2927		       70		      BYTE.b	%01110000
    867  2928		       00		      BYTE.b	%00000000
    868  2929		       00		      BYTE.b	%00000000
    869  292a		       00		      BYTE.b	%00000000
    870  292b		       d3		      BYTE.b	%11010011
    871  292c		       12		      BYTE.b	%00010010
    872  292d		       d3		      BYTE.b	%11010011
    873  292e		       db		      BYTE.b	%11011011
    874  292f		       00		      BYTE.b	%00000000
    875  2930		       00		      BYTE.b	%00000000
    876  2931		       00		      BYTE.b	%00000000
    877  2932		       4d		      BYTE.b	%01001101
    878  2933		       51		      BYTE.b	%01010001
    879  2934		       51		      BYTE.b	%01010001
    880  2935		       0c		      BYTE.b	%00001100
    881  2936		       41		      BYTE.b	%01000001
    882  2937		       00		      BYTE.b	%00000000
    883  2938		       00		      BYTE.b	%00000000
    884  2939		       09		      BYTE.b	%00001001
    885  293a		       09		      BYTE.b	%00001001
    886  293b		       08		      BYTE.b	%00001000
    887  293c		       0c		      BYTE.b	%00001100
    888  293d		       00		      BYTE.b	%00000000
    889  293e		       00		      BYTE.b	%00000000
    890  293f		       00		      BYTE.b	%00000000
    891  2940		       ee		      BYTE.b	%11101110
    892  2941		       a8		      BYTE.b	%10101000
    893  2942		       ae		      BYTE.b	%10101110
    894  2943		       ee		      BYTE.b	%11101110
    895  2944		       20		      BYTE.b	%00100000
    896  2945		       20		      BYTE.b	%00100000
    897  2946		       00		      BYTE.b	%00000000
    898  2947		       75		      BYTE.b	%01110101
    899  2948		       55		      BYTE.b	%01010101
    900  2949		       55		      BYTE.b	%01010101
    901  294a		       77		      BYTE.b	%01110111
    902  294b		       00		      BYTE.b	%00000000
    903  294c		       00		      BYTE.b	%00000000
    904  294d		       00		      BYTE.b	%00000000
    905  294e		       57		      BYTE.b	%01010111
    906  294f		       54		      BYTE.b	%01010100
    907  2950		       57		      BYTE.b	%01010111
    908  2951		       77		      BYTE.b	%01110111
    909  2952		       40		      BYTE.b	%01000000
    910  2953		       40		      BYTE.b	%01000000
    911  2954		       00		      BYTE.b	%00000000
    912  2955		       57		      BYTE.b	%01010111
    913  2956		       57		      BYTE.b	%01010111
    914  2957		       51		      BYTE.b	%01010001
    915  2958		       db		      BYTE.b	%11011011
    916  2959		       10		      BYTE.b	%00010000
    917  295a		       18		      BYTE.b	%00011000
    918  295b		       01		      BYTE.b	%00000001
    919  295c		       1c		      BYTE.b	%00011100
    920  295d		       14		      BYTE.b	%00010100
    921  295e		       14		      BYTE.b	%00010100
    922  295f		       1d		      BYTE.b	%00011101
    923  2960		       10		      BYTE.b	%00010000
    924  2961		       10		      BYTE.b	%00010000
    925  2962		       00		      BYTE.b	%00000000
    926  2963		       00		      BYTE.b	%00000000
    927  2964		       00		      BYTE.b	%00000000
    928  2965		       00		      BYTE.b	%00000000
    929  2966		       00		      BYTE.b	%00000000
    930  2967		       00		      BYTE.b	%00000000
    931  2968		       00		      BYTE.b	%00000000
    932  2969		       00		      BYTE.b	%00000000
    933  296a		       77		      BYTE.b	%01110111
    934  296b		       47		      BYTE.b	%01000111
    935  296c		       71		      BYTE.b	%01110001
    936  296d		       73		      BYTE.b	%01110011
    937  296e		       00		      BYTE.b	%00000000
    938  296f		       00		      BYTE.b	%00000000
    939  2970		       00		      BYTE.b	%00000000
    940  2971		       0d		      BYTE.b	%00001101
    941  2972		       09		      BYTE.b	%00001001
    942  2973		       09		      BYTE.b	%00001001
    943  2974		       8d		      BYTE.b	%10001101
    944  2975		       08		      BYTE.b	%00001000
    945  2976		       00		      BYTE.b	%00000000
    946  2977		       00		      BYTE.b	%00000000
    947  2978		       ea		      BYTE.b	%11101010
    948  2979		       ea		      BYTE.b	%11101010
    949  297a		       2a		      BYTE.b	%00101010
    950  297b		       6e		      BYTE.b	%01101110
    951  297c		       00		      BYTE.b	%00000000
    952  297d		       00		      BYTE.b	%00000000
    953  297e		       00		      BYTE.b	%00000000
    954  297f		       ea		      BYTE.b	%11101010
    955  2980		       ea		      BYTE.b	%11101010
    956  2981		       2a		      BYTE.b	%00101010
    957  2982		       6e		      BYTE.b	%01101110
    958  2983		       00		      BYTE.b	%00000000
    959  2984		       00		      BYTE.b	%00000000
    960  2985		       20		      BYTE.b	%00100000
    961  2986		       bb		      BYTE.b	%10111011
    962  2987		       aa		      BYTE.b	%10101010
    963  2988		       2b		      BYTE.b	%00101011
    964  2989		       bb		      BYTE.b	%10111011
    965  298a		       00		      BYTE.b	%00000000
    966  298b		       00		      BYTE.b	%00000000
    967  298c		       00		      BYTE.b	%00000000
    968  298d		       75		      BYTE.b	%01110101
    969  298e		       55		      BYTE.b	%01010101
    970  298f		       55		      BYTE.b	%01010101
    971  2990		       77		      BYTE.b	%01110111
    972  2991		       00		      BYTE.b	%00000000
    973  2992		       00		      BYTE.b	%00000000
    974  2993		       00		      BYTE.b	%00000000
    975  2994		       b8		      BYTE.b	%10111000
    976  2995		       08		      BYTE.b	%00001000
    977  2996		       30		      BYTE.b	%00110000
    978  2997		       b8		      BYTE.b	%10111000
    979  2998		       00		      BYTE.b	%00000000
    980  2999		       00		      BYTE.b	%00000000
    981  299a		       00		      BYTE.b	%00000000
    982  299b		       85		      BYTE.b	%10000101
    983  299c		       85		      BYTE.b	%10000101
    984  299d		       c5		      BYTE.b	%11000101
    985  299e		       87		      BYTE.b	%10000111
    986  299f		       80		      BYTE.b	%10000000
    987  29a0		       00		      BYTE.b	%00000000
    988  29a1		       70		      BYTE.b	%01110000
    989  29a2		       74		      BYTE.b	%01110100
    990  29a3		       54		      BYTE.b	%01010100
    991  29a4		       54		      BYTE.b	%01010100
    992  29a5		       76		      BYTE.b	%01110110
    993  29a6		       00		      BYTE.b	%00000000
    994  29a7		       00		      BYTE.b	%00000000
    995  29a8		       08		      BYTE.b	%00001000
    996  29a9		       3b		      BYTE.b	%00111011
    997  29aa		       2a		      BYTE.b	%00101010
    998  29ab		       2a		      BYTE.b	%00101010
    999  29ac		       3a		      BYTE.b	%00111010
   1000  29ad		       00		      BYTE.b	%00000000
   1001  29ae		       00		      BYTE.b	%00000000
   1002  29af		       00		      BYTE.b	%00000000
   1003  29b0		       9d		      BYTE.b	%10011101
   1004  29b1		       91		      BYTE.b	%10010001
   1005  29b2		       9d		      BYTE.b	%10011101
   1006  29b3		       5d		      BYTE.b	%01011101
   1007  29b4		       00		      BYTE.b	%00000000
   1008  29b5		       00		      BYTE.b	%00000000
   1009  29b6		       00		      BYTE.b	%00000000
   1010  29b7		       71		      BYTE.b	%01110001
   1011  29b8		       51		      BYTE.b	%01010001
   1012  29b9		       51		      BYTE.b	%01010001
   1013  29ba		       71		      BYTE.b	%01110001
   1014  29bb		       11		      BYTE.b	%00010001
   1015  29bc		       11		      BYTE.b	%00010001
   1016  29bd		       00		      BYTE.b	%00000000
   1017  29be		       00		      BYTE.b	%00000000
   1018  29bf		       00		      BYTE.b	%00000000
   1019  29c0		       00		      BYTE.b	%00000000
   1020  29c1		       00		      BYTE.b	%00000000
   1021  29c2		       00		      BYTE.b	%00000000
   1022  29c3		       00		      BYTE.b	%00000000
   1023  29c4		       00		      BYTE.b	%00000000
   1024  29c5		       00		      BYTE.b	%00000000
   1025  29c6		       00		      BYTE.b	%00000000
   1026  29c7		       00		      BYTE.b	%00000000
   1027  29c8		       00		      BYTE.b	%00000000
   1028  29c9		       00		      BYTE.b	%00000000
   1029  29ca		       00		      BYTE.b	%00000000
   1030  29cb		       00		      BYTE.b	%00000000
   1031  29cc		       00		      BYTE.b	%00000000
   1032  29cd		       00		      BYTE.b	%00000000
   1033  29ce		       00		      BYTE.b	%00000000
   1034  29cf		       00		      BYTE.b	%00000000
   1035  29d0		       00		      BYTE.b	%00000000
   1036  29d1		       00		      BYTE.b	%00000000
   1037  29d2		       00		      BYTE.b	%00000000
   1038  29d3		       00		      BYTE.b	%00000000
   1039  29d4		       00		      BYTE.b	%00000000
   1040  29d5		       00		      BYTE.b	%00000000
   1041  29d6		       00		      BYTE.b	%00000000
   1042  29d7		       00		      BYTE.b	%00000000
   1043  29d8		       00		      BYTE.b	%00000000
   1044  29d9		       00		      BYTE.b	%00000000
   1045  29da		       00		      BYTE.b	%00000000
   1046  29db		       00		      BYTE.b	%00000000
   1047  29dc		       00		      BYTE.b	%00000000
   1048  29dd		       00		      BYTE.b	%00000000
   1049  29de		       00		      BYTE.b	%00000000
   1050  29df		       00		      BYTE.b	%00000000
   1051  29e0		       00		      BYTE.b	%00000000
   1052  29e1		       00		      BYTE.b	%00000000
   1053  29e2		       00		      BYTE.b	%00000000
   1054  29e3		       00		      BYTE.b	%00000000
   1055  29e4		       00		      BYTE.b	%00000000
   1056  29e5		       00		      BYTE.b	%00000000
   1057  29e6		       00		      BYTE.b	%00000000
   1058  29e7		       00		      BYTE.b	%00000000
   1059  29e8		       00		      BYTE.b	%00000000
   1060  29e9		       00		      BYTE.b	%00000000
   1061  29ea		       00		      BYTE.b	%00000000
   1062  29eb		       00		      BYTE.b	%00000000
   1063  29ec		       00		      BYTE.b	%00000000
   1064  29ed		       00		      BYTE.b	%00000000
   1065  29ee		       00		      BYTE.b	%00000000
   1066  29ef		       00		      BYTE.b	%00000000
   1067  29f0		       00		      BYTE.b	%00000000
   1068  29f1		       00		      BYTE.b	%00000000
   1069  29f2		       00		      BYTE.b	%00000000
   1070  29f3		       00		      BYTE.b	%00000000
   1071  29f4		       00		      BYTE.b	%00000000
   1072  29f5		       00		      BYTE.b	%00000000
   1073  29f6		       00		      BYTE.b	%00000000
   1074  29f7		       00		      BYTE.b	%00000000
   1075  29f8		       00		      BYTE.b	%00000000
   1076  29f9		       00		      BYTE.b	%00000000
   1077  29fa		       00		      BYTE.b	%00000000
   1078  29fb		       00		      BYTE.b	%00000000
   1079  29fc		       00		      BYTE.b	%00000000
   1080  29fd		       00		      BYTE.b	%00000000
   1081  29fe		       00		      BYTE.b	%00000000
   1082  29ff		       00		      BYTE.b	%00000000
   1083  2a00
   1084  2a00				  -	      if	>. != >[.+bmp_48x1_2_height]
   1085  2a00				  -	      align	256
   1086  2a00					      endif
   1087  2a00
   1088  2a00				   bmp_48x1_2_04
   1089  2a00		       00		      BYTE.b	%00000000
   1090  2a01		       00		      BYTE.b	%00000000
   1091  2a02		       00		      BYTE.b	%00000000
   1092  2a03		       00		      BYTE.b	%00000000
   1093  2a04		       00		      BYTE.b	%00000000
   1094  2a05		       00		      BYTE.b	%00000000
   1095  2a06		       00		      BYTE.b	%00000000
   1096  2a07		       00		      BYTE.b	%00000000
   1097  2a08		       13		      BYTE.b	%00010011
   1098  2a09		       12		      BYTE.b	%00010010
   1099  2a0a		       12		      BYTE.b	%00010010
   1100  2a0b		       1b		      BYTE.b	%00011011
   1101  2a0c		       10		      BYTE.b	%00010000
   1102  2a0d		       18		      BYTE.b	%00011000
   1103  2a0e		       00		      BYTE.b	%00000000
   1104  2a0f		       ae		      BYTE.b	%10101110
   1105  2a10		       a8		      BYTE.b	%10101000
   1106  2a11		       ae		      BYTE.b	%10101110
   1107  2a12		       ee		      BYTE.b	%11101110
   1108  2a13		       80		      BYTE.b	%10000000
   1109  2a14		       80		      BYTE.b	%10000000
   1110  2a15		       00		      BYTE.b	%00000000
   1111  2a16		       00		      BYTE.b	%00000000
   1112  2a17		       00		      BYTE.b	%00000000
   1113  2a18		       00		      BYTE.b	%00000000
   1114  2a19		       00		      BYTE.b	%00000000
   1115  2a1a		       00		      BYTE.b	%00000000
   1116  2a1b		       00		      BYTE.b	%00000000
   1117  2a1c		       00		      BYTE.b	%00000000
   1118  2a1d		       74		      BYTE.b	%01110100
   1119  2a1e		       50		      BYTE.b	%01010000
   1120  2a1f		       50		      BYTE.b	%01010000
   1121  2a20		       70		      BYTE.b	%01110000
   1122  2a21		       10		      BYTE.b	%00010000
   1123  2a22		       10		      BYTE.b	%00010000
   1124  2a23		       00		      BYTE.b	%00000000
   1125  2a24		       00		      BYTE.b	%00000000
   1126  2a25		       00		      BYTE.b	%00000000
   1127  2a26		       00		      BYTE.b	%00000000
   1128  2a27		       00		      BYTE.b	%00000000
   1129  2a28		       00		      BYTE.b	%00000000
   1130  2a29		       00		      BYTE.b	%00000000
   1131  2a2a		       00		      BYTE.b	%00000000
   1132  2a2b		       a7		      BYTE.b	%10100111
   1133  2a2c		       25		      BYTE.b	%00100101
   1134  2a2d		       a5		      BYTE.b	%10100101
   1135  2a2e		       b7		      BYTE.b	%10110111
   1136  2a2f		       20		      BYTE.b	%00100000
   1137  2a30		       30		      BYTE.b	%00110000
   1138  2a31		       00		      BYTE.b	%00000000
   1139  2a32		       75		      BYTE.b	%01110101
   1140  2a33		       45		      BYTE.b	%01000101
   1141  2a34		       75		      BYTE.b	%01110101
   1142  2a35		       77		      BYTE.b	%01110111
   1143  2a36		       00		      BYTE.b	%00000000
   1144  2a37		       00		      BYTE.b	%00000000
   1145  2a38		       00		      BYTE.b	%00000000
   1146  2a39		       cd		      BYTE.b	%11001101
   1147  2a3a		       d1		      BYTE.b	%11010001
   1148  2a3b		       51		      BYTE.b	%01010001
   1149  2a3c		       cd		      BYTE.b	%11001101
   1150  2a3d		       00		      BYTE.b	%00000000
   1151  2a3e		       00		      BYTE.b	%00000000
   1152  2a3f		       00		      BYTE.b	%00000000
   1153  2a40		       84		      BYTE.b	%10000100
   1154  2a41		       04		      BYTE.b	%00000100
   1155  2a42		       04		      BYTE.b	%00000100
   1156  2a43		       84		      BYTE.b	%10000100
   1157  2a44		       1f		      BYTE.b	%00011111
   1158  2a45		       00		      BYTE.b	%00000000
   1159  2a46		       00		      BYTE.b	%00000000
   1160  2a47		       70		      BYTE.b	%01110000
   1161  2a48		       10		      BYTE.b	%00010000
   1162  2a49		       60		      BYTE.b	%01100000
   1163  2a4a		       70		      BYTE.b	%01110000
   1164  2a4b		       00		      BYTE.b	%00000000
   1165  2a4c		       00		      BYTE.b	%00000000
   1166  2a4d		       00		      BYTE.b	%00000000
   1167  2a4e		       00		      BYTE.b	%00000000
   1168  2a4f		       00		      BYTE.b	%00000000
   1169  2a50		       00		      BYTE.b	%00000000
   1170  2a51		       00		      BYTE.b	%00000000
   1171  2a52		       00		      BYTE.b	%00000000
   1172  2a53		       00		      BYTE.b	%00000000
   1173  2a54		       00		      BYTE.b	%00000000
   1174  2a55		       55		      BYTE.b	%01010101
   1175  2a56		       55		      BYTE.b	%01010101
   1176  2a57		       55		      BYTE.b	%01010101
   1177  2a58		       51		      BYTE.b	%01010001
   1178  2a59		       55		      BYTE.b	%01010101
   1179  2a5a		       51		      BYTE.b	%01010001
   1180  2a5b		       80		      BYTE.b	%10000000
   1181  2a5c		       80		      BYTE.b	%10000000
   1182  2a5d		       c0		      BYTE.b	%11000000
   1183  2a5e		       c0		      BYTE.b	%11000000
   1184  2a5f		       20		      BYTE.b	%00100000
   1185  2a60		       00		      BYTE.b	%00000000
   1186  2a61		       00		      BYTE.b	%00000000
   1187  2a62		       00		      BYTE.b	%00000000
   1188  2a63		       00		      BYTE.b	%00000000
   1189  2a64		       00		      BYTE.b	%00000000
   1190  2a65		       00		      BYTE.b	%00000000
   1191  2a66		       00		      BYTE.b	%00000000
   1192  2a67		       00		      BYTE.b	%00000000
   1193  2a68		       00		      BYTE.b	%00000000
   1194  2a69		       00		      BYTE.b	%00000000
   1195  2a6a		       6b		      BYTE.b	%01101011
   1196  2a6b		       4a		      BYTE.b	%01001010
   1197  2a6c		       4a		      BYTE.b	%01001010
   1198  2a6d		       63		      BYTE.b	%01100011
   1199  2a6e		       48		      BYTE.b	%01001000
   1200  2a6f		       00		      BYTE.b	%00000000
   1201  2a70		       00		      BYTE.b	%00000000
   1202  2a71		       c5		      BYTE.b	%11000101
   1203  2a72		       45		      BYTE.b	%01000101
   1204  2a73		       45		      BYTE.b	%01000101
   1205  2a74		       c7		      BYTE.b	%11000111
   1206  2a75		       04		      BYTE.b	%00000100
   1207  2a76		       04		      BYTE.b	%00000100
   1208  2a77		       00		      BYTE.b	%00000000
   1209  2a78		       2e		      BYTE.b	%00101110
   1210  2a79		       22		      BYTE.b	%00100010
   1211  2a7a		       2c		      BYTE.b	%00101100
   1212  2a7b		       0e		      BYTE.b	%00001110
   1213  2a7c		       20		      BYTE.b	%00100000
   1214  2a7d		       00		      BYTE.b	%00000000
   1215  2a7e		       00		      BYTE.b	%00000000
   1216  2a7f		       6e		      BYTE.b	%01101110
   1217  2a80		       88		      BYTE.b	%10001000
   1218  2a81		       8e		      BYTE.b	%10001110
   1219  2a82		       6e		      BYTE.b	%01101110
   1220  2a83		       00		      BYTE.b	%00000000
   1221  2a84		       00		      BYTE.b	%00000000
   1222  2a85		       00		      BYTE.b	%00000000
   1223  2a86		       9a		      BYTE.b	%10011010
   1224  2a87		       22		      BYTE.b	%00100010
   1225  2a88		       a2		      BYTE.b	%10100010
   1226  2a89		       98		      BYTE.b	%10011000
   1227  2a8a		       02		      BYTE.b	%00000010
   1228  2a8b		       00		      BYTE.b	%00000000
   1229  2a8c		       00		      BYTE.b	%00000000
   1230  2a8d		       74		      BYTE.b	%01110100
   1231  2a8e		       10		      BYTE.b	%00010000
   1232  2a8f		       60		      BYTE.b	%01100000
   1233  2a90		       74		      BYTE.b	%01110100
   1234  2a91		       00		      BYTE.b	%00000000
   1235  2a92		       00		      BYTE.b	%00000000
   1236  2a93		       00		      BYTE.b	%00000000
   1237  2a94		       d5		      BYTE.b	%11010101
   1238  2a95		       95		      BYTE.b	%10010101
   1239  2a96		       95		      BYTE.b	%10010101
   1240  2a97		       dd		      BYTE.b	%11011101
   1241  2a98		       90		      BYTE.b	%10010000
   1242  2a99		       10		      BYTE.b	%00010000
   1243  2a9a		       00		      BYTE.b	%00000000
   1244  2a9b		       5d		      BYTE.b	%01011101
   1245  2a9c		       5d		      BYTE.b	%01011101
   1246  2a9d		       45		      BYTE.b	%01000101
   1247  2a9e		       cd		      BYTE.b	%11001101
   1248  2a9f		       00		      BYTE.b	%00000000
   1249  2aa0		       00		      BYTE.b	%00000000
   1250  2aa1		       00		      BYTE.b	%00000000
   1251  2aa2		       ee		      BYTE.b	%11101110
   1252  2aa3		       82		      BYTE.b	%10000010
   1253  2aa4		       ec		      BYTE.b	%11101100
   1254  2aa5		       ee		      BYTE.b	%11101110
   1255  2aa6		       00		      BYTE.b	%00000000
   1256  2aa7		       00		      BYTE.b	%00000000
   1257  2aa8		       00		      BYTE.b	%00000000
   1258  2aa9		       bb		      BYTE.b	%10111011
   1259  2aaa		       a0		      BYTE.b	%10100000
   1260  2aab		       bb		      BYTE.b	%10111011
   1261  2aac		       bb		      BYTE.b	%10111011
   1262  2aad		       00		      BYTE.b	%00000000
   1263  2aae		       00		      BYTE.b	%00000000
   1264  2aaf		       00		      BYTE.b	%00000000
   1265  2ab0		       00		      BYTE.b	%00000000
   1266  2ab1		       00		      BYTE.b	%00000000
   1267  2ab2		       30		      BYTE.b	%00110000
   1268  2ab3		       80		      BYTE.b	%10000000
   1269  2ab4		       00		      BYTE.b	%00000000
   1270  2ab5		       00		      BYTE.b	%00000000
   1271  2ab6		       18		      BYTE.b	%00011000
   1272  2ab7		       c8		      BYTE.b	%11001000
   1273  2ab8		       4c		      BYTE.b	%01001100
   1274  2ab9		       4c		      BYTE.b	%01001100
   1275  2aba		       d2		      BYTE.b	%11010010
   1276  2abb		       00		      BYTE.b	%00000000
   1277  2abc		       00		      BYTE.b	%00000000
   1278  2abd		       00		      BYTE.b	%00000000
   1279  2abe		       00		      BYTE.b	%00000000
   1280  2abf		       00		      BYTE.b	%00000000
   1281  2ac0		       00		      BYTE.b	%00000000
   1282  2ac1		       00		      BYTE.b	%00000000
   1283  2ac2		       00		      BYTE.b	%00000000
   1284  2ac3		       00		      BYTE.b	%00000000
   1285  2ac4		       00		      BYTE.b	%00000000
   1286  2ac5		       00		      BYTE.b	%00000000
   1287  2ac6		       00		      BYTE.b	%00000000
   1288  2ac7		       00		      BYTE.b	%00000000
   1289  2ac8		       00		      BYTE.b	%00000000
   1290  2ac9		       00		      BYTE.b	%00000000
   1291  2aca		       00		      BYTE.b	%00000000
   1292  2acb		       00		      BYTE.b	%00000000
   1293  2acc		       00		      BYTE.b	%00000000
   1294  2acd		       00		      BYTE.b	%00000000
   1295  2ace		       00		      BYTE.b	%00000000
   1296  2acf		       00		      BYTE.b	%00000000
   1297  2ad0		       00		      BYTE.b	%00000000
   1298  2ad1		       00		      BYTE.b	%00000000
   1299  2ad2		       00		      BYTE.b	%00000000
   1300  2ad3		       00		      BYTE.b	%00000000
   1301  2ad4		       00		      BYTE.b	%00000000
   1302  2ad5		       00		      BYTE.b	%00000000
   1303  2ad6		       00		      BYTE.b	%00000000
   1304  2ad7		       00		      BYTE.b	%00000000
   1305  2ad8		       00		      BYTE.b	%00000000
   1306  2ad9		       00		      BYTE.b	%00000000
   1307  2ada		       00		      BYTE.b	%00000000
   1308  2adb		       00		      BYTE.b	%00000000
   1309  2adc		       00		      BYTE.b	%00000000
   1310  2add		       00		      BYTE.b	%00000000
   1311  2ade		       00		      BYTE.b	%00000000
   1312  2adf		       00		      BYTE.b	%00000000
   1313  2ae0		       00		      BYTE.b	%00000000
   1314  2ae1		       00		      BYTE.b	%00000000
   1315  2ae2		       00		      BYTE.b	%00000000
   1316  2ae3		       00		      BYTE.b	%00000000
   1317  2ae4		       00		      BYTE.b	%00000000
   1318  2ae5		       00		      BYTE.b	%00000000
   1319  2ae6		       00		      BYTE.b	%00000000
   1320  2ae7		       00		      BYTE.b	%00000000
   1321  2ae8		       00		      BYTE.b	%00000000
   1322  2ae9		       00		      BYTE.b	%00000000
   1323  2aea		       00		      BYTE.b	%00000000
   1324  2aeb		       00		      BYTE.b	%00000000
   1325  2aec		       00		      BYTE.b	%00000000
   1326  2aed		       00		      BYTE.b	%00000000
   1327  2aee		       00		      BYTE.b	%00000000
   1328  2aef		       00		      BYTE.b	%00000000
   1329  2af0		       00		      BYTE.b	%00000000
   1330  2af1		       00		      BYTE.b	%00000000
   1331  2af2		       00		      BYTE.b	%00000000
   1332  2af3		       00		      BYTE.b	%00000000
   1333  2af4		       00		      BYTE.b	%00000000
   1334  2af5		       00		      BYTE.b	%00000000
   1335  2af6		       00		      BYTE.b	%00000000
   1336  2af7		       00		      BYTE.b	%00000000
   1337  2af8		       00		      BYTE.b	%00000000
   1338  2af9		       00		      BYTE.b	%00000000
   1339  2afa		       00		      BYTE.b	%00000000
   1340  2afb		       00		      BYTE.b	%00000000
   1341  2afc		       00		      BYTE.b	%00000000
   1342  2afd		       00		      BYTE.b	%00000000
   1343  2afe		       00		      BYTE.b	%00000000
   1344  2aff		       00		      BYTE.b	%00000000
   1345  2b00
   1346  2b00
   1347  2b00
   1348  2b00				  -	      if	>. != >[.+bmp_48x1_2_height]
   1349  2b00				  -	      align	256
   1350  2b00					      endif
   1351  2b00
   1352  2b00				   bmp_48x1_2_05
   1353  2b00		       00		      BYTE.b	%00000000
   1354  2b01		       00		      BYTE.b	%00000000
   1355  2b02		       00		      BYTE.b	%00000000
   1356  2b03		       00		      BYTE.b	%00000000
   1357  2b04		       00		      BYTE.b	%00000000
   1358  2b05		       00		      BYTE.b	%00000000
   1359  2b06		       00		      BYTE.b	%00000000
   1360  2b07		       00		      BYTE.b	%00000000
   1361  2b08		       a0		      BYTE.b	%10100000
   1362  2b09		       a0		      BYTE.b	%10100000
   1363  2b0a		       a0		      BYTE.b	%10100000
   1364  2b0b		       b0		      BYTE.b	%10110000
   1365  2b0c		       00		      BYTE.b	%00000000
   1366  2b0d		       00		      BYTE.b	%00000000
   1367  2b0e		       00		      BYTE.b	%00000000
   1368  2b0f		       00		      BYTE.b	%00000000
   1369  2b10		       00		      BYTE.b	%00000000
   1370  2b11		       00		      BYTE.b	%00000000
   1371  2b12		       00		      BYTE.b	%00000000
   1372  2b13		       00		      BYTE.b	%00000000
   1373  2b14		       00		      BYTE.b	%00000000
   1374  2b15		       00		      BYTE.b	%00000000
   1375  2b16		       00		      BYTE.b	%00000000
   1376  2b17		       00		      BYTE.b	%00000000
   1377  2b18		       00		      BYTE.b	%00000000
   1378  2b19		       00		      BYTE.b	%00000000
   1379  2b1a		       00		      BYTE.b	%00000000
   1380  2b1b		       00		      BYTE.b	%00000000
   1381  2b1c		       00		      BYTE.b	%00000000
   1382  2b1d		       00		      BYTE.b	%00000000
   1383  2b1e		       00		      BYTE.b	%00000000
   1384  2b1f		       00		      BYTE.b	%00000000
   1385  2b20		       00		      BYTE.b	%00000000
   1386  2b21		       00		      BYTE.b	%00000000
   1387  2b22		       00		      BYTE.b	%00000000
   1388  2b23		       00		      BYTE.b	%00000000
   1389  2b24		       00		      BYTE.b	%00000000
   1390  2b25		       00		      BYTE.b	%00000000
   1391  2b26		       00		      BYTE.b	%00000000
   1392  2b27		       00		      BYTE.b	%00000000
   1393  2b28		       00		      BYTE.b	%00000000
   1394  2b29		       00		      BYTE.b	%00000000
   1395  2b2a		       00		      BYTE.b	%00000000
   1396  2b2b		       4e		      BYTE.b	%01001110
   1397  2b2c		       48		      BYTE.b	%01001000
   1398  2b2d		       4e		      BYTE.b	%01001110
   1399  2b2e		       6e		      BYTE.b	%01101110
   1400  2b2f		       00		      BYTE.b	%00000000
   1401  2b30		       00		      BYTE.b	%00000000
   1402  2b31		       08		      BYTE.b	%00001000
   1403  2b32		       68		      BYTE.b	%01101000
   1404  2b33		       40		      BYTE.b	%01000000
   1405  2b34		       40		      BYTE.b	%01000000
   1406  2b35		       60		      BYTE.b	%01100000
   1407  2b36		       40		      BYTE.b	%01000000
   1408  2b37		       00		      BYTE.b	%00000000
   1409  2b38		       00		      BYTE.b	%00000000
   1410  2b39		       c0		      BYTE.b	%11000000
   1411  2b3a		       00		      BYTE.b	%00000000
   1412  2b3b		       c0		      BYTE.b	%11000000
   1413  2b3c		       c0		      BYTE.b	%11000000
   1414  2b3d		       00		      BYTE.b	%00000000
   1415  2b3e		       00		      BYTE.b	%00000000
   1416  2b3f		       00		      BYTE.b	%00000000
   1417  2b40		       ae		      BYTE.b	%10101110
   1418  2b41		       a8		      BYTE.b	%10101000
   1419  2b42		       ae		      BYTE.b	%10101110
   1420  2b43		       ee		      BYTE.b	%11101110
   1421  2b44		       80		      BYTE.b	%10000000
   1422  2b45		       80		      BYTE.b	%10000000
   1423  2b46		       00		      BYTE.b	%00000000
   1424  2b47		       00		      BYTE.b	%00000000
   1425  2b48		       00		      BYTE.b	%00000000
   1426  2b49		       00		      BYTE.b	%00000000
   1427  2b4a		       00		      BYTE.b	%00000000
   1428  2b4b		       00		      BYTE.b	%00000000
   1429  2b4c		       00		      BYTE.b	%00000000
   1430  2b4d		       00		      BYTE.b	%00000000
   1431  2b4e		       00		      BYTE.b	%00000000
   1432  2b4f		       00		      BYTE.b	%00000000
   1433  2b50		       00		      BYTE.b	%00000000
   1434  2b51		       00		      BYTE.b	%00000000
   1435  2b52		       00		      BYTE.b	%00000000
   1436  2b53		       00		      BYTE.b	%00000000
   1437  2b54		       00		      BYTE.b	%00000000
   1438  2b55		       d7		      BYTE.b	%11010111
   1439  2b56		       54		      BYTE.b	%01010100
   1440  2b57		       57		      BYTE.b	%01010111
   1441  2b58		       d7		      BYTE.b	%11010111
   1442  2b59		       10		      BYTE.b	%00010000
   1443  2b5a		       10		      BYTE.b	%00010000
   1444  2b5b		       00		      BYTE.b	%00000000
   1445  2b5c		       00		      BYTE.b	%00000000
   1446  2b5d		       00		      BYTE.b	%00000000
   1447  2b5e		       00		      BYTE.b	%00000000
   1448  2b5f		       00		      BYTE.b	%00000000
   1449  2b60		       00		      BYTE.b	%00000000
   1450  2b61		       00		      BYTE.b	%00000000
   1451  2b62		       00		      BYTE.b	%00000000
   1452  2b63		       00		      BYTE.b	%00000000
   1453  2b64		       00		      BYTE.b	%00000000
   1454  2b65		       00		      BYTE.b	%00000000
   1455  2b66		       00		      BYTE.b	%00000000
   1456  2b67		       00		      BYTE.b	%00000000
   1457  2b68		       00		      BYTE.b	%00000000
   1458  2b69		       00		      BYTE.b	%00000000
   1459  2b6a		       aa		      BYTE.b	%10101010
   1460  2b6b		       a8		      BYTE.b	%10101000
   1461  2b6c		       a8		      BYTE.b	%10101000
   1462  2b6d		       b8		      BYTE.b	%10111000
   1463  2b6e		       00		      BYTE.b	%00000000
   1464  2b6f		       00		      BYTE.b	%00000000
   1465  2b70		       00		      BYTE.b	%00000000
   1466  2b71		       5c		      BYTE.b	%01011100
   1467  2b72		       44		      BYTE.b	%01000100
   1468  2b73		       58		      BYTE.b	%01011000
   1469  2b74		       1c		      BYTE.b	%00011100
   1470  2b75		       40		      BYTE.b	%01000000
   1471  2b76		       00		      BYTE.b	%00000000
   1472  2b77		       00		      BYTE.b	%00000000
   1473  2b78		       00		      BYTE.b	%00000000
   1474  2b79		       00		      BYTE.b	%00000000
   1475  2b7a		       00		      BYTE.b	%00000000
   1476  2b7b		       00		      BYTE.b	%00000000
   1477  2b7c		       00		      BYTE.b	%00000000
   1478  2b7d		       00		      BYTE.b	%00000000
   1479  2b7e		       00		      BYTE.b	%00000000
   1480  2b7f		       e0		      BYTE.b	%11100000
   1481  2b80		       a0		      BYTE.b	%10100000
   1482  2b81		       a0		      BYTE.b	%10100000
   1483  2b82		       e0		      BYTE.b	%11100000
   1484  2b83		       20		      BYTE.b	%00100000
   1485  2b84		       20		      BYTE.b	%00100000
   1486  2b85		       00		      BYTE.b	%00000000
   1487  2b86		       ee		      BYTE.b	%11101110
   1488  2b87		       82		      BYTE.b	%10000010
   1489  2b88		       ec		      BYTE.b	%11101100
   1490  2b89		       ee		      BYTE.b	%11101110
   1491  2b8a		       00		      BYTE.b	%00000000
   1492  2b8b		       00		      BYTE.b	%00000000
   1493  2b8c		       00		      BYTE.b	%00000000
   1494  2b8d		       88		      BYTE.b	%10001000
   1495  2b8e		       f8		      BYTE.b	%11111000
   1496  2b8f		       50		      BYTE.b	%01010000
   1497  2b90		       70		      BYTE.b	%01110000
   1498  2b91		       20		      BYTE.b	%00100000
   1499  2b92		       00		      BYTE.b	%00000000
   1500  2b93		       00		      BYTE.b	%00000000
   1501  2b94		       c0		      BYTE.b	%11000000
   1502  2b95		       00		      BYTE.b	%00000000
   1503  2b96		       c0		      BYTE.b	%11000000
   1504  2b97		       c0		      BYTE.b	%11000000
   1505  2b98		       00		      BYTE.b	%00000000
   1506  2b99		       00		      BYTE.b	%00000000
   1507  2b9a		       00		      BYTE.b	%00000000
   1508  2b9b		       40		      BYTE.b	%01000000
   1509  2b9c		       40		      BYTE.b	%01000000
   1510  2b9d		       40		      BYTE.b	%01000000
   1511  2b9e		       c0		      BYTE.b	%11000000
   1512  2b9f		       00		      BYTE.b	%00000000
   1513  2ba0		       00		      BYTE.b	%00000000
   1514  2ba1		       08		      BYTE.b	%00001000
   1515  2ba2		       e8		      BYTE.b	%11101000
   1516  2ba3		       20		      BYTE.b	%00100000
   1517  2ba4		       c0		      BYTE.b	%11000000
   1518  2ba5		       e0		      BYTE.b	%11100000
   1519  2ba6		       00		      BYTE.b	%00000000
   1520  2ba7		       00		      BYTE.b	%00000000
   1521  2ba8		       00		      BYTE.b	%00000000
   1522  2ba9		       b0		      BYTE.b	%10110000
   1523  2baa		       a0		      BYTE.b	%10100000
   1524  2bab		       20		      BYTE.b	%00100000
   1525  2bac		       b0		      BYTE.b	%10110000
   1526  2bad		       20		      BYTE.b	%00100000
   1527  2bae		       00		      BYTE.b	%00000000
   1528  2baf		       00		      BYTE.b	%00000000
   1529  2bb0		       00		      BYTE.b	%00000000
   1530  2bb1		       00		      BYTE.b	%00000000
   1531  2bb2		       00		      BYTE.b	%00000000
   1532  2bb3		       00		      BYTE.b	%00000000
   1533  2bb4		       00		      BYTE.b	%00000000
   1534  2bb5		       00		      BYTE.b	%00000000
   1535  2bb6		       00		      BYTE.b	%00000000
   1536  2bb7		       00		      BYTE.b	%00000000
   1537  2bb8		       00		      BYTE.b	%00000000
   1538  2bb9		       00		      BYTE.b	%00000000
   1539  2bba		       00		      BYTE.b	%00000000
   1540  2bbb		       00		      BYTE.b	%00000000
   1541  2bbc		       00		      BYTE.b	%00000000
   1542  2bbd		       00		      BYTE.b	%00000000
   1543  2bbe		       00		      BYTE.b	%00000000
   1544  2bbf		       00		      BYTE.b	%00000000
   1545  2bc0		       00		      BYTE.b	%00000000
   1546  2bc1		       00		      BYTE.b	%00000000
   1547  2bc2		       00		      BYTE.b	%00000000
   1548  2bc3		       00		      BYTE.b	%00000000
   1549  2bc4		       00		      BYTE.b	%00000000
   1550  2bc5		       00		      BYTE.b	%00000000
   1551  2bc6		       00		      BYTE.b	%00000000
   1552  2bc7		       00		      BYTE.b	%00000000
   1553  2bc8		       00		      BYTE.b	%00000000
   1554  2bc9		       00		      BYTE.b	%00000000
   1555  2bca		       00		      BYTE.b	%00000000
   1556  2bcb		       00		      BYTE.b	%00000000
   1557  2bcc		       00		      BYTE.b	%00000000
   1558  2bcd		       00		      BYTE.b	%00000000
   1559  2bce		       00		      BYTE.b	%00000000
   1560  2bcf		       00		      BYTE.b	%00000000
   1561  2bd0		       00		      BYTE.b	%00000000
   1562  2bd1		       00		      BYTE.b	%00000000
   1563  2bd2		       00		      BYTE.b	%00000000
   1564  2bd3		       00		      BYTE.b	%00000000
   1565  2bd4		       00		      BYTE.b	%00000000
   1566  2bd5		       00		      BYTE.b	%00000000
   1567  2bd6		       00		      BYTE.b	%00000000
   1568  2bd7		       00		      BYTE.b	%00000000
   1569  2bd8		       00		      BYTE.b	%00000000
   1570  2bd9		       00		      BYTE.b	%00000000
   1571  2bda		       00		      BYTE.b	%00000000
   1572  2bdb		       00		      BYTE.b	%00000000
   1573  2bdc		       00		      BYTE.b	%00000000
   1574  2bdd		       00		      BYTE.b	%00000000
   1575  2bde		       00		      BYTE.b	%00000000
   1576  2bdf		       00		      BYTE.b	%00000000
   1577  2be0		       00		      BYTE.b	%00000000
   1578  2be1		       00		      BYTE.b	%00000000
   1579  2be2		       00		      BYTE.b	%00000000
   1580  2be3		       00		      BYTE.b	%00000000
   1581  2be4		       00		      BYTE.b	%00000000
   1582  2be5		       00		      BYTE.b	%00000000
   1583  2be6		       00		      BYTE.b	%00000000
   1584  2be7		       00		      BYTE.b	%00000000
   1585  2be8		       00		      BYTE.b	%00000000
   1586  2be9		       00		      BYTE.b	%00000000
   1587  2bea		       00		      BYTE.b	%00000000
   1588  2beb		       00		      BYTE.b	%00000000
   1589  2bec		       00		      BYTE.b	%00000000
   1590  2bed		       00		      BYTE.b	%00000000
   1591  2bee		       00		      BYTE.b	%00000000
   1592  2bef		       00		      BYTE.b	%00000000
   1593  2bf0		       00		      BYTE.b	%00000000
   1594  2bf1		       00		      BYTE.b	%00000000
   1595  2bf2		       00		      BYTE.b	%00000000
   1596  2bf3		       00		      BYTE.b	%00000000
   1597  2bf4		       00		      BYTE.b	%00000000
   1598  2bf5		       00		      BYTE.b	%00000000
   1599  2bf6		       00		      BYTE.b	%00000000
   1600  2bf7		       00		      BYTE.b	%00000000
   1601  2bf8		       00		      BYTE.b	%00000000
   1602  2bf9		       00		      BYTE.b	%00000000
   1603  2bfa		       00		      BYTE.b	%00000000
   1604  2bfb		       00		      BYTE.b	%00000000
   1605  2bfc		       00		      BYTE.b	%00000000
   1606  2bfd		       00		      BYTE.b	%00000000
   1607  2bfe		       00		      BYTE.b	%00000000
   1608  2bff		       00		      BYTE.b	%00000000
   1609  2c00
   1610  2c00
   1611  2c00
   1612  2c00
------- FILE titlescreen/asm/titlescreen.asm
    224  2c00					      endif
    225  2c00				  -	      ifconst	mk_48x1_3_on
    226  2c00				  -	      include	"titlescreen/48x1_3_image.asm"
    227  2c00					      endif
    228  2c00				  -	      ifconst	mk_48x1_4_on
    229  2c00				  -	      include	"titlescreen/48x1_4_image.asm"
    230  2c00					      endif
    231  2c00				  -	      ifconst	mk_48x1_5_on
    232  2c00				  -	      include	"titlescreen/48x1_5_image.asm"
    233  2c00					      endif
    234  2c00				  -	      ifconst	mk_48x1_6_on
    235  2c00				  -	      include	"titlescreen/48x1_6_image.asm"
    236  2c00					      endif
    237  2c00				  -	      ifconst	mk_48x1_7_on
    238  2c00				  -	      include	"titlescreen/48x1_7_image.asm"
    239  2c00					      endif
    240  2c00				  -	      ifconst	mk_48x1_8_on
    241  2c00				  -	      include	"titlescreen/48x1_8_image.asm"
    242  2c00					      endif
    243  2c00
    244  2c00
    245  2c00				  -	      ifconst	mk_48x2_1_on
    246  2c00				  -	      include	"titlescreen/48x2_1_image.asm"
    247  2c00					      endif
    248  2c00				  -	      ifconst	mk_48x2_2_on
    249  2c00				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2c00					      endif
    251  2c00				  -	      ifconst	mk_48x2_3_on
    252  2c00				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2c00					      endif
    254  2c00				  -	      ifconst	mk_48x2_4_on
    255  2c00				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2c00					      endif
    257  2c00				  -	      ifconst	mk_48x2_5_on
    258  2c00				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2c00					      endif
    260  2c00				  -	      ifconst	mk_48x2_6_on
    261  2c00				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2c00					      endif
    263  2c00				  -	      ifconst	mk_48x2_7_on
    264  2c00				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2c00					      endif
    266  2c00
    267  2c00				  -	      ifconst	mk_48x2_8_on
    268  2c00				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2c00					      endif
    270  2c00
    271  2c00
    272  2c00					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 2
      0  2c00					      include	"titlescreen/96x2_1_image.asm"
      1  2c00
      2  2c00							; *** if you want to modify the bitmap color on the fly, just dim a
      3  2c00							; *** variable in bB called "bmp_96x2_1_color", and use it to set the
      4  2c00							; *** color.
      5  2c00
      6  2c00
      7  2c00							;*** this is the height of the displayed data
      8  2c00		       00 0d	   bmp_96x2_1_window =	13
      9  2c00
     10  2c00							;*** this is the height of the bitmap data
     11  2c00		       00 0d	   bmp_96x2_1_height =	13
     12  2c00
     13  2c00				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     14  2c00				  -	      align	256
     15  2c00					      endif
     16  2c00		       00		      BYTE.b	$00
     17  2c01
     18  2c01							;*** this is the color of each line in the bitmap data
     19  2c01				   bmp_96x2_1_colors
     20  2c01		       46		      BYTE.b	$46
     21  2c02		       46		      BYTE.b	$46
     22  2c03		       46		      BYTE.b	$46
     23  2c04		       46		      BYTE.b	$46
     24  2c05		       46		      BYTE.b	$46
     25  2c06		       46		      BYTE.b	$46
     26  2c07		       46		      BYTE.b	$46
     27  2c08		       46		      BYTE.b	$46
     28  2c09		       46		      BYTE.b	$46
     29  2c0a		       46		      BYTE.b	$46
     30  2c0b		       46		      BYTE.b	$46
     31  2c0c		       46		      BYTE.b	$46
     32  2c0d		       46		      BYTE.b	$46
     33  2c0e
     34  2c0e				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     35  2c0e				  -	      align	256
     36  2c0e					      endif
     37  2c0e
     38  2c0e				   bmp_96x2_1_00
     39  2c0e		       08		      BYTE.b	%00001000
     40  2c0f		       1c		      BYTE.b	%00011100
     41  2c10		       1c		      BYTE.b	%00011100
     42  2c11		       1c		      BYTE.b	%00011100
     43  2c12		       1c		      BYTE.b	%00011100
     44  2c13		       1c		      BYTE.b	%00011100
     45  2c14		       1c		      BYTE.b	%00011100
     46  2c15		       1f		      BYTE.b	%00011111
     47  2c16		       1f		      BYTE.b	%00011111
     48  2c17		       18		      BYTE.b	%00011000
     49  2c18		       18		      BYTE.b	%00011000
     50  2c19		       1f		      BYTE.b	%00011111
     51  2c1a		       0f		      BYTE.b	%00001111
     52  2c1b
     53  2c1b				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     54  2c1b				  -	      align	256
     55  2c1b					      endif
     56  2c1b
     57  2c1b				   bmp_96x2_1_01
     58  2c1b		       11		      BYTE.b	%00010001
     59  2c1c		       1b		      BYTE.b	%00011011
     60  2c1d		       1b		      BYTE.b	%00011011
     61  2c1e		       1b		      BYTE.b	%00011011
     62  2c1f		       1b		      BYTE.b	%00011011
     63  2c20		       1b		      BYTE.b	%00011011
     64  2c21		       1b		      BYTE.b	%00011011
     65  2c22		       fb		      BYTE.b	%11111011
     66  2c23		       f3		      BYTE.b	%11110011
     67  2c24		       33		      BYTE.b	%00110011
     68  2c25		       33		      BYTE.b	%00110011
     69  2c26		       f3		      BYTE.b	%11110011
     70  2c27		       e1		      BYTE.b	%11100001
     71  2c28
     72  2c28
     73  2c28
     74  2c28
     75  2c28				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     76  2c28				  -	      align	256
     77  2c28					      endif
     78  2c28
     79  2c28				   bmp_96x2_1_02
     80  2c28		       fe		      BYTE.b	%11111110
     81  2c29		       ff		      BYTE.b	%11111111
     82  2c2a		       03		      BYTE.b	%00000011
     83  2c2b		       03		      BYTE.b	%00000011
     84  2c2c		       03		      BYTE.b	%00000011
     85  2c2d		       03		      BYTE.b	%00000011
     86  2c2e		       03		      BYTE.b	%00000011
     87  2c2f		       03		      BYTE.b	%00000011
     88  2c30		       03		      BYTE.b	%00000011
     89  2c31		       0f		      BYTE.b	%00001111
     90  2c32		       0f		      BYTE.b	%00001111
     91  2c33		       ff		      BYTE.b	%11111111
     92  2c34		       fe		      BYTE.b	%11111110
     93  2c35
     94  2c35
     95  2c35
     96  2c35				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     97  2c35				  -	      align	256
     98  2c35					      endif
     99  2c35
    100  2c35				   bmp_96x2_1_03
    101  2c35		       3f		      BYTE.b	%00111111
    102  2c36		       7f		      BYTE.b	%01111111
    103  2c37		       70		      BYTE.b	%01110000
    104  2c38		       70		      BYTE.b	%01110000
    105  2c39		       70		      BYTE.b	%01110000
    106  2c3a		       70		      BYTE.b	%01110000
    107  2c3b		       70		      BYTE.b	%01110000
    108  2c3c		       7f		      BYTE.b	%01111111
    109  2c3d		       7f		      BYTE.b	%01111111
    110  2c3e		       60		      BYTE.b	%01100000
    111  2c3f		       60		      BYTE.b	%01100000
    112  2c40		       7f		      BYTE.b	%01111111
    113  2c41		       3f		      BYTE.b	%00111111
    114  2c42
    115  2c42
    116  2c42
    117  2c42
    118  2c42				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    119  2c42				  -	      align	256
    120  2c42					      endif
    121  2c42
    122  2c42				   bmp_96x2_1_04
    123  2c42		       c7		      BYTE.b	%11000111
    124  2c43		       ef		      BYTE.b	%11101111
    125  2c44		       6c		      BYTE.b	%01101100
    126  2c45		       6c		      BYTE.b	%01101100
    127  2c46		       6c		      BYTE.b	%01101100
    128  2c47		       6c		      BYTE.b	%01101100
    129  2c48		       6c		      BYTE.b	%01101100
    130  2c49		       ec		      BYTE.b	%11101100
    131  2c4a		       cc		      BYTE.b	%11001100
    132  2c4b		       cc		      BYTE.b	%11001100
    133  2c4c		       cc		      BYTE.b	%11001100
    134  2c4d		       cf		      BYTE.b	%11001111
    135  2c4e		       87		      BYTE.b	%10000111
    136  2c4f
    137  2c4f
    138  2c4f
    139  2c4f
    140  2c4f				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    141  2c4f				  -	      align	256
    142  2c4f					      endif
    143  2c4f
    144  2c4f				   bmp_96x2_1_05
    145  2c4f		       f8		      BYTE.b	%11111000
    146  2c50		       fc		      BYTE.b	%11111100
    147  2c51		       0c		      BYTE.b	%00001100
    148  2c52		       0c		      BYTE.b	%00001100
    149  2c53		       0c		      BYTE.b	%00001100
    150  2c54		       0c		      BYTE.b	%00001100
    151  2c55		       0c		      BYTE.b	%00001100
    152  2c56		       0c		      BYTE.b	%00001100
    153  2c57		       0c		      BYTE.b	%00001100
    154  2c58		       3c		      BYTE.b	%00111100
    155  2c59		       3c		      BYTE.b	%00111100
    156  2c5a		       fd		      BYTE.b	%11111101
    157  2c5b		       f9		      BYTE.b	%11111001
    158  2c5c
    159  2c5c
    160  2c5c
    161  2c5c
    162  2c5c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    163  2c5c				  -	      align	256
    164  2c5c					      endif
    165  2c5c
    166  2c5c
    167  2c5c				   bmp_96x2_1_06
    168  2c5c		       08		      BYTE.b	%00001000
    169  2c5d		       1c		      BYTE.b	%00011100
    170  2c5e		       1c		      BYTE.b	%00011100
    171  2c5f		       1c		      BYTE.b	%00011100
    172  2c60		       1c		      BYTE.b	%00011100
    173  2c61		       1c		      BYTE.b	%00011100
    174  2c62		       1c		      BYTE.b	%00011100
    175  2c63		       1c		      BYTE.b	%00011100
    176  2c64		       18		      BYTE.b	%00011000
    177  2c65		       18		      BYTE.b	%00011000
    178  2c66		       18		      BYTE.b	%00011000
    179  2c67		       ff		      BYTE.b	%11111111
    180  2c68		       ff		      BYTE.b	%11111111
    181  2c69
    182  2c69
    183  2c69
    184  2c69
    185  2c69				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    186  2c69				  -	      align	256
    187  2c69					      endif
    188  2c69
    189  2c69				   bmp_96x2_1_07
    190  2c69		       20		      BYTE.b	%00100000
    191  2c6a		       70		      BYTE.b	%01110000
    192  2c6b		       70		      BYTE.b	%01110000
    193  2c6c		       70		      BYTE.b	%01110000
    194  2c6d		       70		      BYTE.b	%01110000
    195  2c6e		       70		      BYTE.b	%01110000
    196  2c6f		       70		      BYTE.b	%01110000
    197  2c70		       7f		      BYTE.b	%01111111
    198  2c71		       7f		      BYTE.b	%01111111
    199  2c72		       60		      BYTE.b	%01100000
    200  2c73		       60		      BYTE.b	%01100000
    201  2c74		       7f		      BYTE.b	%01111111
    202  2c75		       3f		      BYTE.b	%00111111
    203  2c76
    204  2c76
    205  2c76
    206  2c76				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    207  2c76				  -	      align	256
    208  2c76					      endif
    209  2c76
    210  2c76
    211  2c76				   bmp_96x2_1_08
    212  2c76		       47		      BYTE.b	%01000111
    213  2c77		       6f		      BYTE.b	%01101111
    214  2c78		       6c		      BYTE.b	%01101100
    215  2c79		       6c		      BYTE.b	%01101100
    216  2c7a		       6c		      BYTE.b	%01101100
    217  2c7b		       6c		      BYTE.b	%01101100
    218  2c7c		       6c		      BYTE.b	%01101100
    219  2c7d		       ec		      BYTE.b	%11101100
    220  2c7e		       cc		      BYTE.b	%11001100
    221  2c7f		       cc		      BYTE.b	%11001100
    222  2c80		       cc		      BYTE.b	%11001100
    223  2c81		       cf		      BYTE.b	%11001111
    224  2c82		       87		      BYTE.b	%10000111
    225  2c83
    226  2c83
    227  2c83
    228  2c83				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    229  2c83				  -	      align	256
    230  2c83					      endif
    231  2c83
    232  2c83				   bmp_96x2_1_09
    233  2c83		       f8		      BYTE.b	%11111000
    234  2c84		       fd		      BYTE.b	%11111101
    235  2c85		       0d		      BYTE.b	%00001101
    236  2c86		       0d		      BYTE.b	%00001101
    237  2c87		       0d		      BYTE.b	%00001101
    238  2c88		       0d		      BYTE.b	%00001101
    239  2c89		       0d		      BYTE.b	%00001101
    240  2c8a		       0d		      BYTE.b	%00001101
    241  2c8b		       0d		      BYTE.b	%00001101
    242  2c8c		       3d		      BYTE.b	%00111101
    243  2c8d		       3d		      BYTE.b	%00111101
    244  2c8e		       fd		      BYTE.b	%11111101
    245  2c8f		       f8		      BYTE.b	%11111000
    246  2c90
    247  2c90
    248  2c90
    249  2c90				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    250  2c90				  -	      align	256
    251  2c90					      endif
    252  2c90
    253  2c90				   bmp_96x2_1_10
    254  2c90		       81		      BYTE.b	%10000001
    255  2c91		       c3		      BYTE.b	%11000011
    256  2c92		       c3		      BYTE.b	%11000011
    257  2c93		       c3		      BYTE.b	%11000011
    258  2c94		       c3		      BYTE.b	%11000011
    259  2c95		       c3		      BYTE.b	%11000011
    260  2c96		       c3		      BYTE.b	%11000011
    261  2c97		       83		      BYTE.b	%10000011
    262  2c98		       83		      BYTE.b	%10000011
    263  2c99		       83		      BYTE.b	%10000011
    264  2c9a		       83		      BYTE.b	%10000011
    265  2c9b		       ff		      BYTE.b	%11111111
    266  2c9c		       fe		      BYTE.b	%11111110
    267  2c9d
    268  2c9d
    269  2c9d
    270  2c9d				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    271  2c9d				  -	      align	256
    272  2c9d					      endif
    273  2c9d
    274  2c9d				   bmp_96x2_1_11
    275  2c9d		       00		      BYTE.b	%00000000
    276  2c9e		       38		      BYTE.b	%00111000
    277  2c9f		       38		      BYTE.b	%00111000
    278  2ca0		       00		      BYTE.b	%00000000
    279  2ca1		       00		      BYTE.b	%00000000
    280  2ca2		       00		      BYTE.b	%00000000
    281  2ca3		       00		      BYTE.b	%00000000
    282  2ca4		       00		      BYTE.b	%00000000
    283  2ca5		       00		      BYTE.b	%00000000
    284  2ca6		       00		      BYTE.b	%00000000
    285  2ca7		       38		      BYTE.b	%00111000
    286  2ca8		       38		      BYTE.b	%00111000
    287  2ca9		       00		      BYTE.b	%00000000
    288  2caa
    289  2caa
    290  2caa
    291  2caa
    292  2caa
------- FILE titlescreen/asm/titlescreen.asm
    274  2caa					      endif
    275  2caa				  -	      ifconst	mk_96x2_2_on
    276  2caa				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2caa					      endif
    278  2caa				  -	      ifconst	mk_96x2_3_on
    279  2caa				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2caa					      endif
    281  2caa				  -	      ifconst	mk_96x2_4_on
    282  2caa				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2caa					      endif
    284  2caa				  -	      ifconst	mk_96x2_5_on
    285  2caa				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2caa					      endif
    287  2caa				  -	      ifconst	mk_96x2_6_on
    288  2caa				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2caa					      endif
    290  2caa				  -	      ifconst	mk_96x2_7_on
    291  2caa				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2caa					      endif
    293  2caa				  -	      ifconst	mk_96x2_8_on
    294  2caa				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2caa					      endif
    296  2caa
    297  2caa				  -	      ifconst	mk_player_on
    298  2caa				  -	      include	"titlescreen/player_image.asm"
    299  2caa					      endif
    300  2caa
    301  2caa					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  2caa					      include	"titlescreen/score_image.asm"
      1  2caa							; feel free to modify the score graphics - just keep each digit 8 high
      2  2caa							; if you're looking to want to modify any one font, pick on the 
      3  2caa
      4  2caa				  -	      ifnconst	NOFONT
      5  2caa				  -NOFONT     =	0
      6  2caa					      endif
      7  2caa				  -	      ifnconst	STOCK
      8  2caa				  -STOCK      =	1	;_FONTNAME
      9  2caa					      endif
     10  2caa				  -	      ifnconst	NEWCENTURY
     11  2caa				  -NEWCENTURY =	2	;_FONTNAME
     12  2caa					      endif
     13  2caa				  -	      ifnconst	WHIMSEY
     14  2caa				  -WHIMSEY    =	3	;_FONTNAME
     15  2caa					      endif
     16  2caa				  -	      ifnconst	ALARMCLOCK
     17  2caa				  -ALARMCLOCK =	4	;_FONTNAME
     18  2caa					      endif
     19  2caa				  -	      ifnconst	HANDWRITTEN
     20  2caa				  -HANDWRITTEN =	5	;_FONTNAME
     21  2caa					      endif
     22  2caa				  -	      ifnconst	INTERRUPTED
     23  2caa				  -INTERRUPTED =	6	;_FONTNAME
     24  2caa					      endif
     25  2caa				  -	      ifnconst	TINY
     26  2caa				  -TINY       =	7	;_FONTNAME
     27  2caa					      endif
     28  2caa				  -	      ifnconst	RETROPUTER
     29  2caa				  -RETROPUTER =	8	;_FONTNAME
     30  2caa					      endif
     31  2caa				  -	      ifnconst	CURVES
     32  2caa				  -CURVES     =	9	;_FONTNAME
     33  2caa					      endif
     34  2caa				  -	      ifnconst	HUSKY
     35  2caa				  -HUSKY      =	10	;_FONTNAME
     36  2caa					      endif
     37  2caa				  -	      ifnconst	SNAKE
     38  2caa				  -SNAKE      =	11	;_FONTNAME
     39  2caa					      endif
     40  2caa				  -	      ifnconst	PLOK
     41  2caa				  -PLOK       =	13	;_FONTNAME
     42  2caa					      endif
     43  2caa
     44  2caa				  -	      ifnconst	SYMBOLS
     45  2caa				  -SYMBOLS    =	0	;_FONTNAME 
     46  2caa					      endif
     47  2caa
     48  2caa							; ### setup some defaults
     49  2caa				  -	      ifnconst	fontstyle
     50  2caa				  -fontstyle  =	STOCK
     51  2caa					      endif
     52  2caa
     53  2caa							;fix up the table alignment, if necessary
     54  2caa				  -	      if	>. != >[.+81]
     55  2caa				  -	      align	256
     56  2caa					      endif
     57  2caa
     58  2caa
     59  2caa				   miniscoretable
     60  2caa
     61  2caa					      if	fontstyle == STOCK
     62  2caa
     63  2caa							;byte %00000000 ; STOCK
     64  2caa
     65  2caa		       3c		      .byte.b	%00111100	; STOCK
     66  2cab		       66		      .byte.b	%01100110	; STOCK
     67  2cac		       66		      .byte.b	%01100110	; STOCK
     68  2cad		       66		      .byte.b	%01100110	; STOCK
     69  2cae		       66		      .byte.b	%01100110	; STOCK
     70  2caf		       66		      .byte.b	%01100110	; STOCK
     71  2cb0		       66		      .byte.b	%01100110	; STOCK
     72  2cb1		       3c		      .byte.b	%00111100	; STOCK
     73  2cb2
     74  2cb2							;byte %00000000 ; STOCK
     75  2cb2
     76  2cb2		       7e		      .byte.b	%01111110	; STOCK
     77  2cb3		       18		      .byte.b	%00011000	; STOCK
     78  2cb4		       18		      .byte.b	%00011000	; STOCK
     79  2cb5		       18		      .byte.b	%00011000	; STOCK
     80  2cb6		       18		      .byte.b	%00011000	; STOCK
     81  2cb7		       38		      .byte.b	%00111000	; STOCK
     82  2cb8		       18		      .byte.b	%00011000	; STOCK
     83  2cb9		       08		      .byte.b	%00001000	; STOCK
     84  2cba
     85  2cba							;byte %00000000 ; STOCK
     86  2cba
     87  2cba		       7e		      .byte.b	%01111110	; STOCK
     88  2cbb		       60		      .byte.b	%01100000	; STOCK
     89  2cbc		       60		      .byte.b	%01100000	; STOCK
     90  2cbd		       3c		      .byte.b	%00111100	; STOCK
     91  2cbe		       06		      .byte.b	%00000110	; STOCK
     92  2cbf		       06		      .byte.b	%00000110	; STOCK
     93  2cc0		       46		      .byte.b	%01000110	; STOCK
     94  2cc1		       3c		      .byte.b	%00111100	; STOCK
     95  2cc2
     96  2cc2							;byte %00000000 ; STOCK
     97  2cc2
     98  2cc2		       3c		      .byte.b	%00111100	; STOCK
     99  2cc3		       46		      .byte.b	%01000110	; STOCK
    100  2cc4		       06		      .byte.b	%00000110	; STOCK
    101  2cc5		       06		      .byte.b	%00000110	; STOCK
    102  2cc6		       1c		      .byte.b	%00011100	; STOCK
    103  2cc7		       06		      .byte.b	%00000110	; STOCK
    104  2cc8		       46		      .byte.b	%01000110	; STOCK
    105  2cc9		       3c		      .byte.b	%00111100	; STOCK
    106  2cca
    107  2cca							;byte %00000000 ; STOCK
    108  2cca
    109  2cca		       0c		      .byte.b	%00001100	; STOCK
    110  2ccb		       0c		      .byte.b	%00001100	; STOCK
    111  2ccc		       7e		      .byte.b	%01111110	; STOCK
    112  2ccd		       4c		      .byte.b	%01001100	; STOCK
    113  2cce		       4c		      .byte.b	%01001100	; STOCK
    114  2ccf		       2c		      .byte.b	%00101100	; STOCK
    115  2cd0		       1c		      .byte.b	%00011100	; STOCK
    116  2cd1		       0c		      .byte.b	%00001100	; STOCK
    117  2cd2
    118  2cd2							;byte %00000000 ; STOCK
    119  2cd2
    120  2cd2		       3c		      .byte.b	%00111100	; STOCK
    121  2cd3		       46		      .byte.b	%01000110	; STOCK
    122  2cd4		       06		      .byte.b	%00000110	; STOCK
    123  2cd5		       06		      .byte.b	%00000110	; STOCK
    124  2cd6		       3c		      .byte.b	%00111100	; STOCK
    125  2cd7		       60		      .byte.b	%01100000	; STOCK
    126  2cd8		       60		      .byte.b	%01100000	; STOCK
    127  2cd9		       7e		      .byte.b	%01111110	; STOCK
    128  2cda
    129  2cda							;byte %00000000 ; STOCK
    130  2cda
    131  2cda		       3c		      .byte.b	%00111100	; STOCK
    132  2cdb		       66		      .byte.b	%01100110	; STOCK
    133  2cdc		       66		      .byte.b	%01100110	; STOCK
    134  2cdd		       66		      .byte.b	%01100110	; STOCK
    135  2cde		       7c		      .byte.b	%01111100	; STOCK
    136  2cdf		       60		      .byte.b	%01100000	; STOCK
    137  2ce0		       62		      .byte.b	%01100010	; STOCK
    138  2ce1		       3c		      .byte.b	%00111100	; STOCK
    139  2ce2
    140  2ce2							;byte %00000000 ; STOCK
    141  2ce2
    142  2ce2		       30		      .byte.b	%00110000	; STOCK
    143  2ce3		       30		      .byte.b	%00110000	; STOCK
    144  2ce4		       30		      .byte.b	%00110000	; STOCK
    145  2ce5		       18		      .byte.b	%00011000	; STOCK
    146  2ce6		       0c		      .byte.b	%00001100	; STOCK
    147  2ce7		       06		      .byte.b	%00000110	; STOCK
    148  2ce8		       42		      .byte.b	%01000010	; STOCK
    149  2ce9		       3e		      .byte.b	%00111110	; STOCK
    150  2cea
    151  2cea							;byte %00000000 ; STOCK
    152  2cea
    153  2cea		       3c		      .byte.b	%00111100	; STOCK
    154  2ceb		       66		      .byte.b	%01100110	; STOCK
    155  2cec		       66		      .byte.b	%01100110	; STOCK
    156  2ced		       66		      .byte.b	%01100110	; STOCK
    157  2cee		       3c		      .byte.b	%00111100	; STOCK
    158  2cef		       66		      .byte.b	%01100110	; STOCK
    159  2cf0		       66		      .byte.b	%01100110	; STOCK
    160  2cf1		       3c		      .byte.b	%00111100	; STOCK
    161  2cf2
    162  2cf2							;byte %00000000 ; STOCK
    163  2cf2
    164  2cf2		       3c		      .byte.b	%00111100	; STOCK
    165  2cf3		       46		      .byte.b	%01000110	; STOCK
    166  2cf4		       06		      .byte.b	%00000110	; STOCK
    167  2cf5		       3e		      .byte.b	%00111110	; STOCK
    168  2cf6		       66		      .byte.b	%01100110	; STOCK
    169  2cf7		       66		      .byte.b	%01100110	; STOCK
    170  2cf8		       66		      .byte.b	%01100110	; STOCK
    171  2cf9		       3c		      .byte.b	%00111100	; STOCK
    172  2cfa
    173  2cfa					      endif		; STOCK
    174  2cfa
    175  2cfa				  -	      if	fontstyle == NEWCENTURY
    176  2cfa				  -			;byte %00000000 ; NEWCENTURY
    177  2cfa				  -
    178  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    179  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    180  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    181  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    182  2cfa				  -	      .byte	%00100100	; NEWCENTURY
    183  2cfa				  -	      .byte	%00100100	; NEWCENTURY
    184  2cfa				  -	      .byte	%00100100	; NEWCENTURY
    185  2cfa				  -	      .byte	%00011000	; NEWCENTURY
    186  2cfa				  -
    187  2cfa				  -			;byte %00000000 ; NEWCENTURY
    188  2cfa				  -
    189  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    190  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    191  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    192  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    193  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    194  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    195  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    196  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    197  2cfa				  -
    198  2cfa				  -			;byte %00000000 ; NEWCENTURY
    199  2cfa				  -
    200  2cfa				  -	      .byte	%01111110	; NEWCENTURY
    201  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    202  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    203  2cfa				  -	      .byte	%00100000	; NEWCENTURY
    204  2cfa				  -	      .byte	%00011100	; NEWCENTURY
    205  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    206  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    207  2cfa				  -	      .byte	%00011100	; NEWCENTURY
    208  2cfa				  -
    209  2cfa				  -			;byte %00000000 ; NEWCENTURY
    210  2cfa				  -
    211  2cfa				  -	      .byte	%01111100	; NEWCENTURY
    212  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    213  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    214  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    215  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    216  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    217  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    218  2cfa				  -	      .byte	%00011100	; NEWCENTURY
    219  2cfa				  -
    220  2cfa				  -			;byte %00000000 ; NEWCENTURY
    221  2cfa				  -
    222  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    223  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    224  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    225  2cfa				  -	      .byte	%00111110	; NEWCENTURY
    226  2cfa				  -	      .byte	%00100010	; NEWCENTURY
    227  2cfa				  -	      .byte	%00100010	; NEWCENTURY
    228  2cfa				  -	      .byte	%00010010	; NEWCENTURY
    229  2cfa				  -	      .byte	%00010010	; NEWCENTURY
    230  2cfa				  -
    231  2cfa				  -			;byte %00000000 ; NEWCENTURY
    232  2cfa				  -
    233  2cfa				  -	      .byte	%01111100	; NEWCENTURY
    234  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    235  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    236  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    237  2cfa				  -	      .byte	%01111100	; NEWCENTURY
    238  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    239  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    240  2cfa				  -	      .byte	%01111000	; NEWCENTURY
    241  2cfa				  -
    242  2cfa				  -			;byte %00000000 ; NEWCENTURY
    243  2cfa				  -
    244  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    245  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    246  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    247  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    248  2cfa				  -	      .byte	%01111100	; NEWCENTURY
    249  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    250  2cfa				  -	      .byte	%01000000	; NEWCENTURY
    251  2cfa				  -	      .byte	%00110000	; NEWCENTURY
    252  2cfa				  -
    253  2cfa				  -			;byte %00000000 ; NEWCENTURY
    254  2cfa				  -
    255  2cfa				  -	      .byte	%00010000	; NEWCENTURY
    256  2cfa				  -	      .byte	%00010000	; NEWCENTURY
    257  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    258  2cfa				  -	      .byte	%00001000	; NEWCENTURY
    259  2cfa				  -	      .byte	%00000100	; NEWCENTURY
    260  2cfa				  -	      .byte	%00000100	; NEWCENTURY
    261  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    262  2cfa				  -	      .byte	%00011110	; NEWCENTURY
    263  2cfa				  -
    264  2cfa				  -			;byte %00000000 ; NEWCENTURY
    265  2cfa				  -
    266  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    267  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    268  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    269  2cfa				  -	      .byte	%01000010	; NEWCENTURY
    270  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    271  2cfa				  -	      .byte	%00100100	; NEWCENTURY
    272  2cfa				  -	      .byte	%00100100	; NEWCENTURY
    273  2cfa				  -	      .byte	%00011000	; NEWCENTURY
    274  2cfa				  -
    275  2cfa				  -			;byte %00000000 ; NEWCENTURY
    276  2cfa				  -
    277  2cfa				  -	      .byte	%00111100	; NEWCENTURY
    278  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    279  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    280  2cfa				  -	      .byte	%00000010	; NEWCENTURY
    281  2cfa				  -	      .byte	%00001110	; NEWCENTURY
    282  2cfa				  -	      .byte	%00010010	; NEWCENTURY
    283  2cfa				  -	      .byte	%00010010	; NEWCENTURY
    284  2cfa				  -	      .byte	%00001100	; NEWCENTURY
    285  2cfa				  -
    286  2cfa					      endif		; NEWCENTURY
    287  2cfa
    288  2cfa				  -	      if	fontstyle == WHIMSEY
    289  2cfa				  -			;byte %00000000 ; WHIMSEY
    290  2cfa				  -
    291  2cfa				  -	      .byte	%00111100	; WHIMSEY
    292  2cfa				  -	      .byte	%01111110	; WHIMSEY
    293  2cfa				  -	      .byte	%01111110	; WHIMSEY
    294  2cfa				  -	      .byte	%01111110	; WHIMSEY
    295  2cfa				  -	      .byte	%01110110	; WHIMSEY
    296  2cfa				  -	      .byte	%01110110	; WHIMSEY
    297  2cfa				  -	      .byte	%01110110	; WHIMSEY
    298  2cfa				  -	      .byte	%00111100	; WHIMSEY
    299  2cfa				  -
    300  2cfa				  -			;byte %00000000 ; WHIMSEY
    301  2cfa				  -
    302  2cfa				  -	      .byte	%01111110	; WHIMSEY
    303  2cfa				  -	      .byte	%01111110	; WHIMSEY
    304  2cfa				  -	      .byte	%01111110	; WHIMSEY
    305  2cfa				  -	      .byte	%00011000	; WHIMSEY
    306  2cfa				  -	      .byte	%00011000	; WHIMSEY
    307  2cfa				  -	      .byte	%00011000	; WHIMSEY
    308  2cfa				  -	      .byte	%01111000	; WHIMSEY
    309  2cfa				  -	      .byte	%00011000	; WHIMSEY
    310  2cfa				  -
    311  2cfa				  -			;byte %00000000 ; WHIMSEY
    312  2cfa				  -
    313  2cfa				  -	      .byte	%01111110	; WHIMSEY
    314  2cfa				  -	      .byte	%01111110	; WHIMSEY
    315  2cfa				  -	      .byte	%01111110	; WHIMSEY
    316  2cfa				  -	      .byte	%01111000	; WHIMSEY
    317  2cfa				  -	      .byte	%00111100	; WHIMSEY
    318  2cfa				  -	      .byte	%00001110	; WHIMSEY
    319  2cfa				  -	      .byte	%01100110	; WHIMSEY
    320  2cfa				  -	      .byte	%00111100	; WHIMSEY
    321  2cfa				  -
    322  2cfa				  -			;byte %00000000 ; WHIMSEY
    323  2cfa				  -
    324  2cfa				  -	      .byte	%00111100	; WHIMSEY
    325  2cfa				  -	      .byte	%01111110	; WHIMSEY
    326  2cfa				  -	      .byte	%01111110	; WHIMSEY
    327  2cfa				  -	      .byte	%01101110	; WHIMSEY
    328  2cfa				  -	      .byte	%00001110	; WHIMSEY
    329  2cfa				  -	      .byte	%00111100	; WHIMSEY
    330  2cfa				  -	      .byte	%00011100	; WHIMSEY
    331  2cfa				  -	      .byte	%01111110	; WHIMSEY
    332  2cfa				  -
    333  2cfa				  -			;byte %00000000 ; WHIMSEY
    334  2cfa				  -
    335  2cfa				  -	      .byte	%00011100	; WHIMSEY
    336  2cfa				  -	      .byte	%00011100	; WHIMSEY
    337  2cfa				  -	      .byte	%01111110	; WHIMSEY
    338  2cfa				  -	      .byte	%01011100	; WHIMSEY
    339  2cfa				  -	      .byte	%01011100	; WHIMSEY
    340  2cfa				  -	      .byte	%00011100	; WHIMSEY
    341  2cfa				  -	      .byte	%00011100	; WHIMSEY
    342  2cfa				  -	      .byte	%00011100	; WHIMSEY
    343  2cfa				  -
    344  2cfa				  -			;byte %00000000 ; WHIMSEY
    345  2cfa				  -
    346  2cfa				  -	      .byte	%00111100	; WHIMSEY
    347  2cfa				  -	      .byte	%01111110	; WHIMSEY
    348  2cfa				  -	      .byte	%01111110	; WHIMSEY
    349  2cfa				  -	      .byte	%01101110	; WHIMSEY
    350  2cfa				  -	      .byte	%00001110	; WHIMSEY
    351  2cfa				  -	      .byte	%01111100	; WHIMSEY
    352  2cfa				  -	      .byte	%01110000	; WHIMSEY
    353  2cfa				  -	      .byte	%01111110	; WHIMSEY
    354  2cfa				  -
    355  2cfa				  -			;byte %00000000 ; WHIMSEY
    356  2cfa				  -
    357  2cfa				  -	      .byte	%00111100	; WHIMSEY
    358  2cfa				  -	      .byte	%01111110	; WHIMSEY
    359  2cfa				  -	      .byte	%01111110	; WHIMSEY
    360  2cfa				  -	      .byte	%01110110	; WHIMSEY
    361  2cfa				  -	      .byte	%01110110	; WHIMSEY
    362  2cfa				  -	      .byte	%01111100	; WHIMSEY
    363  2cfa				  -	      .byte	%01110000	; WHIMSEY
    364  2cfa				  -	      .byte	%00111110	; WHIMSEY
    365  2cfa				  -
    366  2cfa				  -			;byte %00000000 ; WHIMSEY
    367  2cfa				  -
    368  2cfa				  -	      .byte	%01111000	; WHIMSEY
    369  2cfa				  -	      .byte	%01111000	; WHIMSEY
    370  2cfa				  -	      .byte	%01111000	; WHIMSEY
    371  2cfa				  -	      .byte	%00111100	; WHIMSEY
    372  2cfa				  -	      .byte	%00011100	; WHIMSEY
    373  2cfa				  -	      .byte	%00001110	; WHIMSEY
    374  2cfa				  -	      .byte	%00001110	; WHIMSEY
    375  2cfa				  -	      .byte	%01111110	; WHIMSEY
    376  2cfa				  -
    377  2cfa				  -			;byte %00000000 ; WHIMSEY
    378  2cfa				  -
    379  2cfa				  -	      .byte	%00111100	; WHIMSEY
    380  2cfa				  -	      .byte	%01111110	; WHIMSEY
    381  2cfa				  -	      .byte	%01111110	; WHIMSEY
    382  2cfa				  -	      .byte	%01110110	; WHIMSEY
    383  2cfa				  -	      .byte	%01110110	; WHIMSEY
    384  2cfa				  -	      .byte	%00111100	; WHIMSEY
    385  2cfa				  -	      .byte	%01110110	; WHIMSEY
    386  2cfa				  -	      .byte	%00111100	; WHIMSEY
    387  2cfa				  -
    388  2cfa				  -			;byte %00000000 ; WHIMSEY
    389  2cfa				  -
    390  2cfa				  -	      .byte	%00111100	; WHIMSEY
    391  2cfa				  -	      .byte	%01111110	; WHIMSEY
    392  2cfa				  -	      .byte	%01111110	; WHIMSEY
    393  2cfa				  -	      .byte	%01110110	; WHIMSEY
    394  2cfa				  -	      .byte	%00000110	; WHIMSEY
    395  2cfa				  -	      .byte	%00111110	; WHIMSEY
    396  2cfa				  -	      .byte	%01110110	; WHIMSEY
    397  2cfa				  -	      .byte	%00111100	; WHIMSEY
    398  2cfa				  -
    399  2cfa					      endif		; WHIMSEY
    400  2cfa
    401  2cfa				  -	      if	fontstyle == ALARMCLOCK
    402  2cfa				  -
    403  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    404  2cfa				  -
    405  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    406  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    407  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    408  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    409  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    410  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    411  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    412  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    413  2cfa				  -
    414  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    415  2cfa				  -
    416  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    417  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    418  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    419  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    420  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    421  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    422  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    423  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    424  2cfa				  -
    425  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    426  2cfa				  -
    427  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    428  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    429  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    430  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    431  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    432  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    433  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    434  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    435  2cfa				  -
    436  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    437  2cfa				  -
    438  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    439  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    440  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    441  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    442  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    443  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    444  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    445  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    446  2cfa				  -
    447  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    448  2cfa				  -
    449  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    450  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    451  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    452  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    453  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    454  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    455  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    456  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    457  2cfa				  -
    458  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    459  2cfa				  -
    460  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    461  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    462  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    463  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    464  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    465  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    466  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    467  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    468  2cfa				  -
    469  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    470  2cfa				  -
    471  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    472  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    473  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    474  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    475  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    476  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    477  2cfa				  -	      .byte	%01000000	; ALARMCLOCK
    478  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    479  2cfa				  -
    480  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    481  2cfa				  -
    482  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    483  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    484  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    485  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    486  2cfa				  -	      .byte	%00000000	; ALARMCLOCK
    487  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    488  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    489  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    490  2cfa				  -
    491  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    492  2cfa				  -
    493  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    494  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    495  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    496  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    497  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    498  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    499  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    500  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    501  2cfa				  -
    502  2cfa				  -			;byte %00000000 ; ALARMCLOCK
    503  2cfa				  -
    504  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    505  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    506  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    507  2cfa				  -	      .byte	%00000010	; ALARMCLOCK
    508  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    509  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    510  2cfa				  -	      .byte	%01000010	; ALARMCLOCK
    511  2cfa				  -	      .byte	%00111100	; ALARMCLOCK
    512  2cfa				  -
    513  2cfa				  -
    514  2cfa					      endif		; ALARMCLOCK
    515  2cfa
    516  2cfa				  -	      if	fontstyle == HANDWRITTEN
    517  2cfa				  -
    518  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    519  2cfa				  -
    520  2cfa				  -	      .byte	%00110000	; HANDWRITTEN
    521  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    522  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    523  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    524  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    525  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    526  2cfa				  -	      .byte	%00010010	; HANDWRITTEN
    527  2cfa				  -	      .byte	%00001100	; HANDWRITTEN
    528  2cfa				  -
    529  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    530  2cfa				  -
    531  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    532  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    533  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    534  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    535  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    536  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    537  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    538  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    539  2cfa				  -
    540  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    541  2cfa				  -
    542  2cfa				  -	      .byte	%01110000	; HANDWRITTEN
    543  2cfa				  -	      .byte	%01001100	; HANDWRITTEN
    544  2cfa				  -	      .byte	%01000000	; HANDWRITTEN
    545  2cfa				  -	      .byte	%00100000	; HANDWRITTEN
    546  2cfa				  -	      .byte	%00011000	; HANDWRITTEN
    547  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    548  2cfa				  -	      .byte	%00100010	; HANDWRITTEN
    549  2cfa				  -	      .byte	%00011100	; HANDWRITTEN
    550  2cfa				  -
    551  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    552  2cfa				  -
    553  2cfa				  -	      .byte	%00110000	; HANDWRITTEN
    554  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    555  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    556  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    557  2cfa				  -	      .byte	%00011000	; HANDWRITTEN
    558  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    559  2cfa				  -	      .byte	%00100010	; HANDWRITTEN
    560  2cfa				  -	      .byte	%00011100	; HANDWRITTEN
    561  2cfa				  -
    562  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    563  2cfa				  -
    564  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    565  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    566  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    567  2cfa				  -	      .byte	%01111000	; HANDWRITTEN
    568  2cfa				  -	      .byte	%01000100	; HANDWRITTEN
    569  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    570  2cfa				  -	      .byte	%00010010	; HANDWRITTEN
    571  2cfa				  -	      .byte	%00000010	; HANDWRITTEN
    572  2cfa				  -
    573  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    574  2cfa				  -
    575  2cfa				  -	      .byte	%00110000	; HANDWRITTEN
    576  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    577  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    578  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    579  2cfa				  -	      .byte	%00011000	; HANDWRITTEN
    580  2cfa				  -	      .byte	%00100000	; HANDWRITTEN
    581  2cfa				  -	      .byte	%00010010	; HANDWRITTEN
    582  2cfa				  -	      .byte	%00001100	; HANDWRITTEN
    583  2cfa				  -
    584  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    585  2cfa				  -
    586  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    587  2cfa				  -	      .byte	%00101000	; HANDWRITTEN
    588  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    589  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    590  2cfa				  -	      .byte	%00011000	; HANDWRITTEN
    591  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    592  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    593  2cfa				  -	      .byte	%00000110	; HANDWRITTEN
    594  2cfa				  -
    595  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    596  2cfa				  -
    597  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    598  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    599  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    600  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    601  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    602  2cfa				  -	      .byte	%00000100	; HANDWRITTEN
    603  2cfa				  -	      .byte	%00110010	; HANDWRITTEN
    604  2cfa				  -	      .byte	%00001110	; HANDWRITTEN
    605  2cfa				  -
    606  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    607  2cfa				  -
    608  2cfa				  -	      .byte	%00110000	; HANDWRITTEN
    609  2cfa				  -	      .byte	%01001000	; HANDWRITTEN
    610  2cfa				  -	      .byte	%01000100	; HANDWRITTEN
    611  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    612  2cfa				  -	      .byte	%00011100	; HANDWRITTEN
    613  2cfa				  -	      .byte	%00010010	; HANDWRITTEN
    614  2cfa				  -	      .byte	%00001010	; HANDWRITTEN
    615  2cfa				  -	      .byte	%00000110	; HANDWRITTEN
    616  2cfa				  -
    617  2cfa				  -			;byte %00000000 ; HANDWRITTEN
    618  2cfa				  -
    619  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    620  2cfa				  -	      .byte	%00010000	; HANDWRITTEN
    621  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    622  2cfa				  -	      .byte	%00001000	; HANDWRITTEN
    623  2cfa				  -	      .byte	%00011100	; HANDWRITTEN
    624  2cfa				  -	      .byte	%00100100	; HANDWRITTEN
    625  2cfa				  -	      .byte	%00010010	; HANDWRITTEN
    626  2cfa				  -	      .byte	%00001100	; HANDWRITTEN
    627  2cfa				  -
    628  2cfa					      endif		; HANDWRITTEN
    629  2cfa
    630  2cfa				  -	      if	fontstyle == INTERRUPTED
    631  2cfa				  -
    632  2cfa				  -			;byte %00000000 ; INTERRUPTED
    633  2cfa				  -
    634  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    635  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    636  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    637  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    638  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    639  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    640  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    641  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    642  2cfa				  -
    643  2cfa				  -			;byte %00000000 ; INTERRUPTED
    644  2cfa				  -
    645  2cfa				  -	      .byte	%00111100	; INTERRUPTED
    646  2cfa				  -	      .byte	%00000000	; INTERRUPTED
    647  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    648  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    649  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    650  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    651  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    652  2cfa				  -	      .byte	%00111000	; INTERRUPTED
    653  2cfa				  -
    654  2cfa				  -			;byte %00000000 ; INTERRUPTED
    655  2cfa				  -
    656  2cfa				  -	      .byte	%01101110	; INTERRUPTED
    657  2cfa				  -	      .byte	%01100000	; INTERRUPTED
    658  2cfa				  -	      .byte	%00110000	; INTERRUPTED
    659  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    660  2cfa				  -	      .byte	%00001100	; INTERRUPTED
    661  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    662  2cfa				  -	      .byte	%01000110	; INTERRUPTED
    663  2cfa				  -	      .byte	%00111100	; INTERRUPTED
    664  2cfa				  -
    665  2cfa				  -			;byte %00000000 ; INTERRUPTED
    666  2cfa				  -
    667  2cfa				  -	      .byte	%01111100	; INTERRUPTED
    668  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    669  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    670  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    671  2cfa				  -	      .byte	%01110110	; INTERRUPTED
    672  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    673  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    674  2cfa				  -	      .byte	%01110100	; INTERRUPTED
    675  2cfa				  -
    676  2cfa				  -			;byte %00000000 ; INTERRUPTED
    677  2cfa				  -
    678  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    679  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    680  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    681  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    682  2cfa				  -	      .byte	%01110110	; INTERRUPTED
    683  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    684  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    685  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    686  2cfa				  -
    687  2cfa				  -			;byte %00000000 ; INTERRUPTED
    688  2cfa				  -
    689  2cfa				  -	      .byte	%01111100	; INTERRUPTED
    690  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    691  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    692  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    693  2cfa				  -	      .byte	%01111100	; INTERRUPTED
    694  2cfa				  -	      .byte	%01100000	; INTERRUPTED
    695  2cfa				  -	      .byte	%01100000	; INTERRUPTED
    696  2cfa				  -	      .byte	%01101110	; INTERRUPTED
    697  2cfa				  -
    698  2cfa				  -			;byte %00000000 ; INTERRUPTED
    699  2cfa				  -
    700  2cfa				  -	      .byte	%00101100	; INTERRUPTED
    701  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    702  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    703  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    704  2cfa				  -	      .byte	%01101100	; INTERRUPTED
    705  2cfa				  -	      .byte	%01100000	; INTERRUPTED
    706  2cfa				  -	      .byte	%00110000	; INTERRUPTED
    707  2cfa				  -	      .byte	%00011100	; INTERRUPTED
    708  2cfa				  -
    709  2cfa				  -			;byte %00000000 ; INTERRUPTED
    710  2cfa				  -
    711  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    712  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    713  2cfa				  -	      .byte	%00011000	; INTERRUPTED
    714  2cfa				  -	      .byte	%00011100	; INTERRUPTED
    715  2cfa				  -	      .byte	%00001110	; INTERRUPTED
    716  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    717  2cfa				  -	      .byte	%00000000	; INTERRUPTED
    718  2cfa				  -	      .byte	%01111110	; INTERRUPTED
    719  2cfa				  -
    720  2cfa				  -			;byte %00000000 ; INTERRUPTED
    721  2cfa				  -
    722  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    723  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    724  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    725  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    726  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    727  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    728  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    729  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    730  2cfa				  -
    731  2cfa				  -			;byte %00000000 ; INTERRUPTED
    732  2cfa				  -
    733  2cfa				  -	      .byte	%00111000	; INTERRUPTED
    734  2cfa				  -	      .byte	%00001100	; INTERRUPTED
    735  2cfa				  -	      .byte	%00000110	; INTERRUPTED
    736  2cfa				  -	      .byte	%00110110	; INTERRUPTED
    737  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    738  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    739  2cfa				  -	      .byte	%01100110	; INTERRUPTED
    740  2cfa				  -	      .byte	%00110100	; INTERRUPTED
    741  2cfa				  -
    742  2cfa					      endif		; INTERRUPTED
    743  2cfa
    744  2cfa
    745  2cfa				  -	      if	fontstyle == TINY
    746  2cfa				  -
    747  2cfa				  -			;byte %00000000 ; TINY
    748  2cfa				  -
    749  2cfa				  -	      .byte	%00000000	; TINY
    750  2cfa				  -	      .byte	%00111000	; TINY
    751  2cfa				  -	      .byte	%00101000	; TINY
    752  2cfa				  -	      .byte	%00101000	; TINY
    753  2cfa				  -	      .byte	%00101000	; TINY
    754  2cfa				  -	      .byte	%00111000	; TINY
    755  2cfa				  -	      .byte	%00000000	; TINY
    756  2cfa				  -	      .byte	%00000000	; TINY
    757  2cfa				  -
    758  2cfa				  -			;byte %00000000 ; TINY
    759  2cfa				  -
    760  2cfa				  -	      .byte	%00000000	; TINY
    761  2cfa				  -	      .byte	%00010000	; TINY
    762  2cfa				  -	      .byte	%00010000	; TINY
    763  2cfa				  -	      .byte	%00010000	; TINY
    764  2cfa				  -	      .byte	%00010000	; TINY
    765  2cfa				  -	      .byte	%00010000	; TINY
    766  2cfa				  -	      .byte	%00000000	; TINY
    767  2cfa				  -	      .byte	%00000000	; TINY
    768  2cfa				  -
    769  2cfa				  -			;byte %00000000 ; TINY
    770  2cfa				  -
    771  2cfa				  -	      .byte	%00000000	; TINY
    772  2cfa				  -	      .byte	%00111000	; TINY
    773  2cfa				  -	      .byte	%00100000	; TINY
    774  2cfa				  -	      .byte	%00111000	; TINY
    775  2cfa				  -	      .byte	%00001000	; TINY
    776  2cfa				  -	      .byte	%00111000	; TINY
    777  2cfa				  -	      .byte	%00000000	; TINY
    778  2cfa				  -	      .byte	%00000000	; TINY
    779  2cfa				  -
    780  2cfa				  -			;byte %00000000 ; TINY
    781  2cfa				  -
    782  2cfa				  -	      .byte	%00000000	; TINY
    783  2cfa				  -	      .byte	%00111000	; TINY
    784  2cfa				  -	      .byte	%00001000	; TINY
    785  2cfa				  -	      .byte	%00111000	; TINY
    786  2cfa				  -	      .byte	%00001000	; TINY
    787  2cfa				  -	      .byte	%00111000	; TINY
    788  2cfa				  -	      .byte	%00000000	; TINY
    789  2cfa				  -	      .byte	%00000000	; TINY
    790  2cfa				  -
    791  2cfa				  -			;byte %00000000 ; TINY
    792  2cfa				  -
    793  2cfa				  -	      .byte	%00000000	; TINY
    794  2cfa				  -	      .byte	%00001000	; TINY
    795  2cfa				  -	      .byte	%00001000	; TINY
    796  2cfa				  -	      .byte	%00111000	; TINY
    797  2cfa				  -	      .byte	%00101000	; TINY
    798  2cfa				  -	      .byte	%00101000	; TINY
    799  2cfa				  -	      .byte	%00000000	; TINY
    800  2cfa				  -	      .byte	%00000000	; TINY
    801  2cfa				  -
    802  2cfa				  -			;byte %00000000 ; TINY
    803  2cfa				  -
    804  2cfa				  -	      .byte	%00000000	; TINY
    805  2cfa				  -	      .byte	%00111000	; TINY
    806  2cfa				  -	      .byte	%00001000	; TINY
    807  2cfa				  -	      .byte	%00111000	; TINY
    808  2cfa				  -	      .byte	%00100000	; TINY
    809  2cfa				  -	      .byte	%00111000	; TINY
    810  2cfa				  -	      .byte	%00000000	; TINY
    811  2cfa				  -	      .byte	%00000000	; TINY
    812  2cfa				  -
    813  2cfa				  -			;byte %00000000 ; TINY
    814  2cfa				  -
    815  2cfa				  -	      .byte	%00000000	; TINY
    816  2cfa				  -	      .byte	%00111000	; TINY
    817  2cfa				  -	      .byte	%00101000	; TINY
    818  2cfa				  -	      .byte	%00111000	; TINY
    819  2cfa				  -	      .byte	%00100000	; TINY
    820  2cfa				  -	      .byte	%00111000	; TINY
    821  2cfa				  -	      .byte	%00000000	; TINY
    822  2cfa				  -	      .byte	%00000000	; TINY
    823  2cfa				  -
    824  2cfa				  -			;byte %00000000 ; TINY
    825  2cfa				  -
    826  2cfa				  -	      .byte	%00000000	; TINY
    827  2cfa				  -	      .byte	%00001000	; TINY
    828  2cfa				  -	      .byte	%00001000	; TINY
    829  2cfa				  -	      .byte	%00001000	; TINY
    830  2cfa				  -	      .byte	%00001000	; TINY
    831  2cfa				  -	      .byte	%00111000	; TINY
    832  2cfa				  -	      .byte	%00000000	; TINY
    833  2cfa				  -	      .byte	%00000000	; TINY
    834  2cfa				  -
    835  2cfa				  -			;byte %00000000 ; TINY
    836  2cfa				  -
    837  2cfa				  -	      .byte	%00000000	; TINY
    838  2cfa				  -	      .byte	%00111000	; TINY
    839  2cfa				  -	      .byte	%00101000	; TINY
    840  2cfa				  -	      .byte	%00111000	; TINY
    841  2cfa				  -	      .byte	%00101000	; TINY
    842  2cfa				  -	      .byte	%00111000	; TINY
    843  2cfa				  -	      .byte	%00000000	; TINY
    844  2cfa				  -	      .byte	%00000000	; TINY
    845  2cfa				  -
    846  2cfa				  -			;byte %00000000 ; TINY
    847  2cfa				  -
    848  2cfa				  -	      .byte	%00000000	; TINY
    849  2cfa				  -	      .byte	%00001000	; TINY
    850  2cfa				  -	      .byte	%00001000	; TINY
    851  2cfa				  -	      .byte	%00111000	; TINY
    852  2cfa				  -	      .byte	%00101000	; TINY
    853  2cfa				  -	      .byte	%00111000	; TINY
    854  2cfa				  -	      .byte	%00000000	; TINY
    855  2cfa				  -	      .byte	%00000000	; TINY
    856  2cfa				  -
    857  2cfa					      endif		; TINY
    858  2cfa
    859  2cfa				  -	      if	fontstyle == RETROPUTER
    860  2cfa				  -
    861  2cfa				  -			;byte %00000000 ; RETROPUTER
    862  2cfa				  -
    863  2cfa				  -	      .byte	%01111110	; RETROPUTER
    864  2cfa				  -	      .byte	%01000110	; RETROPUTER
    865  2cfa				  -	      .byte	%01000110	; RETROPUTER
    866  2cfa				  -	      .byte	%01000110	; RETROPUTER
    867  2cfa				  -	      .byte	%01100010	; RETROPUTER
    868  2cfa				  -	      .byte	%01100010	; RETROPUTER
    869  2cfa				  -	      .byte	%01100010	; RETROPUTER
    870  2cfa				  -	      .byte	%01111110	; RETROPUTER
    871  2cfa				  -
    872  2cfa				  -			;byte %00000000 ; RETROPUTER
    873  2cfa				  -
    874  2cfa				  -	      .byte	%00111000	; RETROPUTER
    875  2cfa				  -	      .byte	%00111000	; RETROPUTER
    876  2cfa				  -	      .byte	%00111000	; RETROPUTER
    877  2cfa				  -	      .byte	%00111000	; RETROPUTER
    878  2cfa				  -	      .byte	%00011000	; RETROPUTER
    879  2cfa				  -	      .byte	%00011000	; RETROPUTER
    880  2cfa				  -	      .byte	%00011000	; RETROPUTER
    881  2cfa				  -	      .byte	%00011000	; RETROPUTER
    882  2cfa				  -
    883  2cfa				  -			;byte %00000000 ; RETROPUTER
    884  2cfa				  -
    885  2cfa				  -	      .byte	%01111110	; RETROPUTER
    886  2cfa				  -	      .byte	%01100000	; RETROPUTER
    887  2cfa				  -	      .byte	%01100000	; RETROPUTER
    888  2cfa				  -	      .byte	%01100000	; RETROPUTER
    889  2cfa				  -	      .byte	%00111110	; RETROPUTER
    890  2cfa				  -	      .byte	%00000010	; RETROPUTER
    891  2cfa				  -	      .byte	%01000010	; RETROPUTER
    892  2cfa				  -	      .byte	%01111110	; RETROPUTER
    893  2cfa				  -
    894  2cfa				  -			;byte %00000000 ; RETROPUTER
    895  2cfa				  -
    896  2cfa				  -	      .byte	%01111110	; RETROPUTER
    897  2cfa				  -	      .byte	%01000110	; RETROPUTER
    898  2cfa				  -	      .byte	%00000110	; RETROPUTER
    899  2cfa				  -	      .byte	%00000110	; RETROPUTER
    900  2cfa				  -	      .byte	%00111110	; RETROPUTER
    901  2cfa				  -	      .byte	%00000010	; RETROPUTER
    902  2cfa				  -	      .byte	%01000010	; RETROPUTER
    903  2cfa				  -	      .byte	%01111110	; RETROPUTER
    904  2cfa				  -
    905  2cfa				  -			;byte %00000000 ; RETROPUTER
    906  2cfa				  -
    907  2cfa				  -	      .byte	%00001100	; RETROPUTER
    908  2cfa				  -	      .byte	%00001100	; RETROPUTER
    909  2cfa				  -	      .byte	%00001100	; RETROPUTER
    910  2cfa				  -	      .byte	%01111110	; RETROPUTER
    911  2cfa				  -	      .byte	%01000100	; RETROPUTER
    912  2cfa				  -	      .byte	%01000100	; RETROPUTER
    913  2cfa				  -	      .byte	%01000100	; RETROPUTER
    914  2cfa				  -	      .byte	%00000100	; RETROPUTER
    915  2cfa				  -
    916  2cfa				  -			;byte %00000000 ; RETROPUTER
    917  2cfa				  -
    918  2cfa				  -	      .byte	%01111110	; RETROPUTER
    919  2cfa				  -	      .byte	%01000110	; RETROPUTER
    920  2cfa				  -	      .byte	%00000110	; RETROPUTER
    921  2cfa				  -	      .byte	%00000110	; RETROPUTER
    922  2cfa				  -	      .byte	%01111100	; RETROPUTER
    923  2cfa				  -	      .byte	%01000000	; RETROPUTER
    924  2cfa				  -	      .byte	%01000000	; RETROPUTER
    925  2cfa				  -	      .byte	%01111110	; RETROPUTER
    926  2cfa				  -
    927  2cfa				  -			;byte %00000000 ; RETROPUTER
    928  2cfa				  -
    929  2cfa				  -	      .byte	%01111110	; RETROPUTER
    930  2cfa				  -	      .byte	%01000110	; RETROPUTER
    931  2cfa				  -	      .byte	%01000110	; RETROPUTER
    932  2cfa				  -	      .byte	%01000110	; RETROPUTER
    933  2cfa				  -	      .byte	%01111100	; RETROPUTER
    934  2cfa				  -	      .byte	%01000000	; RETROPUTER
    935  2cfa				  -	      .byte	%01000010	; RETROPUTER
    936  2cfa				  -	      .byte	%01111110	; RETROPUTER
    937  2cfa				  -
    938  2cfa				  -			;byte %00000000 ; RETROPUTER
    939  2cfa				  -
    940  2cfa				  -	      .byte	%00001100	; RETROPUTER
    941  2cfa				  -	      .byte	%00001100	; RETROPUTER
    942  2cfa				  -	      .byte	%00001100	; RETROPUTER
    943  2cfa				  -	      .byte	%00001100	; RETROPUTER
    944  2cfa				  -	      .byte	%00000100	; RETROPUTER
    945  2cfa				  -	      .byte	%00000010	; RETROPUTER
    946  2cfa				  -	      .byte	%01000010	; RETROPUTER
    947  2cfa				  -	      .byte	%01111110	; RETROPUTER
    948  2cfa				  -
    949  2cfa				  -			;byte %00000000 ; RETROPUTER
    950  2cfa				  -
    951  2cfa				  -	      .byte	%01111110	; RETROPUTER
    952  2cfa				  -	      .byte	%01000110	; RETROPUTER
    953  2cfa				  -	      .byte	%01000110	; RETROPUTER
    954  2cfa				  -	      .byte	%01000110	; RETROPUTER
    955  2cfa				  -	      .byte	%01111110	; RETROPUTER
    956  2cfa				  -	      .byte	%01000010	; RETROPUTER
    957  2cfa				  -	      .byte	%01000010	; RETROPUTER
    958  2cfa				  -	      .byte	%01111110	; RETROPUTER
    959  2cfa				  -
    960  2cfa				  -			;byte %00000000 ; RETROPUTER
    961  2cfa				  -
    962  2cfa				  -	      .byte	%00000110	; RETROPUTER
    963  2cfa				  -	      .byte	%00000110	; RETROPUTER
    964  2cfa				  -	      .byte	%00000110	; RETROPUTER
    965  2cfa				  -	      .byte	%00000010	; RETROPUTER
    966  2cfa				  -	      .byte	%01111110	; RETROPUTER
    967  2cfa				  -	      .byte	%01000010	; RETROPUTER
    968  2cfa				  -	      .byte	%01000010	; RETROPUTER
    969  2cfa				  -	      .byte	%01111110	; RETROPUTER
    970  2cfa				  -
    971  2cfa					      endif		; RETROPUTER
    972  2cfa
    973  2cfa				  -	      if	fontstyle == CURVES
    974  2cfa				  -
    975  2cfa				  -			;byte %00000000 ; CURVES
    976  2cfa				  -
    977  2cfa				  -	      .byte	%00111100	; CURVES
    978  2cfa				  -	      .byte	%01111110	; CURVES
    979  2cfa				  -	      .byte	%01100110	; CURVES
    980  2cfa				  -	      .byte	%01100110	; CURVES
    981  2cfa				  -	      .byte	%01100110	; CURVES
    982  2cfa				  -	      .byte	%01100110	; CURVES
    983  2cfa				  -	      .byte	%01111110	; CURVES
    984  2cfa				  -	      .byte	%00111100	; CURVES
    985  2cfa				  -
    986  2cfa				  -			;byte %00000000 ; CURVES
    987  2cfa				  -
    988  2cfa				  -	      .byte	%00011000	; CURVES
    989  2cfa				  -	      .byte	%00011000	; CURVES
    990  2cfa				  -	      .byte	%00011000	; CURVES
    991  2cfa				  -	      .byte	%00011000	; CURVES
    992  2cfa				  -	      .byte	%00011000	; CURVES
    993  2cfa				  -	      .byte	%00011000	; CURVES
    994  2cfa				  -	      .byte	%01111000	; CURVES
    995  2cfa				  -	      .byte	%01110000	; CURVES
    996  2cfa				  -
    997  2cfa				  -			;byte %00000000 ; CURVES
    998  2cfa				  -
    999  2cfa				  -	      .byte	%01111110	; CURVES
   1000  2cfa				  -	      .byte	%01111110	; CURVES
   1001  2cfa				  -	      .byte	%01100000	; CURVES
   1002  2cfa				  -	      .byte	%01111100	; CURVES
   1003  2cfa				  -	      .byte	%00111110	; CURVES
   1004  2cfa				  -	      .byte	%00000110	; CURVES
   1005  2cfa				  -	      .byte	%01111110	; CURVES
   1006  2cfa				  -	      .byte	%01111100	; CURVES
   1007  2cfa				  -
   1008  2cfa				  -			;byte %00000000 ; CURVES
   1009  2cfa				  -
   1010  2cfa				  -	      .byte	%01111100	; CURVES
   1011  2cfa				  -	      .byte	%01111110	; CURVES
   1012  2cfa				  -	      .byte	%00001110	; CURVES
   1013  2cfa				  -	      .byte	%00111100	; CURVES
   1014  2cfa				  -	      .byte	%00111100	; CURVES
   1015  2cfa				  -	      .byte	%00001110	; CURVES
   1016  2cfa				  -	      .byte	%01111110	; CURVES
   1017  2cfa				  -	      .byte	%01111100	; CURVES
   1018  2cfa				  -
   1019  2cfa				  -			;byte %00000000 ; CURVES
   1020  2cfa				  -
   1021  2cfa				  -	      .byte	%00000110	; CURVES
   1022  2cfa				  -	      .byte	%00000110	; CURVES
   1023  2cfa				  -	      .byte	%00111110	; CURVES
   1024  2cfa				  -	      .byte	%01111110	; CURVES
   1025  2cfa				  -	      .byte	%01100110	; CURVES
   1026  2cfa				  -	      .byte	%01100110	; CURVES
   1027  2cfa				  -	      .byte	%01100110	; CURVES
   1028  2cfa				  -	      .byte	%01100110	; CURVES
   1029  2cfa				  -
   1030  2cfa				  -			;byte %00000000 ; CURVES
   1031  2cfa				  -
   1032  2cfa				  -	      .byte	%01111100	; CURVES
   1033  2cfa				  -	      .byte	%01111110	; CURVES
   1034  2cfa				  -	      .byte	%00000110	; CURVES
   1035  2cfa				  -	      .byte	%01111110	; CURVES
   1036  2cfa				  -	      .byte	%01111100	; CURVES
   1037  2cfa				  -	      .byte	%01100000	; CURVES
   1038  2cfa				  -	      .byte	%01111110	; CURVES
   1039  2cfa				  -	      .byte	%01111110	; CURVES
   1040  2cfa				  -
   1041  2cfa				  -			;byte %00000000 ; CURVES
   1042  2cfa				  -
   1043  2cfa				  -	      .byte	%00111100	; CURVES
   1044  2cfa				  -	      .byte	%01111110	; CURVES
   1045  2cfa				  -	      .byte	%01100110	; CURVES
   1046  2cfa				  -	      .byte	%01111110	; CURVES
   1047  2cfa				  -	      .byte	%01111100	; CURVES
   1048  2cfa				  -	      .byte	%01100000	; CURVES
   1049  2cfa				  -	      .byte	%01111110	; CURVES
   1050  2cfa				  -	      .byte	%00111110	; CURVES
   1051  2cfa				  -
   1052  2cfa				  -			;byte %00000000 ; CURVES
   1053  2cfa				  -
   1054  2cfa				  -	      .byte	%00000110	; CURVES
   1055  2cfa				  -	      .byte	%00000110	; CURVES
   1056  2cfa				  -	      .byte	%00000110	; CURVES
   1057  2cfa				  -	      .byte	%00000110	; CURVES
   1058  2cfa				  -	      .byte	%00000110	; CURVES
   1059  2cfa				  -	      .byte	%01100110	; CURVES
   1060  2cfa				  -	      .byte	%01111110	; CURVES
   1061  2cfa				  -	      .byte	%00111100	; CURVES
   1062  2cfa				  -
   1063  2cfa				  -			;byte %00000000 ; CURVES
   1064  2cfa				  -
   1065  2cfa				  -	      .byte	%00111100	; CURVES
   1066  2cfa				  -	      .byte	%01111110	; CURVES
   1067  2cfa				  -	      .byte	%01100110	; CURVES
   1068  2cfa				  -	      .byte	%01111110	; CURVES
   1069  2cfa				  -	      .byte	%00111100	; CURVES
   1070  2cfa				  -	      .byte	%01100110	; CURVES
   1071  2cfa				  -	      .byte	%01111110	; CURVES
   1072  2cfa				  -	      .byte	%00111100	; CURVES
   1073  2cfa				  -
   1074  2cfa				  -			;byte %00000000 ; CURVES
   1075  2cfa				  -
   1076  2cfa				  -	      .byte	%01111100	; CURVES
   1077  2cfa				  -	      .byte	%01111110	; CURVES
   1078  2cfa				  -	      .byte	%00000110	; CURVES
   1079  2cfa				  -	      .byte	%00111110	; CURVES
   1080  2cfa				  -	      .byte	%01111110	; CURVES
   1081  2cfa				  -	      .byte	%01100110	; CURVES
   1082  2cfa				  -	      .byte	%01111110	; CURVES
   1083  2cfa				  -	      .byte	%00111100	; CURVES
   1084  2cfa				  -
   1085  2cfa					      endif		; CURVES
   1086  2cfa
   1087  2cfa
   1088  2cfa				  -	      if	fontstyle == HUSKY
   1089  2cfa				  -
   1090  2cfa				  -			;byte %00000000 ; HUSKY
   1091  2cfa				  -
   1092  2cfa				  -	      .byte	%01111100	; HUSKY
   1093  2cfa				  -	      .byte	%11111110	; HUSKY
   1094  2cfa				  -	      .byte	%11101110	; HUSKY
   1095  2cfa				  -	      .byte	%11101110	; HUSKY
   1096  2cfa				  -	      .byte	%11101110	; HUSKY
   1097  2cfa				  -	      .byte	%11101110	; HUSKY
   1098  2cfa				  -	      .byte	%11111110	; HUSKY
   1099  2cfa				  -	      .byte	%01111100	; HUSKY
   1100  2cfa				  -
   1101  2cfa				  -			;byte %00000000 ; HUSKY
   1102  2cfa				  -
   1103  2cfa				  -	      .byte	%00111000	; HUSKY
   1104  2cfa				  -	      .byte	%00111000	; HUSKY
   1105  2cfa				  -	      .byte	%00111000	; HUSKY
   1106  2cfa				  -	      .byte	%00111000	; HUSKY
   1107  2cfa				  -	      .byte	%00111000	; HUSKY
   1108  2cfa				  -	      .byte	%00111000	; HUSKY
   1109  2cfa				  -	      .byte	%00111000	; HUSKY
   1110  2cfa				  -	      .byte	%00111000	; HUSKY
   1111  2cfa				  -
   1112  2cfa				  -			;byte %00000000 ; HUSKY
   1113  2cfa				  -
   1114  2cfa				  -	      .byte	%11111110	; HUSKY
   1115  2cfa				  -	      .byte	%11111110	; HUSKY
   1116  2cfa				  -	      .byte	%11100000	; HUSKY
   1117  2cfa				  -	      .byte	%11111100	; HUSKY
   1118  2cfa				  -	      .byte	%01111110	; HUSKY
   1119  2cfa				  -	      .byte	%00001110	; HUSKY
   1120  2cfa				  -	      .byte	%11111110	; HUSKY
   1121  2cfa				  -	      .byte	%11111100	; HUSKY
   1122  2cfa				  -
   1123  2cfa				  -			;byte %00000000 ; HUSKY
   1124  2cfa				  -
   1125  2cfa				  -	      .byte	%11111100	; HUSKY
   1126  2cfa				  -	      .byte	%11111110	; HUSKY
   1127  2cfa				  -	      .byte	%00001110	; HUSKY
   1128  2cfa				  -	      .byte	%11111100	; HUSKY
   1129  2cfa				  -	      .byte	%11111100	; HUSKY
   1130  2cfa				  -	      .byte	%00001110	; HUSKY
   1131  2cfa				  -	      .byte	%11111110	; HUSKY
   1132  2cfa				  -	      .byte	%11111100	; HUSKY
   1133  2cfa				  -
   1134  2cfa				  -			;byte %00000000 ; HUSKY
   1135  2cfa				  -
   1136  2cfa				  -	      .byte	%00011100	; HUSKY
   1137  2cfa				  -	      .byte	%00011100	; HUSKY
   1138  2cfa				  -	      .byte	%11111110	; HUSKY
   1139  2cfa				  -	      .byte	%11111110	; HUSKY
   1140  2cfa				  -	      .byte	%11011100	; HUSKY
   1141  2cfa				  -	      .byte	%11011100	; HUSKY
   1142  2cfa				  -	      .byte	%00011100	; HUSKY
   1143  2cfa				  -	      .byte	%00011100	; HUSKY
   1144  2cfa				  -
   1145  2cfa				  -			;byte %00000000 ; HUSKY
   1146  2cfa				  -
   1147  2cfa				  -	      .byte	%11111100	; HUSKY
   1148  2cfa				  -	      .byte	%11111110	; HUSKY
   1149  2cfa				  -	      .byte	%00001110	; HUSKY
   1150  2cfa				  -	      .byte	%11111110	; HUSKY
   1151  2cfa				  -	      .byte	%11111100	; HUSKY
   1152  2cfa				  -	      .byte	%11100000	; HUSKY
   1153  2cfa				  -	      .byte	%11111110	; HUSKY
   1154  2cfa				  -	      .byte	%11111110	; HUSKY
   1155  2cfa				  -
   1156  2cfa				  -			;byte %00000000 ; HUSKY
   1157  2cfa				  -
   1158  2cfa				  -	      .byte	%01111100	; HUSKY
   1159  2cfa				  -	      .byte	%11111110	; HUSKY
   1160  2cfa				  -	      .byte	%11101110	; HUSKY
   1161  2cfa				  -	      .byte	%11111110	; HUSKY
   1162  2cfa				  -	      .byte	%11111100	; HUSKY
   1163  2cfa				  -	      .byte	%11100000	; HUSKY
   1164  2cfa				  -	      .byte	%11111110	; HUSKY
   1165  2cfa				  -	      .byte	%01111110	; HUSKY
   1166  2cfa				  -
   1167  2cfa				  -			;byte %00000000 ; HUSKY
   1168  2cfa				  -
   1169  2cfa				  -	      .byte	%00111000	; HUSKY
   1170  2cfa				  -	      .byte	%00111000	; HUSKY
   1171  2cfa				  -	      .byte	%00111000	; HUSKY
   1172  2cfa				  -	      .byte	%00111000	; HUSKY
   1173  2cfa				  -	      .byte	%00011100	; HUSKY
   1174  2cfa				  -	      .byte	%00001110	; HUSKY
   1175  2cfa				  -	      .byte	%11111110	; HUSKY
   1176  2cfa				  -	      .byte	%11111110	; HUSKY
   1177  2cfa				  -
   1178  2cfa				  -			;byte %00000000 ; HUSKY
   1179  2cfa				  -
   1180  2cfa				  -	      .byte	%01111100	; HUSKY
   1181  2cfa				  -	      .byte	%11111110	; HUSKY
   1182  2cfa				  -	      .byte	%11101110	; HUSKY
   1183  2cfa				  -	      .byte	%11111110	; HUSKY
   1184  2cfa				  -	      .byte	%01111100	; HUSKY
   1185  2cfa				  -	      .byte	%11101110	; HUSKY
   1186  2cfa				  -	      .byte	%11111110	; HUSKY
   1187  2cfa				  -	      .byte	%01111100	; HUSKY
   1188  2cfa				  -
   1189  2cfa				  -			;byte %00000000 ; HUSKY
   1190  2cfa				  -
   1191  2cfa				  -	      .byte	%11111100	; HUSKY
   1192  2cfa				  -	      .byte	%11111110	; HUSKY
   1193  2cfa				  -	      .byte	%00001110	; HUSKY
   1194  2cfa				  -	      .byte	%01111110	; HUSKY
   1195  2cfa				  -	      .byte	%11111110	; HUSKY
   1196  2cfa				  -	      .byte	%11101110	; HUSKY
   1197  2cfa				  -	      .byte	%11111110	; HUSKY
   1198  2cfa				  -	      .byte	%01111100	; HUSKY
   1199  2cfa				  -
   1200  2cfa					      endif		; HUSKY
   1201  2cfa
   1202  2cfa
   1203  2cfa				  -	      if	fontstyle == SNAKE
   1204  2cfa				  -
   1205  2cfa				  -			;byte %00000000 ; SNAKE
   1206  2cfa				  -
   1207  2cfa				  -	      .byte	%01111110	; SNAKE
   1208  2cfa				  -	      .byte	%01000010	; SNAKE
   1209  2cfa				  -	      .byte	%01000010	; SNAKE
   1210  2cfa				  -	      .byte	%01000010	; SNAKE
   1211  2cfa				  -	      .byte	%01000010	; SNAKE
   1212  2cfa				  -	      .byte	%01000010	; SNAKE
   1213  2cfa				  -	      .byte	%01000010	; SNAKE
   1214  2cfa				  -	      .byte	%01111110	; SNAKE
   1215  2cfa				  -
   1216  2cfa				  -			;byte %00000000 ; SNAKE
   1217  2cfa				  -
   1218  2cfa				  -	      .byte	%00111000	; SNAKE
   1219  2cfa				  -	      .byte	%00101000	; SNAKE
   1220  2cfa				  -	      .byte	%00001000	; SNAKE
   1221  2cfa				  -	      .byte	%00001000	; SNAKE
   1222  2cfa				  -	      .byte	%00001000	; SNAKE
   1223  2cfa				  -	      .byte	%00001000	; SNAKE
   1224  2cfa				  -	      .byte	%00001000	; SNAKE
   1225  2cfa				  -	      .byte	%00111000	; SNAKE
   1226  2cfa				  -
   1227  2cfa				  -			;byte %00000000 ; SNAKE
   1228  2cfa				  -
   1229  2cfa				  -	      .byte	%01111110	; SNAKE
   1230  2cfa				  -	      .byte	%01000010	; SNAKE
   1231  2cfa				  -	      .byte	%01000110	; SNAKE
   1232  2cfa				  -	      .byte	%01000000	; SNAKE
   1233  2cfa				  -	      .byte	%01111110	; SNAKE
   1234  2cfa				  -	      .byte	%00000010	; SNAKE
   1235  2cfa				  -	      .byte	%01000010	; SNAKE
   1236  2cfa				  -	      .byte	%01111110	; SNAKE
   1237  2cfa				  -
   1238  2cfa				  -			;byte %00000000 ; SNAKE
   1239  2cfa				  -
   1240  2cfa				  -	      .byte	%01111110	; SNAKE
   1241  2cfa				  -	      .byte	%01000010	; SNAKE
   1242  2cfa				  -	      .byte	%01100010	; SNAKE
   1243  2cfa				  -	      .byte	%00000010	; SNAKE
   1244  2cfa				  -	      .byte	%01111110	; SNAKE
   1245  2cfa				  -	      .byte	%00000010	; SNAKE
   1246  2cfa				  -	      .byte	%01000010	; SNAKE
   1247  2cfa				  -	      .byte	%01111110	; SNAKE
   1248  2cfa				  -
   1249  2cfa				  -			;byte %00000000 ; SNAKE
   1250  2cfa				  -
   1251  2cfa				  -	      .byte	%00001110	; SNAKE
   1252  2cfa				  -	      .byte	%00001010	; SNAKE
   1253  2cfa				  -	      .byte	%00000010	; SNAKE
   1254  2cfa				  -	      .byte	%01111110	; SNAKE
   1255  2cfa				  -	      .byte	%01000010	; SNAKE
   1256  2cfa				  -	      .byte	%01000010	; SNAKE
   1257  2cfa				  -	      .byte	%01000010	; SNAKE
   1258  2cfa				  -	      .byte	%01100110	; SNAKE
   1259  2cfa				  -
   1260  2cfa				  -			;byte %00000000 ; SNAKE
   1261  2cfa				  -
   1262  2cfa				  -	      .byte	%01111110	; SNAKE
   1263  2cfa				  -	      .byte	%01000010	; SNAKE
   1264  2cfa				  -	      .byte	%01100010	; SNAKE
   1265  2cfa				  -	      .byte	%00000010	; SNAKE
   1266  2cfa				  -	      .byte	%01111110	; SNAKE
   1267  2cfa				  -	      .byte	%01000000	; SNAKE
   1268  2cfa				  -	      .byte	%01000010	; SNAKE
   1269  2cfa				  -	      .byte	%01111110	; SNAKE
   1270  2cfa				  -
   1271  2cfa				  -			;byte %00000000 ; SNAKE
   1272  2cfa				  -
   1273  2cfa				  -	      .byte	%01111110	; SNAKE
   1274  2cfa				  -	      .byte	%01000010	; SNAKE
   1275  2cfa				  -	      .byte	%01000010	; SNAKE
   1276  2cfa				  -	      .byte	%01111110	; SNAKE
   1277  2cfa				  -	      .byte	%01000000	; SNAKE
   1278  2cfa				  -	      .byte	%01000110	; SNAKE
   1279  2cfa				  -	      .byte	%01000010	; SNAKE
   1280  2cfa				  -	      .byte	%01111110	; SNAKE
   1281  2cfa				  -
   1282  2cfa				  -			;byte %00000000 ; SNAKE
   1283  2cfa				  -
   1284  2cfa				  -	      .byte	%00000110	; SNAKE
   1285  2cfa				  -	      .byte	%00000010	; SNAKE
   1286  2cfa				  -	      .byte	%00000010	; SNAKE
   1287  2cfa				  -	      .byte	%00000010	; SNAKE
   1288  2cfa				  -	      .byte	%00000010	; SNAKE
   1289  2cfa				  -	      .byte	%01100010	; SNAKE
   1290  2cfa				  -	      .byte	%01000010	; SNAKE
   1291  2cfa				  -	      .byte	%01111110	; SNAKE
   1292  2cfa				  -
   1293  2cfa				  -			;byte %00000000 ; SNAKE
   1294  2cfa				  -
   1295  2cfa				  -	      .byte	%01111110	; SNAKE
   1296  2cfa				  -	      .byte	%01000010	; SNAKE
   1297  2cfa				  -	      .byte	%01000010	; SNAKE
   1298  2cfa				  -	      .byte	%01000010	; SNAKE
   1299  2cfa				  -	      .byte	%01111110	; SNAKE
   1300  2cfa				  -	      .byte	%01000010	; SNAKE
   1301  2cfa				  -	      .byte	%01000010	; SNAKE
   1302  2cfa				  -	      .byte	%01111110	; SNAKE
   1303  2cfa				  -
   1304  2cfa				  -			;byte %00000000 ; SNAKE
   1305  2cfa				  -
   1306  2cfa				  -	      .byte	%00001110	; SNAKE
   1307  2cfa				  -	      .byte	%00001010	; SNAKE
   1308  2cfa				  -	      .byte	%00000010	; SNAKE
   1309  2cfa				  -	      .byte	%00000010	; SNAKE
   1310  2cfa				  -	      .byte	%01111110	; SNAKE
   1311  2cfa				  -	      .byte	%01000010	; SNAKE
   1312  2cfa				  -	      .byte	%01000010	; SNAKE
   1313  2cfa				  -	      .byte	%01111110	; SNAKE
   1314  2cfa				  -
   1315  2cfa				  -
   1316  2cfa					      endif		; SNAKE
   1317  2cfa
   1318  2cfa				  -	      if	fontstyle == PLOK
   1319  2cfa				  -
   1320  2cfa				  -			;byte %00000000 ; PLOK
   1321  2cfa				  -
   1322  2cfa				  -	      .byte	%00000000	; PLOK
   1323  2cfa				  -	      .byte	%00111000	; PLOK
   1324  2cfa				  -	      .byte	%01100100	; PLOK
   1325  2cfa				  -	      .byte	%01100010	; PLOK
   1326  2cfa				  -	      .byte	%01100010	; PLOK
   1327  2cfa				  -	      .byte	%00110110	; PLOK
   1328  2cfa				  -	      .byte	%00011100	; PLOK
   1329  2cfa				  -	      .byte	%00000000	; PLOK
   1330  2cfa				  -
   1331  2cfa				  -			;byte %00000000 ; PLOK
   1332  2cfa				  -
   1333  2cfa				  -	      .byte	%00000000	; PLOK
   1334  2cfa				  -	      .byte	%00010000	; PLOK
   1335  2cfa				  -	      .byte	%00011100	; PLOK
   1336  2cfa				  -	      .byte	%00011100	; PLOK
   1337  2cfa				  -	      .byte	%00011000	; PLOK
   1338  2cfa				  -	      .byte	%00111000	; PLOK
   1339  2cfa				  -	      .byte	%00011000	; PLOK
   1340  2cfa				  -	      .byte	%00000000	; PLOK
   1341  2cfa				  -
   1342  2cfa				  -			;byte %00000000 ; PLOK
   1343  2cfa				  -
   1344  2cfa				  -	      .byte	%00000000	; PLOK
   1345  2cfa				  -	      .byte	%00001110	; PLOK
   1346  2cfa				  -	      .byte	%01111110	; PLOK
   1347  2cfa				  -	      .byte	%00011000	; PLOK
   1348  2cfa				  -	      .byte	%00001100	; PLOK
   1349  2cfa				  -	      .byte	%00000110	; PLOK
   1350  2cfa				  -	      .byte	%00111100	; PLOK
   1351  2cfa				  -	      .byte	%00000000	; PLOK
   1352  2cfa				  -
   1353  2cfa				  -			;byte %00000000 ; PLOK
   1354  2cfa				  -
   1355  2cfa				  -	      .byte	%00000000	; PLOK
   1356  2cfa				  -	      .byte	%00111100	; PLOK
   1357  2cfa				  -	      .byte	%01101110	; PLOK
   1358  2cfa				  -	      .byte	%00001110	; PLOK
   1359  2cfa				  -	      .byte	%00011100	; PLOK
   1360  2cfa				  -	      .byte	%00000110	; PLOK
   1361  2cfa				  -	      .byte	%01111100	; PLOK
   1362  2cfa				  -	      .byte	%00000000	; PLOK
   1363  2cfa				  -
   1364  2cfa				  -			;byte %00000000 ; PLOK
   1365  2cfa				  -
   1366  2cfa				  -	      .byte	%00000000	; PLOK
   1367  2cfa				  -	      .byte	%00011000	; PLOK
   1368  2cfa				  -	      .byte	%01111110	; PLOK
   1369  2cfa				  -	      .byte	%01101100	; PLOK
   1370  2cfa				  -	      .byte	%00100100	; PLOK
   1371  2cfa				  -	      .byte	%00110000	; PLOK
   1372  2cfa				  -	      .byte	%00110000	; PLOK
   1373  2cfa				  -	      .byte	%00000000	; PLOK
   1374  2cfa				  -
   1375  2cfa				  -			;byte %00000000 ; PLOK
   1376  2cfa				  -
   1377  2cfa				  -	      .byte	%00000000	; PLOK
   1378  2cfa				  -	      .byte	%00111100	; PLOK
   1379  2cfa				  -	      .byte	%01001110	; PLOK
   1380  2cfa				  -	      .byte	%00011100	; PLOK
   1381  2cfa				  -	      .byte	%01100000	; PLOK
   1382  2cfa				  -	      .byte	%01111100	; PLOK
   1383  2cfa				  -	      .byte	%00011100	; PLOK
   1384  2cfa				  -	      .byte	%00000000	; PLOK
   1385  2cfa				  -
   1386  2cfa				  -			;byte %00000000 ; PLOK
   1387  2cfa				  -
   1388  2cfa				  -	      .byte	%00000000	; PLOK
   1389  2cfa				  -	      .byte	%00111100	; PLOK
   1390  2cfa				  -	      .byte	%01000110	; PLOK
   1391  2cfa				  -	      .byte	%01101100	; PLOK
   1392  2cfa				  -	      .byte	%01110000	; PLOK
   1393  2cfa				  -	      .byte	%00111000	; PLOK
   1394  2cfa				  -	      .byte	%00010000	; PLOK
   1395  2cfa				  -	      .byte	%00000000	; PLOK
   1396  2cfa				  -
   1397  2cfa				  -			;byte %00000000 ; PLOK
   1398  2cfa				  -
   1399  2cfa				  -	      .byte	%00000000	; PLOK
   1400  2cfa				  -	      .byte	%00111100	; PLOK
   1401  2cfa				  -	      .byte	%00011100	; PLOK
   1402  2cfa				  -	      .byte	%00001100	; PLOK
   1403  2cfa				  -	      .byte	%00000110	; PLOK
   1404  2cfa				  -	      .byte	%01111110	; PLOK
   1405  2cfa				  -	      .byte	%00110000	; PLOK
   1406  2cfa				  -	      .byte	%00000000	; PLOK
   1407  2cfa				  -
   1408  2cfa				  -			;byte %00000000 ; PLOK
   1409  2cfa				  -
   1410  2cfa				  -	      .byte	%00000000	; PLOK
   1411  2cfa				  -	      .byte	%00111100	; PLOK
   1412  2cfa				  -	      .byte	%01001110	; PLOK
   1413  2cfa				  -	      .byte	%01101110	; PLOK
   1414  2cfa				  -	      .byte	%00111100	; PLOK
   1415  2cfa				  -	      .byte	%01100100	; PLOK
   1416  2cfa				  -	      .byte	%00111000	; PLOK
   1417  2cfa				  -	      .byte	%00000000	; PLOK
   1418  2cfa				  -
   1419  2cfa				  -			;byte %00000000 ; PLOK
   1420  2cfa				  -
   1421  2cfa				  -	      .byte	%00000000	; PLOK
   1422  2cfa				  -	      .byte	%00011000	; PLOK
   1423  2cfa				  -	      .byte	%00001100	; PLOK
   1424  2cfa				  -	      .byte	%00011100	; PLOK
   1425  2cfa				  -	      .byte	%00100110	; PLOK
   1426  2cfa				  -	      .byte	%01001110	; PLOK
   1427  2cfa				  -	      .byte	%00111100	; PLOK
   1428  2cfa				  -	      .byte	%00000000	; PLOK
   1429  2cfa				  -
   1430  2cfa					      endif		; PLOK
   1431  2cfa
   1432  2cfa							; ### any characters that aren't font specific follow... 
   1433  2cfa
   1434  2cfa				  -	      ifconst	fontcharSPACE
   1435  2cfa				  -			;byte %00000000 ; SYMBOLS
   1436  2cfa				  -
   1437  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1438  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1439  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1440  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1441  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1442  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1443  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1444  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1445  2cfa				  -
   1446  2cfa				  -			;byte %00000000 ; SYMBOLS
   1447  2cfa					      endif		; fontcharSPACE
   1448  2cfa
   1449  2cfa				  -	      ifconst	fontcharDOLLAR
   1450  2cfa				  -			;byte %00000000 ; SYMBOLS
   1451  2cfa				  -
   1452  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1453  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1454  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1455  2cfa				  -	      .byte	%00010010	; SYMBOLS
   1456  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1457  2cfa				  -	      .byte	%10010000	; SYMBOLS
   1458  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1459  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1460  2cfa				  -
   1461  2cfa				  -			;byte %00000000 ; SYMBOLS
   1462  2cfa				  -
   1463  2cfa					      endif		; fontcharDOLLAR
   1464  2cfa
   1465  2cfa				  -	      ifconst	fontcharPOUND
   1466  2cfa				  -			;byte %00000000 ; SYMBOLS
   1467  2cfa				  -
   1468  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1469  2cfa				  -	      .byte	%01000000	; SYMBOLS
   1470  2cfa				  -	      .byte	%00100000	; SYMBOLS
   1471  2cfa				  -	      .byte	%00100000	; SYMBOLS
   1472  2cfa				  -	      .byte	%01111000	; SYMBOLS
   1473  2cfa				  -	      .byte	%00100000	; SYMBOLS
   1474  2cfa				  -	      .byte	%00100010	; SYMBOLS
   1475  2cfa				  -	      .byte	%00011100	; SYMBOLS
   1476  2cfa				  -
   1477  2cfa				  -			;byte %00000000 ; SYMBOLS
   1478  2cfa				  -
   1479  2cfa					      endif		; fontcharPOUND
   1480  2cfa
   1481  2cfa
   1482  2cfa				  -	      ifconst	fontcharMRHAPPY
   1483  2cfa				  -			;byte %00000000 ; SYMBOLS
   1484  2cfa				  -
   1485  2cfa				  -	      .byte	%00111100	; SYMBOLS
   1486  2cfa				  -	      .byte	%01100110	; SYMBOLS
   1487  2cfa				  -	      .byte	%01011010	; SYMBOLS
   1488  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1489  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1490  2cfa				  -	      .byte	%01011010	; SYMBOLS
   1491  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1492  2cfa				  -	      .byte	%00111100	; SYMBOLS
   1493  2cfa				  -
   1494  2cfa				  -			;byte %00000000 ; SYMBOLS
   1495  2cfa				  -
   1496  2cfa					      endif		; fontcharMRHAPPY
   1497  2cfa
   1498  2cfa				  -	      ifconst	fontcharMRSAD
   1499  2cfa				  -			;byte %00000000 ; SYMBOLS
   1500  2cfa				  -
   1501  2cfa				  -	      .byte	%00111100	; SYMBOLS
   1502  2cfa				  -	      .byte	%01011010	; SYMBOLS
   1503  2cfa				  -	      .byte	%01100110	; SYMBOLS
   1504  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1505  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1506  2cfa				  -	      .byte	%01011010	; SYMBOLS
   1507  2cfa				  -	      .byte	%01111110	; SYMBOLS
   1508  2cfa				  -	      .byte	%00111100	; SYMBOLS
   1509  2cfa				  -
   1510  2cfa				  -			;byte %00000000 ; SYMBOLS
   1511  2cfa				  -
   1512  2cfa					      endif		; fontcharMRSAD
   1513  2cfa
   1514  2cfa
   1515  2cfa				  -	      ifconst	fontcharCOPYRIGHT
   1516  2cfa				  -			;byte %00000000 ; SYMBOLS
   1517  2cfa				  -
   1518  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1519  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1520  2cfa				  -	      .byte	%01000100	; SYMBOLS
   1521  2cfa				  -	      .byte	%10111010	; SYMBOLS
   1522  2cfa				  -	      .byte	%10100010	; SYMBOLS
   1523  2cfa				  -	      .byte	%10111010	; SYMBOLS
   1524  2cfa				  -	      .byte	%01000100	; SYMBOLS
   1525  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1526  2cfa				  -
   1527  2cfa				  -			;byte %00000000 ; SYMBOLS
   1528  2cfa				  -
   1529  2cfa					      endif		; fontcharCOPYRIGHT
   1530  2cfa
   1531  2cfa
   1532  2cfa				  -	      ifconst	fontcharFUJI
   1533  2cfa				  -
   1534  2cfa				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1535  2cfa				  -
   1536  2cfa				  -	      .byte	%01110000	; SYMBOLS
   1537  2cfa				  -	      .byte	%01111001	; SYMBOLS
   1538  2cfa				  -	      .byte	%00011101	; SYMBOLS
   1539  2cfa				  -	      .byte	%00001101	; SYMBOLS
   1540  2cfa				  -	      .byte	%00001101	; SYMBOLS
   1541  2cfa				  -	      .byte	%00001101	; SYMBOLS
   1542  2cfa				  -	      .byte	%00001101	; SYMBOLS
   1543  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1544  2cfa				  -
   1545  2cfa				  -			;byte %00000000 ; SYMBOLS
   1546  2cfa				  -
   1547  2cfa				  -	      .byte	%00001110	; SYMBOLS
   1548  2cfa				  -	      .byte	%10011110	; SYMBOLS
   1549  2cfa				  -	      .byte	%10111000	; SYMBOLS
   1550  2cfa				  -	      .byte	%10110000	; SYMBOLS
   1551  2cfa				  -	      .byte	%10110000	; SYMBOLS
   1552  2cfa				  -	      .byte	%10110000	; SYMBOLS
   1553  2cfa				  -	      .byte	%10110000	; SYMBOLS
   1554  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1555  2cfa				  -
   1556  2cfa				  -			;byte %00000000 ; SYMBOLS
   1557  2cfa				  -
   1558  2cfa					      endif		; fontcharFUJI
   1559  2cfa
   1560  2cfa
   1561  2cfa				  -	      ifconst	fontcharHEART
   1562  2cfa				  -			;byte %00000000 ; SYMBOLS
   1563  2cfa				  -
   1564  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1565  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1566  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1567  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1568  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1569  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1570  2cfa				  -	      .byte	%11101110	; SYMBOLS
   1571  2cfa				  -	      .byte	%01000100	; SYMBOLS
   1572  2cfa				  -
   1573  2cfa				  -			;byte %00000000 ; SYMBOLS
   1574  2cfa				  -
   1575  2cfa					      endif		; fontcharHEART
   1576  2cfa
   1577  2cfa				  -	      ifconst	fontcharDIAMOND
   1578  2cfa				  -			;byte %00000000 ; SYMBOLS
   1579  2cfa				  -
   1580  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1581  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1582  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1583  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1584  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1585  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1586  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1587  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1588  2cfa				  -
   1589  2cfa				  -			;byte %00000000 ; SYMBOLS
   1590  2cfa				  -
   1591  2cfa					      endif		; fontcharDIAMOND
   1592  2cfa
   1593  2cfa				  -	      ifconst	fontcharSPADE
   1594  2cfa				  -			;byte %00000000 ; SYMBOLS
   1595  2cfa				  -
   1596  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1597  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1598  2cfa				  -	      .byte	%01010100	; SYMBOLS
   1599  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1600  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1601  2cfa				  -	      .byte	%01111100	; SYMBOLS
   1602  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1603  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1604  2cfa				  -
   1605  2cfa				  -			;byte %00000000 ; SYMBOLS
   1606  2cfa				  -
   1607  2cfa					      endif		; fontcharSPADE
   1608  2cfa
   1609  2cfa				  -	      ifconst	fontcharCLUB
   1610  2cfa				  -			;byte %00000000 ; SYMBOLS
   1611  2cfa				  -
   1612  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1613  2cfa				  -	      .byte	%00010000	; SYMBOLS
   1614  2cfa				  -	      .byte	%11010110	; SYMBOLS
   1615  2cfa				  -	      .byte	%11111110	; SYMBOLS
   1616  2cfa				  -	      .byte	%11010110	; SYMBOLS
   1617  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1618  2cfa				  -	      .byte	%00111000	; SYMBOLS
   1619  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1620  2cfa				  -
   1621  2cfa				  -			;byte %00000000 ; SYMBOLS
   1622  2cfa				  -
   1623  2cfa					      endif		; fontcharCLUB
   1624  2cfa
   1625  2cfa
   1626  2cfa				  -	      ifconst	fontcharCOLON
   1627  2cfa				  -			;byte %00000000 ; SYMBOLS
   1628  2cfa				  -
   1629  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1630  2cfa				  -	      .byte	%00011000	; SYMBOLS
   1631  2cfa				  -	      .byte	%00011000	; SYMBOLS
   1632  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1633  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1634  2cfa				  -	      .byte	%00011000	; SYMBOLS
   1635  2cfa				  -	      .byte	%00011000	; SYMBOLS
   1636  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1637  2cfa				  -
   1638  2cfa				  -			;byte %00000000 ; SYMBOLS
   1639  2cfa				  -
   1640  2cfa					      endif		; fontcharCOLON
   1641  2cfa
   1642  2cfa
   1643  2cfa				  -	      ifconst	fontcharBLOCK
   1644  2cfa				  -
   1645  2cfa				  -			;byte %00000000 ; SYMBOLS
   1646  2cfa				  -
   1647  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1648  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1649  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1650  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1651  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1652  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1653  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1654  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1655  2cfa				  -
   1656  2cfa				  -			;byte %00000000 ; SYMBOLS
   1657  2cfa				  -
   1658  2cfa					      endif		; fontcharBLOCK
   1659  2cfa
   1660  2cfa				  -	      ifconst	fontcharUNDERLINE
   1661  2cfa				  -
   1662  2cfa				  -			;byte %00000000 ; SYMBOLS
   1663  2cfa				  -
   1664  2cfa				  -	      .byte	%11111111	; SYMBOLS
   1665  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1666  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1667  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1668  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1669  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1670  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1671  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1672  2cfa				  -
   1673  2cfa				  -			;byte %00000000 ; SYMBOLS
   1674  2cfa				  -
   1675  2cfa					      endif		; fontcharUNDERLINE
   1676  2cfa
   1677  2cfa				  -	      ifconst	fontcharARISIDE
   1678  2cfa				  -			;byte %00000000 ; SYMBOLS
   1679  2cfa				  -
   1680  2cfa				  -	      .byte	%00000000	; SYMBOLS
   1681  2cfa				  -	      .byte	%00101010	; SYMBOLS
   1682  2cfa				  -	      .byte	%00101010	; SYMBOLS
   1683  2cfa				  -	      .byte	%00101100	; SYMBOLS
   1684  2cfa				  -	      .byte	%01111111	; SYMBOLS
   1685  2cfa				  -	      .byte	%00110111	; SYMBOLS
   1686  2cfa				  -	      .byte	%00000010	; SYMBOLS
   1687  2cfa				  -	      .byte	%00000001	; SYMBOLS
   1688  2cfa				  -
   1689  2cfa				  -			;byte %00000000 ; SYMBOLS
   1690  2cfa				  -
   1691  2cfa					      endif		; fontcharARISIDE
   1692  2cfa
   1693  2cfa				  -	      ifconst	fontcharARIFACE
   1694  2cfa				  -			;byte %00000000 ; SYMBOLS
   1695  2cfa				  -
   1696  2cfa				  -	      .byte	%00001000	; SYMBOLS
   1697  2cfa				  -	      .byte	%00011100	; SYMBOLS
   1698  2cfa				  -	      .byte	%00111110	; SYMBOLS
   1699  2cfa				  -	      .byte	%00101010	; SYMBOLS
   1700  2cfa				  -	      .byte	%00011100	; SYMBOLS
   1701  2cfa				  -	      .byte	%01010100	; SYMBOLS
   1702  2cfa				  -	      .byte	%00100100	; SYMBOLS
   1703  2cfa				  -	      .byte	%00000010	; SYMBOLS
   1704  2cfa				  -
   1705  2cfa				  -			;byte %00000000 ; SYMBOLS
   1706  2cfa				  -
   1707  2cfa				  -
   1708  2cfa					      endif		; fontcharARIRACE
   1709  2cfa
------- FILE titlescreen/asm/titlescreen.asm
    303  2cfa					      endif
    304  2cfa
    305  2cfa				  -	      ifconst	mk_gameselect_on
    306  2cfa				  -	      include	"titlescreen/gameselect_image.asm"
    307  2cfa					      endif
    308  2cfa
    309  2cfa				  -	      ifconst	mk_player_on
    310  2cfa				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2cfa					      endif		;mk_player_on
    312  2cfa
    313  2cfa
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex2-scroller\ex2-scroller.bas.asm
    267  2cfa
    268  2cfa					      if	ECHO2
      730 bytes of ROM space left in bank 2
    269  2cfa					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    270  2cfa					      endif
    271  2cfa		       00 01	   ECHO2      =	1
    272  2fd4					      ORG	$2FF4-bscode_length
    273  2fd4					      RORG	$BFF4-bscode_length
    274  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    275  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    276  2fd6				  -	      stx	FASTFETCH
    277  2fd6					      endif
    278  2fd6		       9a		      txs
    279  2fd7				  -	      if	bankswitch == 64
    280  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    281  2fd7					      else
    282  2fd7		       a9 f2		      lda	#>(start-1)
    283  2fd9					      endif
    284  2fd9		       48		      pha
    285  2fda		       a9 4f		      lda	#<(start-1)
    286  2fdc		       48		      pha
    287  2fdd		       48		      pha
    288  2fde		       8a		      txa
    289  2fdf		       48		      pha
    290  2fe0		       ba		      tsx
    291  2fe1					      if	bankswitch != 64
    292  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    293  2fe3		       2a		      rol
    294  2fe4		       2a		      rol
    295  2fe5		       2a		      rol
    296  2fe6		       2a		      rol
    297  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    298  2fe9		       aa		      tax
    299  2fea		       e8		      inx
    300  2feb				  -	      else
    301  2feb				  -	      lda	4,x	; get high byte of return address
    302  2feb				  -	      tay
    303  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    304  2feb				  -	      sta	4,x
    305  2feb				  -	      tya
    306  2feb				  -	      lsr
    307  2feb				  -	      lsr
    308  2feb				  -	      lsr
    309  2feb				  -	      lsr
    310  2feb				  -	      tax
    311  2feb				  -	      inx
    312  2feb					      endif
    313  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    314  2fee		       68		      pla
    315  2fef		       aa		      tax
    316  2ff0		       68		      pla
    317  2ff1		       60		      rts
    318  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    319  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    320  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    321  2ff2					      endif
    322  2ffc					      ORG	$2FFC
    323  2ffc					      RORG	$BFFC
    324  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    325  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    326  3000					      ORG	$3000
    327  3000					      RORG	$D000
    328  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    329  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    330  3000					      endif
    331  3000		       00 01	   ECHO3      =	1
    332  3fd4					      ORG	$3FF4-bscode_length
    333  3fd4					      RORG	$DFF4-bscode_length
    334  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    335  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    336  3fd6				  -	      stx	FASTFETCH
    337  3fd6					      endif
    338  3fd6		       9a		      txs
    339  3fd7				  -	      if	bankswitch == 64
    340  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    341  3fd7					      else
    342  3fd7		       a9 f2		      lda	#>(start-1)
    343  3fd9					      endif
    344  3fd9		       48		      pha
    345  3fda		       a9 4f		      lda	#<(start-1)
    346  3fdc		       48		      pha
    347  3fdd		       48		      pha
    348  3fde		       8a		      txa
    349  3fdf		       48		      pha
    350  3fe0		       ba		      tsx
    351  3fe1					      if	bankswitch != 64
    352  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    353  3fe3		       2a		      rol
    354  3fe4		       2a		      rol
    355  3fe5		       2a		      rol
    356  3fe6		       2a		      rol
    357  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    358  3fe9		       aa		      tax
    359  3fea		       e8		      inx
    360  3feb				  -	      else
    361  3feb				  -	      lda	4,x	; get high byte of return address
    362  3feb				  -	      tay
    363  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    364  3feb				  -	      sta	4,x
    365  3feb				  -	      tya
    366  3feb				  -	      lsr
    367  3feb				  -	      lsr
    368  3feb				  -	      lsr
    369  3feb				  -	      lsr
    370  3feb				  -	      tax
    371  3feb				  -	      inx
    372  3feb					      endif
    373  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    374  3fee		       68		      pla
    375  3fef		       aa		      tax
    376  3ff0		       68		      pla
    377  3ff1		       60		      rts
    378  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    379  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    380  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    381  3ff2					      endif
    382  3ffc					      ORG	$3FFC
    383  3ffc					      RORG	$DFFC
    384  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    385  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    386  4000					      ORG	$4000
    387  4000					      RORG	$F000
    388  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
    389  4000
    390  4000							; This is a 2-line kernel!
    391  4000					      ifnconst	vertical_reflect
    392  4000				   kernel
    393  4000					      endif
    394  4000		       85 02		      sta	WSYNC
    395  4002		       a9 ff		      lda	#255
    396  4004		       8d 96 02 	      sta	TIM64T
    397  4007
    398  4007		       a9 01		      lda	#1
    399  4009		       85 27		      sta	VDELBL
    400  400b		       85 25		      sta	VDELP0
    401  400d		       a6 92		      ldx	ballheight
    402  400f		       e8		      inx
    403  4010		       e8		      inx
    404  4011		       86 9f		      stx	temp4
    405  4013		       a5 86		      lda	player1y
    406  4015		       85 9e		      sta	temp3
    407  4017
    408  4017				  -	      ifconst	shakescreen
    409  4017				  -	      jsr	doshakescreen
    410  4017					      else
    411  4017		       a6 90		      ldx	missile0height
    412  4019		       e8		      inx
    413  401a					      endif
    414  401a
    415  401a		       e8		      inx
    416  401b		       86 f6		      stx	stack1
    417  401d
    418  401d		       a5 89		      lda	bally
    419  401f		       85 f7		      sta	stack2
    420  4021
    421  4021		       a5 85		      lda	player0y
    422  4023		       a2 00		      ldx	#0
    423  4025		       85 02		      sta	WSYNC
    424  4027		       86 1b		      stx	GRP0
    425  4029		       86 1c		      stx	GRP1
    426  402b		       86 0e		      stx	PF1L
    427  402d		       86 0f		      stx	PF2
    428  402f		       86 2c		      stx	CXCLR
    429  4031				  -	      ifconst	readpaddle
    430  4031				  -	      stx	paddle
    431  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    433  4033					      endif
    434  4033
    435  4033		       95 9d		      sta	temp2,x
    436  4035
    437  4035							;store these so they can be retrieved later
    438  4035					      ifnconst	pfres
    439  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    440  4037				  -	      else
    441  4037				  -	      ldx	#132-pfres*pfwidth
    442  4037					      endif
    443  4037
    444  4037		       c6 85		      dec	player0y
    445  4039
    446  4039		       a5 91		      lda	missile0y
    447  403b		       85 a0		      sta	temp5
    448  403d		       a5 88		      lda	missile1y
    449  403f		       85 a1		      sta	temp6
    450  4041
    451  4041		       a5 ef		      lda	playfieldpos
    452  4043		       85 9c		      sta	temp1
    453  4045
    454  4045				  -	      ifconst	pfrowheight
    455  4045				  -	      lda	#pfrowheight+2
    456  4045					      else
    457  4045					      ifnconst	pfres
    458  4045		       a9 0a		      lda	#10
    459  4047				  -	      else
    460  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    461  4047					      endif
    462  4047					      endif
    463  4047		       18		      clc
    464  4048		       e5 ef		      sbc	playfieldpos
    465  404a		       85 ef		      sta	playfieldpos
    466  404c		       4c 74 f0 	      jmp	.startkernel
    467  404f
    468  404f				   .skipDrawP0
    469  404f		       a9 00		      lda	#0
    470  4051		       a8		      tay
    471  4052		       4c a2 f0 	      jmp	.continueP0
    472  4055
    473  4055				   .skipDrawP1
    474  4055		       a9 00		      lda	#0
    475  4057		       a8		      tay
    476  4058		       4c 7e f0 	      jmp	.continueP1
    477  405b
    478  405b				   .kerloop		; enter at cycle 59??
    479  405b
    480  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    482  405c				   continuekernel2
    483  405c		       a5 92		      lda	ballheight
    484  405e
    485  405e				  -	      ifconst	pfres
    486  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    487  405e				  -	      sty	PF1L	;3
    488  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    489  405e				  -	      sty	PF2L	;3
    490  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    491  405e				  -	      sty	PF1R	; 3 too early?
    492  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    493  405e				  -	      sty	PF2R	;3
    494  405e					      else
    495  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    496  4060		       84 0e		      sty	PF1L	;3
    497  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    498  4064		       84 0f		      sty	PF2L	;3
    499  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    500  4068		       84 0e		      sty	PF1R	; 3 too early?
    501  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    502  406c		       84 0f		      sty	PF2R	;3
    503  406e					      endif
    504  406e
    505  406e							; should be playfield+$38 for width=2
    506  406e
    507  406e		       c7 89		      dcp	bally
    508  4070		       2a		      rol
    509  4071		       2a		      rol
    510  4072							; rol
    511  4072							; rol
    512  4072				   goback
    513  4072		       85 1f		      sta	ENABL
    514  4074				   .startkernel
    515  4074		       a5 8f		      lda	player1height	;3
    516  4076		       c7 86		      dcp	player1y	;5
    517  4078		       90 db		      bcc	.skipDrawP1	;2
    518  407a		       a4 86		      ldy	player1y	;3
    519  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    520  407e							; so it doesn't cross a page boundary!
    521  407e
    522  407e				   .continueP1
    523  407e		       85 1c		      sta	GRP1	;3
    524  4080
    525  4080					      ifnconst	player1colors
    526  4080		       a5 87		      lda	missile1height	;3
    527  4082		       c7 88		      dcp	missile1y	;5
    528  4084		       2a		      rol		;2
    529  4085		       2a		      rol		;2
    530  4086		       85 1e		      sta	ENAM1	;3
    531  4088				  -	      else
    532  4088				  -	      lda	(player1color),y
    533  4088				  -	      sta	COLUP1
    534  4088				  -	      ifnconst	playercolors
    535  4088				  -	      sleep	7
    536  4088				  -	      else
    537  4088				  -	      lda.w	player0colorstore
    538  4088				  -	      sta	COLUP0
    539  4088				  -	      endif
    540  4088					      endif
    541  4088
    542  4088				  -	      ifconst	pfres
    543  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    544  4088				  -	      sta	PF1L	;3
    545  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    546  4088				  -	      sta	PF2L	;3
    547  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    548  4088				  -	      sta	PF1R	; 3 too early?
    549  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    550  4088				  -	      sta	PF2R	;3
    551  4088					      else
    552  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    553  408a		       85 0e		      sta	PF1L	;3
    554  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    555  408e		       85 0f		      sta	PF2L	;3
    556  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    557  4092		       85 0e		      sta	PF1R	; 3 too early?
    558  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    559  4096		       85 0f		      sta	PF2R	;3
    560  4098					      endif
    561  4098							; sleep 3
    562  4098
    563  4098		       a5 8e		      lda	player0height
    564  409a		       c7 85		      dcp	player0y
    565  409c		       90 b1		      bcc	.skipDrawP0
    566  409e		       a4 85		      ldy	player0y
    567  40a0		       b1 8a		      lda	(player0pointer),y
    568  40a2				   .continueP0
    569  40a2		       85 1b		      sta	GRP0
    570  40a4
    571  40a4					      ifnconst	no_blank_lines
    572  40a4					      ifnconst	playercolors
    573  40a4		       a5 90		      lda	missile0height	;3
    574  40a6		       c7 91		      dcp	missile0y	;5
    575  40a8		       e5 f6		      sbc	stack1
    576  40aa		       85 1d		      sta	ENAM0	;3
    577  40ac				  -	      else
    578  40ac				  -	      lda	(player0color),y
    579  40ac				  -	      sta	player0colorstore
    580  40ac				  -	      sleep	6
    581  40ac					      endif
    582  40ac		       c6 9c		      dec	temp1
    583  40ae		       d0 ab		      bne	continuekernel
    584  40b0				  -	      else
    585  40b0				  -	      dec	temp1
    586  40b0				  -	      beq	altkernel2
    587  40b0				  -	      ifconst	readpaddle
    588  40b0				  -	      ldy	currentpaddle
    589  40b0				  -	      lda	INPT0,y
    590  40b0				  -	      bpl	noreadpaddle
    591  40b0				  -	      inc	paddle
    592  40b0				  -	      jmp	continuekernel2
    593  40b0				  -noreadpaddle
    594  40b0				  -	      sleep	2
    595  40b0				  -	      jmp	continuekernel
    596  40b0				  -	      else
    597  40b0				  -	      ifnconst	playercolors
    598  40b0				  -	      ifconst	PFcolors
    599  40b0				  -	      txa
    600  40b0				  -	      tay
    601  40b0				  -	      lda	(pfcolortable),y
    602  40b0				  -	      ifnconst	backgroundchange
    603  40b0				  -	      sta	COLUPF
    604  40b0				  -	      else
    605  40b0				  -	      sta	COLUBK
    606  40b0				  -	      endif
    607  40b0				  -	      jmp	continuekernel
    608  40b0				  -	      else
    609  40b0				  -	      ifconst	kernelmacrodef
    610  40b0				  -	      kernelmacro
    611  40b0				  -	      else
    612  40b0				  -	      sleep	12
    613  40b0				  -	      endif
    614  40b0				  -	      endif
    615  40b0				  -	      else
    616  40b0				  -	      lda	(player0color),y
    617  40b0				  -	      sta	player0colorstore
    618  40b0				  -	      sleep	4
    619  40b0				  -	      endif
    620  40b0				  -	      jmp	continuekernel
    621  40b0				  -	      endif
    622  40b0				  -altkernel2
    623  40b0				  -	      txa
    624  40b0				  -	      ifnconst	vertical_reflect
    625  40b0				  -	      sbx	#256-pfwidth
    626  40b0				  -	      else
    627  40b0				  -	      sbx	#256-pfwidth/2
    628  40b0				  -	      endif
    629  40b0				  -	      bmi	lastkernelline
    630  40b0				  -	      ifconst	pfrowheight
    631  40b0				  -	      lda	#pfrowheight
    632  40b0				  -	      else
    633  40b0				  -	      ifnconst	pfres
    634  40b0				  -	      lda	#8
    635  40b0				  -	      else
    636  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    637  40b0				  -	      endif
    638  40b0				  -	      endif
    639  40b0				  -	      sta	temp1
    640  40b0				  -	      jmp	continuekernel
    641  40b0					      endif
    642  40b0
    643  40b0				   altkernel
    644  40b0
    645  40b0				  -	      ifconst	PFmaskvalue
    646  40b0				  -	      lda	#PFmaskvalue
    647  40b0					      else
    648  40b0		       a9 00		      lda	#0
    649  40b2					      endif
    650  40b2		       85 0e		      sta	PF1L
    651  40b4		       85 0f		      sta	PF2
    652  40b6
    653  40b6
    654  40b6							;sleep 3
    655  40b6
    656  40b6							;28 cycles to fix things
    657  40b6							;minus 11=17
    658  40b6
    659  40b6							; lax temp4
    660  40b6							; clc
    661  40b6		       8a		      txa
    662  40b7					      ifnconst	vertical_reflect
    663  40b7		       cb fc		      sbx	#256-pfwidth
    664  40b9				  -	      else
    665  40b9				  -	      sbx	#256-pfwidth/2
    666  40b9					      endif
    667  40b9
    668  40b9		       30 12		      bmi	lastkernelline
    669  40bb
    670  40bb				  -	      ifconst	PFcolorandheight
    671  40bb				  -	      ifconst	pfres
    672  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    673  40bb				  -	      else
    674  40bb				  -	      ldy	playfieldcolorandheight-87,x
    675  40bb				  -	      endif
    676  40bb				  -	      ifnconst	backgroundchange
    677  40bb				  -	      sty	COLUPF
    678  40bb				  -	      else
    679  40bb				  -	      sty	COLUBK
    680  40bb				  -	      endif
    681  40bb				  -	      ifconst	pfres
    682  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    683  40bb				  -	      else
    684  40bb				  -	      lda	playfieldcolorandheight-88,x
    685  40bb				  -	      endif
    686  40bb				  -	      sta.w	temp1
    687  40bb					      endif
    688  40bb				  -	      ifconst	PFheights
    689  40bb				  -	      lsr
    690  40bb				  -	      lsr
    691  40bb				  -	      tay
    692  40bb				  -	      lda	(pfheighttable),y
    693  40bb				  -	      sta.w	temp1
    694  40bb					      endif
    695  40bb				  -	      ifconst	PFcolors
    696  40bb				  -	      tay
    697  40bb				  -	      lda	(pfcolortable),y
    698  40bb				  -	      ifnconst	backgroundchange
    699  40bb				  -	      sta	COLUPF
    700  40bb				  -	      else
    701  40bb				  -	      sta	COLUBK
    702  40bb				  -	      endif
    703  40bb				  -	      ifconst	pfrowheight
    704  40bb				  -	      lda	#pfrowheight
    705  40bb				  -	      else
    706  40bb				  -	      ifnconst	pfres
    707  40bb				  -	      lda	#8
    708  40bb				  -	      else
    709  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    710  40bb				  -	      endif
    711  40bb				  -	      endif
    712  40bb				  -	      sta	temp1
    713  40bb					      endif
    714  40bb					      ifnconst	PFcolorandheight
    715  40bb					      ifnconst	PFcolors
    716  40bb					      ifnconst	PFheights
    717  40bb					      ifnconst	no_blank_lines
    718  40bb							; read paddle 0
    719  40bb							; lo-res paddle read
    720  40bb							; bit INPT0
    721  40bb							; bmi paddleskipread
    722  40bb							; inc paddle0
    723  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    725  40c0				  -	      ifconst	pfrowheight
    726  40c0				  -	      lda	#pfrowheight
    727  40c0					      else
    728  40c0					      ifnconst	pfres
    729  40c0		       a9 08		      lda	#8
    730  40c2				  -	      else
    731  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    732  40c2					      endif
    733  40c2					      endif
    734  40c2		       85 9c		      sta	temp1
    735  40c4					      endif
    736  40c4					      endif
    737  40c4					      endif
    738  40c4					      endif
    739  40c4
    740  40c4
    741  40c4		       a5 92		      lda	ballheight
    742  40c6		       c7 89		      dcp	bally
    743  40c8		       e5 9f		      sbc	temp4
    744  40ca
    745  40ca
    746  40ca		       4c 72 f0 	      jmp	goback
    747  40cd
    748  40cd
    749  40cd					      ifnconst	no_blank_lines
    750  40cd				   lastkernelline
    751  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    753  40d2				  -	      else
    754  40d2				  -	      ldy	#124
    755  40d2				  -	      lda	(pfcolortable),y
    756  40d2				  -	      sta	COLUPF
    757  40d2					      endif
    758  40d2
    759  40d2				  -	      ifconst	PFheights
    760  40d2				  -	      ldx	#1
    761  40d2				  -			;sleep 4
    762  40d2				  -	      sleep	3	; this was over 1 cycle
    763  40d2					      else
    764  40d2		       a6 ef		      ldx	playfieldpos
    765  40d4							;sleep 3
      0  40d4					      sleep	2	; this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    767  40d5					      endif
    768  40d5
    769  40d5		       4c 1b f1 	      jmp	enterlastkernel
    770  40d8
    771  40d8				  -	      else
    772  40d8				  -lastkernelline
    773  40d8				  -
    774  40d8				  -	      ifconst	PFheights
    775  40d8				  -	      ldx	#1
    776  40d8				  -			;sleep 5
    777  40d8				  -	      sleep	4	; this was over 1 cycle
    778  40d8				  -	      else
    779  40d8				  -	      ldx	playfieldpos
    780  40d8				  -			;sleep 4
    781  40d8				  -	      sleep	3	; this was over 1 cycle
    782  40d8				  -	      endif
    783  40d8				  -
    784  40d8				  -	      cpx	#0
    785  40d8				  -	      bne	.enterfromNBL
    786  40d8				  -	      jmp	no_blank_lines_bailout
    787  40d8					      endif
    788  40d8
    789  40d8					      if	((<*)>$d5)
    790  4100		       00 00 00 00*	      align	256
    791  4100					      endif
    792  4100							; this is a kludge to prevent page wrapping - fix!!!
    793  4100
    794  4100				   .skipDrawlastP1
    795  4100		       a9 00		      lda	#0
    796  4102		       a8		      tay		; added so we don't cross a page
    797  4103		       4c 2d f1 	      jmp	.continuelastP1
    798  4106
    799  4106				   .endkerloop		; enter at cycle 59??
    800  4106
    801  4106		       ea		      nop
    802  4107
    803  4107				   .enterfromNBL
    804  4107				  -	      ifconst	pfres
    805  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    806  4107				  -	      sty	PF1L	;3
    807  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    808  4107				  -	      sty	PF2L	;3
    809  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    810  4107				  -	      sty	PF1R	; possibly too early?
    811  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    812  4107				  -	      sty	PF2R	;3
    813  4107					      else
    814  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    815  410a		       84 0e		      sty	PF1L	;3
    816  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    817  410f		       84 0f		      sty	PF2L	;3
    818  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    819  4114		       84 0e		      sty	PF1R	; possibly too early?
    820  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    821  4119		       84 0f		      sty	PF2R	;3
    822  411b					      endif
    823  411b
    824  411b				   enterlastkernel
    825  411b		       a5 92		      lda	ballheight
    826  411d
    827  411d							; tya
    828  411d		       c7 89		      dcp	bally
    829  411f							; sleep 4
    830  411f
    831  411f							; sbc stack3
    832  411f		       2a		      rol
    833  4120		       2a		      rol
    834  4121		       85 1f		      sta	ENABL
    835  4123
    836  4123		       a5 8f		      lda	player1height	;3
    837  4125		       c7 86		      dcp	player1y	;5
    838  4127		       90 d7		      bcc	.skipDrawlastP1
    839  4129		       a4 86		      ldy	player1y	;3
    840  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    841  412d							; so it doesn't cross a page boundary!
    842  412d
    843  412d				   .continuelastP1
    844  412d		       85 1c		      sta	GRP1	;3
    845  412f
    846  412f					      ifnconst	player1colors
    847  412f		       a5 87		      lda	missile1height	;3
    848  4131		       c7 88		      dcp	missile1y	;5
    849  4133				  -	      else
    850  4133				  -	      lda	(player1color),y
    851  4133				  -	      sta	COLUP1
    852  4133					      endif
    853  4133
    854  4133		       ca		      dex
    855  4134							;dec temp4 ; might try putting this above PF writes
    856  4134		       f0 36		      beq	endkernel
    857  4136
    858  4136
    859  4136				  -	      ifconst	pfres
    860  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    861  4136				  -	      sty	PF1L	;3
    862  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    863  4136				  -	      sty	PF2L	;3
    864  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    865  4136				  -	      sty	PF1R	; possibly too early?
    866  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    867  4136				  -	      sty	PF2R	;3
    868  4136					      else
    869  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    870  4139		       84 0e		      sty	PF1L	;3
    871  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    872  413e		       84 0f		      sty	PF2L	;3
    873  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    874  4143		       84 0e		      sty	PF1R	; possibly too early?
    875  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    876  4148		       84 0f		      sty	PF2R	;3
    877  414a					      endif
    878  414a
    879  414a					      ifnconst	player1colors
    880  414a		       2a		      rol		;2
    881  414b		       2a		      rol		;2
    882  414c		       85 1e		      sta	ENAM1	;3
    883  414e				  -	      else
    884  414e				  -	      ifnconst	playercolors
    885  414e				  -	      sleep	7
    886  414e				  -	      else
    887  414e				  -	      lda.w	player0colorstore
    888  414e				  -	      sta	COLUP0
    889  414e				  -	      endif
    890  414e					      endif
    891  414e
    892  414e		       ad 8e 00 	      lda.w	player0height
    893  4151		       c7 85		      dcp	player0y
    894  4153		       90 11		      bcc	.skipDrawlastP0
    895  4155		       a4 85		      ldy	player0y
    896  4157		       b1 8a		      lda	(player0pointer),y
    897  4159				   .continuelastP0
    898  4159		       85 1b		      sta	GRP0
    899  415b
    900  415b
    901  415b
    902  415b					      ifnconst	no_blank_lines
    903  415b		       a5 90		      lda	missile0height	;3
    904  415d		       c7 91		      dcp	missile0y	;5
    905  415f		       e5 f6		      sbc	stack1
    906  4161		       85 1d		      sta	ENAM0	;3
    907  4163		       4c 06 f1 	      jmp	.endkerloop
    908  4166				  -	      else
    909  4166				  -	      ifconst	readpaddle
    910  4166				  -	      ldy	currentpaddle
    911  4166				  -	      lda	INPT0,y
    912  4166				  -	      bpl	noreadpaddle2
    913  4166				  -	      inc	paddle
    914  4166				  -	      jmp	.endkerloop
    915  4166				  -noreadpaddle2
    916  4166				  -	      sleep	4
    917  4166				  -	      jmp	.endkerloop
    918  4166				  -	      else		; no_blank_lines and no paddle reading
    919  4166				  -	      pla
    920  4166				  -	      pha		; 14 cycles in 4 bytes
    921  4166				  -	      pla
    922  4166				  -	      pha
    923  4166				  -			; sleep 14
    924  4166				  -	      jmp	.endkerloop
    925  4166				  -	      endif
    926  4166					      endif
    927  4166
    928  4166
    929  4166							; ifconst donepaddleskip
    930  4166							;paddleskipread
    931  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    932  4166							; plus we get a lo-res paddle read
    933  4166							; bmi donepaddleskip
    934  4166							; endif
    935  4166
    936  4166				   .skipDrawlastP0
    937  4166		       a9 00		      lda	#0
    938  4168		       a8		      tay
    939  4169		       4c 59 f1 	      jmp	.continuelastP0
    940  416c
    941  416c				  -	      ifconst	no_blank_lines
    942  416c				  -no_blank_lines_bailout
    943  416c				  -	      ldx	#0
    944  416c					      endif
    945  416c
    946  416c				   endkernel
    947  416c							; 6 digit score routine
    948  416c		       86 0e		      stx	PF1
    949  416e		       86 0f		      stx	PF2
    950  4170		       86 0d		      stx	PF0
    951  4172		       18		      clc
    952  4173
    953  4173				  -	      ifconst	pfrowheight
    954  4173				  -	      lda	#pfrowheight+2
    955  4173					      else
    956  4173					      ifnconst	pfres
    957  4173		       a9 0a		      lda	#10
    958  4175				  -	      else
    959  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    960  4175					      endif
    961  4175					      endif
    962  4175
    963  4175		       e5 ef		      sbc	playfieldpos
    964  4177		       85 ef		      sta	playfieldpos
    965  4179		       8a		      txa
    966  417a
    967  417a				  -	      ifconst	shakescreen
    968  417a				  -	      bit	shakescreen
    969  417a				  -	      bmi	noshakescreen2
    970  417a				  -	      ldx	#$3D
    971  417a				  -noshakescreen2
    972  417a					      endif
    973  417a
    974  417a		       95 02		      sta	WSYNC,x
    975  417c
    976  417c							; STA WSYNC ;first one, need one more
    977  417c		       85 0b		      sta	REFP0
    978  417e		       85 0c		      sta	REFP1
    979  4180		       85 1b		      STA	GRP0
    980  4182		       85 1c		      STA	GRP1
    981  4184							; STA PF1
    982  4184							; STA PF2
    983  4184		       85 2b		      sta	HMCLR
    984  4186		       85 1d		      sta	ENAM0
    985  4188		       85 1e		      sta	ENAM1
    986  418a		       85 1f		      sta	ENABL
    987  418c
    988  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    989  418e		       85 85		      sta	player0y
    990  4190		       a5 9e		      lda	temp3
    991  4192		       85 86		      sta	player1y
    992  4194					      ifnconst	player1colors
    993  4194		       a5 a1		      lda	temp6
    994  4196		       85 88		      sta	missile1y
    995  4198					      endif
    996  4198					      ifnconst	playercolors
    997  4198					      ifnconst	readpaddle
    998  4198		       a5 a0		      lda	temp5
    999  419a		       85 91		      sta	missile0y
   1000  419c					      endif
   1001  419c					      endif
   1002  419c		       a5 f7		      lda	stack2
   1003  419e		       85 89		      sta	bally
   1004  41a0
   1005  41a0							; strangely, this isn't required any more. might have
   1006  41a0							; resulted from the no_blank_lines score bounce fix
   1007  41a0							;ifconst no_blank_lines
   1008  41a0							;sta WSYNC
   1009  41a0							;endif
   1010  41a0
   1011  41a0		       ad 84 02 	      lda	INTIM
   1012  41a3		       18		      clc
   1013  41a4					      ifnconst	vblank_time
   1014  41a4		       69 8e		      adc	#43+12+87
   1015  41a6				  -	      else
   1016  41a6				  -	      adc	#vblank_time+12+87
   1017  41a6				  -
   1018  41a6					      endif
   1019  41a6							; sta WSYNC
   1020  41a6		       8d 96 02 	      sta	TIM64T
   1021  41a9
   1022  41a9				  -	      ifconst	minikernel
   1023  41a9				  -	      jsr	minikernel
   1024  41a9					      endif
   1025  41a9
   1026  41a9							; now reassign temp vars for score pointers
   1027  41a9
   1028  41a9							; score pointers contain:
   1029  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1030  41a9							; swap lo2->temp1
   1031  41a9							; swap lo4->temp3
   1032  41a9							; swap lo6->temp5
   1033  41a9					      ifnconst	noscore
   1034  41a9		       a5 97		      lda	scorepointers+1
   1035  41ab							; ldy temp1
   1036  41ab		       85 9c		      sta	temp1
   1037  41ad							; sty scorepointers+1
   1038  41ad
   1039  41ad		       a5 99		      lda	scorepointers+3
   1040  41af							; ldy temp3
   1041  41af		       85 9e		      sta	temp3
   1042  41b1							; sty scorepointers+3
   1043  41b1
   1044  41b1
   1045  41b1		       85 2b		      sta	HMCLR
   1046  41b3		       ba		      tsx
   1047  41b4		       86 f6		      stx	stack1
   1048  41b6		       a2 e0		      ldx	#$E0
   1049  41b8		       86 20		      stx	HMP0
   1050  41ba
   1051  41ba		       a5 a3		      LDA	scorecolor
   1052  41bc		       85 06		      STA	COLUP0
   1053  41be		       85 07		      STA	COLUP1
   1054  41c0				  -	      ifconst	scorefade
   1055  41c0				  -	      STA	stack2
   1056  41c0					      endif
   1057  41c0				  -	      ifconst	pfscore
   1058  41c0				  -	      lda	pfscorecolor
   1059  41c0				  -	      sta	COLUPF
   1060  41c0					      endif
   1061  41c0		       85 02		      sta	WSYNC
   1062  41c2		       a2 00		      ldx	#0
   1063  41c4		       86 1b		      STx	GRP0
   1064  41c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1065  41c8
   1066  41c8		       a5 9b		      lda	scorepointers+5
   1067  41ca							; ldy temp5
   1068  41ca		       95 a0		      sta	temp5,x
   1069  41cc							; sty scorepointers+5
   1070  41cc		       a9 ff		      lda	#>scoretable
   1071  41ce		       85 97		      sta	scorepointers+1
   1072  41d0		       85 99		      sta	scorepointers+3
   1073  41d2		       85 9b		      sta	scorepointers+5
   1074  41d4		       85 9d		      sta	temp2
   1075  41d6		       85 9f		      sta	temp4
   1076  41d8		       85 a1		      sta	temp6
   1077  41da		       a0 07		      LDY	#7
   1078  41dc		       84 25		      STY	VDELP0
   1079  41de		       85 10		      STA	RESP0
   1080  41e0		       85 11		      STA	RESP1
   1081  41e2
   1082  41e2
   1083  41e2		       a9 03		      LDA	#$03
   1084  41e4		       85 04		      STA	NUSIZ0
   1085  41e6		       85 05		      STA	NUSIZ1
   1086  41e8		       85 26		      STA	VDELP1
   1087  41ea		       a9 f0		      LDA	#$F0
   1088  41ec		       85 21		      STA	HMP1
   1089  41ee		       b1 96		      lda	(scorepointers),y
   1090  41f0		       85 1b		      sta	GRP0
   1091  41f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   1092  41f4		       4c 08 f2 	      jmp	beginscore
   1093  41f7
   1094  41f7
   1095  41f7					      if	((<*)>$d4)
   1096  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1097  4200					      endif
   1098  4200
   1099  4200				   loop2
   1100  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1101  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1102  4204				  -	      ifconst	pfscore
   1103  4204				  -	      lda.w	pfscore1
   1104  4204				  -	      sta	PF1
   1105  4204					      else
   1106  4204				  -	      ifconst	scorefade
   1107  4204				  -	      sleep	2
   1108  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   1109  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   1111  4208					      endif
   1112  4208					      endif
   1113  4208							; cycle 0
   1114  4208				   beginscore
   1115  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1116  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1117  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1118  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1119  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1120  4212		       9a		      txs
   1121  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1122  4215				  -	      ifconst	scorefade
   1123  4215				  -	      lda	stack2
   1124  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   1126  4217					      endif
   1127  4217
   1128  4217				  -	      ifconst	pfscore
   1129  4217				  -	      lda	pfscore2
   1130  4217				  -	      sta	PF1
   1131  4217					      else
   1132  4217				  -	      ifconst	scorefade
   1133  4217				  -	      sta	COLUP0
   1134  4217				  -	      sta	COLUP1
   1135  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   1137  421a					      endif
   1138  421a					      endif
   1139  421a
   1140  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1141  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1142  421e		       ba		      tsx
   1143  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1144  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1145  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1146  4225		       88		      dey
   1147  4226		       10 d8		      bpl	loop2	;+2 60 180
   1148  4228
   1149  4228		       a6 f6		      ldx	stack1
   1150  422a		       9a		      txs
   1151  422b							; lda scorepointers+1
   1152  422b		       a4 9c		      ldy	temp1
   1153  422d							; sta temp1
   1154  422d		       84 97		      sty	scorepointers+1
   1155  422f
   1156  422f		       a9 00		      LDA	#0
   1157  4231		       85 0e		      sta	PF1
   1158  4233		       85 1b		      STA	GRP0
   1159  4235		       85 1c		      STA	GRP1
   1160  4237		       85 25		      STA	VDELP0
   1161  4239		       85 26		      STA	VDELP1	;do we need these
   1162  423b		       85 04		      STA	NUSIZ0
   1163  423d		       85 05		      STA	NUSIZ1
   1164  423f
   1165  423f							; lda scorepointers+3
   1166  423f		       a4 9e		      ldy	temp3
   1167  4241							; sta temp3
   1168  4241		       84 99		      sty	scorepointers+3
   1169  4243
   1170  4243							; lda scorepointers+5
   1171  4243		       a4 a0		      ldy	temp5
   1172  4245							; sta temp5
   1173  4245		       84 9b		      sty	scorepointers+5
   1174  4247					      endif		;noscore
   1175  4247				  -	      ifconst	readpaddle
   1176  4247				  -	      lda	#%11000010
   1177  4247					      else
   1178  4247				  -	      ifconst	qtcontroller
   1179  4247				  -	      lda	qtcontroller
   1180  4247				  -	      lsr		; bit 0 in carry
   1181  4247				  -	      lda	#4
   1182  4247				  -	      ror		; carry into top of A
   1183  4247					      else
   1184  4247		       a9 02		      lda	#2
   1185  4249					      endif		; qtcontroller
   1186  4249					      endif		; readpaddle
   1187  4249		       85 02		      sta	WSYNC
   1188  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1190  4250				  -	      ifconst	shakescreen
   1191  4250				  -doshakescreen
   1192  4250				  -	      bit	shakescreen
   1193  4250				  -	      bmi	noshakescreen
   1194  4250				  -	      sta	WSYNC
   1195  4250				  -noshakescreen
   1196  4250				  -	      ldx	missile0height
   1197  4250				  -	      inx
   1198  4250				  -	      rts
   1199  4250					      endif
   1200  4250
   1201  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1202  4250
   1203  4250				   start
   1204  4250		       78		      sei
   1205  4251		       d8		      cld
   1206  4252		       a0 00		      ldy	#0
   1207  4254		       a5 d0		      lda	$D0
   1208  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1209  4258		       d0 07		      bne	MachineIs2600
   1210  425a		       a5 d1		      lda	$D1
   1211  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1212  425e		       d0 01		      bne	MachineIs2600
   1213  4260		       88		      dey
   1214  4261				   MachineIs2600
   1215  4261		       a2 00		      ldx	#0
   1216  4263		       8a		      txa
   1217  4264				   clearmem
   1218  4264		       e8		      inx
   1219  4265		       9a		      txs
   1220  4266		       48		      pha
   1221  4267		       d0 fb		      bne	clearmem
   1222  4269		       84 9c		      sty	temp1
   1223  426b					      ifnconst	multisprite
   1224  426b				  -	      ifconst	pfrowheight
   1225  426b				  -	      lda	#pfrowheight
   1226  426b					      else
   1227  426b				  -	      ifconst	pfres
   1228  426b				  -	      lda	#(96/pfres)
   1229  426b					      else
   1230  426b		       a9 08		      lda	#8
   1231  426d					      endif
   1232  426d					      endif
   1233  426d		       85 ef		      sta	playfieldpos
   1234  426f					      endif
   1235  426f		       a2 05		      ldx	#5
   1236  4271				   initscore
   1237  4271		       a9 74		      lda	#<scoretable
   1238  4273		       95 96		      sta	scorepointers,x
   1239  4275		       ca		      dex
   1240  4276		       10 f9		      bpl	initscore
   1241  4278		       a9 01		      lda	#1
   1242  427a		       85 0a		      sta	CTRLPF
   1243  427c		       0d 84 02 	      ora	INTIM
   1244  427f		       85 a2		      sta	rand
   1245  4281
   1246  4281				  -	      ifconst	multisprite
   1247  4281				  -	      jsr	multisprite_setup
   1248  4281					      endif
   1249  4281
   1250  4281				  -	      ifnconst	bankswitch
   1251  4281				  -	      jmp	game
   1252  4281					      else
   1253  4281		       a9 8f		      lda	#>(game-1)
   1254  4283		       48		      pha
   1255  4284		       a9 ff		      lda	#<(game-1)
   1256  4286		       48		      pha
   1257  4287		       48		      pha
   1258  4288		       48		      pha
   1259  4289		       a2 01		      ldx	#1
   1260  428b		       4c eb ff 	      jmp	BS_jsr
   1261  428e					      endif
   1262  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1263  428e
   1264  428e							; playfield drawing routines
   1265  428e							; you get a 32x12 bitmapped display in a single color :)
   1266  428e							; 0-31 and 0-11
   1267  428e
   1268  428e				   pfclear		; clears playfield - or fill with pattern
   1269  428e				  -	      ifconst	pfres
   1270  428e				  -	      ldx	#pfres*pfwidth-1
   1271  428e					      else
   1272  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1273  4290					      endif
   1274  4290				   pfclear_loop
   1275  4290					      ifnconst	superchip
   1276  4290		       95 a4		      sta	playfield,x
   1277  4292				  -	      else
   1278  4292				  -	      sta	playfield-128,x
   1279  4292					      endif
   1280  4292		       ca		      dex
   1281  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1283  4298
   1284  4298				   setuppointers
   1285  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1286  429a		       aa		      tax		; put x-value in x 
   1287  429b		       4a		      lsr
   1288  429c		       4a		      lsr
   1289  429d		       4a		      lsr		; divide x pos by 8 
   1290  429e		       85 9c		      sta	temp1
   1291  42a0		       98		      tya
   1292  42a1		       0a		      asl
   1293  42a2					      if	pfwidth=4
   1294  42a2		       0a		      asl		; multiply y pos by 4
   1295  42a3					      endif		; else multiply by 2
   1296  42a3		       18		      clc
   1297  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1298  42a6		       a8		      tay		; put the value in y
   1299  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1300  42a9		       60		      rts
   1301  42aa
   1302  42aa				   pfread
   1303  42aa							;x=xvalue, y=yvalue
   1304  42aa		       20 98 f2 	      jsr	setuppointers
   1305  42ad		       bd 42 f3 	      lda	setbyte,x
   1306  42b0		       39 a4 00 	      and	playfield,y
   1307  42b3		       5d 42 f3 	      eor	setbyte,x
   1308  42b6							; beq readzero
   1309  42b6							; lda #1
   1310  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1312  42b9
   1313  42b9				   pfpixel
   1314  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1315  42b9		       20 98 f2 	      jsr	setuppointers
   1316  42bc
   1317  42bc					      ifconst	bankswitch
   1318  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1319  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1320  42c0		       4a		      lsr
   1321  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1322  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1323  42c6		       5d 42 f3 	      eor	setbyte,x
   1324  42c9				  -	      ifconst	superchip
   1325  42c9				  -	      sta	playfield-128,y
   1326  42c9					      else
   1327  42c9		       99 a4 00 	      sta	playfield,y
   1328  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1330  42cf				   pixelon_r
   1331  42cf		       b9 a4 00 	      lda	playfield,y
   1332  42d2		       1d 42 f3 	      ora	setbyte,x
   1333  42d5				  -	      ifconst	superchip
   1334  42d5				  -	      sta	playfield-128,y
   1335  42d5					      else
   1336  42d5		       99 a4 00 	      sta	playfield,y
   1337  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1339  42db				   pixeloff_r
   1340  42db		       bd 42 f3 	      lda	setbyte,x
   1341  42de		       49 ff		      eor	#$ff
   1342  42e0		       39 a4 00 	      and	playfield,y
   1343  42e3				  -	      ifconst	superchip
   1344  42e3				  -	      sta	playfield-128,y
   1345  42e3					      else
   1346  42e3		       99 a4 00 	      sta	playfield,y
   1347  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1349  42e9
   1350  42e9				  -	      else
   1351  42e9				  -	      jmp	plotpoint
   1352  42e9					      endif
   1353  42e9
   1354  42e9				   pfhline
   1355  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1356  42e9		       20 98 f2 	      jsr	setuppointers
   1357  42ec		       4c f6 f2 	      jmp	noinc
   1358  42ef				   keepgoing
   1359  42ef		       e8		      inx
   1360  42f0		       8a		      txa
   1361  42f1		       29 07		      and	#7
   1362  42f3		       d0 01		      bne	noinc
   1363  42f5		       c8		      iny
   1364  42f6				   noinc
   1365  42f6		       20 1b f3 	      jsr	plotpoint
   1366  42f9		       e4 9e		      cpx	temp3
   1367  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1369  4300
   1370  4300				   pfvline
   1371  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1372  4300		       20 98 f2 	      jsr	setuppointers
   1373  4303		       84 9c		      sty	temp1	; store memory location offset
   1374  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1375  4307		       a5 9e		      lda	temp3
   1376  4309		       0a		      asl
   1377  430a					      if	pfwidth=4
   1378  430a		       0a		      asl		; multiply by 4
   1379  430b					      endif		; else multiply by 2
   1380  430b		       85 9e		      sta	temp3	; store it
   1381  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1382  430d							; right now, temp1=y=starting memory location, temp3=final
   1383  430d							; x should equal original x value
   1384  430d				   keepgoingy
   1385  430d		       20 1b f3 	      jsr	plotpoint
   1386  4310		       c8		      iny
   1387  4311		       c8		      iny
   1388  4312					      if	pfwidth=4
   1389  4312		       c8		      iny
   1390  4313		       c8		      iny
   1391  4314					      endif
   1392  4314		       c4 9e		      cpy	temp3
   1393  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1395  431b
   1396  431b				   plotpoint
   1397  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1398  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1399  431f		       4a		      lsr
   1400  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1401  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1402  4325		       5d 42 f3 	      eor	setbyte,x
   1403  4328				  -	      ifconst	superchip
   1404  4328				  -	      sta	playfield-128,y
   1405  4328					      else
   1406  4328		       99 a4 00 	      sta	playfield,y
   1407  432b					      endif
   1408  432b		       60		      rts
   1409  432c				   pixelon
   1410  432c		       b9 a4 00 	      lda	playfield,y
   1411  432f		       1d 42 f3 	      ora	setbyte,x
   1412  4332				  -	      ifconst	superchip
   1413  4332				  -	      sta	playfield-128,y
   1414  4332					      else
   1415  4332		       99 a4 00 	      sta	playfield,y
   1416  4335					      endif
   1417  4335		       60		      rts
   1418  4336				   pixeloff
   1419  4336		       bd 42 f3 	      lda	setbyte,x
   1420  4339		       49 ff		      eor	#$ff
   1421  433b		       39 a4 00 	      and	playfield,y
   1422  433e				  -	      ifconst	superchip
   1423  433e				  -	      sta	playfield-128,y
   1424  433e					      else
   1425  433e		       99 a4 00 	      sta	playfield,y
   1426  4341					      endif
   1427  4341		       60		      rts
   1428  4342
   1429  4342				   setbyte
   1430  4342					      ifnconst	pfcenter
   1431  4342		       80		      .byte.b	$80
   1432  4343		       40		      .byte.b	$40
   1433  4344		       20		      .byte.b	$20
   1434  4345		       10		      .byte.b	$10
   1435  4346		       08		      .byte.b	$08
   1436  4347		       04		      .byte.b	$04
   1437  4348		       02		      .byte.b	$02
   1438  4349		       01		      .byte.b	$01
   1439  434a					      endif
   1440  434a		       01		      .byte.b	$01
   1441  434b		       02		      .byte.b	$02
   1442  434c		       04		      .byte.b	$04
   1443  434d		       08		      .byte.b	$08
   1444  434e		       10		      .byte.b	$10
   1445  434f		       20		      .byte.b	$20
   1446  4350		       40		      .byte.b	$40
   1447  4351		       80		      .byte.b	$80
   1448  4352		       80		      .byte.b	$80
   1449  4353		       40		      .byte.b	$40
   1450  4354		       20		      .byte.b	$20
   1451  4355		       10		      .byte.b	$10
   1452  4356		       08		      .byte.b	$08
   1453  4357		       04		      .byte.b	$04
   1454  4358		       02		      .byte.b	$02
   1455  4359		       01		      .byte.b	$01
   1456  435a		       01		      .byte.b	$01
   1457  435b		       02		      .byte.b	$02
   1458  435c		       04		      .byte.b	$04
   1459  435d		       08		      .byte.b	$08
   1460  435e		       10		      .byte.b	$10
   1461  435f		       20		      .byte.b	$20
   1462  4360		       40		      .byte.b	$40
   1463  4361		       80		      .byte.b	$80
   1464  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1465  4362
   1466  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1467  4362		       d0 15		      bne	notleft
   1468  4364							;left
   1469  4364				  -	      ifconst	pfres
   1470  4364				  -	      ldx	#pfres*4
   1471  4364					      else
   1472  4364		       a2 30		      ldx	#48
   1473  4366					      endif
   1474  4366				   leftloop
   1475  4366		       b5 a3		      lda	playfield-1,x
   1476  4368		       4a		      lsr
   1477  4369
   1478  4369				  -	      ifconst	superchip
   1479  4369				  -	      lda	playfield-2,x
   1480  4369				  -	      rol
   1481  4369				  -	      sta	playfield-130,x
   1482  4369				  -	      lda	playfield-3,x
   1483  4369				  -	      ror
   1484  4369				  -	      sta	playfield-131,x
   1485  4369				  -	      lda	playfield-4,x
   1486  4369				  -	      rol
   1487  4369				  -	      sta	playfield-132,x
   1488  4369				  -	      lda	playfield-1,x
   1489  4369				  -	      ror
   1490  4369				  -	      sta	playfield-129,x
   1491  4369					      else
   1492  4369		       36 a2		      rol	playfield-2,x
   1493  436b		       76 a1		      ror	playfield-3,x
   1494  436d		       36 a0		      rol	playfield-4,x
   1495  436f		       76 a3		      ror	playfield-1,x
   1496  4371					      endif
   1497  4371
   1498  4371		       8a		      txa
   1499  4372		       cb 04		      sbx	#4
   1500  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1502  4379
   1503  4379				   notleft
   1504  4379		       4a		      lsr
   1505  437a		       90 15		      bcc	notright
   1506  437c							;right
   1507  437c
   1508  437c				  -	      ifconst	pfres
   1509  437c				  -	      ldx	#pfres*4
   1510  437c					      else
   1511  437c		       a2 30		      ldx	#48
   1512  437e					      endif
   1513  437e				   rightloop
   1514  437e		       b5 a0		      lda	playfield-4,x
   1515  4380		       4a		      lsr
   1516  4381				  -	      ifconst	superchip
   1517  4381				  -	      lda	playfield-3,x
   1518  4381				  -	      rol
   1519  4381				  -	      sta	playfield-131,x
   1520  4381				  -	      lda	playfield-2,x
   1521  4381				  -	      ror
   1522  4381				  -	      sta	playfield-130,x
   1523  4381				  -	      lda	playfield-1,x
   1524  4381				  -	      rol
   1525  4381				  -	      sta	playfield-129,x
   1526  4381				  -	      lda	playfield-4,x
   1527  4381				  -	      ror
   1528  4381				  -	      sta	playfield-132,x
   1529  4381					      else
   1530  4381		       36 a1		      rol	playfield-3,x
   1531  4383		       76 a2		      ror	playfield-2,x
   1532  4385		       36 a3		      rol	playfield-1,x
   1533  4387		       76 a0		      ror	playfield-4,x
   1534  4389					      endif
   1535  4389		       8a		      txa
   1536  438a		       cb 04		      sbx	#4
   1537  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1539  4391
   1540  4391				   notright
   1541  4391		       4a		      lsr
   1542  4392		       90 4b		      bcc	notup
   1543  4394							;up
   1544  4394		       4a		      lsr
   1545  4395		       90 02		      bcc	onedecup
   1546  4397		       c6 ef		      dec	playfieldpos
   1547  4399				   onedecup
   1548  4399		       c6 ef		      dec	playfieldpos
   1549  439b		       f0 02		      beq	shiftdown
   1550  439d		       10 3d		      bpl	noshiftdown2
   1551  439f				   shiftdown
   1552  439f				  -	      ifconst	pfrowheight
   1553  439f				  -	      lda	#pfrowheight
   1554  439f					      else
   1555  439f					      ifnconst	pfres
   1556  439f		       a9 08		      lda	#8
   1557  43a1				  -	      else
   1558  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1559  43a1					      endif
   1560  43a1					      endif
   1561  43a1
   1562  43a1		       85 ef		      sta	playfieldpos
   1563  43a3		       a5 a7		      lda	playfield+3
   1564  43a5		       85 9f		      sta	temp4
   1565  43a7		       a5 a6		      lda	playfield+2
   1566  43a9		       85 9e		      sta	temp3
   1567  43ab		       a5 a5		      lda	playfield+1
   1568  43ad		       85 9d		      sta	temp2
   1569  43af		       a5 a4		      lda	playfield
   1570  43b1		       85 9c		      sta	temp1
   1571  43b3		       a2 00		      ldx	#0
   1572  43b5				   up2
   1573  43b5		       b5 a8		      lda	playfield+4,x
   1574  43b7				  -	      ifconst	superchip
   1575  43b7				  -	      sta	playfield-128,x
   1576  43b7				  -	      lda	playfield+5,x
   1577  43b7				  -	      sta	playfield-127,x
   1578  43b7				  -	      lda	playfield+6,x
   1579  43b7				  -	      sta	playfield-126,x
   1580  43b7				  -	      lda	playfield+7,x
   1581  43b7				  -	      sta	playfield-125,x
   1582  43b7					      else
   1583  43b7		       95 a4		      sta	playfield,x
   1584  43b9		       b5 a9		      lda	playfield+5,x
   1585  43bb		       95 a5		      sta	playfield+1,x
   1586  43bd		       b5 aa		      lda	playfield+6,x
   1587  43bf		       95 a6		      sta	playfield+2,x
   1588  43c1		       b5 ab		      lda	playfield+7,x
   1589  43c3		       95 a7		      sta	playfield+3,x
   1590  43c5					      endif
   1591  43c5		       8a		      txa
   1592  43c6		       cb fc		      sbx	#252
   1593  43c8				  -	      ifconst	pfres
   1594  43c8				  -	      cpx	#(pfres-1)*4
   1595  43c8					      else
   1596  43c8		       e0 2c		      cpx	#44
   1597  43ca					      endif
   1598  43ca		       d0 e9		      bne	up2
   1599  43cc
   1600  43cc		       a5 9f		      lda	temp4
   1601  43ce
   1602  43ce				  -	      ifconst	superchip
   1603  43ce				  -	      ifconst	pfres
   1604  43ce				  -	      sta	playfield+pfres*4-129
   1605  43ce				  -	      lda	temp3
   1606  43ce				  -	      sta	playfield+pfres*4-130
   1607  43ce				  -	      lda	temp2
   1608  43ce				  -	      sta	playfield+pfres*4-131
   1609  43ce				  -	      lda	temp1
   1610  43ce				  -	      sta	playfield+pfres*4-132
   1611  43ce				  -	      else
   1612  43ce				  -	      sta	playfield+47-128
   1613  43ce				  -	      lda	temp3
   1614  43ce				  -	      sta	playfield+46-128
   1615  43ce				  -	      lda	temp2
   1616  43ce				  -	      sta	playfield+45-128
   1617  43ce				  -	      lda	temp1
   1618  43ce				  -	      sta	playfield+44-128
   1619  43ce				  -	      endif
   1620  43ce					      else
   1621  43ce				  -	      ifconst	pfres
   1622  43ce				  -	      sta	playfield+pfres*4-1
   1623  43ce				  -	      lda	temp3
   1624  43ce				  -	      sta	playfield+pfres*4-2
   1625  43ce				  -	      lda	temp2
   1626  43ce				  -	      sta	playfield+pfres*4-3
   1627  43ce				  -	      lda	temp1
   1628  43ce				  -	      sta	playfield+pfres*4-4
   1629  43ce					      else
   1630  43ce		       85 d3		      sta	playfield+47
   1631  43d0		       a5 9e		      lda	temp3
   1632  43d2		       85 d2		      sta	playfield+46
   1633  43d4		       a5 9d		      lda	temp2
   1634  43d6		       85 d1		      sta	playfield+45
   1635  43d8		       a5 9c		      lda	temp1
   1636  43da		       85 d0		      sta	playfield+44
   1637  43dc					      endif
   1638  43dc					      endif
   1639  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1641  43df
   1642  43df
   1643  43df				   notup
   1644  43df							;down
   1645  43df		       4a		      lsr
   1646  43e0		       b0 02		      bcs	oneincup
   1647  43e2		       e6 ef		      inc	playfieldpos
   1648  43e4				   oneincup
   1649  43e4		       e6 ef		      inc	playfieldpos
   1650  43e6		       a5 ef		      lda	playfieldpos
   1651  43e8
   1652  43e8				  -	      ifconst	pfrowheight
   1653  43e8				  -	      cmp	#pfrowheight+1
   1654  43e8					      else
   1655  43e8					      ifnconst	pfres
   1656  43e8		       c9 09		      cmp	#9
   1657  43ea				  -	      else
   1658  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1659  43ea					      endif
   1660  43ea					      endif
   1661  43ea
   1662  43ea		       90 3b		      bcc	noshiftdown
   1663  43ec		       a9 01		      lda	#1
   1664  43ee		       85 ef		      sta	playfieldpos
   1665  43f0
   1666  43f0				  -	      ifconst	pfres
   1667  43f0				  -	      lda	playfield+pfres*4-1
   1668  43f0				  -	      sta	temp4
   1669  43f0				  -	      lda	playfield+pfres*4-2
   1670  43f0				  -	      sta	temp3
   1671  43f0				  -	      lda	playfield+pfres*4-3
   1672  43f0				  -	      sta	temp2
   1673  43f0				  -	      lda	playfield+pfres*4-4
   1674  43f0					      else
   1675  43f0		       a5 d3		      lda	playfield+47
   1676  43f2		       85 9f		      sta	temp4
   1677  43f4		       a5 d2		      lda	playfield+46
   1678  43f6		       85 9e		      sta	temp3
   1679  43f8		       a5 d1		      lda	playfield+45
   1680  43fa		       85 9d		      sta	temp2
   1681  43fc		       a5 d0		      lda	playfield+44
   1682  43fe					      endif
   1683  43fe
   1684  43fe		       85 9c		      sta	temp1
   1685  4400
   1686  4400				  -	      ifconst	pfres
   1687  4400				  -	      ldx	#(pfres-1)*4
   1688  4400					      else
   1689  4400		       a2 2c		      ldx	#44
   1690  4402					      endif
   1691  4402				   down2
   1692  4402		       b5 a3		      lda	playfield-1,x
   1693  4404				  -	      ifconst	superchip
   1694  4404				  -	      sta	playfield-125,x
   1695  4404				  -	      lda	playfield-2,x
   1696  4404				  -	      sta	playfield-126,x
   1697  4404				  -	      lda	playfield-3,x
   1698  4404				  -	      sta	playfield-127,x
   1699  4404				  -	      lda	playfield-4,x
   1700  4404				  -	      sta	playfield-128,x
   1701  4404					      else
   1702  4404		       95 a7		      sta	playfield+3,x
   1703  4406		       b5 a2		      lda	playfield-2,x
   1704  4408		       95 a6		      sta	playfield+2,x
   1705  440a		       b5 a1		      lda	playfield-3,x
   1706  440c		       95 a5		      sta	playfield+1,x
   1707  440e		       b5 a0		      lda	playfield-4,x
   1708  4410		       95 a4		      sta	playfield,x
   1709  4412					      endif
   1710  4412		       8a		      txa
   1711  4413		       cb 04		      sbx	#4
   1712  4415		       d0 eb		      bne	down2
   1713  4417
   1714  4417		       a5 9f		      lda	temp4
   1715  4419				  -	      ifconst	superchip
   1716  4419				  -	      sta	playfield-125
   1717  4419				  -	      lda	temp3
   1718  4419				  -	      sta	playfield-126
   1719  4419				  -	      lda	temp2
   1720  4419				  -	      sta	playfield-127
   1721  4419				  -	      lda	temp1
   1722  4419				  -	      sta	playfield-128
   1723  4419					      else
   1724  4419		       85 a7		      sta	playfield+3
   1725  441b		       a5 9e		      lda	temp3
   1726  441d		       85 a6		      sta	playfield+2
   1727  441f		       a5 9d		      lda	temp2
   1728  4421		       85 a5		      sta	playfield+1
   1729  4423		       a5 9c		      lda	temp1
   1730  4425		       85 a4		      sta	playfield
   1731  4427					      endif
   1732  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1734  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1735  442a
   1736  442a							;standard routines needed for pretty much all games
   1737  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1738  442a							; repositioning code and score pointer setup moved to overscan
   1739  442a							; read switches, joysticks now compiler generated (more efficient)
   1740  442a
   1741  442a				   randomize
   1742  442a		       a5 a2		      lda	rand
   1743  442c		       4a		      lsr
   1744  442d				  -	      ifconst	rand16
   1745  442d				  -	      rol	rand16
   1746  442d					      endif
   1747  442d		       90 02		      bcc	noeor
   1748  442f		       49 b4		      eor	#$B4
   1749  4431				   noeor
   1750  4431		       85 a2		      sta	rand
   1751  4433				  -	      ifconst	rand16
   1752  4433				  -	      eor	rand16
   1753  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1755  4436							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1756  4436
   1757  4436				   drawscreen
   1758  4436				  -	      ifconst	debugscore
   1759  4436				  -	      ldx	#14
   1760  4436				  -	      lda	INTIM	; display # cycles left in the score
   1761  4436				  -
   1762  4436				  -	      ifconst	mincycles
   1763  4436				  -	      lda	mincycles
   1764  4436				  -	      cmp	INTIM
   1765  4436				  -	      lda	mincycles
   1766  4436				  -	      bcc	nochange
   1767  4436				  -	      lda	INTIM
   1768  4436				  -	      sta	mincycles
   1769  4436				  -nochange
   1770  4436				  -	      endif
   1771  4436				  -
   1772  4436				  -			; cmp #$2B
   1773  4436				  -			; bcs no_cycles_left
   1774  4436				  -	      bmi	cycles_left
   1775  4436				  -	      ldx	#64
   1776  4436				  -	      eor	#$ff	;make negative
   1777  4436				  -cycles_left
   1778  4436				  -	      stx	scorecolor
   1779  4436				  -	      and	#$7f	; clear sign bit
   1780  4436				  -	      tax
   1781  4436				  -	      lda	scorebcd,x
   1782  4436				  -	      sta	score+2
   1783  4436				  -	      lda	scorebcd1,x
   1784  4436				  -	      sta	score+1
   1785  4436				  -	      jmp	done_debugscore
   1786  4436				  -scorebcd
   1787  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1788  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1789  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1790  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1791  4436				  -scorebcd1
   1792  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1793  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1794  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1795  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1796  4436				  -done_debugscore
   1797  4436					      endif
   1798  4436
   1799  4436				  -	      ifconst	debugcycles
   1800  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1801  4436				  -			; cmp #$2B
   1802  4436				  -			; BCC overscan
   1803  4436				  -	      bmi	overscan
   1804  4436				  -	      sta	COLUBK
   1805  4436				  -	      bcs	doneoverscan
   1806  4436					      endif
   1807  4436
   1808  4436				   overscan
   1809  4436				  -	      ifconst	interlaced
   1810  4436				  -	      PHP
   1811  4436				  -	      PLA
   1812  4436				  -	      EOR	#4	; flip interrupt bit
   1813  4436				  -	      PHA
   1814  4436				  -	      PLP
   1815  4436				  -	      AND	#4	; isolate the interrupt bit
   1816  4436				  -	      TAX		; save it for later
   1817  4436					      endif
   1818  4436
   1819  4436				   overscanloop
   1820  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1821  4439		       30 fb		      bmi	overscanloop
   1822  443b				   doneoverscan
   1823  443b
   1824  443b							;do VSYNC
   1825  443b
   1826  443b				  -	      ifconst	interlaced
   1827  443b				  -	      CPX	#4
   1828  443b				  -	      BNE	oddframevsync
   1829  443b					      endif
   1830  443b
   1831  443b		       a9 02		      lda	#2
   1832  443d		       85 02		      sta	WSYNC
   1833  443f		       85 00		      sta	VSYNC
   1834  4441		       85 02		      STA	WSYNC
   1835  4443		       85 02		      STA	WSYNC
   1836  4445		       4a		      lsr
   1837  4446		       85 02		      STA	WSYNC
   1838  4448		       85 00		      STA	VSYNC
   1839  444a		       85 01		      sta	VBLANK
   1840  444c					      ifnconst	overscan_time
   1841  444c		       a9 a5		      lda	#37+128
   1842  444e				  -	      else
   1843  444e				  -	      lda	#overscan_time+128
   1844  444e					      endif
   1845  444e		       8d 96 02 	      sta	TIM64T
   1846  4451
   1847  4451				  -	      ifconst	interlaced
   1848  4451				  -	      jmp	postsync
   1849  4451				  -
   1850  4451				  -oddframevsync
   1851  4451				  -	      sta	WSYNC
   1852  4451				  -
   1853  4451				  -	      LDA	($80,X)	; 11 waste
   1854  4451				  -	      LDA	($80,X)	; 11 waste
   1855  4451				  -	      LDA	($80,X)	; 11 waste
   1856  4451				  -
   1857  4451				  -	      lda	#2
   1858  4451				  -	      sta	VSYNC
   1859  4451				  -	      sta	WSYNC
   1860  4451				  -	      sta	WSYNC
   1861  4451				  -	      sta	WSYNC
   1862  4451				  -
   1863  4451				  -	      LDA	($80,X)	; 11 waste
   1864  4451				  -	      LDA	($80,X)	; 11 waste
   1865  4451				  -	      LDA	($80,X)	; 11 waste
   1866  4451				  -
   1867  4451				  -	      lda	#0
   1868  4451				  -	      sta	VSYNC
   1869  4451				  -	      sta	VBLANK
   1870  4451				  -	      ifnconst	overscan_time
   1871  4451				  -	      lda	#37+128
   1872  4451				  -	      else
   1873  4451				  -	      lda	#overscan_time+128
   1874  4451				  -	      endif
   1875  4451				  -	      sta	TIM64T
   1876  4451				  -
   1877  4451				  -postsync
   1878  4451					      endif
   1879  4451
   1880  4451				  -	      ifconst	legacy
   1881  4451				  -	      if	legacy < 100
   1882  4451				  -	      ldx	#4
   1883  4451				  -adjustloop
   1884  4451				  -	      lda	player0x,x
   1885  4451				  -	      sec
   1886  4451				  -	      sbc	#14	;?
   1887  4451				  -	      sta	player0x,x
   1888  4451				  -	      dex
   1889  4451				  -	      bpl	adjustloop
   1890  4451				  -	      endif
   1891  4451					      endif
   1892  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1893  4451				  -	      repeat	($fa-(<*))
   1894  4451				  -	      nop
   1895  4451				  -	      repend
   1896  4451					      endif
   1897  4451		       85 02		      sta	WSYNC
   1898  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1900  4457				   HorPosLoop		; 5
   1901  4457		       b5 80		      lda	player0x,X	;+4 9
   1902  4459		       38		      sec		;+2 11
   1903  445a				   DivideLoop
   1904  445a		       e9 0f		      sbc	#15
   1905  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1906  445e		       95 9c		      sta	temp1,X	;+4 19
   1907  4460		       95 10		      sta	RESP0,X	;+4 23
   1908  4462		       85 02		      sta	WSYNC
   1909  4464		       ca		      dex
   1910  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1911  4467							; 4
   1912  4467
   1913  4467		       a2 04		      ldx	#4
   1914  4469		       b4 9c		      ldy	temp1,X
   1915  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1916  446e		       95 20		      sta	HMP0,X	;+14 18
   1917  4470
   1918  4470		       ca		      dex
   1919  4471		       b4 9c		      ldy	temp1,X
   1920  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1921  4476		       95 20		      sta	HMP0,X	;+14 32
   1922  4478
   1923  4478		       ca		      dex
   1924  4479		       b4 9c		      ldy	temp1,X
   1925  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1926  447e		       95 20		      sta	HMP0,X	;+14 46
   1927  4480
   1928  4480		       ca		      dex
   1929  4481		       b4 9c		      ldy	temp1,X
   1930  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1931  4486		       95 20		      sta	HMP0,X	;+14 60
   1932  4488
   1933  4488		       ca		      dex
   1934  4489		       b4 9c		      ldy	temp1,X
   1935  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1936  448e		       95 20		      sta	HMP0,X	;+14 74
   1937  4490
   1938  4490		       85 02		      sta	WSYNC
   1939  4492
   1940  4492		       85 2a		      sta	HMOVE	;+3 3
   1941  4494
   1942  4494
   1943  4494				  -	      ifconst	legacy
   1944  4494				  -	      if	legacy < 100
   1945  4494				  -	      ldx	#4
   1946  4494				  -adjustloop2
   1947  4494				  -	      lda	player0x,x
   1948  4494				  -	      clc
   1949  4494				  -	      adc	#14	;?
   1950  4494				  -	      sta	player0x,x
   1951  4494				  -	      dex
   1952  4494				  -	      bpl	adjustloop2
   1953  4494				  -	      endif
   1954  4494					      endif
   1955  4494
   1956  4494
   1957  4494
   1958  4494
   1959  4494							;set score pointers
   1960  4494		       a7 95		      lax	score+2
   1961  4496		       20 c7 f4 	      jsr	scorepointerset
   1962  4499		       84 9b		      sty	scorepointers+5
   1963  449b		       86 98		      stx	scorepointers+2
   1964  449d		       a7 94		      lax	score+1
   1965  449f		       20 c7 f4 	      jsr	scorepointerset
   1966  44a2		       84 9a		      sty	scorepointers+4
   1967  44a4		       86 97		      stx	scorepointers+1
   1968  44a6		       a7 93		      lax	score
   1969  44a8		       20 c7 f4 	      jsr	scorepointerset
   1970  44ab		       84 99		      sty	scorepointers+3
   1971  44ad		       86 96		      stx	scorepointers
   1972  44af
   1973  44af				   vblk
   1974  44af							; run possible vblank bB code
   1975  44af				  -	      ifconst	vblank_bB_code
   1976  44af				  -	      jsr	vblank_bB_code
   1977  44af					      endif
   1978  44af				   vblk2
   1979  44af		       ad 84 02 	      LDA	INTIM
   1980  44b2		       30 fb		      bmi	vblk2
   1981  44b4		       4c 00 f0 	      jmp	kernel
   1982  44b7
   1983  44b7
   1984  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1985  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1986  44c7				   repostable
   1987  44c7
   1988  44c7				   scorepointerset
   1989  44c7		       29 0f		      and	#$0F
   1990  44c9		       0a		      asl
   1991  44ca		       0a		      asl
   1992  44cb		       0a		      asl
   1993  44cc		       69 74		      adc	#<scoretable
   1994  44ce		       a8		      tay
   1995  44cf		       8a		      txa
   1996  44d0							; and #$F0
   1997  44d0							; lsr
   1998  44d0		       4b f0		      asr	#$F0
   1999  44d2		       69 74		      adc	#<scoretable
   2000  44d4		       aa		      tax
   2001  44d5		       60		      rts
   2002  44d6							;bB.asm
   2003  44d6							; bB.asm file is split here
   2004  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2005  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2006  44d6					      endif
   2007  44d6		       00 01	   ECHOFIRST  =	1
   2008  44d6
   2009  44d6
   2010  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2011  44d6
   2012  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2013  44d6							; and keep the conditional compilation stuff intact
   2014  44d6				  -	      ifconst	ROM2k
   2015  44d6				  -	      ORG	$F7AC-8
   2016  44d6					      else
   2017  44d6					      ifconst	bankswitch
   2018  44d6				  -	      if	bankswitch == 8
   2019  44d6				  -	      ORG	$2F94-bscode_length
   2020  44d6				  -	      RORG	$FF94-bscode_length
   2021  44d6					      endif
   2022  44d6					      if	bankswitch == 16
   2023  4f74					      ORG	$4F94-bscode_length
   2024  4f74					      RORG	$FF94-bscode_length
   2025  4f74					      endif
   2026  4f74				  -	      if	bankswitch == 32
   2027  4f74				  -	      ORG	$8F94-bscode_length
   2028  4f74				  -	      RORG	$FF94-bscode_length
   2029  4f74					      endif
   2030  4f74				  -	      if	bankswitch == 64
   2031  4f74				  -	      ORG	$10F80-bscode_length
   2032  4f74				  -	      RORG	$1FF80-bscode_length
   2033  4f74					      endif
   2034  4f74				  -	      else
   2035  4f74				  -	      ORG	$FF9C
   2036  4f74					      endif
   2037  4f74					      endif
   2038  4f74
   2039  4f74							; font equates
   2040  4f74		       00 01	   .21stcentury =	1
   2041  4f74		       00 02	   alarmclock =	2
   2042  4f74		       00 03	   handwritten =	3
   2043  4f74		       00 04	   interrupted =	4
   2044  4f74		       00 05	   retroputer =	5
   2045  4f74		       00 06	   whimsey    =	6
   2046  4f74		       00 07	   tiny       =	7
   2047  4f74		       00 08	   hex	      =	8
   2048  4f74
   2049  4f74				  -	      ifconst	font
   2050  4f74				  -	      if	font == hex
   2051  4f74				  -	      ORG	. - 48
   2052  4f74				  -	      endif
   2053  4f74					      endif
   2054  4f74
   2055  4f74				   scoretable
   2056  4f74
   2057  4f74				  -	      ifconst	font
   2058  4f74				  -	      if	font == .21stcentury
   2059  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2060  4f74				  -	      endif
   2061  4f74				  -	      if	font == alarmclock
   2062  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2063  4f74				  -	      endif
   2064  4f74				  -	      if	font == handwritten
   2065  4f74				  -	      include	"score_graphics.asm.handwritten"
   2066  4f74				  -	      endif
   2067  4f74				  -	      if	font == interrupted
   2068  4f74				  -	      include	"score_graphics.asm.interrupted"
   2069  4f74				  -	      endif
   2070  4f74				  -	      if	font == retroputer
   2071  4f74				  -	      include	"score_graphics.asm.retroputer"
   2072  4f74				  -	      endif
   2073  4f74				  -	      if	font == whimsey
   2074  4f74				  -	      include	"score_graphics.asm.whimsey"
   2075  4f74				  -	      endif
   2076  4f74				  -	      if	font == tiny
   2077  4f74				  -	      include	"score_graphics.asm.tiny"
   2078  4f74				  -	      endif
   2079  4f74				  -	      if	font == hex
   2080  4f74				  -	      include	"score_graphics.asm.hex"
   2081  4f74				  -	      endif
   2082  4f74					      else		; default font
   2083  4f74
   2084  4f74		       3c		      .byte.b	%00111100
   2085  4f75		       66		      .byte.b	%01100110
   2086  4f76		       66		      .byte.b	%01100110
   2087  4f77		       66		      .byte.b	%01100110
   2088  4f78		       66		      .byte.b	%01100110
   2089  4f79		       66		      .byte.b	%01100110
   2090  4f7a		       66		      .byte.b	%01100110
   2091  4f7b		       3c		      .byte.b	%00111100
   2092  4f7c
   2093  4f7c		       7e		      .byte.b	%01111110
   2094  4f7d		       18		      .byte.b	%00011000
   2095  4f7e		       18		      .byte.b	%00011000
   2096  4f7f		       18		      .byte.b	%00011000
   2097  4f80		       18		      .byte.b	%00011000
   2098  4f81		       38		      .byte.b	%00111000
   2099  4f82		       18		      .byte.b	%00011000
   2100  4f83		       08		      .byte.b	%00001000
   2101  4f84
   2102  4f84		       7e		      .byte.b	%01111110
   2103  4f85		       60		      .byte.b	%01100000
   2104  4f86		       60		      .byte.b	%01100000
   2105  4f87		       3c		      .byte.b	%00111100
   2106  4f88		       06		      .byte.b	%00000110
   2107  4f89		       06		      .byte.b	%00000110
   2108  4f8a		       46		      .byte.b	%01000110
   2109  4f8b		       3c		      .byte.b	%00111100
   2110  4f8c
   2111  4f8c		       3c		      .byte.b	%00111100
   2112  4f8d		       46		      .byte.b	%01000110
   2113  4f8e		       06		      .byte.b	%00000110
   2114  4f8f		       06		      .byte.b	%00000110
   2115  4f90		       1c		      .byte.b	%00011100
   2116  4f91		       06		      .byte.b	%00000110
   2117  4f92		       46		      .byte.b	%01000110
   2118  4f93		       3c		      .byte.b	%00111100
   2119  4f94
   2120  4f94		       0c		      .byte.b	%00001100
   2121  4f95		       0c		      .byte.b	%00001100
   2122  4f96		       7e		      .byte.b	%01111110
   2123  4f97		       4c		      .byte.b	%01001100
   2124  4f98		       4c		      .byte.b	%01001100
   2125  4f99		       2c		      .byte.b	%00101100
   2126  4f9a		       1c		      .byte.b	%00011100
   2127  4f9b		       0c		      .byte.b	%00001100
   2128  4f9c
   2129  4f9c		       3c		      .byte.b	%00111100
   2130  4f9d		       46		      .byte.b	%01000110
   2131  4f9e		       06		      .byte.b	%00000110
   2132  4f9f		       06		      .byte.b	%00000110
   2133  4fa0		       3c		      .byte.b	%00111100
   2134  4fa1		       60		      .byte.b	%01100000
   2135  4fa2		       60		      .byte.b	%01100000
   2136  4fa3		       7e		      .byte.b	%01111110
   2137  4fa4
   2138  4fa4		       3c		      .byte.b	%00111100
   2139  4fa5		       66		      .byte.b	%01100110
   2140  4fa6		       66		      .byte.b	%01100110
   2141  4fa7		       66		      .byte.b	%01100110
   2142  4fa8		       7c		      .byte.b	%01111100
   2143  4fa9		       60		      .byte.b	%01100000
   2144  4faa		       62		      .byte.b	%01100010
   2145  4fab		       3c		      .byte.b	%00111100
   2146  4fac
   2147  4fac		       30		      .byte.b	%00110000
   2148  4fad		       30		      .byte.b	%00110000
   2149  4fae		       30		      .byte.b	%00110000
   2150  4faf		       18		      .byte.b	%00011000
   2151  4fb0		       0c		      .byte.b	%00001100
   2152  4fb1		       06		      .byte.b	%00000110
   2153  4fb2		       42		      .byte.b	%01000010
   2154  4fb3		       3e		      .byte.b	%00111110
   2155  4fb4
   2156  4fb4		       3c		      .byte.b	%00111100
   2157  4fb5		       66		      .byte.b	%01100110
   2158  4fb6		       66		      .byte.b	%01100110
   2159  4fb7		       66		      .byte.b	%01100110
   2160  4fb8		       3c		      .byte.b	%00111100
   2161  4fb9		       66		      .byte.b	%01100110
   2162  4fba		       66		      .byte.b	%01100110
   2163  4fbb		       3c		      .byte.b	%00111100
   2164  4fbc
   2165  4fbc		       3c		      .byte.b	%00111100
   2166  4fbd		       46		      .byte.b	%01000110
   2167  4fbe		       06		      .byte.b	%00000110
   2168  4fbf		       3e		      .byte.b	%00111110
   2169  4fc0		       66		      .byte.b	%01100110
   2170  4fc1		       66		      .byte.b	%01100110
   2171  4fc2		       66		      .byte.b	%01100110
   2172  4fc3		       3c		      .byte.b	%00111100
   2173  4fc4
   2174  4fc4					      ifnconst	DPC_kernel_options
   2175  4fc4
   2176  4fc4		       00		      .byte.b	%00000000
   2177  4fc5		       00		      .byte.b	%00000000
   2178  4fc6		       00		      .byte.b	%00000000
   2179  4fc7		       00		      .byte.b	%00000000
   2180  4fc8		       00		      .byte.b	%00000000
   2181  4fc9		       00		      .byte.b	%00000000
   2182  4fca		       00		      .byte.b	%00000000
   2183  4fcb		       00		      .byte.b	%00000000
   2184  4fcc
   2185  4fcc					      endif
   2186  4fcc
   2187  4fcc					      endif
   2188  4fcc
   2189  4fcc				  -	      ifconst	ROM2k
   2190  4fcc				  -	      ORG	$F7FC
   2191  4fcc					      else
   2192  4fcc					      ifconst	bankswitch
   2193  4fcc				  -	      if	bankswitch == 8
   2194  4fcc				  -	      ORG	$2FF4-bscode_length
   2195  4fcc				  -	      RORG	$FFF4-bscode_length
   2196  4fcc					      endif
   2197  4fcc					      if	bankswitch == 16
   2198  4fd4					      ORG	$4FF4-bscode_length
   2199  4fd4					      RORG	$FFF4-bscode_length
   2200  4fd4					      endif
   2201  4fd4				  -	      if	bankswitch == 32
   2202  4fd4				  -	      ORG	$8FF4-bscode_length
   2203  4fd4				  -	      RORG	$FFF4-bscode_length
   2204  4fd4					      endif
   2205  4fd4				  -	      if	bankswitch == 64
   2206  4fd4				  -	      ORG	$10FE0-bscode_length
   2207  4fd4				  -	      RORG	$1FFE0-bscode_length
   2208  4fd4					      endif
   2209  4fd4				  -	      else
   2210  4fd4				  -	      ORG	$FFFC
   2211  4fd4					      endif
   2212  4fd4					      endif
   2213  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2214  4fd4
   2215  4fd4							; every bank has this stuff at the same place
   2216  4fd4							; this code can switch to/from any bank at any entry point
   2217  4fd4							; and can preserve register values
   2218  4fd4							; note: lines not starting with a space are not placed in all banks
   2219  4fd4							;
   2220  4fd4							; line below tells the compiler how long this is - do not remove
   2221  4fd4							;size=32
   2222  4fd4
   2223  4fd4				   begin_bscode
   2224  4fd4		       a2 ff		      ldx	#$ff
   2225  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2226  4fd6				  -	      stx	FASTFETCH
   2227  4fd6					      endif
   2228  4fd6		       9a		      txs
   2229  4fd7				  -	      if	bankswitch == 64
   2230  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2231  4fd7					      else
   2232  4fd7		       a9 f2		      lda	#>(start-1)
   2233  4fd9					      endif
   2234  4fd9		       48		      pha
   2235  4fda		       a9 4f		      lda	#<(start-1)
   2236  4fdc		       48		      pha
   2237  4fdd
   2238  4fdd				   BS_return
   2239  4fdd		       48		      pha
   2240  4fde		       8a		      txa
   2241  4fdf		       48		      pha
   2242  4fe0		       ba		      tsx
   2243  4fe1
   2244  4fe1					      if	bankswitch != 64
   2245  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2246  4fe3
   2247  4fe3		       2a		      rol
   2248  4fe4		       2a		      rol
   2249  4fe5		       2a		      rol
   2250  4fe6		       2a		      rol
   2251  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2252  4fe9		       aa		      tax
   2253  4fea		       e8		      inx
   2254  4feb				  -	      else
   2255  4feb				  -	      lda	4,x	; get high byte of return address
   2256  4feb				  -	      tay
   2257  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2258  4feb				  -	      sta	4,x
   2259  4feb				  -	      tya
   2260  4feb				  -	      lsr
   2261  4feb				  -	      lsr
   2262  4feb				  -	      lsr
   2263  4feb				  -	      lsr
   2264  4feb				  -	      tax
   2265  4feb				  -	      inx
   2266  4feb					      endif
   2267  4feb
   2268  4feb				   BS_jsr
   2269  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2270  4fee		       68		      pla
   2271  4fef		       aa		      tax
   2272  4ff0		       68		      pla
   2273  4ff1		       60		      rts
   2274  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2275  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2276  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2277  4ff2					      endif
   2278  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2279  4ff2
   2280  4ff2					      ifconst	bankswitch
   2281  4ff2				  -	      if	bankswitch == 8
   2282  4ff2				  -	      ORG	$2FFC
   2283  4ff2				  -	      RORG	$FFFC
   2284  4ff2					      endif
   2285  4ff2					      if	bankswitch == 16
   2286  4ffc					      ORG	$4FFC
   2287  4ffc					      RORG	$FFFC
   2288  4ffc					      endif
   2289  4ffc				  -	      if	bankswitch == 32
   2290  4ffc				  -	      ORG	$8FFC
   2291  4ffc				  -	      RORG	$FFFC
   2292  4ffc					      endif
   2293  4ffc				  -	      if	bankswitch == 64
   2294  4ffc				  -	      ORG	$10FF0
   2295  4ffc				  -	      RORG	$1FFF0
   2296  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2297  4ffc				  -	      ORG	$10FF8
   2298  4ffc				  -	      RORG	$1FFF8
   2299  4ffc				  -	      ifconst	superchip
   2300  4ffc				  -	      .byte	"E","F","S","C"
   2301  4ffc				  -	      else
   2302  4ffc				  -	      .byte	"E","F","E","F"
   2303  4ffc				  -	      endif
   2304  4ffc				  -	      ORG	$10FFC
   2305  4ffc				  -	      RORG	$1FFFC
   2306  4ffc					      endif
   2307  4ffc				  -	      else
   2308  4ffc				  -	      ifconst	ROM2k
   2309  4ffc				  -	      ORG	$F7FC
   2310  4ffc				  -	      else
   2311  4ffc				  -	      ORG	$FFFC
   2312  4ffc				  -	      endif
   2313  4ffc					      endif
   2314  4ffc		       50 f2		      .word.w	(start & $ffff)
   2315  4ffe		       50 f2		      .word.w	(start & $ffff)

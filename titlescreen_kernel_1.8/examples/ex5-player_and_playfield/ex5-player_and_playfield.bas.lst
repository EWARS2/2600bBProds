------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d6	   bmp_player0_index =	c
      5  5000 ????
      6  5000 ????	       00 d5	   addvalue   =	b
      7  5000 ????
      8  5000 ????	       00 d4	   frame      =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d6	   bmp_player0_index =	c
      5  5000 ????
      6  5000 ????	       00 d5	   addvalue   =	b
      7  5000 ????
      8  5000 ????	       00 d4	   frame      =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .
     36  1000							; 
     37  1000
     38  1000				   .L00 		;  rem *** any romsize should work
     39  1000
     40  1000				   .L01 		;  set romsize 16k
     41  1000
     42  1000				   .
     43  1000							; 
     44  1000
     45  1000				   .L02 		;  dim frame = a
     46  1000
     47  1000				   .L03 		;  dim addvalue = b
     48  1000
     49  1000				   .
     50  1000							; 
     51  1000
     52  1000				   .L04 		;  rem ** we define this because player 0 has multiple frames...
     53  1000
     54  1000				   .L05 		;  dim bmp_player0_index = c
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .L06 		;  scorecolor = $8a
     60  1000
     61  1000		       a9 8a		      LDA	#$8a
     62  1002		       85 a3		      STA	scorecolor
     63  1004				   .
     64  1004							; 
     65  1004
     66  1004				   .resettitlepage
     67  1004							; resettitlepage
     68  1004
     69  1004				   .L07 		;  frame = 0
     70  1004
     71  1004		       a9 00		      LDA	#0
     72  1006		       85 d4		      STA	frame
     73  1008				   .L08 		;  player0x = 0
     74  1008
     75  1008		       a9 00		      LDA	#0
     76  100a		       85 80		      STA	player0x
     77  100c				   .L09 		;  player0y = 11
     78  100c
     79  100c		       a9 0b		      LDA	#11
     80  100e		       85 85		      STA	player0y
     81  1010				   .L010		;  player1x = 159
     82  1010
     83  1010		       a9 9f		      LDA	#159
     84  1012		       85 81		      STA	player1x
     85  1014				   .L011		;  player1y = 25
     86  1014
     87  1014		       a9 19		      LDA	#25
     88  1016		       85 86		      STA	player1y
     89  1018				   .L012		;  addvalue = 1
     90  1018
     91  1018		       a9 01		      LDA	#1
     92  101a		       85 d5		      STA	addvalue
     93  101c				   .
     94  101c							; 
     95  101c
     96  101c				   .titlepage
     97  101c							; titlepage
     98  101c
     99  101c				   .L013		;  gosub titledrawscreen bank2
    100  101c
    101  101c		       85 ee		      sta	temp7
    102  101e		       a9 90		      lda	#>(ret_point1-1)
    103  1020		       48		      pha
    104  1021		       a9 33		      lda	#<(ret_point1-1)
    105  1023		       48		      pha
    106  1024		       a9 af		      lda	#>(.titledrawscreen-1)
    107  1026		       48		      pha
    108  1027		       a9 ff		      lda	#<(.titledrawscreen-1)
    109  1029		       48		      pha
    110  102a		       a5 ee		      lda	temp7
    111  102c		       48		      pha
    112  102d		       8a		      txa
    113  102e		       48		      pha
    114  102f		       a2 02		      ldx	#2
    115  1031		       4c eb ff 	      jmp	BS_jsr
    116  1034				   ret_point1
    117  1034				   .L014		;  frame = frame + 1
    118  1034
    119  1034		       e6 d4		      INC	frame
    120  1036				   .L015		;  temp1 = frame & 3
    121  1036
    122  1036		       a5 d4		      LDA	frame
    123  1038		       29 03		      AND	#3
    124  103a		       85 9c		      STA	temp1
    125  103c				   .L016		;  if temp1 > 0 then skipplayeranim
    126  103c
    127  103c		       a9 00		      LDA	#0
    128  103e		       c5 9c		      CMP	temp1
    129  1040		       90 45		      bcc	.skipplayeranim
    130  1042				  -	      if	( (((((#>*)&$1f)*256)|(#<.skipplayeranim))>=bankswitch_hotspot) && (((((#>*)&$1f)*256)|(#<.skipplayeranim))<=(bankswitch_hotspot+bs_mask)) )
    131  1042				  -	      echo	"WARNING: branch near the end of bank 1 may accidentally trigger a bankswitch. Reposition code there if bad things happen."
    132  1042					      endif
    133  1042				   .L017		;  bmp_player0_index = bmp_player0_index + 10
    134  1042
    135  1042		       a5 d6		      LDA	bmp_player0_index
    136  1044		       18		      CLC
    137  1045		       69 0a		      ADC	#10
    138  1047		       85 d6		      STA	bmp_player0_index
    139  1049				   .L018		;  player0x = player0x + 1
    140  1049
    141  1049		       e6 80		      INC	player0x
    142  104b				   .L019		;  player1x = player1x - 1
    143  104b
    144  104b		       c6 81		      DEC	player1x
    145  104d				   .L020		;  player0y = player0y + addvalue
    146  104d
    147  104d		       a5 85		      LDA	player0y
    148  104f		       18		      CLC
    149  1050		       65 d5		      ADC	addvalue
    150  1052		       85 85		      STA	player0y
    151  1054				   .L021		;  if player0x > 159 then player0x = 0
    152  1054
    153  1054		       a9 9f		      LDA	#159
    154  1056		       c5 80		      CMP	player0x
    155  1058		       b0 04		      BCS	.skipL021
    156  105a				   .condpart0
    157  105a		       a9 00		      LDA	#0
    158  105c		       85 80		      STA	player0x
    159  105e				   .skipL021
    160  105e				   .L022		;  if player1x > 200 then player1x = 159
    161  105e
    162  105e		       a9 c8		      LDA	#200
    163  1060		       c5 81		      CMP	player1x
    164  1062		       b0 04		      BCS	.skipL022
    165  1064				   .condpart1
    166  1064		       a9 9f		      LDA	#159
    167  1066		       85 81		      STA	player1x
    168  1068				   .skipL022
    169  1068				   .L023		;  if player0y = 40  ||  player0y = 10 then addvalue = addvalue ^ 254
    170  1068
    171  1068		       a5 85		      LDA	player0y
    172  106a		       c9 28		      CMP	#40
    173  106c		       d0 03		      BNE	.skipL023
    174  106e				   .condpart2
    175  106e		       4c 77 90 	      jmp	.condpart3
    176  1071				   .skipL023
    177  1071		       a5 85		      LDA	player0y
    178  1073		       c9 0a		      CMP	#10
    179  1075		       d0 06		      BNE	.skip0OR
    180  1077				   .condpart3
    181  1077		       a5 d5		      LDA	addvalue
    182  1079		       49 fe		      EOR	#254
    183  107b		       85 d5		      STA	addvalue
    184  107d				   .skip0OR
    185  107d				   .L024		;  if bmp_player0_index > 30 then bmp_player0_index = 0
    186  107d
    187  107d		       a9 1e		      LDA	#30
    188  107f		       c5 d6		      CMP	bmp_player0_index
    189  1081		       b0 04		      BCS	.skipL024
    190  1083				   .condpart4
    191  1083		       a9 00		      LDA	#0
    192  1085		       85 d6		      STA	bmp_player0_index
    193  1087				   .skipL024
    194  1087				   .skipplayeranim
    195  1087							; skipplayeranim
    196  1087
    197  1087				   .
    198  1087							; 
    199  1087
    200  1087				   .L025		;  if joy0fire  ||  switchreset then player0y = 200 : player1y = 200 : goto gamestart
    201  1087
    202  1087		       24 0c		      bit	INPT4
    203  1089		       30 03		      BMI	.skipL025
    204  108b				   .condpart5
    205  108b		       4c 95 90 	      jmp	.condpart6
    206  108e				   .skipL025
    207  108e		       a9 01		      lda	#1
    208  1090		       2c 82 02 	      bit	SWCHB
    209  1093		       d0 09		      BNE	.skip1OR
    210  1095				   .condpart6
    211  1095		       a9 c8		      LDA	#200
    212  1097		       85 85		      STA	player0y
    213  1099		       85 86		      STA	player1y
    214  109b		       4c a1 90 	      jmp	.gamestart
    215  109e
    216  109e				   .skip1OR
    217  109e				   .L026		;  goto titlepage
    218  109e
    219  109e		       4c 1c 90 	      jmp	.titlepage
    220  10a1
    221  10a1				   .
    222  10a1							; 
    223  10a1
    224  10a1				   .L027		;  rem *** Our fake game start. If you move the joystick it goes back to the
    225  10a1
    226  10a1				   .L028		;  rem *** title screen.
    227  10a1
    228  10a1				   .gamestart
    229  10a1							; gamestart
    230  10a1
    231  10a1				   .
    232  10a1							; 
    233  10a1
    234  10a1				   .L029		;  rem *** if you used the player kernel, you'll need to hide the players or 
    235  10a1
    236  10a1				   .L030		;  rem *** redefine them, or else you'll see garbage on the screen.
    237  10a1
    238  10a1				   .L031		;  player0:
    239  10a1
    240  10a1		       a2 d6		      LDX	#<playerL031_0
    241  10a3		       86 8a		      STX	player0pointerlo
    242  10a5		       a9 f4		      LDA	#>playerL031_0
    243  10a7		       85 8b		      STA	player0pointerhi
    244  10a9		       a9 00		      LDA	#0
    245  10ab		       85 8e		      STA	player0height
    246  10ad				   .L032		;  player1:
    247  10ad
    248  10ad		       a2 d7		      LDX	#<playerL032_1
    249  10af		       86 8c		      STX	player1pointerlo
    250  10b1		       a9 f4		      LDA	#>playerL032_1
    251  10b3		       85 8d		      STA	player1pointerhi
    252  10b5		       a9 00		      LDA	#0
    253  10b7		       85 8f		      STA	player1height
    254  10b9				   .L033		;  missile0height = 1
    255  10b9
    256  10b9		       a9 01		      LDA	#1
    257  10bb		       85 90		      STA	missile0height
    258  10bd				   .L034		;  missile1height = 1
    259  10bd
    260  10bd		       a9 01		      LDA	#1
    261  10bf		       85 87		      STA	missile1height
    262  10c1				   .
    263  10c1							; 
    264  10c1
    265  10c1				   .gameloop
    266  10c1							; gameloop
    267  10c1
    268  10c1				   .L035		;  drawscreen
    269  10c1
    270  10c1		       85 ee		      sta	temp7
    271  10c3		       a9 90		      lda	#>(ret_point2-1)
    272  10c5		       48		      pha
    273  10c6		       a9 d8		      lda	#<(ret_point2-1)
    274  10c8		       48		      pha
    275  10c9		       a9 f4		      lda	#>(drawscreen-1)
    276  10cb		       48		      pha
    277  10cc		       a9 35		      lda	#<(drawscreen-1)
    278  10ce		       48		      pha
    279  10cf		       a5 ee		      lda	temp7
    280  10d1		       48		      pha
    281  10d2		       8a		      txa
    282  10d3		       48		      pha
    283  10d4		       a2 04		      ldx	#4
    284  10d6		       4c eb ff 	      jmp	BS_jsr
    285  10d9				   ret_point2
    286  10d9				   .L036		;  if joy0left  ||  joy0right then goto resettitlepage
    287  10d9
    288  10d9		       2c 80 02 	      bit	SWCHA
    289  10dc		       70 03		      BVS	.skipL036
    290  10de				   .condpart7
    291  10de		       4c e6 90 	      jmp	.condpart8
    292  10e1				   .skipL036
    293  10e1		       2c 80 02 	      bit	SWCHA
    294  10e4		       30 03		      BMI	.skip2OR
    295  10e6				   .condpart8
    296  10e6		       4c 04 90 	      jmp	.resettitlepage
    297  10e9
    298  10e9				   .skip2OR
    299  10e9				   .L037		;  if joy0up  ||  joy0down then goto resettitlepage
    300  10e9
    301  10e9		       a9 10		      lda	#$10
    302  10eb		       2c 80 02 	      bit	SWCHA
    303  10ee		       d0 03		      BNE	.skipL037
    304  10f0				   .condpart9
    305  10f0		       4c fa 90 	      jmp	.condpart10
    306  10f3				   .skipL037
    307  10f3		       a9 20		      lda	#$20
    308  10f5		       2c 80 02 	      bit	SWCHA
    309  10f8		       d0 03		      BNE	.skip3OR
    310  10fa				   .condpart10
    311  10fa		       4c 04 90 	      jmp	.resettitlepage
    312  10fd
    313  10fd				   .skip3OR
    314  10fd				   .L038		;  goto gameloop
    315  10fd
    316  10fd		       4c c1 90 	      jmp	.gameloop
    317  1100
    318  1100				   .
    319  1100							; 
    320  1100
    321  1100				   .L039		;  bank 2
    322  1100
    323  1100					      if	ECHO1
      3796 bytes of ROM space left in bank 1
    324  1100					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    325  1100					      endif
    326  1100		       00 01	   ECHO1      =	1
    327  1fd4					      ORG	$1FF4-bscode_length
    328  1fd4					      RORG	$9FF4-bscode_length
    329  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    330  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    331  1fd6				  -	      stx	FASTFETCH
    332  1fd6					      endif
    333  1fd6		       9a		      txs
    334  1fd7				  -	      if	bankswitch == 64
    335  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    336  1fd7					      else
    337  1fd7		       a9 f2		      lda	#>(start-1)
    338  1fd9					      endif
    339  1fd9		       48		      pha
    340  1fda		       a9 4f		      lda	#<(start-1)
    341  1fdc		       48		      pha
    342  1fdd		       48		      pha
    343  1fde		       8a		      txa
    344  1fdf		       48		      pha
    345  1fe0		       ba		      tsx
    346  1fe1					      if	bankswitch != 64
    347  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    348  1fe3		       2a		      rol
    349  1fe4		       2a		      rol
    350  1fe5		       2a		      rol
    351  1fe6		       2a		      rol
    352  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    353  1fe9		       aa		      tax
    354  1fea		       e8		      inx
    355  1feb				  -	      else
    356  1feb				  -	      lda	4,x	; get high byte of return address
    357  1feb				  -	      tay
    358  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    359  1feb				  -	      sta	4,x
    360  1feb				  -	      tya
    361  1feb				  -	      lsr
    362  1feb				  -	      lsr
    363  1feb				  -	      lsr
    364  1feb				  -	      lsr
    365  1feb				  -	      tax
    366  1feb				  -	      inx
    367  1feb					      endif
    368  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    369  1fee		       68		      pla
    370  1fef		       aa		      tax
    371  1ff0		       68		      pla
    372  1ff1		       60		      rts
    373  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    374  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    375  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    376  1ff2					      endif
    377  1ffc					      ORG	$1FFC
    378  1ffc					      RORG	$9FFC
    379  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    380  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    381  2000					      ORG	$2000
    382  2000					      RORG	$B000
    383  2000				   .L040		;  rem *** We're putting the title kernel here, but it can go in any bank you
    384  2000
    385  2000				   .L041		;  rem *** like. Just don't let your program flow accidentally fall into the
    386  2000
    387  2000				   .L042		;  rem *** line below.
    388  2000
    389  2000				   .L043		;  asm
    390  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_48x1_1
     10  2000							;draw_48x1_3
     11  2000							;draw_48x2_1
     12  2000							;draw_48x2_2
     13  2000							;draw_48x2_3
     14  2000					      draw_player
     15  2000					      draw_space	25
     16  2000					      draw_48x1_2
     17  2000							;draw_gameselect
     18  2000					      draw_score
     19  2000					      ENDM
     20  2000
     21  2000							; minikernel choices are:
     22  2000							; 
     23  2000							; draw_48x1_1, draw_48x1_2, draw_48x1_3 
     24  2000							;	The first, second, and third 48-wide single-line bitmap minikernels
     25  2000							;
     26  2000							; draw_48x2_1, draw_48x2_2, draw_48x2_3 
     27  2000							;	The first, second, and third 48-wide double-line bitmap minikernels
     28  2000							;
     29  2000							; draw_96x2_1, draw_96x2_2, draw_96x2_3 
     30  2000							;	The first, second, and third 96-wide double-line bitmap minikernels
     31  2000							;
     32  2000							; draw_gameselect
     33  2000							;	The game selection display minikernel
     34  2000							;
     35  2000							; draw_score
     36  2000							;	A minikernel that draws the score
     37  2000							;
     38  2000							; draw_space 10
     39  2000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019					      ifnconst	vblank_time
     26  2019		       a9 aa		      lda	#42+128
     27  201b				  -	      else
     28  201b				  -	      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 84 b0 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_48x1_1
      1  2046		       00 01	   mk_48x1_X_on =	1
      2  2046		       00 01	   mk_48x1_1_on =	1
      3  2046		       20 85 b0 	      jsr	draw_bmp_48x1_1
      2  2049
      3  2049
      4  2049
      5  2049
      0  2049					      draw_player
      1  2049		       00 01	   mk_player_on =	1
      2  2049		       20 50 b5 	      jsr	draw_player_display
      0  204c					      draw_space	25
      1  204c		       a0 19		      ldy	#25
      2  204e				   .loop
      3  204e		       85 02		      sta	WSYNC
      4  2050		       88		      dey
      5  2051		       d0 fb		      bne	.loop
      0  2053					      draw_48x1_2
      1  2053		       00 01	   mk_48x1_X_on =	1
      2  2053		       00 01	   mk_48x1_2_on =	1
      3  2053		       20 cd b0 	      jsr	draw_bmp_48x1_2
      9  2056
      0  2056					      draw_score
      1  2056		       00 01	   mk_score_on =	1
      2  2056		       00 01	   mk_48x1_X_on =	1
      3  2056		       20 90 b1 	      jsr	draw_score_display
     68  2059
     69  2059		       4c 53 b2 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  205c
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  205c					      include	"titlescreen/asm/position48.asm"
      1  205c
      2  205c				   position48
      3  205c
      4  205c							;postion P0 and P1
      5  205c
      6  205c		       85 02		      sta	WSYNC
      7  205e
      8  205e		       a9 90		      lda	#$90	;2
      9  2060		       85 20		      sta	HMP0	;3
     10  2062		       a9 a0		      lda	#$A0	;2
     11  2064		       85 21		      sta	HMP1	;3
     12  2066
     13  2066		       e6 9c		      inc	temp1
     14  2068		       c6 9c		      dec	temp1
     15  206a		       e6 9c		      inc	temp1
     16  206c		       c6 9c		      dec	temp1
     17  206e		       e6 9c		      inc	temp1
      0  2070					      sleep	2
      1  2070				   .CYCLES    SET	2
      2  2070
      3  2070				  -	      IF	.CYCLES < 2
      4  2070				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2070				  -	      ERR
      6  2070					      ENDIF
      7  2070
      8  2070				  -	      IF	.CYCLES & 1
      9  2070				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2070				  -	      nop	0
     11  2070				  -	      ELSE
     12  2070				  -	      bit	VSYNC
     13  2070				  -	      ENDIF
     14  2070				  -.CYCLES    SET	.CYCLES - 3
     15  2070					      ENDIF
     16  2070
     17  2070					      REPEAT	.CYCLES / 2
     18  2070		       ea		      nop
     19  2071					      REPEND
     19  2071		       85 10		      sta	RESP0	;  +3
     20  2073		       85 11		      sta	RESP1	;  +3
     21  2075		       c6 9c		      dec	temp1	;  +5
     22  2077		       e6 9c		      inc	temp1	;  +5
     23  2079		       c6 9c		      dec	temp1	;  +5
     24  207b		       e6 9c		      inc	temp1	;  +5
     25  207d		       c6 9c		      dec	temp1	;  +5
      0  207f					      sleep	3
      1  207f				   .CYCLES    SET	3
      2  207f
      3  207f				  -	      IF	.CYCLES < 2
      4  207f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  207f				  -	      ERR
      6  207f					      ENDIF
      7  207f
      8  207f					      IF	.CYCLES & 1
      9  207f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  207f		       04 00		      nop	0
     11  2081				  -	      ELSE
     12  2081				  -	      bit	VSYNC
     13  2081					      ENDIF
     14  2081				   .CYCLES    SET	.CYCLES - 3
     15  2081					      ENDIF
     16  2081
     17  2081				  -	      REPEAT	.CYCLES / 2
     18  2081				  -	      nop
     19  2081					      REPEND
     27  2081		       85 2a		      sta	HMOVE	; +76
     28  2083		       60		      RTS
     29  2084
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  2084					      include	"titlescreen/titlescreen_color.asm"
      1  2084
      2  2084							; This is where the titlescreen background color gets set. 
      3  2084							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2084							; if you want to change the color on the fly.
      5  2084
      6  2084				  -	      ifnconst	titlescreencolor
      7  2084				  -titlescreencolor
      8  2084					      endif
      9  2084		       00		      .byte.b	$00
     10  2085
------- FILE titlescreen/asm/titlescreen.asm
     73  2085
     74  2085					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  2085					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  2085
      2  2085				   draw_bmp_48x1_1
      3  2085
      4  2085		       a9 00		      lda	#0
      5  2087		       85 1b		      sta	GRP0
      6  2089		       85 1c		      sta	GRP1
      7  208b
      8  208b		       a0 0b		      ldy	#11
      9  208d				   bmp_48x1_1_pointersetup
     10  208d		       b9 c1 b0 	      lda	bmp_48x1_1_values,y
     11  2090		       99 96 00 	      sta	scorepointers,y
     12  2093		       88		      dey
     13  2094		       b9 c1 b0 	      lda	bmp_48x1_1_values,y
     14  2097				  -	      ifconst	bmp_48x1_1_index
     15  2097				  -	      sec
     16  2097				  -	      sbc	bmp_48x1_1_index
     17  2097					      endif
     18  2097		       99 96 00 	      sta	scorepointers,y
     19  209a		       88		      dey
     20  209b		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  209d
     22  209d		       a0 3e		      ldy	(#bmp_48x1_1_window-1)
     23  209f		       84 f1		      sty	aux2
     24  20a1
     25  20a1					      ifconst	bmp_48x1_1_background
     26  20a1		       ad 6a b2 	      lda	bmp_48x1_1_background
     27  20a4				  -	      else
     28  20a4				  -	      lda	titlescreencolor
     29  20a4					      endif
     30  20a4		       85 f3		      sta	aux4
     31  20a6
     32  20a6		       ad 6b b2 	      lda	bmp_48x1_1_color
     33  20a9		       85 06		      sta	COLUP0	;3
     34  20ab		       85 07		      sta	COLUP1	;3
     35  20ad		       85 2b		      sta	HMCLR	;3
     36  20af
     37  20af		       ad 84 b0 	      lda	titlescreencolor
     38  20b2		       85 08		      sta	COLUPF
     39  20b4
     40  20b4					      ifconst	bmp_48x1_1_PF1
     41  20b4		       ad 68 b2 	      lda	bmp_48x1_1_PF1
     42  20b7				  -	      else
     43  20b7				  -	      lda	#0
     44  20b7				  -	      nop
     45  20b7					      endif
     46  20b7		       85 0e		      sta	PF1
     47  20b9
     48  20b9					      ifconst	bmp_48x1_1_PF2
     49  20b9		       ad 69 b2 	      lda	bmp_48x1_1_PF2
     50  20bc				  -	      else
     51  20bc				  -	      lda	#0
     52  20bc				  -	      nop
     53  20bc					      endif
     54  20bc		       85 0f		      sta	PF2
     55  20be
     56  20be		       4c 15 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20c1
     58  20c1				   bmp_48x1_1_values
     59  20c1		       6c b2		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  20c3		       ac b2		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  20c5		       00 b3		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  20c7		       40 b3		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  20c9		       80 b3		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  20cb		       c0 b3		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  20cd
------- FILE titlescreen/asm/titlescreen.asm
     76  20cd					      endif		;mk_48x1_1_on
     77  20cd
     78  20cd					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  20cd					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  20cd
      2  20cd				   draw_bmp_48x1_2
      3  20cd
      4  20cd		       a9 00		      lda	#0
      5  20cf		       85 1b		      sta	GRP0
      6  20d1		       85 1c		      sta	GRP1
      7  20d3
      8  20d3		       a0 0b		      ldy	#11
      9  20d5				   bmp_48x1_2_pointersetup
     10  20d5		       b9 09 b1 	      lda	bmp_48x1_2_values,y
     11  20d8		       99 96 00 	      sta	scorepointers,y
     12  20db		       88		      dey
     13  20dc		       b9 09 b1 	      lda	bmp_48x1_2_values,y
     14  20df				  -	      ifconst	bmp_48x1_2_index
     15  20df				  -	      sec
     16  20df				  -	      sbc	bmp_48x1_2_index
     17  20df					      endif
     18  20df		       99 96 00 	      sta	scorepointers,y
     19  20e2		       88		      dey
     20  20e3		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  20e5
     22  20e5		       a0 0a		      ldy	(#bmp_48x1_2_window-1)
     23  20e7		       84 f1		      sty	aux2
     24  20e9
     25  20e9					      ifconst	bmp_48x1_2_background
     26  20e9		       ad 02 b4 	      lda	bmp_48x1_2_background
     27  20ec				  -	      else
     28  20ec				  -	      lda	titlescreencolor
     29  20ec					      endif
     30  20ec		       85 f3		      sta	aux4
     31  20ee
     32  20ee		       ad 03 b4 	      lda	bmp_48x1_2_color
     33  20f1		       85 06		      sta	COLUP0	;3
     34  20f3		       85 07		      sta	COLUP1	;3
     35  20f5		       85 2b		      sta	HMCLR	;3
     36  20f7
     37  20f7		       ad 84 b0 	      lda	titlescreencolor
     38  20fa		       85 08		      sta	COLUPF
     39  20fc
     40  20fc					      ifconst	bmp_48x1_2_PF1
     41  20fc		       ad 00 b4 	      lda	bmp_48x1_2_PF1
     42  20ff				  -	      else
     43  20ff				  -	      lda	#0
     44  20ff				  -	      nop
     45  20ff					      endif
     46  20ff		       85 0e		      sta	PF1
     47  2101
     48  2101					      ifconst	bmp_48x1_2_PF2
     49  2101		       ad 01 b4 	      lda	bmp_48x1_2_PF2
     50  2104				  -	      else
     51  2104				  -	      lda	#0
     52  2104				  -	      nop
     53  2104					      endif
     54  2104		       85 0f		      sta	PF2
     55  2106
     56  2106		       4c 15 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  2109
     58  2109				   bmp_48x1_2_values
     59  2109		       04 b4		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  210b		       10 b4		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  210d		       1c b4		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  210f		       28 b4		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  2111		       34 b4		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  2113		       40 b4		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  2115
------- FILE titlescreen/asm/titlescreen.asm
     80  2115					      endif		;mk_48x1_2_on
     81  2115
     82  2115				  -	      ifconst	mk_48x1_3_on
     83  2115				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2115					      endif		;mk_48x1_3_on
     85  2115
     86  2115				  -	      ifconst	mk_48x1_4_on
     87  2115				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2115					      endif		;mk_48x1_4_on
     89  2115
     90  2115				  -	      ifconst	mk_48x1_5_on
     91  2115				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2115					      endif		;mk_48x1_5_on
     93  2115
     94  2115				  -	      ifconst	mk_48x1_6_on
     95  2115				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2115					      endif		;mk_48x1_6_on
     97  2115
     98  2115				  -	      ifconst	mk_48x1_7_on
     99  2115				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2115					      endif		;mk_48x1_7_on
    101  2115
    102  2115				  -	      ifconst	mk_48x1_8_on
    103  2115				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2115					      endif		;mk_48x1_8_on
    105  2115
    106  2115				  -	      ifconst	mk_48x2_1_on
    107  2115				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  2115					      endif		;mk_48x2_1_on
    109  2115
    110  2115				  -	      ifconst	mk_48x2_2_on
    111  2115				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  2115					      endif		;mk_48x2_2_on
    113  2115
    114  2115				  -	      ifconst	mk_48x2_3_on
    115  2115				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  2115					      endif		;mk_48x2_3_on
    117  2115
    118  2115				  -	      ifconst	mk_48x2_4_on
    119  2115				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  2115					      endif		;mk_48x2_4_on
    121  2115
    122  2115				  -	      ifconst	mk_48x2_5_on
    123  2115				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  2115					      endif		;mk_48x2_5_on
    125  2115
    126  2115				  -	      ifconst	mk_48x2_6_on
    127  2115				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  2115					      endif		;mk_48x2_6_on
    129  2115
    130  2115				  -	      ifconst	mk_48x2_7_on
    131  2115				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  2115					      endif		;mk_48x2_7_on
    133  2115
    134  2115				  -	      ifconst	mk_48x2_8_on
    135  2115				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  2115					      endif		;mk_48x2_8_on
    137  2115
    138  2115					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  2115					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  2115				   draw_bmp_48x1_X
      2  2115
      3  2115		       a9 03		      lda	#3
      4  2117		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  2119		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  211b
      7  211b		       ba		      tsx
      8  211c		       86 f6		      stx	stack1	;save the stack pointer
      9  211e
     10  211e		       20 5c b0 	      jsr	position48
     11  2121
     12  2121		       a9 03		      lda	#3	;2
     13  2123		       85 25		      sta	VDELP0	;3
     14  2125		       85 26		      sta	VDELP1	;3
     15  2127
     16  2127		       a9 01		      lda	#1	;2
     17  2129		       85 0a		      sta	CTRLPF	;3
     18  212b
     19  212b							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  212b		       85 2b		      sta	HMCLR
     21  212d
     22  212d		       85 02		      sta	WSYNC
     23  212f
     24  212f		       e6 9c		      inc	temp1	;5
     25  2131		       c6 9c		      dec	temp1	;5
     26  2133		       e6 9c		      inc	temp1	;5
     27  2135		       c6 9c		      dec	temp1	;5
     28  2137		       e6 9c		      inc	temp1	;5
     29  2139		       c6 9c		      dec	temp1	;5
     30  213b		       e6 9c		      inc	temp1	;5
     31  213d		       c6 9c		      dec	temp1	;5
     32  213f		       e6 9c		      inc	temp1	;5
     33  2141		       c6 9c		      dec	temp1	;5
     34  2143
      0  2143					      sleep	5
      1  2143				   .CYCLES    SET	5
      2  2143
      3  2143				  -	      IF	.CYCLES < 2
      4  2143				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2143				  -	      ERR
      6  2143					      ENDIF
      7  2143
      8  2143					      IF	.CYCLES & 1
      9  2143					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2143		       04 00		      nop	0
     11  2145				  -	      ELSE
     12  2145				  -	      bit	VSYNC
     13  2145					      ENDIF
     14  2145				   .CYCLES    SET	.CYCLES - 3
     15  2145					      ENDIF
     16  2145
     17  2145					      REPEAT	.CYCLES / 2
     18  2145		       ea		      nop
     19  2146					      REPEND
     36  2146
     37  2146		       c8		      iny
     38  2147
     39  2147		       4c 4a b1 	      jmp	pf48x1_X_loop_entry
     40  214a
     41  214a				  -	      if	>. != >[.+$2a]
     42  214a				  -	      align	256
     43  214a					      endif
     44  214a
     45  214a				   pf48x1_X_loop_entry
     46  214a				   pf48x1_X_loop
     47  214a		       88		      dey		;2
     48  214b		       84 f1		      sty	aux2	;3
     49  214d		       b1 96		      lda	(scorepointers+0),y	;5
     50  214f		       85 1b		      sta	GRP0	;3
     51  2151
     52  2151		       b1 98		      lda	(scorepointers+2),y	;5
     53  2153		       85 1c		      sta	GRP1	;3
     54  2155		       b1 9a		      lda	(scorepointers+4),y	;5
     55  2157		       85 1b		      sta	GRP0	;3
     56  2159
      0  2159					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  2159				   .CYCLES    SET	2
      2  2159
      3  2159				  -	      IF	.CYCLES < 2
      4  2159				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2159				  -	      ERR
      6  2159					      ENDIF
      7  2159
      8  2159				  -	      IF	.CYCLES & 1
      9  2159				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2159				  -	      nop	0
     11  2159				  -	      ELSE
     12  2159				  -	      bit	VSYNC
     13  2159				  -	      ENDIF
     14  2159				  -.CYCLES    SET	.CYCLES - 3
     15  2159					      ENDIF
     16  2159
     17  2159					      REPEAT	.CYCLES / 2
     18  2159		       ea		      nop
     19  215a					      REPEND
     58  215a		       a5 f3		      lda	aux4	;3
     59  215c		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  215e
     61  215e		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2160		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2162		       85 f7		      sta	stack2	;3
     64  2164		       b1 9c		      lda	(scorepointers+6),y	;5
     65  2166		       a4 f7		      ldy	stack2	;3
     66  2168
     67  2168		       85 1c		      sta	GRP1	;3
     68  216a		       84 1b		      sty	GRP0	;3
     69  216c		       86 1c		      stx	GRP1	;3
     70  216e		       84 1b		      sty	GRP0	;3
     71  2170
     72  2170		       a4 f1		      ldy	aux2	;3
     73  2172		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  2174
     75  2174				   pf48x1_X_codeend
     76  2174							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  2174
     78  2174		       a9 00		      lda	#0
     79  2176		       85 1b		      sta	GRP0
     80  2178		       85 1c		      sta	GRP1
     81  217a		       85 1b		      sta	GRP0
     82  217c		       85 1c		      sta	GRP1
     83  217e		       85 1f		      sta	ENABL
     84  2180		       85 1d		      sta	ENAM0
     85  2182		       85 25		      sta	VDELP0
     86  2184		       85 26		      sta	VDELP1
     87  2186		       85 0d		      sta	PF0
     88  2188		       85 0e		      sta	PF1
     89  218a		       85 0f		      sta	PF2
     90  218c
     91  218c		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  218e		       9a		      txs
     93  218f		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2190					      endif		;mk_48x1_X_on
    141  2190
    142  2190				  -	      ifconst	mk_48x2_X_on
    143  2190				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  2190					      endif		;mk_48x2_X_on
    145  2190
    146  2190
    147  2190				  -	      ifconst	mk_96x2_1_on
    148  2190				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  2190					      endif		;mk_96x2_1_on
    150  2190
    151  2190				  -	      ifconst	mk_96x2_2_on
    152  2190				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2190					      endif		;mk_96x2_2_on
    154  2190
    155  2190				  -	      ifconst	mk_96x2_3_on
    156  2190				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2190					      endif		;mk_96x2_3_on
    158  2190
    159  2190				  -	      ifconst	mk_96x2_4_on
    160  2190				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2190					      endif		;mk_96x2_4_on
    162  2190
    163  2190				  -	      ifconst	mk_96x2_5_on
    164  2190				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2190					      endif		;mk_96x2_5_on
    166  2190
    167  2190				  -	      ifconst	mk_96x2_6_on
    168  2190				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2190					      endif		;mk_96x2_6_on
    170  2190
    171  2190				  -	      ifconst	mk_96x2_7_on
    172  2190				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2190					      endif		;mk_96x2_7_on
    174  2190
    175  2190				  -	      ifconst	mk_96x2_8_on
    176  2190				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2190					      endif		;mk_96x2_8_on
    178  2190
    179  2190					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  2190					      include	"titlescreen/asm/score_kernel.asm"
      1  2190							; The batari Basic score kernel
      2  2190							; This minikernel is not under the same license as the rest of the
      3  2190							; titlescreen code. Refer to the bB license before you use this in
      4  2190							; a non-bB program.
      5  2190
      6  2190				   draw_score_display
      7  2190
      8  2190		       a7 93		      lax	score+0
      9  2192		       20 43 b2 	      jsr	miniscorepointerset
     10  2195		       84 9e		      sty	scorepointers+8
     11  2197		       86 96		      stx	scorepointers+0
     12  2199		       a7 94		      lax	score+1
     13  219b		       20 43 b2 	      jsr	miniscorepointerset
     14  219e		       84 9a		      sty	scorepointers+4
     15  21a0		       86 9c		      stx	scorepointers+6
     16  21a2		       a7 95		      lax	score+2
     17  21a4		       20 43 b2 	      jsr	miniscorepointerset
     18  21a7		       84 a0		      sty	scorepointers+10
     19  21a9		       86 98		      stx	scorepointers+2
     20  21ab
     21  21ab		       85 2b		      sta	HMCLR
     22  21ad		       ba		      tsx
     23  21ae		       86 f6		      stx	stack1
     24  21b0							;ldx #$20
     25  21b0		       a2 60		      ldx	#$60
     26  21b2		       86 20		      stx	HMP0
     27  21b4
     28  21b4		       a2 00		      ldx	#0
     29  21b6		       85 02		      sta	WSYNC	;   0
     30  21b8		       86 1b		      STx	GRP0	; 3 3
     31  21ba		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  21bc
      0  21bc					      sleep	7	; 7 13
      1  21bc				   .CYCLES    SET	7
      2  21bc
      3  21bc				  -	      IF	.CYCLES < 2
      4  21bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21bc				  -	      ERR
      6  21bc					      ENDIF
      7  21bc
      8  21bc					      IF	.CYCLES & 1
      9  21bc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  21bc		       04 00		      nop	0
     11  21be				  -	      ELSE
     12  21be				  -	      bit	VSYNC
     13  21be					      ENDIF
     14  21be				   .CYCLES    SET	.CYCLES - 3
     15  21be					      ENDIF
     16  21be
     17  21be					      REPEAT	.CYCLES / 2
     18  21be		       ea		      nop
     17  21be					      REPEND
     18  21bf		       ea		      nop
     19  21c0					      REPEND
     34  21c0
     35  21c0		       a9 b5		      lda	#>miniscoretable	; 2 15
     36  21c2		       95 97		      sta	scorepointers+1,x	; 4 19
     37  21c4		       95 99		      sta	scorepointers+3,x	; 4 23
     38  21c6		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  21c8		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  21ca		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  21cc		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  21ce
     43  21ce		       a0 07		      LDY	#7	; 2 41
     44  21d0		       85 10		      STA	RESP0	; 3 44
     45  21d2		       85 11		      STA	RESP1	; 3 47
     46  21d4
     47  21d4		       a9 03		      LDA	#$03	; 2 49
     48  21d6		       85 04		      STA	NUSIZ0	; 3 52
     49  21d8		       95 05		      STA	NUSIZ1,x	; 4 56
     50  21da		       85 25		      STA	VDELP0	; 3 59
     51  21dc		       85 26		      STA	VDELP1	; 3 62
     52  21de							;LDA #$30		; 2 64
     53  21de		       a9 70		      LDA	#$70	; 2 64
     54  21e0		       85 21		      STA	HMP1	; 3 67
     55  21e2		       a5 a3		      LDA	scorecolor	; 3 70
     56  21e4		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  21e6				  -	      ifconst	score_kernel_fade
     58  21e6				  -	      and	score_kernel_fade
     59  21e6					      endif
     60  21e6
     61  21e6		       85 06		      STA	COLUP0
     62  21e8		       85 07		      STA	COLUP1
     63  21ea				  -	      ifconst	scorefade
     64  21ea				  -	      STA	stack2	; scorefade
     65  21ea					      endif
     66  21ea		       b1 96		      lda	(scorepointers),y
     67  21ec		       85 1b		      sta	GRP0
     68  21ee		       b1 9e		      lda	(scorepointers+8),y
     69  21f0		       85 02		      sta	WSYNC
      0  21f2					      sleep	2
      1  21f2				   .CYCLES    SET	2
      2  21f2
      3  21f2				  -	      IF	.CYCLES < 2
      4  21f2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21f2				  -	      ERR
      6  21f2					      ENDIF
      7  21f2
      8  21f2				  -	      IF	.CYCLES & 1
      9  21f2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21f2				  -	      nop	0
     11  21f2				  -	      ELSE
     12  21f2				  -	      bit	VSYNC
     13  21f2				  -	      ENDIF
     14  21f2				  -.CYCLES    SET	.CYCLES - 3
     15  21f2					      ENDIF
     16  21f2
     17  21f2					      REPEAT	.CYCLES / 2
     18  21f2		       ea		      nop
     19  21f3					      REPEND
     71  21f3		       4c 0b b2 	      jmp	beginscoreloop
     72  21f6
     73  21f6					      if	((<*)>$28)
     74  2200		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2200					      endif
     76  2200
     77  2200				   scoreloop2
     78  2200				  -	      ifconst	scorefade
     79  2200				  -	      lda	stack2
     80  2200				  -	      sta	COLUP0
     81  2200				  -	      sta	COLUP1
     82  2200					      else
      0  2200					      sleep	9
      1  2200				   .CYCLES    SET	9
      2  2200
      3  2200				  -	      IF	.CYCLES < 2
      4  2200				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2200				  -	      ERR
      6  2200					      ENDIF
      7  2200
      8  2200					      IF	.CYCLES & 1
      9  2200					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2200		       04 00		      nop	0
     11  2202				  -	      ELSE
     12  2202				  -	      bit	VSYNC
     13  2202					      ENDIF
     14  2202				   .CYCLES    SET	.CYCLES - 3
     15  2202					      ENDIF
     16  2202
     17  2202					      REPEAT	.CYCLES / 2
     18  2202		       ea		      nop
     17  2202					      REPEND
     18  2203		       ea		      nop
     17  2203					      REPEND
     18  2204		       ea		      nop
     19  2205					      REPEND
     84  2205					      endif
     85  2205		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2207		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2209		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  220b							; cycle 0
     89  220b				   beginscoreloop
     90  220b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  220d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  220f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2211		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2213		       9a		      txs
     95  2214		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2216
     97  2216				  -	      ifconst	scorefade
     98  2216				  -	      dec	stack2
     99  2216					      else
      0  2216					      sleep	5
      1  2216				   .CYCLES    SET	5
      2  2216
      3  2216				  -	      IF	.CYCLES < 2
      4  2216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2216				  -	      ERR
      6  2216					      ENDIF
      7  2216
      8  2216					      IF	.CYCLES & 1
      9  2216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2216		       04 00		      nop	0
     11  2218				  -	      ELSE
     12  2218				  -	      bit	VSYNC
     13  2218					      ENDIF
     14  2218				   .CYCLES    SET	.CYCLES - 3
     15  2218					      ENDIF
     16  2218
     17  2218					      REPEAT	.CYCLES / 2
     18  2218		       ea		      nop
     19  2219					      REPEND
    101  2219					      endif
      0  2219					      sleep	2
      1  2219				   .CYCLES    SET	2
      2  2219
      3  2219				  -	      IF	.CYCLES < 2
      4  2219				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2219				  -	      ERR
      6  2219					      ENDIF
      7  2219
      8  2219				  -	      IF	.CYCLES & 1
      9  2219				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2219				  -	      nop	0
     11  2219				  -	      ELSE
     12  2219				  -	      bit	VSYNC
     13  2219				  -	      ENDIF
     14  2219				  -.CYCLES    SET	.CYCLES - 3
     15  2219					      ENDIF
     16  2219
     17  2219					      REPEAT	.CYCLES / 2
     18  2219		       ea		      nop
     19  221a					      REPEND
    103  221a
    104  221a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  221c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  221e		       ba		      tsx
    107  221f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2221		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2223
    110  2223		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2225		       88		      dey
    112  2226		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2228				   scoreloop2end
    114  2228
    115  2228							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2228
    117  2228
    118  2228		       a6 f6		      ldx	stack1
    119  222a		       9a		      txs
    120  222b
    121  222b		       a9 00		      LDA	#0
    122  222d		       85 0e		      sta	PF1
    123  222f		       85 1b		      STA	GRP0
    124  2231		       85 1c		      STA	GRP1
    125  2233		       85 25		      STA	VDELP0
    126  2235		       85 26		      STA	VDELP1
    127  2237		       85 04		      STA	NUSIZ0
    128  2239		       85 05		      STA	NUSIZ1
    129  223b
    130  223b							; clear out the score pointers in case they're stolen DPC variables...
    131  223b		       a2 0b		      ldx	#11
    132  223d				   clearscoreploop
    133  223d		       95 96		      sta	scorepointers,x
    134  223f		       ca		      dex
    135  2240		       10 fb		      bpl	clearscoreploop
    136  2242
    137  2242
    138  2242							;;ldy temp3
    139  2242							;ldy scorepointers+8
    140  2242							;sty scorepointers+3
    141  2242
    142  2242							;;ldy temp5
    143  2242							;ldy scorepointers+10
    144  2242							;sty scorepointers+5
    145  2242		       60		      rts
    146  2243
    147  2243				   miniscorepointerset
    148  2243		       29 0f		      and	#$0F
    149  2245		       0a		      asl
    150  2246		       0a		      asl
    151  2247		       0a		      asl
    152  2248		       69 00		      adc	#<miniscoretable
    153  224a		       a8		      tay
    154  224b		       8a		      txa
    155  224c		       29 f0		      and	#$F0
    156  224e		       4a		      lsr
    157  224f		       69 00		      adc	#<miniscoretable
    158  2251		       aa		      tax
    159  2252		       60		      rts
    160  2253
------- FILE titlescreen/asm/titlescreen.asm
    181  2253					      endif		;mk_score_on
    182  2253
    183  2253				  -	      ifconst	mk_gameselect_on
    184  2253				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  2253					      endif		;mk_gameselect_on
    186  2253
    187  2253				   PFWAIT
    188  2253		       ad 84 02 	      lda	INTIM
    189  2256		       d0 fb		      bne	PFWAIT
    190  2258		       85 02		      sta	WSYNC
    191  225a
    192  225a				   OVERSCAN
    193  225a					      ifnconst	overscan_time
    194  225a		       a9 a2		      lda	#34+128
    195  225c				  -	      else
    196  225c				  -	      lda	#overscan_time+128-5
    197  225c					      endif
    198  225c		       8d 96 02 	      sta	TIM64T
    199  225f
    200  225f							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  225f				  -	      ifconst	player9height
    202  225f				  -	      ldy	#8
    203  225f				  -	      lda	#0
    204  225f				  -	      sta	player0height
    205  225f				  -.playerheightfixloop
    206  225f				  -	      sta	player1height,y
    207  225f				  -	      ifconst	_NUSIZ1
    208  225f				  -	      sta	_NUSIZ1,y
    209  225f				  -	      endif
    210  225f				  -	      dey
    211  225f				  -	      bpl	.playerheightfixloop
    212  225f					      endif
    213  225f
    214  225f		       a9 c2		      lda	#%11000010
    215  2261		       85 02		      sta	WSYNC
    216  2263		       85 01		      sta	VBLANK
      0  2265					      RETURN
      1  2265				  -	      ifnconst	bankswitch
      2  2265				  -	      rts
      3  2265					      else
      4  2265		       4c dd ff 	      jmp	BS_return
      5  2268					      endif
    218  2268
    219  2268					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  2268					      include	"titlescreen/48x1_1_image.asm"
      1  2268
      2  2268							;*** The height of the displayed data...
      3  2268		       00 3f	   bmp_48x1_1_window =	63
      4  2268
      5  2268							;*** The height of the bitmap data. This can be larger than 
      6  2268							;*** the displayed data height, if you're scrolling or animating 
      7  2268							;*** the data...
      8  2268		       00 3f	   bmp_48x1_1_height =	63
      9  2268
     10  2268				  -	      ifnconst	bmp_48x1_1_PF1
     11  2268				  -bmp_48x1_1_PF1
     12  2268					      endif
     13  2268		       0f		      BYTE.b	%00001111
     14  2269				  -	      ifnconst	bmp_48x1_1_PF2
     15  2269				  -bmp_48x1_1_PF2
     16  2269					      endif
     17  2269		       ff		      BYTE.b	%11111111
     18  226a				  -	      ifnconst	bmp_48x1_1_background
     19  226a				  -bmp_48x1_1_background
     20  226a					      endif
     21  226a		       c2		      BYTE.b	$c2
     22  226b
     23  226b				  -	      ifnconst	bmp_48x1_1_color
     24  226b				  -bmp_48x1_1_color
     25  226b					      endif
     26  226b							; *** this is the bitmap color. If you want to change it in a 
     27  226b							; *** variable instead, dim one in bB called "bmp_48x1_1_color"
     28  226b		       0f		      .byte.b	$0f
     29  226c
     30  226c
     31  226c				  -	      if	>. != >[.+bmp_48x1_1_height]
     32  226c				  -	      align	256
     33  226c					      endif
     34  226c
     35  226c				   bmp_48x1_1_00
     36  226c		       00		      BYTE.b	%00000000
     37  226d		       00		      BYTE.b	%00000000
     38  226e		       00		      BYTE.b	%00000000
     39  226f		       00		      BYTE.b	%00000000
     40  2270		       00		      BYTE.b	%00000000
     41  2271		       00		      BYTE.b	%00000000
     42  2272		       00		      BYTE.b	%00000000
     43  2273		       00		      BYTE.b	%00000000
     44  2274		       00		      BYTE.b	%00000000
     45  2275		       00		      BYTE.b	%00000000
     46  2276		       00		      BYTE.b	%00000000
     47  2277		       00		      BYTE.b	%00000000
     48  2278		       00		      BYTE.b	%00000000
     49  2279		       00		      BYTE.b	%00000000
     50  227a		       00		      BYTE.b	%00000000
     51  227b		       00		      BYTE.b	%00000000
     52  227c		       00		      BYTE.b	%00000000
     53  227d		       00		      BYTE.b	%00000000
     54  227e		       00		      BYTE.b	%00000000
     55  227f		       00		      BYTE.b	%00000000
     56  2280		       00		      BYTE.b	%00000000
     57  2281		       00		      BYTE.b	%00000000
     58  2282		       00		      BYTE.b	%00000000
     59  2283		       00		      BYTE.b	%00000000
     60  2284		       00		      BYTE.b	%00000000
     61  2285		       00		      BYTE.b	%00000000
     62  2286		       00		      BYTE.b	%00000000
     63  2287		       00		      BYTE.b	%00000000
     64  2288		       f8		      BYTE.b	%11111000
     65  2289		       fc		      BYTE.b	%11111100
     66  228a		       3c		      BYTE.b	%00111100
     67  228b		       1e		      BYTE.b	%00011110
     68  228c		       1e		      BYTE.b	%00011110
     69  228d		       1e		      BYTE.b	%00011110
     70  228e		       1e		      BYTE.b	%00011110
     71  228f		       1e		      BYTE.b	%00011110
     72  2290		       1e		      BYTE.b	%00011110
     73  2291		       1e		      BYTE.b	%00011110
     74  2292		       1e		      BYTE.b	%00011110
     75  2293		       1e		      BYTE.b	%00011110
     76  2294		       1e		      BYTE.b	%00011110
     77  2295		       1e		      BYTE.b	%00011110
     78  2296		       1e		      BYTE.b	%00011110
     79  2297		       7f		      BYTE.b	%01111111
     80  2298		       7f		      BYTE.b	%01111111
     81  2299		       7f		      BYTE.b	%01111111
     82  229a		       1e		      BYTE.b	%00011110
     83  229b		       1e		      BYTE.b	%00011110
     84  229c		       1f		      BYTE.b	%00011111
     85  229d		       0f		      BYTE.b	%00001111
     86  229e		       07		      BYTE.b	%00000111
     87  229f		       00		      BYTE.b	%00000000
     88  22a0		       00		      BYTE.b	%00000000
     89  22a1		       00		      BYTE.b	%00000000
     90  22a2		       00		      BYTE.b	%00000000
     91  22a3		       00		      BYTE.b	%00000000
     92  22a4		       00		      BYTE.b	%00000000
     93  22a5		       00		      BYTE.b	%00000000
     94  22a6		       00		      BYTE.b	%00000000
     95  22a7		       00		      BYTE.b	%00000000
     96  22a8		       00		      BYTE.b	%00000000
     97  22a9		       00		      BYTE.b	%00000000
     98  22aa		       00		      BYTE.b	%00000000
     99  22ab		       00		      BYTE.b	%00000000
    100  22ac
    101  22ac				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    102  22ac				  -	      align	256
    103  22ac					      endif
    104  22ac
    105  22ac				   bmp_48x1_1_01
    106  22ac		       00		      BYTE.b	%00000000
    107  22ad		       07		      BYTE.b	%00000111
    108  22ae		       0f		      BYTE.b	%00001111
    109  22af		       1f		      BYTE.b	%00011111
    110  22b0		       1e		      BYTE.b	%00011110
    111  22b1		       1e		      BYTE.b	%00011110
    112  22b2		       1f		      BYTE.b	%00011111
    113  22b3		       1f		      BYTE.b	%00011111
    114  22b4		       1f		      BYTE.b	%00011111
    115  22b5		       1e		      BYTE.b	%00011110
    116  22b6		       1e		      BYTE.b	%00011110
    117  22b7		       1f		      BYTE.b	%00011111
    118  22b8		       0f		      BYTE.b	%00001111
    119  22b9		       07		      BYTE.b	%00000111
    120  22ba		       00		      BYTE.b	%00000000
    121  22bb		       00		      BYTE.b	%00000000
    122  22bc		       00		      BYTE.b	%00000000
    123  22bd		       07		      BYTE.b	%00000111
    124  22be		       0f		      BYTE.b	%00001111
    125  22bf		       1f		      BYTE.b	%00011111
    126  22c0		       1e		      BYTE.b	%00011110
    127  22c1		       1e		      BYTE.b	%00011110
    128  22c2		       1e		      BYTE.b	%00011110
    129  22c3		       1e		      BYTE.b	%00011110
    130  22c4		       1e		      BYTE.b	%00011110
    131  22c5		       1e		      BYTE.b	%00011110
    132  22c6		       1e		      BYTE.b	%00011110
    133  22c7		       1f		      BYTE.b	%00011111
    134  22c8		       0f		      BYTE.b	%00001111
    135  22c9		       07		      BYTE.b	%00000111
    136  22ca		       00		      BYTE.b	%00000000
    137  22cb		       00		      BYTE.b	%00000000
    138  22cc		       00		      BYTE.b	%00000000
    139  22cd		       07		      BYTE.b	%00000111
    140  22ce		       0f		      BYTE.b	%00001111
    141  22cf		       1f		      BYTE.b	%00011111
    142  22d0		       1e		      BYTE.b	%00011110
    143  22d1		       1e		      BYTE.b	%00011110
    144  22d2		       1f		      BYTE.b	%00011111
    145  22d3		       0f		      BYTE.b	%00001111
    146  22d4		       07		      BYTE.b	%00000111
    147  22d5		       00		      BYTE.b	%00000000
    148  22d6		       1c		      BYTE.b	%00011100
    149  22d7		       df		      BYTE.b	%11011111
    150  22d8		       cf		      BYTE.b	%11001111
    151  22d9		       c7		      BYTE.b	%11000111
    152  22da		       00		      BYTE.b	%00000000
    153  22db		       00		      BYTE.b	%00000000
    154  22dc		       c0		      BYTE.b	%11000000
    155  22dd		       c7		      BYTE.b	%11000111
    156  22de		       c7		      BYTE.b	%11000111
    157  22df		       07		      BYTE.b	%00000111
    158  22e0		       07		      BYTE.b	%00000111
    159  22e1		       07		      BYTE.b	%00000111
    160  22e2		       07		      BYTE.b	%00000111
    161  22e3		       07		      BYTE.b	%00000111
    162  22e4		       07		      BYTE.b	%00000111
    163  22e5		       07		      BYTE.b	%00000111
    164  22e6		       07		      BYTE.b	%00000111
    165  22e7		       07		      BYTE.b	%00000111
    166  22e8		       07		      BYTE.b	%00000111
    167  22e9		       03		      BYTE.b	%00000011
    168  22ea		       00		      BYTE.b	%00000000
    169  22eb		       07		      BYTE.b	%00000111
    170  22ec
    171  22ec					      if	>. != >[.+(bmp_48x1_1_height)]
    172  2300		       00 00 00 00*	      align	256
    173  2300					      endif
    174  2300
    175  2300				   bmp_48x1_1_02
    176  2300		       00		      BYTE.b	%00000000
    177  2301		       f0		      BYTE.b	%11110000
    178  2302		       f8		      BYTE.b	%11111000
    179  2303		       fc		      BYTE.b	%11111100
    180  2304		       3c		      BYTE.b	%00111100
    181  2305		       00		      BYTE.b	%00000000
    182  2306		       f0		      BYTE.b	%11110000
    183  2307		       f8		      BYTE.b	%11111000
    184  2308		       fc		      BYTE.b	%11111100
    185  2309		       3c		      BYTE.b	%00111100
    186  230a		       3c		      BYTE.b	%00111100
    187  230b		       fc		      BYTE.b	%11111100
    188  230c		       f8		      BYTE.b	%11111000
    189  230d		       f0		      BYTE.b	%11110000
    190  230e		       00		      BYTE.b	%00000000
    191  230f		       00		      BYTE.b	%00000000
    192  2310		       00		      BYTE.b	%00000000
    193  2311		       f0		      BYTE.b	%11110000
    194  2312		       f8		      BYTE.b	%11111000
    195  2313		       fc		      BYTE.b	%11111100
    196  2314		       3c		      BYTE.b	%00111100
    197  2315		       00		      BYTE.b	%00000000
    198  2316		       00		      BYTE.b	%00000000
    199  2317		       00		      BYTE.b	%00000000
    200  2318		       00		      BYTE.b	%00000000
    201  2319		       18		      BYTE.b	%00011000
    202  231a		       3c		      BYTE.b	%00111100
    203  231b		       fc		      BYTE.b	%11111100
    204  231c		       f8		      BYTE.b	%11111000
    205  231d		       f0		      BYTE.b	%11110000
    206  231e		       00		      BYTE.b	%00000000
    207  231f		       00		      BYTE.b	%00000000
    208  2320		       00		      BYTE.b	%00000000
    209  2321		       fc		      BYTE.b	%11111100
    210  2322		       fc		      BYTE.b	%11111100
    211  2323		       fc		      BYTE.b	%11111100
    212  2324		       3c		      BYTE.b	%00111100
    213  2325		       1c		      BYTE.b	%00011100
    214  2326		       fc		      BYTE.b	%11111100
    215  2327		       fc		      BYTE.b	%11111100
    216  2328		       fc		      BYTE.b	%11111100
    217  2329		       3c		      BYTE.b	%00111100
    218  232a		       3c		      BYTE.b	%00111100
    219  232b		       fc		      BYTE.b	%11111100
    220  232c		       f8		      BYTE.b	%11111000
    221  232d		       f0		      BYTE.b	%11110000
    222  232e		       00		      BYTE.b	%00000000
    223  232f		       00		      BYTE.b	%00000000
    224  2330		       00		      BYTE.b	%00000000
    225  2331		       00		      BYTE.b	%00000000
    226  2332		       80		      BYTE.b	%10000000
    227  2333		       80		      BYTE.b	%10000000
    228  2334		       80		      BYTE.b	%10000000
    229  2335		       80		      BYTE.b	%10000000
    230  2336		       80		      BYTE.b	%10000000
    231  2337		       80		      BYTE.b	%10000000
    232  2338		       80		      BYTE.b	%10000000
    233  2339		       80		      BYTE.b	%10000000
    234  233a		       80		      BYTE.b	%10000000
    235  233b		       f8		      BYTE.b	%11111000
    236  233c		       f8		      BYTE.b	%11111000
    237  233d		       f0		      BYTE.b	%11110000
    238  233e		       00		      BYTE.b	%00000000
    239  233f		       80		      BYTE.b	%10000000
    240  2340
    241  2340				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    242  2340				  -	      align	256
    243  2340					      endif
    244  2340
    245  2340				   bmp_48x1_1_03
    246  2340		       00		      BYTE.b	%00000000
    247  2341		       00		      BYTE.b	%00000000
    248  2342		       00		      BYTE.b	%00000000
    249  2343		       00		      BYTE.b	%00000000
    250  2344		       00		      BYTE.b	%00000000
    251  2345		       00		      BYTE.b	%00000000
    252  2346		       00		      BYTE.b	%00000000
    253  2347		       00		      BYTE.b	%00000000
    254  2348		       00		      BYTE.b	%00000000
    255  2349		       00		      BYTE.b	%00000000
    256  234a		       00		      BYTE.b	%00000000
    257  234b		       00		      BYTE.b	%00000000
    258  234c		       00		      BYTE.b	%00000000
    259  234d		       00		      BYTE.b	%00000000
    260  234e		       00		      BYTE.b	%00000000
    261  234f		       00		      BYTE.b	%00000000
    262  2350		       00		      BYTE.b	%00000000
    263  2351		       00		      BYTE.b	%00000000
    264  2352		       00		      BYTE.b	%00000000
    265  2353		       00		      BYTE.b	%00000000
    266  2354		       00		      BYTE.b	%00000000
    267  2355		       00		      BYTE.b	%00000000
    268  2356		       00		      BYTE.b	%00000000
    269  2357		       00		      BYTE.b	%00000000
    270  2358		       00		      BYTE.b	%00000000
    271  2359		       00		      BYTE.b	%00000000
    272  235a		       00		      BYTE.b	%00000000
    273  235b		       00		      BYTE.b	%00000000
    274  235c		       00		      BYTE.b	%00000000
    275  235d		       00		      BYTE.b	%00000000
    276  235e		       00		      BYTE.b	%00000000
    277  235f		       00		      BYTE.b	%00000000
    278  2360		       00		      BYTE.b	%00000000
    279  2361		       3f		      BYTE.b	%00111111
    280  2362		       7f		      BYTE.b	%01111111
    281  2363		       ff		      BYTE.b	%11111111
    282  2364		       f1		      BYTE.b	%11110001
    283  2365		       f0		      BYTE.b	%11110000
    284  2366		       f0		      BYTE.b	%11110000
    285  2367		       f0		      BYTE.b	%11110000
    286  2368		       f0		      BYTE.b	%11110000
    287  2369		       f0		      BYTE.b	%11110000
    288  236a		       f1		      BYTE.b	%11110001
    289  236b		       ff		      BYTE.b	%11111111
    290  236c		       7f		      BYTE.b	%01111111
    291  236d		       3f		      BYTE.b	%00111111
    292  236e		       00		      BYTE.b	%00000000
    293  236f		       00		      BYTE.b	%00000000
    294  2370		       00		      BYTE.b	%00000000
    295  2371		       00		      BYTE.b	%00000000
    296  2372		       00		      BYTE.b	%00000000
    297  2373		       00		      BYTE.b	%00000000
    298  2374		       00		      BYTE.b	%00000000
    299  2375		       00		      BYTE.b	%00000000
    300  2376		       00		      BYTE.b	%00000000
    301  2377		       00		      BYTE.b	%00000000
    302  2378		       00		      BYTE.b	%00000000
    303  2379		       00		      BYTE.b	%00000000
    304  237a		       00		      BYTE.b	%00000000
    305  237b		       00		      BYTE.b	%00000000
    306  237c		       00		      BYTE.b	%00000000
    307  237d		       00		      BYTE.b	%00000000
    308  237e		       00		      BYTE.b	%00000000
    309  237f		       00		      BYTE.b	%00000000
    310  2380
    311  2380				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    312  2380				  -	      align	256
    313  2380					      endif
    314  2380
    315  2380				   bmp_48x1_1_04
    316  2380		       00		      BYTE.b	%00000000
    317  2381		       00		      BYTE.b	%00000000
    318  2382		       00		      BYTE.b	%00000000
    319  2383		       00		      BYTE.b	%00000000
    320  2384		       00		      BYTE.b	%00000000
    321  2385		       00		      BYTE.b	%00000000
    322  2386		       00		      BYTE.b	%00000000
    323  2387		       00		      BYTE.b	%00000000
    324  2388		       00		      BYTE.b	%00000000
    325  2389		       00		      BYTE.b	%00000000
    326  238a		       00		      BYTE.b	%00000000
    327  238b		       00		      BYTE.b	%00000000
    328  238c		       00		      BYTE.b	%00000000
    329  238d		       00		      BYTE.b	%00000000
    330  238e		       00		      BYTE.b	%00000000
    331  238f		       00		      BYTE.b	%00000000
    332  2390		       00		      BYTE.b	%00000000
    333  2391		       00		      BYTE.b	%00000000
    334  2392		       00		      BYTE.b	%00000000
    335  2393		       00		      BYTE.b	%00000000
    336  2394		       00		      BYTE.b	%00000000
    337  2395		       00		      BYTE.b	%00000000
    338  2396		       00		      BYTE.b	%00000000
    339  2397		       00		      BYTE.b	%00000000
    340  2398		       00		      BYTE.b	%00000000
    341  2399		       00		      BYTE.b	%00000000
    342  239a		       00		      BYTE.b	%00000000
    343  239b		       00		      BYTE.b	%00000000
    344  239c		       00		      BYTE.b	%00000000
    345  239d		       00		      BYTE.b	%00000000
    346  239e		       00		      BYTE.b	%00000000
    347  239f		       00		      BYTE.b	%00000000
    348  23a0		       00		      BYTE.b	%00000000
    349  23a1		       81		      BYTE.b	%10000001
    350  23a2		       c3		      BYTE.b	%11000011
    351  23a3		       e7		      BYTE.b	%11100111
    352  23a4		       e7		      BYTE.b	%11100111
    353  23a5		       07		      BYTE.b	%00000111
    354  23a6		       07		      BYTE.b	%00000111
    355  23a7		       07		      BYTE.b	%00000111
    356  23a8		       07		      BYTE.b	%00000111
    357  23a9		       c7		      BYTE.b	%11000111
    358  23aa		       e7		      BYTE.b	%11100111
    359  23ab		       e7		      BYTE.b	%11100111
    360  23ac		       c3		      BYTE.b	%11000011
    361  23ad		       81		      BYTE.b	%10000001
    362  23ae		       00		      BYTE.b	%00000000
    363  23af		       00		      BYTE.b	%00000000
    364  23b0		       00		      BYTE.b	%00000000
    365  23b1		       00		      BYTE.b	%00000000
    366  23b2		       00		      BYTE.b	%00000000
    367  23b3		       00		      BYTE.b	%00000000
    368  23b4		       00		      BYTE.b	%00000000
    369  23b5		       00		      BYTE.b	%00000000
    370  23b6		       00		      BYTE.b	%00000000
    371  23b7		       00		      BYTE.b	%00000000
    372  23b8		       00		      BYTE.b	%00000000
    373  23b9		       00		      BYTE.b	%00000000
    374  23ba		       00		      BYTE.b	%00000000
    375  23bb		       00		      BYTE.b	%00000000
    376  23bc		       00		      BYTE.b	%00000000
    377  23bd		       00		      BYTE.b	%00000000
    378  23be		       00		      BYTE.b	%00000000
    379  23bf		       00		      BYTE.b	%00000000
    380  23c0
    381  23c0				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    382  23c0				  -	      align	256
    383  23c0					      endif
    384  23c0
    385  23c0				   bmp_48x1_1_05
    386  23c0		       00		      BYTE.b	%00000000
    387  23c1		       00		      BYTE.b	%00000000
    388  23c2		       00		      BYTE.b	%00000000
    389  23c3		       00		      BYTE.b	%00000000
    390  23c4		       00		      BYTE.b	%00000000
    391  23c5		       00		      BYTE.b	%00000000
    392  23c6		       00		      BYTE.b	%00000000
    393  23c7		       00		      BYTE.b	%00000000
    394  23c8		       00		      BYTE.b	%00000000
    395  23c9		       00		      BYTE.b	%00000000
    396  23ca		       00		      BYTE.b	%00000000
    397  23cb		       00		      BYTE.b	%00000000
    398  23cc		       00		      BYTE.b	%00000000
    399  23cd		       00		      BYTE.b	%00000000
    400  23ce		       00		      BYTE.b	%00000000
    401  23cf		       00		      BYTE.b	%00000000
    402  23d0		       00		      BYTE.b	%00000000
    403  23d1		       00		      BYTE.b	%00000000
    404  23d2		       00		      BYTE.b	%00000000
    405  23d3		       00		      BYTE.b	%00000000
    406  23d4		       00		      BYTE.b	%00000000
    407  23d5		       00		      BYTE.b	%00000000
    408  23d6		       00		      BYTE.b	%00000000
    409  23d7		       00		      BYTE.b	%00000000
    410  23d8		       00		      BYTE.b	%00000000
    411  23d9		       00		      BYTE.b	%00000000
    412  23da		       00		      BYTE.b	%00000000
    413  23db		       00		      BYTE.b	%00000000
    414  23dc		       00		      BYTE.b	%00000000
    415  23dd		       00		      BYTE.b	%00000000
    416  23de		       00		      BYTE.b	%00000000
    417  23df		       00		      BYTE.b	%00000000
    418  23e0		       00		      BYTE.b	%00000000
    419  23e1		       fc		      BYTE.b	%11111100
    420  23e2		       fe		      BYTE.b	%11111110
    421  23e3		       ff		      BYTE.b	%11111111
    422  23e4		       8f		      BYTE.b	%10001111
    423  23e5		       80		      BYTE.b	%10000000
    424  23e6		       fc		      BYTE.b	%11111100
    425  23e7		       fe		      BYTE.b	%11111110
    426  23e8		       ff		      BYTE.b	%11111111
    427  23e9		       8f		      BYTE.b	%10001111
    428  23ea		       8f		      BYTE.b	%10001111
    429  23eb		       ff		      BYTE.b	%11111111
    430  23ec		       fe		      BYTE.b	%11111110
    431  23ed		       fc		      BYTE.b	%11111100
    432  23ee		       00		      BYTE.b	%00000000
    433  23ef		       00		      BYTE.b	%00000000
    434  23f0		       00		      BYTE.b	%00000000
    435  23f1		       00		      BYTE.b	%00000000
    436  23f2		       00		      BYTE.b	%00000000
    437  23f3		       00		      BYTE.b	%00000000
    438  23f4		       00		      BYTE.b	%00000000
    439  23f5		       00		      BYTE.b	%00000000
    440  23f6		       00		      BYTE.b	%00000000
    441  23f7		       00		      BYTE.b	%00000000
    442  23f8		       00		      BYTE.b	%00000000
    443  23f9		       00		      BYTE.b	%00000000
    444  23fa		       00		      BYTE.b	%00000000
    445  23fb		       00		      BYTE.b	%00000000
    446  23fc		       00		      BYTE.b	%00000000
    447  23fd		       00		      BYTE.b	%00000000
    448  23fe		       00		      BYTE.b	%00000000
    449  23ff		       00		      BYTE.b	%00000000
    450  2400
    451  2400
------- FILE titlescreen/asm/titlescreen.asm
    221  2400					      endif
    222  2400					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  2400					      include	"titlescreen/48x1_2_image.asm"
      1  2400
      2  2400							;*** The height of the displayed data...
      3  2400		       00 0b	   bmp_48x1_2_window =	11
      4  2400
      5  2400							;*** The height of the bitmap data. This can be larger than 
      6  2400							;*** the displayed data height, if you're scrolling or animating 
      7  2400							;*** the data...
      8  2400		       00 0b	   bmp_48x1_2_height =	11
      9  2400
     10  2400				  -	      ifnconst	bmp_48x1_2_PF1
     11  2400				  -bmp_48x1_2_PF1
     12  2400					      endif
     13  2400		       00		      BYTE.b	%00000000
     14  2401				  -	      ifnconst	bmp_48x1_2_PF2
     15  2401				  -bmp_48x1_2_PF2
     16  2401					      endif
     17  2401		       00		      BYTE.b	%00000000
     18  2402				  -	      ifnconst	bmp_48x1_2_background
     19  2402				  -bmp_48x1_2_background
     20  2402					      endif
     21  2402		       00		      BYTE.b	$00
     22  2403
     23  2403				  -	      ifnconst	bmp_48x1_2_color
     24  2403				  -bmp_48x1_2_color
     25  2403					      endif
     26  2403							; *** this is the bitmap color. If you want to change it in a 
     27  2403							; *** variable instead, dim one in bB called "bmp_48x1_2_color"
     28  2403		       0f		      BYTE.b	$0f
     29  2404
     30  2404
     31  2404				  -	      if	>. != >[.+bmp_48x1_2_height]
     32  2404				  -	      align	256
     33  2404					      endif
     34  2404
     35  2404				   bmp_48x1_2_00
     36  2404		       00		      BYTE.b	%00000000
     37  2405		       00		      BYTE.b	%00000000
     38  2406		       00		      BYTE.b	%00000000
     39  2407		       00		      BYTE.b	%00000000
     40  2408		       00		      BYTE.b	%00000000
     41  2409		       00		      BYTE.b	%00000000
     42  240a		       04		      BYTE.b	%00000100
     43  240b		       04		      BYTE.b	%00000100
     44  240c		       07		      BYTE.b	%00000111
     45  240d		       05		      BYTE.b	%00000101
     46  240e		       07		      BYTE.b	%00000111
     47  240f		       00		      BYTE.b	%00000000
     48  2410
     49  2410				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     50  2410				  -	      align	256
     51  2410					      endif
     52  2410
     53  2410				   bmp_48x1_2_01
     54  2410		       4e		      BYTE.b	%01001110
     55  2411		       4a		      BYTE.b	%01001010
     56  2412		       4a		      BYTE.b	%01001010
     57  2413		       4a		      BYTE.b	%01001010
     58  2414		       ee		      BYTE.b	%11101110
     59  2415		       00		      BYTE.b	%00000000
     60  2416		       57		      BYTE.b	%01010111
     61  2417		       64		      BYTE.b	%01100100
     62  2418		       76		      BYTE.b	%01110110
     63  2419		       54		      BYTE.b	%01010100
     64  241a		       77		      BYTE.b	%01110111
     65  241b		       4a		      BYTE.b	%01001010
     66  241c
     67  241c				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     68  241c				  -	      align	256
     69  241c					      endif
     70  241c
     71  241c				   bmp_48x1_2_02
     72  241c		       0e		      BYTE.b	%00001110
     73  241d		       02		      BYTE.b	%00000010
     74  241e		       0e		      BYTE.b	%00001110
     75  241f		       08		      BYTE.b	%00001000
     76  2420		       0e		      BYTE.b	%00001110
     77  2421		       00		      BYTE.b	%00000000
     78  2422		       77		      BYTE.b	%01110111
     79  2423		       11		      BYTE.b	%00010001
     80  2424		       77		      BYTE.b	%01110111
     81  2425		       44		      BYTE.b	%01000100
     82  2426		       77		      BYTE.b	%01110111
     83  2427		       08		      BYTE.b	%00001000
     84  2428
     85  2428				  -	      if	>. != >[.+(bmp_48x1_2_height)]
     86  2428				  -	      align	256
     87  2428					      endif
     88  2428
     89  2428				   bmp_48x1_2_03
     90  2428		       4a		      BYTE.b	%01001010
     91  2429		       4a		      BYTE.b	%01001010
     92  242a		       4e		      BYTE.b	%01001110
     93  242b		       4a		      BYTE.b	%01001010
     94  242c		       ee		      BYTE.b	%11101110
     95  242d		       00		      BYTE.b	%00000000
     96  242e		       04		      BYTE.b	%00000100
     97  242f		       04		      BYTE.b	%00000100
     98  2430		       06		      BYTE.b	%00000110
     99  2431		       04		      BYTE.b	%00000100
    100  2432		       07		      BYTE.b	%00000111
    101  2433		       4a		      BYTE.b	%01001010
    102  2434
    103  2434				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    104  2434				  -	      align	256
    105  2434					      endif
    106  2434
    107  2434				   bmp_48x1_2_04
    108  2434		       a4		      BYTE.b	%10100100
    109  2435		       c4		      BYTE.b	%11000100
    110  2436		       e4		      BYTE.b	%11100100
    111  2437		       a4		      BYTE.b	%10100100
    112  2438		       ee		      BYTE.b	%11101110
    113  2439		       00		      BYTE.b	%00000000
    114  243a		       55		      BYTE.b	%01010101
    115  243b		       59		      BYTE.b	%01011001
    116  243c		       5d		      BYTE.b	%01011101
    117  243d		       55		      BYTE.b	%01010101
    118  243e		       5d		      BYTE.b	%01011101
    119  243f		       a4		      BYTE.b	%10100100
    120  2440
    121  2440				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    122  2440				  -	      align	256
    123  2440					      endif
    124  2440
    125  2440				   bmp_48x1_2_05
    126  2440		       00		      BYTE.b	%00000000
    127  2441		       00		      BYTE.b	%00000000
    128  2442		       00		      BYTE.b	%00000000
    129  2443		       00		      BYTE.b	%00000000
    130  2444		       00		      BYTE.b	%00000000
    131  2445		       00		      BYTE.b	%00000000
    132  2446		       c0		      BYTE.b	%11000000
    133  2447		       00		      BYTE.b	%00000000
    134  2448		       80		      BYTE.b	%10000000
    135  2449		       00		      BYTE.b	%00000000
    136  244a		       c0		      BYTE.b	%11000000
    137  244b		       00		      BYTE.b	%00000000
    138  244c
    139  244c
------- FILE titlescreen/asm/titlescreen.asm
    224  244c					      endif
    225  244c				  -	      ifconst	mk_48x1_3_on
    226  244c				  -	      include	"titlescreen/48x1_3_image.asm"
    227  244c					      endif
    228  244c				  -	      ifconst	mk_48x1_4_on
    229  244c				  -	      include	"titlescreen/48x1_4_image.asm"
    230  244c					      endif
    231  244c				  -	      ifconst	mk_48x1_5_on
    232  244c				  -	      include	"titlescreen/48x1_5_image.asm"
    233  244c					      endif
    234  244c				  -	      ifconst	mk_48x1_6_on
    235  244c				  -	      include	"titlescreen/48x1_6_image.asm"
    236  244c					      endif
    237  244c				  -	      ifconst	mk_48x1_7_on
    238  244c				  -	      include	"titlescreen/48x1_7_image.asm"
    239  244c					      endif
    240  244c				  -	      ifconst	mk_48x1_8_on
    241  244c				  -	      include	"titlescreen/48x1_8_image.asm"
    242  244c					      endif
    243  244c
    244  244c
    245  244c				  -	      ifconst	mk_48x2_1_on
    246  244c				  -	      include	"titlescreen/48x2_1_image.asm"
    247  244c					      endif
    248  244c				  -	      ifconst	mk_48x2_2_on
    249  244c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  244c					      endif
    251  244c				  -	      ifconst	mk_48x2_3_on
    252  244c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  244c					      endif
    254  244c				  -	      ifconst	mk_48x2_4_on
    255  244c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  244c					      endif
    257  244c				  -	      ifconst	mk_48x2_5_on
    258  244c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  244c					      endif
    260  244c				  -	      ifconst	mk_48x2_6_on
    261  244c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  244c					      endif
    263  244c				  -	      ifconst	mk_48x2_7_on
    264  244c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  244c					      endif
    266  244c
    267  244c				  -	      ifconst	mk_48x2_8_on
    268  244c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  244c					      endif
    270  244c
    271  244c
    272  244c				  -	      ifconst	mk_96x2_1_on
    273  244c				  -	      include	"titlescreen/96x2_1_image.asm"
    274  244c					      endif
    275  244c				  -	      ifconst	mk_96x2_2_on
    276  244c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  244c					      endif
    278  244c				  -	      ifconst	mk_96x2_3_on
    279  244c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  244c					      endif
    281  244c				  -	      ifconst	mk_96x2_4_on
    282  244c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  244c					      endif
    284  244c				  -	      ifconst	mk_96x2_5_on
    285  244c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  244c					      endif
    287  244c				  -	      ifconst	mk_96x2_6_on
    288  244c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  244c					      endif
    290  244c				  -	      ifconst	mk_96x2_7_on
    291  244c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  244c					      endif
    293  244c				  -	      ifconst	mk_96x2_8_on
    294  244c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  244c					      endif
    296  244c
    297  244c					      ifconst	mk_player_on
------- FILE titlescreen/player_image.asm LEVEL 3 PASS 2
      0  244c					      include	"titlescreen/player_image.asm"
      1  244c
      2  244c
      3  244c							;*** the height of this mini-kernel.
      4  244c		       00 32	   bmp_player_window =	50
      5  244c
      6  244c							;*** how many scanlines per pixel. 
      7  244c		       00 01	   bmp_player_kernellines =	1
      8  244c
      9  244c							;*** the height of each player.
     10  244c		       00 0a	   bmp_player0_height =	10
     11  244c		       00 0a	   bmp_player1_height =	10
     12  244c
     13  244c							;*** NUSIZ0 value. If you want to change it in a variable
     14  244c							;*** instead, dim on in bB called "bmp_player0_nusiz"
     15  244c				  -	      ifnconst	bmp_player0_nusiz
     16  244c				  -bmp_player0_nusiz
     17  244c					      endif
     18  244c		       00		      BYTE.b	0
     19  244d
     20  244d							;*** NUSIZ1 value. If you want to change it in a variable
     21  244d							;*** instead, dim on in bB called "bmp_player1_nusiz"
     22  244d				  -	      ifnconst	bmp_player1_nusiz
     23  244d				  -bmp_player1_nusiz
     24  244d					      endif
     25  244d		       00		      BYTE.b	0
     26  244e
     27  244e							;*** REFP0 value. If you want to change it in a variable
     28  244e							;*** instead, dim on in bB called "bmp_player0_refp"
     29  244e				  -	      ifnconst	bmp_player0_refp
     30  244e				  -bmp_player0_refp
     31  244e					      endif
     32  244e		       00		      BYTE.b	0
     33  244f
     34  244f							;*** REFP1 value. If you want to change it in a variable
     35  244f							;*** instead, dim on in bB called "bmp_player1_refp"
     36  244f				  -	      ifnconst	bmp_player1_refp
     37  244f				  -bmp_player1_refp
     38  244f					      endif
     39  244f		       00		      BYTE.b	0
     40  2450
     41  2450							;*** the bitmap data for player0
     42  2450				   bmp_player0
     43  2450		       42		      BYTE.b	%01000010
     44  2451		       64		      BYTE.b	%01100100
     45  2452		       1c		      BYTE.b	%00011100
     46  2453		       3c		      BYTE.b	%00111100
     47  2454		       1c		      BYTE.b	%00011100
     48  2455		       18		      BYTE.b	%00011000
     49  2456		       0c		      BYTE.b	%00001100
     50  2457		       0c		      BYTE.b	%00001100
     51  2458		       0c		      BYTE.b	%00001100
     52  2459		       00		      BYTE.b	%00000000
     53  245a
     54  245a		       06		      BYTE.b	%00000110
     55  245b		       64		      BYTE.b	%01100100
     56  245c		       1c		      BYTE.b	%00011100
     57  245d		       5a		      BYTE.b	%01011010
     58  245e		       3c		      BYTE.b	%00111100
     59  245f		       18		      BYTE.b	%00011000
     60  2460		       0c		      BYTE.b	%00001100
     61  2461		       0c		      BYTE.b	%00001100
     62  2462		       0c		      BYTE.b	%00001100
     63  2463		       00		      BYTE.b	%00000000
     64  2464
     65  2464		       18		      BYTE.b	%00011000
     66  2465		       38		      BYTE.b	%00111000
     67  2466		       18		      BYTE.b	%00011000
     68  2467		       18		      BYTE.b	%00011000
     69  2468		       18		      BYTE.b	%00011000
     70  2469		       18		      BYTE.b	%00011000
     71  246a		       0c		      BYTE.b	%00001100
     72  246b		       0c		      BYTE.b	%00001100
     73  246c		       0c		      BYTE.b	%00001100
     74  246d		       00		      BYTE.b	%00000000
     75  246e
     76  246e		       40		      BYTE.b	%01000000
     77  246f		       50		      BYTE.b	%01010000
     78  2470		       48		      BYTE.b	%01001000
     79  2471		       38		      BYTE.b	%00111000
     80  2472		       78		      BYTE.b	%01111000
     81  2473		       38		      BYTE.b	%00111000
     82  2474		       30		      BYTE.b	%00110000
     83  2475		       18		      BYTE.b	%00011000
     84  2476		       18		      BYTE.b	%00011000
     85  2477		       18		      BYTE.b	%00011000
     86  2478
     87  2478							;*** the color data for player0
     88  2478				   bmp_color_player0
     89  2478		       86		      BYTE.b	$86
     90  2479		       86		      BYTE.b	$86
     91  247a		       86		      BYTE.b	$86
     92  247b		       a6		      BYTE.b	$a6
     93  247c		       a6		      BYTE.b	$a6
     94  247d		       a6		      BYTE.b	$a6
     95  247e		       4a		      BYTE.b	$4a
     96  247f		       4a		      BYTE.b	$4a
     97  2480		       f4		      BYTE.b	$f4
     98  2481		       00		      BYTE.b	$00
     99  2482
    100  2482		       86		      BYTE.b	$86
    101  2483		       86		      BYTE.b	$86
    102  2484		       86		      BYTE.b	$86
    103  2485		       a6		      BYTE.b	$a6
    104  2486		       a6		      BYTE.b	$a6
    105  2487		       a6		      BYTE.b	$a6
    106  2488		       4a		      BYTE.b	$4a
    107  2489		       4a		      BYTE.b	$4a
    108  248a		       f4		      BYTE.b	$f4
    109  248b		       00		      BYTE.b	$00
    110  248c
    111  248c		       86		      BYTE.b	$86
    112  248d		       86		      BYTE.b	$86
    113  248e		       86		      BYTE.b	$86
    114  248f		       a6		      BYTE.b	$a6
    115  2490		       a6		      BYTE.b	$a6
    116  2491		       a6		      BYTE.b	$a6
    117  2492		       4a		      BYTE.b	$4a
    118  2493		       4a		      BYTE.b	$4a
    119  2494		       f4		      BYTE.b	$f4
    120  2495		       00		      BYTE.b	$00
    121  2496
    122  2496		       86		      BYTE.b	$86
    123  2497		       86		      BYTE.b	$86
    124  2498		       86		      BYTE.b	$86
    125  2499		       86		      BYTE.b	$86
    126  249a		       a6		      BYTE.b	$a6
    127  249b		       a6		      BYTE.b	$a6
    128  249c		       a6		      BYTE.b	$a6
    129  249d		       4a		      BYTE.b	$4a
    130  249e		       4a		      BYTE.b	$4a
    131  249f		       f4		      BYTE.b	$f4
    132  24a0
    133  24a0							;*** the bitmap data for player1
    134  24a0				   bmp_player1
    135  24a0		       3c		      BYTE.b	%00111100
    136  24a1		       66		      BYTE.b	%01100110
    137  24a2		       c3		      BYTE.b	%11000011
    138  24a3		       db		      BYTE.b	%11011011
    139  24a4		       ff		      BYTE.b	%11111111
    140  24a5		       ff		      BYTE.b	%11111111
    141  24a6		       db		      BYTE.b	%11011011
    142  24a7		       db		      BYTE.b	%11011011
    143  24a8		       7e		      BYTE.b	%01111110
    144  24a9		       3c		      BYTE.b	%00111100
    145  24aa
    146  24aa							;*** the color data for player1
    147  24aa				   bmp_color_player1
    148  24aa		       fa		      BYTE.b	$FA
    149  24ab		       fa		      BYTE.b	$FA
    150  24ac		       fa		      BYTE.b	$FA
    151  24ad		       fa		      BYTE.b	$FA
    152  24ae		       fa		      BYTE.b	$FA
    153  24af		       fa		      BYTE.b	$FA
    154  24b0		       fa		      BYTE.b	$FA
    155  24b1		       fa		      BYTE.b	$FA
    156  24b2		       fa		      BYTE.b	$FA
    157  24b3		       fa		      BYTE.b	$FA
------- FILE titlescreen/asm/titlescreen.asm
    299  24b4					      endif
    300  24b4
    301  24b4					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  24b4					      include	"titlescreen/score_image.asm"
      1  24b4							; feel free to modify the score graphics - just keep each digit 8 high
      2  24b4							; if you're looking to want to modify any one font, pick on the 
      3  24b4
      4  24b4				  -	      ifnconst	scorecolor
      5  24b4				  -scorecolor
      6  24b4					      endif
      7  24b4							; ** change this value for a different scorecolor under DPC+
      8  24b4							;    for other kernels, just use the scorecolor variable
      9  24b4		       0f		      .byte.b	$0f
     10  24b5
     11  24b5				  -	      ifnconst	NOFONT
     12  24b5				  -NOFONT     =	0
     13  24b5					      endif
     14  24b5				  -	      ifnconst	STOCK
     15  24b5				  -STOCK      =	1	;_FONTNAME
     16  24b5					      endif
     17  24b5				  -	      ifnconst	NEWCENTURY
     18  24b5				  -NEWCENTURY =	2	;_FONTNAME
     19  24b5					      endif
     20  24b5				  -	      ifnconst	WHIMSEY
     21  24b5				  -WHIMSEY    =	3	;_FONTNAME
     22  24b5					      endif
     23  24b5				  -	      ifnconst	ALARMCLOCK
     24  24b5				  -ALARMCLOCK =	4	;_FONTNAME
     25  24b5					      endif
     26  24b5				  -	      ifnconst	HANDWRITTEN
     27  24b5				  -HANDWRITTEN =	5	;_FONTNAME
     28  24b5					      endif
     29  24b5				  -	      ifnconst	INTERRUPTED
     30  24b5				  -INTERRUPTED =	6	;_FONTNAME
     31  24b5					      endif
     32  24b5				  -	      ifnconst	TINY
     33  24b5				  -TINY       =	7	;_FONTNAME
     34  24b5					      endif
     35  24b5				  -	      ifnconst	RETROPUTER
     36  24b5				  -RETROPUTER =	8	;_FONTNAME
     37  24b5					      endif
     38  24b5				  -	      ifnconst	CURVES
     39  24b5				  -CURVES     =	9	;_FONTNAME
     40  24b5					      endif
     41  24b5				  -	      ifnconst	HUSKY
     42  24b5				  -HUSKY      =	10	;_FONTNAME
     43  24b5					      endif
     44  24b5				  -	      ifnconst	SNAKE
     45  24b5				  -SNAKE      =	11	;_FONTNAME
     46  24b5					      endif
     47  24b5				  -	      ifnconst	PLOK
     48  24b5				  -PLOK       =	13	;_FONTNAME
     49  24b5					      endif
     50  24b5
     51  24b5				  -	      ifnconst	SYMBOLS
     52  24b5				  -SYMBOLS    =	0	;_FONTNAME 
     53  24b5					      endif
     54  24b5
     55  24b5							; ### setup some defaults
     56  24b5				  -	      ifnconst	fontstyle
     57  24b5				  -fontstyle  =	STOCK
     58  24b5					      endif
     59  24b5
     60  24b5							;fix up the table alignment, if necessary
     61  24b5					      if	>. != >[.+81]
     62  2500		       00 00 00 00*	      align	256
     63  2500					      endif
     64  2500
     65  2500
     66  2500				   miniscoretable
     67  2500
     68  2500					      if	fontstyle == STOCK
     69  2500
     70  2500							;byte %00000000 ; STOCK
     71  2500
     72  2500		       3c		      .byte.b	%00111100	; STOCK
     73  2501		       66		      .byte.b	%01100110	; STOCK
     74  2502		       66		      .byte.b	%01100110	; STOCK
     75  2503		       66		      .byte.b	%01100110	; STOCK
     76  2504		       66		      .byte.b	%01100110	; STOCK
     77  2505		       66		      .byte.b	%01100110	; STOCK
     78  2506		       66		      .byte.b	%01100110	; STOCK
     79  2507		       3c		      .byte.b	%00111100	; STOCK
     80  2508
     81  2508							;byte %00000000 ; STOCK
     82  2508
     83  2508		       7e		      .byte.b	%01111110	; STOCK
     84  2509		       18		      .byte.b	%00011000	; STOCK
     85  250a		       18		      .byte.b	%00011000	; STOCK
     86  250b		       18		      .byte.b	%00011000	; STOCK
     87  250c		       18		      .byte.b	%00011000	; STOCK
     88  250d		       38		      .byte.b	%00111000	; STOCK
     89  250e		       18		      .byte.b	%00011000	; STOCK
     90  250f		       08		      .byte.b	%00001000	; STOCK
     91  2510
     92  2510							;byte %00000000 ; STOCK
     93  2510
     94  2510		       7e		      .byte.b	%01111110	; STOCK
     95  2511		       60		      .byte.b	%01100000	; STOCK
     96  2512		       60		      .byte.b	%01100000	; STOCK
     97  2513		       3c		      .byte.b	%00111100	; STOCK
     98  2514		       06		      .byte.b	%00000110	; STOCK
     99  2515		       06		      .byte.b	%00000110	; STOCK
    100  2516		       46		      .byte.b	%01000110	; STOCK
    101  2517		       3c		      .byte.b	%00111100	; STOCK
    102  2518
    103  2518							;byte %00000000 ; STOCK
    104  2518
    105  2518		       3c		      .byte.b	%00111100	; STOCK
    106  2519		       46		      .byte.b	%01000110	; STOCK
    107  251a		       06		      .byte.b	%00000110	; STOCK
    108  251b		       06		      .byte.b	%00000110	; STOCK
    109  251c		       1c		      .byte.b	%00011100	; STOCK
    110  251d		       06		      .byte.b	%00000110	; STOCK
    111  251e		       46		      .byte.b	%01000110	; STOCK
    112  251f		       3c		      .byte.b	%00111100	; STOCK
    113  2520
    114  2520							;byte %00000000 ; STOCK
    115  2520
    116  2520		       0c		      .byte.b	%00001100	; STOCK
    117  2521		       0c		      .byte.b	%00001100	; STOCK
    118  2522		       7e		      .byte.b	%01111110	; STOCK
    119  2523		       4c		      .byte.b	%01001100	; STOCK
    120  2524		       4c		      .byte.b	%01001100	; STOCK
    121  2525		       2c		      .byte.b	%00101100	; STOCK
    122  2526		       1c		      .byte.b	%00011100	; STOCK
    123  2527		       0c		      .byte.b	%00001100	; STOCK
    124  2528
    125  2528							;byte %00000000 ; STOCK
    126  2528
    127  2528		       3c		      .byte.b	%00111100	; STOCK
    128  2529		       46		      .byte.b	%01000110	; STOCK
    129  252a		       06		      .byte.b	%00000110	; STOCK
    130  252b		       06		      .byte.b	%00000110	; STOCK
    131  252c		       3c		      .byte.b	%00111100	; STOCK
    132  252d		       60		      .byte.b	%01100000	; STOCK
    133  252e		       60		      .byte.b	%01100000	; STOCK
    134  252f		       7e		      .byte.b	%01111110	; STOCK
    135  2530
    136  2530							;byte %00000000 ; STOCK
    137  2530
    138  2530		       3c		      .byte.b	%00111100	; STOCK
    139  2531		       66		      .byte.b	%01100110	; STOCK
    140  2532		       66		      .byte.b	%01100110	; STOCK
    141  2533		       66		      .byte.b	%01100110	; STOCK
    142  2534		       7c		      .byte.b	%01111100	; STOCK
    143  2535		       60		      .byte.b	%01100000	; STOCK
    144  2536		       62		      .byte.b	%01100010	; STOCK
    145  2537		       3c		      .byte.b	%00111100	; STOCK
    146  2538
    147  2538							;byte %00000000 ; STOCK
    148  2538
    149  2538		       30		      .byte.b	%00110000	; STOCK
    150  2539		       30		      .byte.b	%00110000	; STOCK
    151  253a		       30		      .byte.b	%00110000	; STOCK
    152  253b		       18		      .byte.b	%00011000	; STOCK
    153  253c		       0c		      .byte.b	%00001100	; STOCK
    154  253d		       06		      .byte.b	%00000110	; STOCK
    155  253e		       42		      .byte.b	%01000010	; STOCK
    156  253f		       3e		      .byte.b	%00111110	; STOCK
    157  2540
    158  2540							;byte %00000000 ; STOCK
    159  2540
    160  2540		       3c		      .byte.b	%00111100	; STOCK
    161  2541		       66		      .byte.b	%01100110	; STOCK
    162  2542		       66		      .byte.b	%01100110	; STOCK
    163  2543		       66		      .byte.b	%01100110	; STOCK
    164  2544		       3c		      .byte.b	%00111100	; STOCK
    165  2545		       66		      .byte.b	%01100110	; STOCK
    166  2546		       66		      .byte.b	%01100110	; STOCK
    167  2547		       3c		      .byte.b	%00111100	; STOCK
    168  2548
    169  2548							;byte %00000000 ; STOCK
    170  2548
    171  2548		       3c		      .byte.b	%00111100	; STOCK
    172  2549		       46		      .byte.b	%01000110	; STOCK
    173  254a		       06		      .byte.b	%00000110	; STOCK
    174  254b		       3e		      .byte.b	%00111110	; STOCK
    175  254c		       66		      .byte.b	%01100110	; STOCK
    176  254d		       66		      .byte.b	%01100110	; STOCK
    177  254e		       66		      .byte.b	%01100110	; STOCK
    178  254f		       3c		      .byte.b	%00111100	; STOCK
    179  2550
    180  2550					      endif		; STOCK
    181  2550
    182  2550				  -	      if	fontstyle == NEWCENTURY
    183  2550				  -			;byte %00000000 ; NEWCENTURY
    184  2550				  -
    185  2550				  -	      .byte	%00111100	; NEWCENTURY
    186  2550				  -	      .byte	%01000010	; NEWCENTURY
    187  2550				  -	      .byte	%01000010	; NEWCENTURY
    188  2550				  -	      .byte	%01000010	; NEWCENTURY
    189  2550				  -	      .byte	%00100100	; NEWCENTURY
    190  2550				  -	      .byte	%00100100	; NEWCENTURY
    191  2550				  -	      .byte	%00100100	; NEWCENTURY
    192  2550				  -	      .byte	%00011000	; NEWCENTURY
    193  2550				  -
    194  2550				  -			;byte %00000000 ; NEWCENTURY
    195  2550				  -
    196  2550				  -	      .byte	%00001000	; NEWCENTURY
    197  2550				  -	      .byte	%00001000	; NEWCENTURY
    198  2550				  -	      .byte	%00001000	; NEWCENTURY
    199  2550				  -	      .byte	%00001000	; NEWCENTURY
    200  2550				  -	      .byte	%00001000	; NEWCENTURY
    201  2550				  -	      .byte	%00001000	; NEWCENTURY
    202  2550				  -	      .byte	%00001000	; NEWCENTURY
    203  2550				  -	      .byte	%00001000	; NEWCENTURY
    204  2550				  -
    205  2550				  -			;byte %00000000 ; NEWCENTURY
    206  2550				  -
    207  2550				  -	      .byte	%01111110	; NEWCENTURY
    208  2550				  -	      .byte	%01000000	; NEWCENTURY
    209  2550				  -	      .byte	%01000000	; NEWCENTURY
    210  2550				  -	      .byte	%00100000	; NEWCENTURY
    211  2550				  -	      .byte	%00011100	; NEWCENTURY
    212  2550				  -	      .byte	%00000010	; NEWCENTURY
    213  2550				  -	      .byte	%00000010	; NEWCENTURY
    214  2550				  -	      .byte	%00011100	; NEWCENTURY
    215  2550				  -
    216  2550				  -			;byte %00000000 ; NEWCENTURY
    217  2550				  -
    218  2550				  -	      .byte	%01111100	; NEWCENTURY
    219  2550				  -	      .byte	%00000010	; NEWCENTURY
    220  2550				  -	      .byte	%00000010	; NEWCENTURY
    221  2550				  -	      .byte	%00000010	; NEWCENTURY
    222  2550				  -	      .byte	%00111100	; NEWCENTURY
    223  2550				  -	      .byte	%00000010	; NEWCENTURY
    224  2550				  -	      .byte	%00000010	; NEWCENTURY
    225  2550				  -	      .byte	%00011100	; NEWCENTURY
    226  2550				  -
    227  2550				  -			;byte %00000000 ; NEWCENTURY
    228  2550				  -
    229  2550				  -	      .byte	%00000010	; NEWCENTURY
    230  2550				  -	      .byte	%00000010	; NEWCENTURY
    231  2550				  -	      .byte	%00000010	; NEWCENTURY
    232  2550				  -	      .byte	%00111110	; NEWCENTURY
    233  2550				  -	      .byte	%00100010	; NEWCENTURY
    234  2550				  -	      .byte	%00100010	; NEWCENTURY
    235  2550				  -	      .byte	%00010010	; NEWCENTURY
    236  2550				  -	      .byte	%00010010	; NEWCENTURY
    237  2550				  -
    238  2550				  -			;byte %00000000 ; NEWCENTURY
    239  2550				  -
    240  2550				  -	      .byte	%01111100	; NEWCENTURY
    241  2550				  -	      .byte	%00000010	; NEWCENTURY
    242  2550				  -	      .byte	%00000010	; NEWCENTURY
    243  2550				  -	      .byte	%00000010	; NEWCENTURY
    244  2550				  -	      .byte	%01111100	; NEWCENTURY
    245  2550				  -	      .byte	%01000000	; NEWCENTURY
    246  2550				  -	      .byte	%01000000	; NEWCENTURY
    247  2550				  -	      .byte	%01111000	; NEWCENTURY
    248  2550				  -
    249  2550				  -			;byte %00000000 ; NEWCENTURY
    250  2550				  -
    251  2550				  -	      .byte	%00111100	; NEWCENTURY
    252  2550				  -	      .byte	%01000010	; NEWCENTURY
    253  2550				  -	      .byte	%01000010	; NEWCENTURY
    254  2550				  -	      .byte	%01000010	; NEWCENTURY
    255  2550				  -	      .byte	%01111100	; NEWCENTURY
    256  2550				  -	      .byte	%01000000	; NEWCENTURY
    257  2550				  -	      .byte	%01000000	; NEWCENTURY
    258  2550				  -	      .byte	%00110000	; NEWCENTURY
    259  2550				  -
    260  2550				  -			;byte %00000000 ; NEWCENTURY
    261  2550				  -
    262  2550				  -	      .byte	%00010000	; NEWCENTURY
    263  2550				  -	      .byte	%00010000	; NEWCENTURY
    264  2550				  -	      .byte	%00001000	; NEWCENTURY
    265  2550				  -	      .byte	%00001000	; NEWCENTURY
    266  2550				  -	      .byte	%00000100	; NEWCENTURY
    267  2550				  -	      .byte	%00000100	; NEWCENTURY
    268  2550				  -	      .byte	%00000010	; NEWCENTURY
    269  2550				  -	      .byte	%00011110	; NEWCENTURY
    270  2550				  -
    271  2550				  -			;byte %00000000 ; NEWCENTURY
    272  2550				  -
    273  2550				  -	      .byte	%00111100	; NEWCENTURY
    274  2550				  -	      .byte	%01000010	; NEWCENTURY
    275  2550				  -	      .byte	%01000010	; NEWCENTURY
    276  2550				  -	      .byte	%01000010	; NEWCENTURY
    277  2550				  -	      .byte	%00111100	; NEWCENTURY
    278  2550				  -	      .byte	%00100100	; NEWCENTURY
    279  2550				  -	      .byte	%00100100	; NEWCENTURY
    280  2550				  -	      .byte	%00011000	; NEWCENTURY
    281  2550				  -
    282  2550				  -			;byte %00000000 ; NEWCENTURY
    283  2550				  -
    284  2550				  -	      .byte	%00111100	; NEWCENTURY
    285  2550				  -	      .byte	%00000010	; NEWCENTURY
    286  2550				  -	      .byte	%00000010	; NEWCENTURY
    287  2550				  -	      .byte	%00000010	; NEWCENTURY
    288  2550				  -	      .byte	%00001110	; NEWCENTURY
    289  2550				  -	      .byte	%00010010	; NEWCENTURY
    290  2550				  -	      .byte	%00010010	; NEWCENTURY
    291  2550				  -	      .byte	%00001100	; NEWCENTURY
    292  2550				  -
    293  2550					      endif		; NEWCENTURY
    294  2550
    295  2550				  -	      if	fontstyle == WHIMSEY
    296  2550				  -			;byte %00000000 ; WHIMSEY
    297  2550				  -
    298  2550				  -	      .byte	%00111100	; WHIMSEY
    299  2550				  -	      .byte	%01111110	; WHIMSEY
    300  2550				  -	      .byte	%01111110	; WHIMSEY
    301  2550				  -	      .byte	%01111110	; WHIMSEY
    302  2550				  -	      .byte	%01110110	; WHIMSEY
    303  2550				  -	      .byte	%01110110	; WHIMSEY
    304  2550				  -	      .byte	%01110110	; WHIMSEY
    305  2550				  -	      .byte	%00111100	; WHIMSEY
    306  2550				  -
    307  2550				  -			;byte %00000000 ; WHIMSEY
    308  2550				  -
    309  2550				  -	      .byte	%01111110	; WHIMSEY
    310  2550				  -	      .byte	%01111110	; WHIMSEY
    311  2550				  -	      .byte	%01111110	; WHIMSEY
    312  2550				  -	      .byte	%00011000	; WHIMSEY
    313  2550				  -	      .byte	%00011000	; WHIMSEY
    314  2550				  -	      .byte	%00011000	; WHIMSEY
    315  2550				  -	      .byte	%01111000	; WHIMSEY
    316  2550				  -	      .byte	%00011000	; WHIMSEY
    317  2550				  -
    318  2550				  -			;byte %00000000 ; WHIMSEY
    319  2550				  -
    320  2550				  -	      .byte	%01111110	; WHIMSEY
    321  2550				  -	      .byte	%01111110	; WHIMSEY
    322  2550				  -	      .byte	%01111110	; WHIMSEY
    323  2550				  -	      .byte	%01111000	; WHIMSEY
    324  2550				  -	      .byte	%00111100	; WHIMSEY
    325  2550				  -	      .byte	%00001110	; WHIMSEY
    326  2550				  -	      .byte	%01100110	; WHIMSEY
    327  2550				  -	      .byte	%00111100	; WHIMSEY
    328  2550				  -
    329  2550				  -			;byte %00000000 ; WHIMSEY
    330  2550				  -
    331  2550				  -	      .byte	%00111100	; WHIMSEY
    332  2550				  -	      .byte	%01111110	; WHIMSEY
    333  2550				  -	      .byte	%01111110	; WHIMSEY
    334  2550				  -	      .byte	%01101110	; WHIMSEY
    335  2550				  -	      .byte	%00001110	; WHIMSEY
    336  2550				  -	      .byte	%00111100	; WHIMSEY
    337  2550				  -	      .byte	%00011100	; WHIMSEY
    338  2550				  -	      .byte	%01111110	; WHIMSEY
    339  2550				  -
    340  2550				  -			;byte %00000000 ; WHIMSEY
    341  2550				  -
    342  2550				  -	      .byte	%00011100	; WHIMSEY
    343  2550				  -	      .byte	%00011100	; WHIMSEY
    344  2550				  -	      .byte	%01111110	; WHIMSEY
    345  2550				  -	      .byte	%01011100	; WHIMSEY
    346  2550				  -	      .byte	%01011100	; WHIMSEY
    347  2550				  -	      .byte	%00011100	; WHIMSEY
    348  2550				  -	      .byte	%00011100	; WHIMSEY
    349  2550				  -	      .byte	%00011100	; WHIMSEY
    350  2550				  -
    351  2550				  -			;byte %00000000 ; WHIMSEY
    352  2550				  -
    353  2550				  -	      .byte	%00111100	; WHIMSEY
    354  2550				  -	      .byte	%01111110	; WHIMSEY
    355  2550				  -	      .byte	%01111110	; WHIMSEY
    356  2550				  -	      .byte	%01101110	; WHIMSEY
    357  2550				  -	      .byte	%00001110	; WHIMSEY
    358  2550				  -	      .byte	%01111100	; WHIMSEY
    359  2550				  -	      .byte	%01110000	; WHIMSEY
    360  2550				  -	      .byte	%01111110	; WHIMSEY
    361  2550				  -
    362  2550				  -			;byte %00000000 ; WHIMSEY
    363  2550				  -
    364  2550				  -	      .byte	%00111100	; WHIMSEY
    365  2550				  -	      .byte	%01111110	; WHIMSEY
    366  2550				  -	      .byte	%01111110	; WHIMSEY
    367  2550				  -	      .byte	%01110110	; WHIMSEY
    368  2550				  -	      .byte	%01110110	; WHIMSEY
    369  2550				  -	      .byte	%01111100	; WHIMSEY
    370  2550				  -	      .byte	%01110000	; WHIMSEY
    371  2550				  -	      .byte	%00111110	; WHIMSEY
    372  2550				  -
    373  2550				  -			;byte %00000000 ; WHIMSEY
    374  2550				  -
    375  2550				  -	      .byte	%01111000	; WHIMSEY
    376  2550				  -	      .byte	%01111000	; WHIMSEY
    377  2550				  -	      .byte	%01111000	; WHIMSEY
    378  2550				  -	      .byte	%00111100	; WHIMSEY
    379  2550				  -	      .byte	%00011100	; WHIMSEY
    380  2550				  -	      .byte	%00001110	; WHIMSEY
    381  2550				  -	      .byte	%00001110	; WHIMSEY
    382  2550				  -	      .byte	%01111110	; WHIMSEY
    383  2550				  -
    384  2550				  -			;byte %00000000 ; WHIMSEY
    385  2550				  -
    386  2550				  -	      .byte	%00111100	; WHIMSEY
    387  2550				  -	      .byte	%01111110	; WHIMSEY
    388  2550				  -	      .byte	%01111110	; WHIMSEY
    389  2550				  -	      .byte	%01110110	; WHIMSEY
    390  2550				  -	      .byte	%01110110	; WHIMSEY
    391  2550				  -	      .byte	%00111100	; WHIMSEY
    392  2550				  -	      .byte	%01110110	; WHIMSEY
    393  2550				  -	      .byte	%00111100	; WHIMSEY
    394  2550				  -
    395  2550				  -			;byte %00000000 ; WHIMSEY
    396  2550				  -
    397  2550				  -	      .byte	%00111100	; WHIMSEY
    398  2550				  -	      .byte	%01111110	; WHIMSEY
    399  2550				  -	      .byte	%01111110	; WHIMSEY
    400  2550				  -	      .byte	%01110110	; WHIMSEY
    401  2550				  -	      .byte	%00000110	; WHIMSEY
    402  2550				  -	      .byte	%00111110	; WHIMSEY
    403  2550				  -	      .byte	%01110110	; WHIMSEY
    404  2550				  -	      .byte	%00111100	; WHIMSEY
    405  2550				  -
    406  2550					      endif		; WHIMSEY
    407  2550
    408  2550				  -	      if	fontstyle == ALARMCLOCK
    409  2550				  -
    410  2550				  -			;byte %00000000 ; ALARMCLOCK
    411  2550				  -
    412  2550				  -	      .byte	%00111100	; ALARMCLOCK
    413  2550				  -	      .byte	%01000010	; ALARMCLOCK
    414  2550				  -	      .byte	%01000010	; ALARMCLOCK
    415  2550				  -	      .byte	%01000010	; ALARMCLOCK
    416  2550				  -	      .byte	%00000000	; ALARMCLOCK
    417  2550				  -	      .byte	%01000010	; ALARMCLOCK
    418  2550				  -	      .byte	%01000010	; ALARMCLOCK
    419  2550				  -	      .byte	%00111100	; ALARMCLOCK
    420  2550				  -
    421  2550				  -			;byte %00000000 ; ALARMCLOCK
    422  2550				  -
    423  2550				  -	      .byte	%00000000	; ALARMCLOCK
    424  2550				  -	      .byte	%00000010	; ALARMCLOCK
    425  2550				  -	      .byte	%00000010	; ALARMCLOCK
    426  2550				  -	      .byte	%00000010	; ALARMCLOCK
    427  2550				  -	      .byte	%00000000	; ALARMCLOCK
    428  2550				  -	      .byte	%00000010	; ALARMCLOCK
    429  2550				  -	      .byte	%00000010	; ALARMCLOCK
    430  2550				  -	      .byte	%00000000	; ALARMCLOCK
    431  2550				  -
    432  2550				  -			;byte %00000000 ; ALARMCLOCK
    433  2550				  -
    434  2550				  -	      .byte	%00111100	; ALARMCLOCK
    435  2550				  -	      .byte	%01000000	; ALARMCLOCK
    436  2550				  -	      .byte	%01000000	; ALARMCLOCK
    437  2550				  -	      .byte	%01000000	; ALARMCLOCK
    438  2550				  -	      .byte	%00111100	; ALARMCLOCK
    439  2550				  -	      .byte	%00000010	; ALARMCLOCK
    440  2550				  -	      .byte	%00000010	; ALARMCLOCK
    441  2550				  -	      .byte	%00111100	; ALARMCLOCK
    442  2550				  -
    443  2550				  -			;byte %00000000 ; ALARMCLOCK
    444  2550				  -
    445  2550				  -	      .byte	%00111100	; ALARMCLOCK
    446  2550				  -	      .byte	%00000010	; ALARMCLOCK
    447  2550				  -	      .byte	%00000010	; ALARMCLOCK
    448  2550				  -	      .byte	%00000010	; ALARMCLOCK
    449  2550				  -	      .byte	%00111100	; ALARMCLOCK
    450  2550				  -	      .byte	%00000010	; ALARMCLOCK
    451  2550				  -	      .byte	%00000010	; ALARMCLOCK
    452  2550				  -	      .byte	%00111100	; ALARMCLOCK
    453  2550				  -
    454  2550				  -			;byte %00000000 ; ALARMCLOCK
    455  2550				  -
    456  2550				  -	      .byte	%00000000	; ALARMCLOCK
    457  2550				  -	      .byte	%00000010	; ALARMCLOCK
    458  2550				  -	      .byte	%00000010	; ALARMCLOCK
    459  2550				  -	      .byte	%00000010	; ALARMCLOCK
    460  2550				  -	      .byte	%00111100	; ALARMCLOCK
    461  2550				  -	      .byte	%01000010	; ALARMCLOCK
    462  2550				  -	      .byte	%01000010	; ALARMCLOCK
    463  2550				  -	      .byte	%00000000	; ALARMCLOCK
    464  2550				  -
    465  2550				  -			;byte %00000000 ; ALARMCLOCK
    466  2550				  -
    467  2550				  -	      .byte	%00111100	; ALARMCLOCK
    468  2550				  -	      .byte	%00000010	; ALARMCLOCK
    469  2550				  -	      .byte	%00000010	; ALARMCLOCK
    470  2550				  -	      .byte	%00000010	; ALARMCLOCK
    471  2550				  -	      .byte	%00111100	; ALARMCLOCK
    472  2550				  -	      .byte	%01000000	; ALARMCLOCK
    473  2550				  -	      .byte	%01000000	; ALARMCLOCK
    474  2550				  -	      .byte	%00111100	; ALARMCLOCK
    475  2550				  -
    476  2550				  -			;byte %00000000 ; ALARMCLOCK
    477  2550				  -
    478  2550				  -	      .byte	%00111100	; ALARMCLOCK
    479  2550				  -	      .byte	%01000010	; ALARMCLOCK
    480  2550				  -	      .byte	%01000010	; ALARMCLOCK
    481  2550				  -	      .byte	%01000010	; ALARMCLOCK
    482  2550				  -	      .byte	%00111100	; ALARMCLOCK
    483  2550				  -	      .byte	%01000000	; ALARMCLOCK
    484  2550				  -	      .byte	%01000000	; ALARMCLOCK
    485  2550				  -	      .byte	%00111100	; ALARMCLOCK
    486  2550				  -
    487  2550				  -			;byte %00000000 ; ALARMCLOCK
    488  2550				  -
    489  2550				  -	      .byte	%00000000	; ALARMCLOCK
    490  2550				  -	      .byte	%00000010	; ALARMCLOCK
    491  2550				  -	      .byte	%00000010	; ALARMCLOCK
    492  2550				  -	      .byte	%00000010	; ALARMCLOCK
    493  2550				  -	      .byte	%00000000	; ALARMCLOCK
    494  2550				  -	      .byte	%00000010	; ALARMCLOCK
    495  2550				  -	      .byte	%00000010	; ALARMCLOCK
    496  2550				  -	      .byte	%00111100	; ALARMCLOCK
    497  2550				  -
    498  2550				  -			;byte %00000000 ; ALARMCLOCK
    499  2550				  -
    500  2550				  -	      .byte	%00111100	; ALARMCLOCK
    501  2550				  -	      .byte	%01000010	; ALARMCLOCK
    502  2550				  -	      .byte	%01000010	; ALARMCLOCK
    503  2550				  -	      .byte	%01000010	; ALARMCLOCK
    504  2550				  -	      .byte	%00111100	; ALARMCLOCK
    505  2550				  -	      .byte	%01000010	; ALARMCLOCK
    506  2550				  -	      .byte	%01000010	; ALARMCLOCK
    507  2550				  -	      .byte	%00111100	; ALARMCLOCK
    508  2550				  -
    509  2550				  -			;byte %00000000 ; ALARMCLOCK
    510  2550				  -
    511  2550				  -	      .byte	%00111100	; ALARMCLOCK
    512  2550				  -	      .byte	%00000010	; ALARMCLOCK
    513  2550				  -	      .byte	%00000010	; ALARMCLOCK
    514  2550				  -	      .byte	%00000010	; ALARMCLOCK
    515  2550				  -	      .byte	%00111100	; ALARMCLOCK
    516  2550				  -	      .byte	%01000010	; ALARMCLOCK
    517  2550				  -	      .byte	%01000010	; ALARMCLOCK
    518  2550				  -	      .byte	%00111100	; ALARMCLOCK
    519  2550				  -
    520  2550				  -
    521  2550					      endif		; ALARMCLOCK
    522  2550
    523  2550				  -	      if	fontstyle == HANDWRITTEN
    524  2550				  -
    525  2550				  -			;byte %00000000 ; HANDWRITTEN
    526  2550				  -
    527  2550				  -	      .byte	%00110000	; HANDWRITTEN
    528  2550				  -	      .byte	%01001000	; HANDWRITTEN
    529  2550				  -	      .byte	%01001000	; HANDWRITTEN
    530  2550				  -	      .byte	%01001000	; HANDWRITTEN
    531  2550				  -	      .byte	%00100100	; HANDWRITTEN
    532  2550				  -	      .byte	%00100100	; HANDWRITTEN
    533  2550				  -	      .byte	%00010010	; HANDWRITTEN
    534  2550				  -	      .byte	%00001100	; HANDWRITTEN
    535  2550				  -
    536  2550				  -			;byte %00000000 ; HANDWRITTEN
    537  2550				  -
    538  2550				  -	      .byte	%00010000	; HANDWRITTEN
    539  2550				  -	      .byte	%00010000	; HANDWRITTEN
    540  2550				  -	      .byte	%00010000	; HANDWRITTEN
    541  2550				  -	      .byte	%00001000	; HANDWRITTEN
    542  2550				  -	      .byte	%00001000	; HANDWRITTEN
    543  2550				  -	      .byte	%00001000	; HANDWRITTEN
    544  2550				  -	      .byte	%00000100	; HANDWRITTEN
    545  2550				  -	      .byte	%00000100	; HANDWRITTEN
    546  2550				  -
    547  2550				  -			;byte %00000000 ; HANDWRITTEN
    548  2550				  -
    549  2550				  -	      .byte	%01110000	; HANDWRITTEN
    550  2550				  -	      .byte	%01001100	; HANDWRITTEN
    551  2550				  -	      .byte	%01000000	; HANDWRITTEN
    552  2550				  -	      .byte	%00100000	; HANDWRITTEN
    553  2550				  -	      .byte	%00011000	; HANDWRITTEN
    554  2550				  -	      .byte	%00000100	; HANDWRITTEN
    555  2550				  -	      .byte	%00100010	; HANDWRITTEN
    556  2550				  -	      .byte	%00011100	; HANDWRITTEN
    557  2550				  -
    558  2550				  -			;byte %00000000 ; HANDWRITTEN
    559  2550				  -
    560  2550				  -	      .byte	%00110000	; HANDWRITTEN
    561  2550				  -	      .byte	%01001000	; HANDWRITTEN
    562  2550				  -	      .byte	%00000100	; HANDWRITTEN
    563  2550				  -	      .byte	%00000100	; HANDWRITTEN
    564  2550				  -	      .byte	%00011000	; HANDWRITTEN
    565  2550				  -	      .byte	%00000100	; HANDWRITTEN
    566  2550				  -	      .byte	%00100010	; HANDWRITTEN
    567  2550				  -	      .byte	%00011100	; HANDWRITTEN
    568  2550				  -
    569  2550				  -			;byte %00000000 ; HANDWRITTEN
    570  2550				  -
    571  2550				  -	      .byte	%00010000	; HANDWRITTEN
    572  2550				  -	      .byte	%00010000	; HANDWRITTEN
    573  2550				  -	      .byte	%00001000	; HANDWRITTEN
    574  2550				  -	      .byte	%01111000	; HANDWRITTEN
    575  2550				  -	      .byte	%01000100	; HANDWRITTEN
    576  2550				  -	      .byte	%00100100	; HANDWRITTEN
    577  2550				  -	      .byte	%00010010	; HANDWRITTEN
    578  2550				  -	      .byte	%00000010	; HANDWRITTEN
    579  2550				  -
    580  2550				  -			;byte %00000000 ; HANDWRITTEN
    581  2550				  -
    582  2550				  -	      .byte	%00110000	; HANDWRITTEN
    583  2550				  -	      .byte	%01001000	; HANDWRITTEN
    584  2550				  -	      .byte	%00000100	; HANDWRITTEN
    585  2550				  -	      .byte	%00000100	; HANDWRITTEN
    586  2550				  -	      .byte	%00011000	; HANDWRITTEN
    587  2550				  -	      .byte	%00100000	; HANDWRITTEN
    588  2550				  -	      .byte	%00010010	; HANDWRITTEN
    589  2550				  -	      .byte	%00001100	; HANDWRITTEN
    590  2550				  -
    591  2550				  -			;byte %00000000 ; HANDWRITTEN
    592  2550				  -
    593  2550				  -	      .byte	%00010000	; HANDWRITTEN
    594  2550				  -	      .byte	%00101000	; HANDWRITTEN
    595  2550				  -	      .byte	%00100100	; HANDWRITTEN
    596  2550				  -	      .byte	%00100100	; HANDWRITTEN
    597  2550				  -	      .byte	%00011000	; HANDWRITTEN
    598  2550				  -	      .byte	%00010000	; HANDWRITTEN
    599  2550				  -	      .byte	%00001000	; HANDWRITTEN
    600  2550				  -	      .byte	%00000110	; HANDWRITTEN
    601  2550				  -
    602  2550				  -			;byte %00000000 ; HANDWRITTEN
    603  2550				  -
    604  2550				  -	      .byte	%00010000	; HANDWRITTEN
    605  2550				  -	      .byte	%00010000	; HANDWRITTEN
    606  2550				  -	      .byte	%00010000	; HANDWRITTEN
    607  2550				  -	      .byte	%00001000	; HANDWRITTEN
    608  2550				  -	      .byte	%00000100	; HANDWRITTEN
    609  2550				  -	      .byte	%00000100	; HANDWRITTEN
    610  2550				  -	      .byte	%00110010	; HANDWRITTEN
    611  2550				  -	      .byte	%00001110	; HANDWRITTEN
    612  2550				  -
    613  2550				  -			;byte %00000000 ; HANDWRITTEN
    614  2550				  -
    615  2550				  -	      .byte	%00110000	; HANDWRITTEN
    616  2550				  -	      .byte	%01001000	; HANDWRITTEN
    617  2550				  -	      .byte	%01000100	; HANDWRITTEN
    618  2550				  -	      .byte	%00100100	; HANDWRITTEN
    619  2550				  -	      .byte	%00011100	; HANDWRITTEN
    620  2550				  -	      .byte	%00010010	; HANDWRITTEN
    621  2550				  -	      .byte	%00001010	; HANDWRITTEN
    622  2550				  -	      .byte	%00000110	; HANDWRITTEN
    623  2550				  -
    624  2550				  -			;byte %00000000 ; HANDWRITTEN
    625  2550				  -
    626  2550				  -	      .byte	%00010000	; HANDWRITTEN
    627  2550				  -	      .byte	%00010000	; HANDWRITTEN
    628  2550				  -	      .byte	%00001000	; HANDWRITTEN
    629  2550				  -	      .byte	%00001000	; HANDWRITTEN
    630  2550				  -	      .byte	%00011100	; HANDWRITTEN
    631  2550				  -	      .byte	%00100100	; HANDWRITTEN
    632  2550				  -	      .byte	%00010010	; HANDWRITTEN
    633  2550				  -	      .byte	%00001100	; HANDWRITTEN
    634  2550				  -
    635  2550					      endif		; HANDWRITTEN
    636  2550
    637  2550				  -	      if	fontstyle == INTERRUPTED
    638  2550				  -
    639  2550				  -			;byte %00000000 ; INTERRUPTED
    640  2550				  -
    641  2550				  -	      .byte	%00110100	; INTERRUPTED
    642  2550				  -	      .byte	%01100110	; INTERRUPTED
    643  2550				  -	      .byte	%01100110	; INTERRUPTED
    644  2550				  -	      .byte	%01100110	; INTERRUPTED
    645  2550				  -	      .byte	%01100110	; INTERRUPTED
    646  2550				  -	      .byte	%01100110	; INTERRUPTED
    647  2550				  -	      .byte	%01100110	; INTERRUPTED
    648  2550				  -	      .byte	%00110100	; INTERRUPTED
    649  2550				  -
    650  2550				  -			;byte %00000000 ; INTERRUPTED
    651  2550				  -
    652  2550				  -	      .byte	%00111100	; INTERRUPTED
    653  2550				  -	      .byte	%00000000	; INTERRUPTED
    654  2550				  -	      .byte	%00011000	; INTERRUPTED
    655  2550				  -	      .byte	%00011000	; INTERRUPTED
    656  2550				  -	      .byte	%00011000	; INTERRUPTED
    657  2550				  -	      .byte	%00011000	; INTERRUPTED
    658  2550				  -	      .byte	%00011000	; INTERRUPTED
    659  2550				  -	      .byte	%00111000	; INTERRUPTED
    660  2550				  -
    661  2550				  -			;byte %00000000 ; INTERRUPTED
    662  2550				  -
    663  2550				  -	      .byte	%01101110	; INTERRUPTED
    664  2550				  -	      .byte	%01100000	; INTERRUPTED
    665  2550				  -	      .byte	%00110000	; INTERRUPTED
    666  2550				  -	      .byte	%00011000	; INTERRUPTED
    667  2550				  -	      .byte	%00001100	; INTERRUPTED
    668  2550				  -	      .byte	%00000110	; INTERRUPTED
    669  2550				  -	      .byte	%01000110	; INTERRUPTED
    670  2550				  -	      .byte	%00111100	; INTERRUPTED
    671  2550				  -
    672  2550				  -			;byte %00000000 ; INTERRUPTED
    673  2550				  -
    674  2550				  -	      .byte	%01111100	; INTERRUPTED
    675  2550				  -	      .byte	%00000110	; INTERRUPTED
    676  2550				  -	      .byte	%00000110	; INTERRUPTED
    677  2550				  -	      .byte	%00000110	; INTERRUPTED
    678  2550				  -	      .byte	%01110110	; INTERRUPTED
    679  2550				  -	      .byte	%00000110	; INTERRUPTED
    680  2550				  -	      .byte	%00000110	; INTERRUPTED
    681  2550				  -	      .byte	%01110100	; INTERRUPTED
    682  2550				  -
    683  2550				  -			;byte %00000000 ; INTERRUPTED
    684  2550				  -
    685  2550				  -	      .byte	%00000110	; INTERRUPTED
    686  2550				  -	      .byte	%00000110	; INTERRUPTED
    687  2550				  -	      .byte	%00000110	; INTERRUPTED
    688  2550				  -	      .byte	%00000110	; INTERRUPTED
    689  2550				  -	      .byte	%01110110	; INTERRUPTED
    690  2550				  -	      .byte	%01100110	; INTERRUPTED
    691  2550				  -	      .byte	%01100110	; INTERRUPTED
    692  2550				  -	      .byte	%01100110	; INTERRUPTED
    693  2550				  -
    694  2550				  -			;byte %00000000 ; INTERRUPTED
    695  2550				  -
    696  2550				  -	      .byte	%01111100	; INTERRUPTED
    697  2550				  -	      .byte	%00000110	; INTERRUPTED
    698  2550				  -	      .byte	%00000110	; INTERRUPTED
    699  2550				  -	      .byte	%00000110	; INTERRUPTED
    700  2550				  -	      .byte	%01111100	; INTERRUPTED
    701  2550				  -	      .byte	%01100000	; INTERRUPTED
    702  2550				  -	      .byte	%01100000	; INTERRUPTED
    703  2550				  -	      .byte	%01101110	; INTERRUPTED
    704  2550				  -
    705  2550				  -			;byte %00000000 ; INTERRUPTED
    706  2550				  -
    707  2550				  -	      .byte	%00101100	; INTERRUPTED
    708  2550				  -	      .byte	%01100110	; INTERRUPTED
    709  2550				  -	      .byte	%01100110	; INTERRUPTED
    710  2550				  -	      .byte	%01100110	; INTERRUPTED
    711  2550				  -	      .byte	%01101100	; INTERRUPTED
    712  2550				  -	      .byte	%01100000	; INTERRUPTED
    713  2550				  -	      .byte	%00110000	; INTERRUPTED
    714  2550				  -	      .byte	%00011100	; INTERRUPTED
    715  2550				  -
    716  2550				  -			;byte %00000000 ; INTERRUPTED
    717  2550				  -
    718  2550				  -	      .byte	%00011000	; INTERRUPTED
    719  2550				  -	      .byte	%00011000	; INTERRUPTED
    720  2550				  -	      .byte	%00011000	; INTERRUPTED
    721  2550				  -	      .byte	%00011100	; INTERRUPTED
    722  2550				  -	      .byte	%00001110	; INTERRUPTED
    723  2550				  -	      .byte	%00000110	; INTERRUPTED
    724  2550				  -	      .byte	%00000000	; INTERRUPTED
    725  2550				  -	      .byte	%01111110	; INTERRUPTED
    726  2550				  -
    727  2550				  -			;byte %00000000 ; INTERRUPTED
    728  2550				  -
    729  2550				  -	      .byte	%00110100	; INTERRUPTED
    730  2550				  -	      .byte	%01100110	; INTERRUPTED
    731  2550				  -	      .byte	%01100110	; INTERRUPTED
    732  2550				  -	      .byte	%01100110	; INTERRUPTED
    733  2550				  -	      .byte	%00110100	; INTERRUPTED
    734  2550				  -	      .byte	%01100110	; INTERRUPTED
    735  2550				  -	      .byte	%01100110	; INTERRUPTED
    736  2550				  -	      .byte	%00110100	; INTERRUPTED
    737  2550				  -
    738  2550				  -			;byte %00000000 ; INTERRUPTED
    739  2550				  -
    740  2550				  -	      .byte	%00111000	; INTERRUPTED
    741  2550				  -	      .byte	%00001100	; INTERRUPTED
    742  2550				  -	      .byte	%00000110	; INTERRUPTED
    743  2550				  -	      .byte	%00110110	; INTERRUPTED
    744  2550				  -	      .byte	%01100110	; INTERRUPTED
    745  2550				  -	      .byte	%01100110	; INTERRUPTED
    746  2550				  -	      .byte	%01100110	; INTERRUPTED
    747  2550				  -	      .byte	%00110100	; INTERRUPTED
    748  2550				  -
    749  2550					      endif		; INTERRUPTED
    750  2550
    751  2550
    752  2550				  -	      if	fontstyle == TINY
    753  2550				  -
    754  2550				  -			;byte %00000000 ; TINY
    755  2550				  -
    756  2550				  -	      .byte	%00000000	; TINY
    757  2550				  -	      .byte	%00111000	; TINY
    758  2550				  -	      .byte	%00101000	; TINY
    759  2550				  -	      .byte	%00101000	; TINY
    760  2550				  -	      .byte	%00101000	; TINY
    761  2550				  -	      .byte	%00111000	; TINY
    762  2550				  -	      .byte	%00000000	; TINY
    763  2550				  -	      .byte	%00000000	; TINY
    764  2550				  -
    765  2550				  -			;byte %00000000 ; TINY
    766  2550				  -
    767  2550				  -	      .byte	%00000000	; TINY
    768  2550				  -	      .byte	%00010000	; TINY
    769  2550				  -	      .byte	%00010000	; TINY
    770  2550				  -	      .byte	%00010000	; TINY
    771  2550				  -	      .byte	%00010000	; TINY
    772  2550				  -	      .byte	%00010000	; TINY
    773  2550				  -	      .byte	%00000000	; TINY
    774  2550				  -	      .byte	%00000000	; TINY
    775  2550				  -
    776  2550				  -			;byte %00000000 ; TINY
    777  2550				  -
    778  2550				  -	      .byte	%00000000	; TINY
    779  2550				  -	      .byte	%00111000	; TINY
    780  2550				  -	      .byte	%00100000	; TINY
    781  2550				  -	      .byte	%00111000	; TINY
    782  2550				  -	      .byte	%00001000	; TINY
    783  2550				  -	      .byte	%00111000	; TINY
    784  2550				  -	      .byte	%00000000	; TINY
    785  2550				  -	      .byte	%00000000	; TINY
    786  2550				  -
    787  2550				  -			;byte %00000000 ; TINY
    788  2550				  -
    789  2550				  -	      .byte	%00000000	; TINY
    790  2550				  -	      .byte	%00111000	; TINY
    791  2550				  -	      .byte	%00001000	; TINY
    792  2550				  -	      .byte	%00111000	; TINY
    793  2550				  -	      .byte	%00001000	; TINY
    794  2550				  -	      .byte	%00111000	; TINY
    795  2550				  -	      .byte	%00000000	; TINY
    796  2550				  -	      .byte	%00000000	; TINY
    797  2550				  -
    798  2550				  -			;byte %00000000 ; TINY
    799  2550				  -
    800  2550				  -	      .byte	%00000000	; TINY
    801  2550				  -	      .byte	%00001000	; TINY
    802  2550				  -	      .byte	%00001000	; TINY
    803  2550				  -	      .byte	%00111000	; TINY
    804  2550				  -	      .byte	%00101000	; TINY
    805  2550				  -	      .byte	%00101000	; TINY
    806  2550				  -	      .byte	%00000000	; TINY
    807  2550				  -	      .byte	%00000000	; TINY
    808  2550				  -
    809  2550				  -			;byte %00000000 ; TINY
    810  2550				  -
    811  2550				  -	      .byte	%00000000	; TINY
    812  2550				  -	      .byte	%00111000	; TINY
    813  2550				  -	      .byte	%00001000	; TINY
    814  2550				  -	      .byte	%00111000	; TINY
    815  2550				  -	      .byte	%00100000	; TINY
    816  2550				  -	      .byte	%00111000	; TINY
    817  2550				  -	      .byte	%00000000	; TINY
    818  2550				  -	      .byte	%00000000	; TINY
    819  2550				  -
    820  2550				  -			;byte %00000000 ; TINY
    821  2550				  -
    822  2550				  -	      .byte	%00000000	; TINY
    823  2550				  -	      .byte	%00111000	; TINY
    824  2550				  -	      .byte	%00101000	; TINY
    825  2550				  -	      .byte	%00111000	; TINY
    826  2550				  -	      .byte	%00100000	; TINY
    827  2550				  -	      .byte	%00111000	; TINY
    828  2550				  -	      .byte	%00000000	; TINY
    829  2550				  -	      .byte	%00000000	; TINY
    830  2550				  -
    831  2550				  -			;byte %00000000 ; TINY
    832  2550				  -
    833  2550				  -	      .byte	%00000000	; TINY
    834  2550				  -	      .byte	%00001000	; TINY
    835  2550				  -	      .byte	%00001000	; TINY
    836  2550				  -	      .byte	%00001000	; TINY
    837  2550				  -	      .byte	%00001000	; TINY
    838  2550				  -	      .byte	%00111000	; TINY
    839  2550				  -	      .byte	%00000000	; TINY
    840  2550				  -	      .byte	%00000000	; TINY
    841  2550				  -
    842  2550				  -			;byte %00000000 ; TINY
    843  2550				  -
    844  2550				  -	      .byte	%00000000	; TINY
    845  2550				  -	      .byte	%00111000	; TINY
    846  2550				  -	      .byte	%00101000	; TINY
    847  2550				  -	      .byte	%00111000	; TINY
    848  2550				  -	      .byte	%00101000	; TINY
    849  2550				  -	      .byte	%00111000	; TINY
    850  2550				  -	      .byte	%00000000	; TINY
    851  2550				  -	      .byte	%00000000	; TINY
    852  2550				  -
    853  2550				  -			;byte %00000000 ; TINY
    854  2550				  -
    855  2550				  -	      .byte	%00000000	; TINY
    856  2550				  -	      .byte	%00001000	; TINY
    857  2550				  -	      .byte	%00001000	; TINY
    858  2550				  -	      .byte	%00111000	; TINY
    859  2550				  -	      .byte	%00101000	; TINY
    860  2550				  -	      .byte	%00111000	; TINY
    861  2550				  -	      .byte	%00000000	; TINY
    862  2550				  -	      .byte	%00000000	; TINY
    863  2550				  -
    864  2550					      endif		; TINY
    865  2550
    866  2550				  -	      if	fontstyle == RETROPUTER
    867  2550				  -
    868  2550				  -			;byte %00000000 ; RETROPUTER
    869  2550				  -
    870  2550				  -	      .byte	%01111110	; RETROPUTER
    871  2550				  -	      .byte	%01000110	; RETROPUTER
    872  2550				  -	      .byte	%01000110	; RETROPUTER
    873  2550				  -	      .byte	%01000110	; RETROPUTER
    874  2550				  -	      .byte	%01100010	; RETROPUTER
    875  2550				  -	      .byte	%01100010	; RETROPUTER
    876  2550				  -	      .byte	%01100010	; RETROPUTER
    877  2550				  -	      .byte	%01111110	; RETROPUTER
    878  2550				  -
    879  2550				  -			;byte %00000000 ; RETROPUTER
    880  2550				  -
    881  2550				  -	      .byte	%00111000	; RETROPUTER
    882  2550				  -	      .byte	%00111000	; RETROPUTER
    883  2550				  -	      .byte	%00111000	; RETROPUTER
    884  2550				  -	      .byte	%00111000	; RETROPUTER
    885  2550				  -	      .byte	%00011000	; RETROPUTER
    886  2550				  -	      .byte	%00011000	; RETROPUTER
    887  2550				  -	      .byte	%00011000	; RETROPUTER
    888  2550				  -	      .byte	%00011000	; RETROPUTER
    889  2550				  -
    890  2550				  -			;byte %00000000 ; RETROPUTER
    891  2550				  -
    892  2550				  -	      .byte	%01111110	; RETROPUTER
    893  2550				  -	      .byte	%01100000	; RETROPUTER
    894  2550				  -	      .byte	%01100000	; RETROPUTER
    895  2550				  -	      .byte	%01100000	; RETROPUTER
    896  2550				  -	      .byte	%00111110	; RETROPUTER
    897  2550				  -	      .byte	%00000010	; RETROPUTER
    898  2550				  -	      .byte	%01000010	; RETROPUTER
    899  2550				  -	      .byte	%01111110	; RETROPUTER
    900  2550				  -
    901  2550				  -			;byte %00000000 ; RETROPUTER
    902  2550				  -
    903  2550				  -	      .byte	%01111110	; RETROPUTER
    904  2550				  -	      .byte	%01000110	; RETROPUTER
    905  2550				  -	      .byte	%00000110	; RETROPUTER
    906  2550				  -	      .byte	%00000110	; RETROPUTER
    907  2550				  -	      .byte	%00111110	; RETROPUTER
    908  2550				  -	      .byte	%00000010	; RETROPUTER
    909  2550				  -	      .byte	%01000010	; RETROPUTER
    910  2550				  -	      .byte	%01111110	; RETROPUTER
    911  2550				  -
    912  2550				  -			;byte %00000000 ; RETROPUTER
    913  2550				  -
    914  2550				  -	      .byte	%00001100	; RETROPUTER
    915  2550				  -	      .byte	%00001100	; RETROPUTER
    916  2550				  -	      .byte	%00001100	; RETROPUTER
    917  2550				  -	      .byte	%01111110	; RETROPUTER
    918  2550				  -	      .byte	%01000100	; RETROPUTER
    919  2550				  -	      .byte	%01000100	; RETROPUTER
    920  2550				  -	      .byte	%01000100	; RETROPUTER
    921  2550				  -	      .byte	%00000100	; RETROPUTER
    922  2550				  -
    923  2550				  -			;byte %00000000 ; RETROPUTER
    924  2550				  -
    925  2550				  -	      .byte	%01111110	; RETROPUTER
    926  2550				  -	      .byte	%01000110	; RETROPUTER
    927  2550				  -	      .byte	%00000110	; RETROPUTER
    928  2550				  -	      .byte	%00000110	; RETROPUTER
    929  2550				  -	      .byte	%01111100	; RETROPUTER
    930  2550				  -	      .byte	%01000000	; RETROPUTER
    931  2550				  -	      .byte	%01000000	; RETROPUTER
    932  2550				  -	      .byte	%01111110	; RETROPUTER
    933  2550				  -
    934  2550				  -			;byte %00000000 ; RETROPUTER
    935  2550				  -
    936  2550				  -	      .byte	%01111110	; RETROPUTER
    937  2550				  -	      .byte	%01000110	; RETROPUTER
    938  2550				  -	      .byte	%01000110	; RETROPUTER
    939  2550				  -	      .byte	%01000110	; RETROPUTER
    940  2550				  -	      .byte	%01111100	; RETROPUTER
    941  2550				  -	      .byte	%01000000	; RETROPUTER
    942  2550				  -	      .byte	%01000010	; RETROPUTER
    943  2550				  -	      .byte	%01111110	; RETROPUTER
    944  2550				  -
    945  2550				  -			;byte %00000000 ; RETROPUTER
    946  2550				  -
    947  2550				  -	      .byte	%00001100	; RETROPUTER
    948  2550				  -	      .byte	%00001100	; RETROPUTER
    949  2550				  -	      .byte	%00001100	; RETROPUTER
    950  2550				  -	      .byte	%00001100	; RETROPUTER
    951  2550				  -	      .byte	%00000100	; RETROPUTER
    952  2550				  -	      .byte	%00000010	; RETROPUTER
    953  2550				  -	      .byte	%01000010	; RETROPUTER
    954  2550				  -	      .byte	%01111110	; RETROPUTER
    955  2550				  -
    956  2550				  -			;byte %00000000 ; RETROPUTER
    957  2550				  -
    958  2550				  -	      .byte	%01111110	; RETROPUTER
    959  2550				  -	      .byte	%01000110	; RETROPUTER
    960  2550				  -	      .byte	%01000110	; RETROPUTER
    961  2550				  -	      .byte	%01000110	; RETROPUTER
    962  2550				  -	      .byte	%01111110	; RETROPUTER
    963  2550				  -	      .byte	%01000010	; RETROPUTER
    964  2550				  -	      .byte	%01000010	; RETROPUTER
    965  2550				  -	      .byte	%01111110	; RETROPUTER
    966  2550				  -
    967  2550				  -			;byte %00000000 ; RETROPUTER
    968  2550				  -
    969  2550				  -	      .byte	%00000110	; RETROPUTER
    970  2550				  -	      .byte	%00000110	; RETROPUTER
    971  2550				  -	      .byte	%00000110	; RETROPUTER
    972  2550				  -	      .byte	%00000010	; RETROPUTER
    973  2550				  -	      .byte	%01111110	; RETROPUTER
    974  2550				  -	      .byte	%01000010	; RETROPUTER
    975  2550				  -	      .byte	%01000010	; RETROPUTER
    976  2550				  -	      .byte	%01111110	; RETROPUTER
    977  2550				  -
    978  2550					      endif		; RETROPUTER
    979  2550
    980  2550				  -	      if	fontstyle == CURVES
    981  2550				  -
    982  2550				  -			;byte %00000000 ; CURVES
    983  2550				  -
    984  2550				  -	      .byte	%00111100	; CURVES
    985  2550				  -	      .byte	%01111110	; CURVES
    986  2550				  -	      .byte	%01100110	; CURVES
    987  2550				  -	      .byte	%01100110	; CURVES
    988  2550				  -	      .byte	%01100110	; CURVES
    989  2550				  -	      .byte	%01100110	; CURVES
    990  2550				  -	      .byte	%01111110	; CURVES
    991  2550				  -	      .byte	%00111100	; CURVES
    992  2550				  -
    993  2550				  -			;byte %00000000 ; CURVES
    994  2550				  -
    995  2550				  -	      .byte	%00011000	; CURVES
    996  2550				  -	      .byte	%00011000	; CURVES
    997  2550				  -	      .byte	%00011000	; CURVES
    998  2550				  -	      .byte	%00011000	; CURVES
    999  2550				  -	      .byte	%00011000	; CURVES
   1000  2550				  -	      .byte	%00011000	; CURVES
   1001  2550				  -	      .byte	%01111000	; CURVES
   1002  2550				  -	      .byte	%01110000	; CURVES
   1003  2550				  -
   1004  2550				  -			;byte %00000000 ; CURVES
   1005  2550				  -
   1006  2550				  -	      .byte	%01111110	; CURVES
   1007  2550				  -	      .byte	%01111110	; CURVES
   1008  2550				  -	      .byte	%01100000	; CURVES
   1009  2550				  -	      .byte	%01111100	; CURVES
   1010  2550				  -	      .byte	%00111110	; CURVES
   1011  2550				  -	      .byte	%00000110	; CURVES
   1012  2550				  -	      .byte	%01111110	; CURVES
   1013  2550				  -	      .byte	%01111100	; CURVES
   1014  2550				  -
   1015  2550				  -			;byte %00000000 ; CURVES
   1016  2550				  -
   1017  2550				  -	      .byte	%01111100	; CURVES
   1018  2550				  -	      .byte	%01111110	; CURVES
   1019  2550				  -	      .byte	%00001110	; CURVES
   1020  2550				  -	      .byte	%00111100	; CURVES
   1021  2550				  -	      .byte	%00111100	; CURVES
   1022  2550				  -	      .byte	%00001110	; CURVES
   1023  2550				  -	      .byte	%01111110	; CURVES
   1024  2550				  -	      .byte	%01111100	; CURVES
   1025  2550				  -
   1026  2550				  -			;byte %00000000 ; CURVES
   1027  2550				  -
   1028  2550				  -	      .byte	%00000110	; CURVES
   1029  2550				  -	      .byte	%00000110	; CURVES
   1030  2550				  -	      .byte	%00111110	; CURVES
   1031  2550				  -	      .byte	%01111110	; CURVES
   1032  2550				  -	      .byte	%01100110	; CURVES
   1033  2550				  -	      .byte	%01100110	; CURVES
   1034  2550				  -	      .byte	%01100110	; CURVES
   1035  2550				  -	      .byte	%01100110	; CURVES
   1036  2550				  -
   1037  2550				  -			;byte %00000000 ; CURVES
   1038  2550				  -
   1039  2550				  -	      .byte	%01111100	; CURVES
   1040  2550				  -	      .byte	%01111110	; CURVES
   1041  2550				  -	      .byte	%00000110	; CURVES
   1042  2550				  -	      .byte	%01111110	; CURVES
   1043  2550				  -	      .byte	%01111100	; CURVES
   1044  2550				  -	      .byte	%01100000	; CURVES
   1045  2550				  -	      .byte	%01111110	; CURVES
   1046  2550				  -	      .byte	%01111110	; CURVES
   1047  2550				  -
   1048  2550				  -			;byte %00000000 ; CURVES
   1049  2550				  -
   1050  2550				  -	      .byte	%00111100	; CURVES
   1051  2550				  -	      .byte	%01111110	; CURVES
   1052  2550				  -	      .byte	%01100110	; CURVES
   1053  2550				  -	      .byte	%01111110	; CURVES
   1054  2550				  -	      .byte	%01111100	; CURVES
   1055  2550				  -	      .byte	%01100000	; CURVES
   1056  2550				  -	      .byte	%01111110	; CURVES
   1057  2550				  -	      .byte	%00111110	; CURVES
   1058  2550				  -
   1059  2550				  -			;byte %00000000 ; CURVES
   1060  2550				  -
   1061  2550				  -	      .byte	%00000110	; CURVES
   1062  2550				  -	      .byte	%00000110	; CURVES
   1063  2550				  -	      .byte	%00000110	; CURVES
   1064  2550				  -	      .byte	%00000110	; CURVES
   1065  2550				  -	      .byte	%00000110	; CURVES
   1066  2550				  -	      .byte	%01100110	; CURVES
   1067  2550				  -	      .byte	%01111110	; CURVES
   1068  2550				  -	      .byte	%00111100	; CURVES
   1069  2550				  -
   1070  2550				  -			;byte %00000000 ; CURVES
   1071  2550				  -
   1072  2550				  -	      .byte	%00111100	; CURVES
   1073  2550				  -	      .byte	%01111110	; CURVES
   1074  2550				  -	      .byte	%01100110	; CURVES
   1075  2550				  -	      .byte	%01111110	; CURVES
   1076  2550				  -	      .byte	%00111100	; CURVES
   1077  2550				  -	      .byte	%01100110	; CURVES
   1078  2550				  -	      .byte	%01111110	; CURVES
   1079  2550				  -	      .byte	%00111100	; CURVES
   1080  2550				  -
   1081  2550				  -			;byte %00000000 ; CURVES
   1082  2550				  -
   1083  2550				  -	      .byte	%01111100	; CURVES
   1084  2550				  -	      .byte	%01111110	; CURVES
   1085  2550				  -	      .byte	%00000110	; CURVES
   1086  2550				  -	      .byte	%00111110	; CURVES
   1087  2550				  -	      .byte	%01111110	; CURVES
   1088  2550				  -	      .byte	%01100110	; CURVES
   1089  2550				  -	      .byte	%01111110	; CURVES
   1090  2550				  -	      .byte	%00111100	; CURVES
   1091  2550				  -
   1092  2550					      endif		; CURVES
   1093  2550
   1094  2550
   1095  2550				  -	      if	fontstyle == HUSKY
   1096  2550				  -
   1097  2550				  -			;byte %00000000 ; HUSKY
   1098  2550				  -
   1099  2550				  -	      .byte	%01111100	; HUSKY
   1100  2550				  -	      .byte	%11111110	; HUSKY
   1101  2550				  -	      .byte	%11101110	; HUSKY
   1102  2550				  -	      .byte	%11101110	; HUSKY
   1103  2550				  -	      .byte	%11101110	; HUSKY
   1104  2550				  -	      .byte	%11101110	; HUSKY
   1105  2550				  -	      .byte	%11111110	; HUSKY
   1106  2550				  -	      .byte	%01111100	; HUSKY
   1107  2550				  -
   1108  2550				  -			;byte %00000000 ; HUSKY
   1109  2550				  -
   1110  2550				  -	      .byte	%00111000	; HUSKY
   1111  2550				  -	      .byte	%00111000	; HUSKY
   1112  2550				  -	      .byte	%00111000	; HUSKY
   1113  2550				  -	      .byte	%00111000	; HUSKY
   1114  2550				  -	      .byte	%00111000	; HUSKY
   1115  2550				  -	      .byte	%00111000	; HUSKY
   1116  2550				  -	      .byte	%00111000	; HUSKY
   1117  2550				  -	      .byte	%00111000	; HUSKY
   1118  2550				  -
   1119  2550				  -			;byte %00000000 ; HUSKY
   1120  2550				  -
   1121  2550				  -	      .byte	%11111110	; HUSKY
   1122  2550				  -	      .byte	%11111110	; HUSKY
   1123  2550				  -	      .byte	%11100000	; HUSKY
   1124  2550				  -	      .byte	%11111100	; HUSKY
   1125  2550				  -	      .byte	%01111110	; HUSKY
   1126  2550				  -	      .byte	%00001110	; HUSKY
   1127  2550				  -	      .byte	%11111110	; HUSKY
   1128  2550				  -	      .byte	%11111100	; HUSKY
   1129  2550				  -
   1130  2550				  -			;byte %00000000 ; HUSKY
   1131  2550				  -
   1132  2550				  -	      .byte	%11111100	; HUSKY
   1133  2550				  -	      .byte	%11111110	; HUSKY
   1134  2550				  -	      .byte	%00001110	; HUSKY
   1135  2550				  -	      .byte	%11111100	; HUSKY
   1136  2550				  -	      .byte	%11111100	; HUSKY
   1137  2550				  -	      .byte	%00001110	; HUSKY
   1138  2550				  -	      .byte	%11111110	; HUSKY
   1139  2550				  -	      .byte	%11111100	; HUSKY
   1140  2550				  -
   1141  2550				  -			;byte %00000000 ; HUSKY
   1142  2550				  -
   1143  2550				  -	      .byte	%00011100	; HUSKY
   1144  2550				  -	      .byte	%00011100	; HUSKY
   1145  2550				  -	      .byte	%11111110	; HUSKY
   1146  2550				  -	      .byte	%11111110	; HUSKY
   1147  2550				  -	      .byte	%11011100	; HUSKY
   1148  2550				  -	      .byte	%11011100	; HUSKY
   1149  2550				  -	      .byte	%00011100	; HUSKY
   1150  2550				  -	      .byte	%00011100	; HUSKY
   1151  2550				  -
   1152  2550				  -			;byte %00000000 ; HUSKY
   1153  2550				  -
   1154  2550				  -	      .byte	%11111100	; HUSKY
   1155  2550				  -	      .byte	%11111110	; HUSKY
   1156  2550				  -	      .byte	%00001110	; HUSKY
   1157  2550				  -	      .byte	%11111110	; HUSKY
   1158  2550				  -	      .byte	%11111100	; HUSKY
   1159  2550				  -	      .byte	%11100000	; HUSKY
   1160  2550				  -	      .byte	%11111110	; HUSKY
   1161  2550				  -	      .byte	%11111110	; HUSKY
   1162  2550				  -
   1163  2550				  -			;byte %00000000 ; HUSKY
   1164  2550				  -
   1165  2550				  -	      .byte	%01111100	; HUSKY
   1166  2550				  -	      .byte	%11111110	; HUSKY
   1167  2550				  -	      .byte	%11101110	; HUSKY
   1168  2550				  -	      .byte	%11111110	; HUSKY
   1169  2550				  -	      .byte	%11111100	; HUSKY
   1170  2550				  -	      .byte	%11100000	; HUSKY
   1171  2550				  -	      .byte	%11111110	; HUSKY
   1172  2550				  -	      .byte	%01111110	; HUSKY
   1173  2550				  -
   1174  2550				  -			;byte %00000000 ; HUSKY
   1175  2550				  -
   1176  2550				  -	      .byte	%00111000	; HUSKY
   1177  2550				  -	      .byte	%00111000	; HUSKY
   1178  2550				  -	      .byte	%00111000	; HUSKY
   1179  2550				  -	      .byte	%00111000	; HUSKY
   1180  2550				  -	      .byte	%00011100	; HUSKY
   1181  2550				  -	      .byte	%00001110	; HUSKY
   1182  2550				  -	      .byte	%11111110	; HUSKY
   1183  2550				  -	      .byte	%11111110	; HUSKY
   1184  2550				  -
   1185  2550				  -			;byte %00000000 ; HUSKY
   1186  2550				  -
   1187  2550				  -	      .byte	%01111100	; HUSKY
   1188  2550				  -	      .byte	%11111110	; HUSKY
   1189  2550				  -	      .byte	%11101110	; HUSKY
   1190  2550				  -	      .byte	%11111110	; HUSKY
   1191  2550				  -	      .byte	%01111100	; HUSKY
   1192  2550				  -	      .byte	%11101110	; HUSKY
   1193  2550				  -	      .byte	%11111110	; HUSKY
   1194  2550				  -	      .byte	%01111100	; HUSKY
   1195  2550				  -
   1196  2550				  -			;byte %00000000 ; HUSKY
   1197  2550				  -
   1198  2550				  -	      .byte	%11111100	; HUSKY
   1199  2550				  -	      .byte	%11111110	; HUSKY
   1200  2550				  -	      .byte	%00001110	; HUSKY
   1201  2550				  -	      .byte	%01111110	; HUSKY
   1202  2550				  -	      .byte	%11111110	; HUSKY
   1203  2550				  -	      .byte	%11101110	; HUSKY
   1204  2550				  -	      .byte	%11111110	; HUSKY
   1205  2550				  -	      .byte	%01111100	; HUSKY
   1206  2550				  -
   1207  2550					      endif		; HUSKY
   1208  2550
   1209  2550
   1210  2550				  -	      if	fontstyle == SNAKE
   1211  2550				  -
   1212  2550				  -			;byte %00000000 ; SNAKE
   1213  2550				  -
   1214  2550				  -	      .byte	%01111110	; SNAKE
   1215  2550				  -	      .byte	%01000010	; SNAKE
   1216  2550				  -	      .byte	%01000010	; SNAKE
   1217  2550				  -	      .byte	%01000010	; SNAKE
   1218  2550				  -	      .byte	%01000010	; SNAKE
   1219  2550				  -	      .byte	%01000010	; SNAKE
   1220  2550				  -	      .byte	%01000010	; SNAKE
   1221  2550				  -	      .byte	%01111110	; SNAKE
   1222  2550				  -
   1223  2550				  -			;byte %00000000 ; SNAKE
   1224  2550				  -
   1225  2550				  -	      .byte	%00111000	; SNAKE
   1226  2550				  -	      .byte	%00101000	; SNAKE
   1227  2550				  -	      .byte	%00001000	; SNAKE
   1228  2550				  -	      .byte	%00001000	; SNAKE
   1229  2550				  -	      .byte	%00001000	; SNAKE
   1230  2550				  -	      .byte	%00001000	; SNAKE
   1231  2550				  -	      .byte	%00001000	; SNAKE
   1232  2550				  -	      .byte	%00111000	; SNAKE
   1233  2550				  -
   1234  2550				  -			;byte %00000000 ; SNAKE
   1235  2550				  -
   1236  2550				  -	      .byte	%01111110	; SNAKE
   1237  2550				  -	      .byte	%01000010	; SNAKE
   1238  2550				  -	      .byte	%01000110	; SNAKE
   1239  2550				  -	      .byte	%01000000	; SNAKE
   1240  2550				  -	      .byte	%01111110	; SNAKE
   1241  2550				  -	      .byte	%00000010	; SNAKE
   1242  2550				  -	      .byte	%01000010	; SNAKE
   1243  2550				  -	      .byte	%01111110	; SNAKE
   1244  2550				  -
   1245  2550				  -			;byte %00000000 ; SNAKE
   1246  2550				  -
   1247  2550				  -	      .byte	%01111110	; SNAKE
   1248  2550				  -	      .byte	%01000010	; SNAKE
   1249  2550				  -	      .byte	%01100010	; SNAKE
   1250  2550				  -	      .byte	%00000010	; SNAKE
   1251  2550				  -	      .byte	%01111110	; SNAKE
   1252  2550				  -	      .byte	%00000010	; SNAKE
   1253  2550				  -	      .byte	%01000010	; SNAKE
   1254  2550				  -	      .byte	%01111110	; SNAKE
   1255  2550				  -
   1256  2550				  -			;byte %00000000 ; SNAKE
   1257  2550				  -
   1258  2550				  -	      .byte	%00001110	; SNAKE
   1259  2550				  -	      .byte	%00001010	; SNAKE
   1260  2550				  -	      .byte	%00000010	; SNAKE
   1261  2550				  -	      .byte	%01111110	; SNAKE
   1262  2550				  -	      .byte	%01000010	; SNAKE
   1263  2550				  -	      .byte	%01000010	; SNAKE
   1264  2550				  -	      .byte	%01000010	; SNAKE
   1265  2550				  -	      .byte	%01100110	; SNAKE
   1266  2550				  -
   1267  2550				  -			;byte %00000000 ; SNAKE
   1268  2550				  -
   1269  2550				  -	      .byte	%01111110	; SNAKE
   1270  2550				  -	      .byte	%01000010	; SNAKE
   1271  2550				  -	      .byte	%01100010	; SNAKE
   1272  2550				  -	      .byte	%00000010	; SNAKE
   1273  2550				  -	      .byte	%01111110	; SNAKE
   1274  2550				  -	      .byte	%01000000	; SNAKE
   1275  2550				  -	      .byte	%01000010	; SNAKE
   1276  2550				  -	      .byte	%01111110	; SNAKE
   1277  2550				  -
   1278  2550				  -			;byte %00000000 ; SNAKE
   1279  2550				  -
   1280  2550				  -	      .byte	%01111110	; SNAKE
   1281  2550				  -	      .byte	%01000010	; SNAKE
   1282  2550				  -	      .byte	%01000010	; SNAKE
   1283  2550				  -	      .byte	%01111110	; SNAKE
   1284  2550				  -	      .byte	%01000000	; SNAKE
   1285  2550				  -	      .byte	%01000110	; SNAKE
   1286  2550				  -	      .byte	%01000010	; SNAKE
   1287  2550				  -	      .byte	%01111110	; SNAKE
   1288  2550				  -
   1289  2550				  -			;byte %00000000 ; SNAKE
   1290  2550				  -
   1291  2550				  -	      .byte	%00000110	; SNAKE
   1292  2550				  -	      .byte	%00000010	; SNAKE
   1293  2550				  -	      .byte	%00000010	; SNAKE
   1294  2550				  -	      .byte	%00000010	; SNAKE
   1295  2550				  -	      .byte	%00000010	; SNAKE
   1296  2550				  -	      .byte	%01100010	; SNAKE
   1297  2550				  -	      .byte	%01000010	; SNAKE
   1298  2550				  -	      .byte	%01111110	; SNAKE
   1299  2550				  -
   1300  2550				  -			;byte %00000000 ; SNAKE
   1301  2550				  -
   1302  2550				  -	      .byte	%01111110	; SNAKE
   1303  2550				  -	      .byte	%01000010	; SNAKE
   1304  2550				  -	      .byte	%01000010	; SNAKE
   1305  2550				  -	      .byte	%01000010	; SNAKE
   1306  2550				  -	      .byte	%01111110	; SNAKE
   1307  2550				  -	      .byte	%01000010	; SNAKE
   1308  2550				  -	      .byte	%01000010	; SNAKE
   1309  2550				  -	      .byte	%01111110	; SNAKE
   1310  2550				  -
   1311  2550				  -			;byte %00000000 ; SNAKE
   1312  2550				  -
   1313  2550				  -	      .byte	%00001110	; SNAKE
   1314  2550				  -	      .byte	%00001010	; SNAKE
   1315  2550				  -	      .byte	%00000010	; SNAKE
   1316  2550				  -	      .byte	%00000010	; SNAKE
   1317  2550				  -	      .byte	%01111110	; SNAKE
   1318  2550				  -	      .byte	%01000010	; SNAKE
   1319  2550				  -	      .byte	%01000010	; SNAKE
   1320  2550				  -	      .byte	%01111110	; SNAKE
   1321  2550				  -
   1322  2550				  -
   1323  2550					      endif		; SNAKE
   1324  2550
   1325  2550				  -	      if	fontstyle == PLOK
   1326  2550				  -
   1327  2550				  -			;byte %00000000 ; PLOK
   1328  2550				  -
   1329  2550				  -	      .byte	%00000000	; PLOK
   1330  2550				  -	      .byte	%00111000	; PLOK
   1331  2550				  -	      .byte	%01100100	; PLOK
   1332  2550				  -	      .byte	%01100010	; PLOK
   1333  2550				  -	      .byte	%01100010	; PLOK
   1334  2550				  -	      .byte	%00110110	; PLOK
   1335  2550				  -	      .byte	%00011100	; PLOK
   1336  2550				  -	      .byte	%00000000	; PLOK
   1337  2550				  -
   1338  2550				  -			;byte %00000000 ; PLOK
   1339  2550				  -
   1340  2550				  -	      .byte	%00000000	; PLOK
   1341  2550				  -	      .byte	%00010000	; PLOK
   1342  2550				  -	      .byte	%00011100	; PLOK
   1343  2550				  -	      .byte	%00011100	; PLOK
   1344  2550				  -	      .byte	%00011000	; PLOK
   1345  2550				  -	      .byte	%00111000	; PLOK
   1346  2550				  -	      .byte	%00011000	; PLOK
   1347  2550				  -	      .byte	%00000000	; PLOK
   1348  2550				  -
   1349  2550				  -			;byte %00000000 ; PLOK
   1350  2550				  -
   1351  2550				  -	      .byte	%00000000	; PLOK
   1352  2550				  -	      .byte	%00001110	; PLOK
   1353  2550				  -	      .byte	%01111110	; PLOK
   1354  2550				  -	      .byte	%00011000	; PLOK
   1355  2550				  -	      .byte	%00001100	; PLOK
   1356  2550				  -	      .byte	%00000110	; PLOK
   1357  2550				  -	      .byte	%00111100	; PLOK
   1358  2550				  -	      .byte	%00000000	; PLOK
   1359  2550				  -
   1360  2550				  -			;byte %00000000 ; PLOK
   1361  2550				  -
   1362  2550				  -	      .byte	%00000000	; PLOK
   1363  2550				  -	      .byte	%00111100	; PLOK
   1364  2550				  -	      .byte	%01101110	; PLOK
   1365  2550				  -	      .byte	%00001110	; PLOK
   1366  2550				  -	      .byte	%00011100	; PLOK
   1367  2550				  -	      .byte	%00000110	; PLOK
   1368  2550				  -	      .byte	%01111100	; PLOK
   1369  2550				  -	      .byte	%00000000	; PLOK
   1370  2550				  -
   1371  2550				  -			;byte %00000000 ; PLOK
   1372  2550				  -
   1373  2550				  -	      .byte	%00000000	; PLOK
   1374  2550				  -	      .byte	%00011000	; PLOK
   1375  2550				  -	      .byte	%01111110	; PLOK
   1376  2550				  -	      .byte	%01101100	; PLOK
   1377  2550				  -	      .byte	%00100100	; PLOK
   1378  2550				  -	      .byte	%00110000	; PLOK
   1379  2550				  -	      .byte	%00110000	; PLOK
   1380  2550				  -	      .byte	%00000000	; PLOK
   1381  2550				  -
   1382  2550				  -			;byte %00000000 ; PLOK
   1383  2550				  -
   1384  2550				  -	      .byte	%00000000	; PLOK
   1385  2550				  -	      .byte	%00111100	; PLOK
   1386  2550				  -	      .byte	%01001110	; PLOK
   1387  2550				  -	      .byte	%00011100	; PLOK
   1388  2550				  -	      .byte	%01100000	; PLOK
   1389  2550				  -	      .byte	%01111100	; PLOK
   1390  2550				  -	      .byte	%00011100	; PLOK
   1391  2550				  -	      .byte	%00000000	; PLOK
   1392  2550				  -
   1393  2550				  -			;byte %00000000 ; PLOK
   1394  2550				  -
   1395  2550				  -	      .byte	%00000000	; PLOK
   1396  2550				  -	      .byte	%00111100	; PLOK
   1397  2550				  -	      .byte	%01000110	; PLOK
   1398  2550				  -	      .byte	%01101100	; PLOK
   1399  2550				  -	      .byte	%01110000	; PLOK
   1400  2550				  -	      .byte	%00111000	; PLOK
   1401  2550				  -	      .byte	%00010000	; PLOK
   1402  2550				  -	      .byte	%00000000	; PLOK
   1403  2550				  -
   1404  2550				  -			;byte %00000000 ; PLOK
   1405  2550				  -
   1406  2550				  -	      .byte	%00000000	; PLOK
   1407  2550				  -	      .byte	%00111100	; PLOK
   1408  2550				  -	      .byte	%00011100	; PLOK
   1409  2550				  -	      .byte	%00001100	; PLOK
   1410  2550				  -	      .byte	%00000110	; PLOK
   1411  2550				  -	      .byte	%01111110	; PLOK
   1412  2550				  -	      .byte	%00110000	; PLOK
   1413  2550				  -	      .byte	%00000000	; PLOK
   1414  2550				  -
   1415  2550				  -			;byte %00000000 ; PLOK
   1416  2550				  -
   1417  2550				  -	      .byte	%00000000	; PLOK
   1418  2550				  -	      .byte	%00111100	; PLOK
   1419  2550				  -	      .byte	%01001110	; PLOK
   1420  2550				  -	      .byte	%01101110	; PLOK
   1421  2550				  -	      .byte	%00111100	; PLOK
   1422  2550				  -	      .byte	%01100100	; PLOK
   1423  2550				  -	      .byte	%00111000	; PLOK
   1424  2550				  -	      .byte	%00000000	; PLOK
   1425  2550				  -
   1426  2550				  -			;byte %00000000 ; PLOK
   1427  2550				  -
   1428  2550				  -	      .byte	%00000000	; PLOK
   1429  2550				  -	      .byte	%00011000	; PLOK
   1430  2550				  -	      .byte	%00001100	; PLOK
   1431  2550				  -	      .byte	%00011100	; PLOK
   1432  2550				  -	      .byte	%00100110	; PLOK
   1433  2550				  -	      .byte	%01001110	; PLOK
   1434  2550				  -	      .byte	%00111100	; PLOK
   1435  2550				  -	      .byte	%00000000	; PLOK
   1436  2550				  -
   1437  2550					      endif		; PLOK
   1438  2550
   1439  2550							; ### any characters that aren't font specific follow... 
   1440  2550
   1441  2550				  -	      ifconst	fontcharSPACE
   1442  2550				  -			;byte %00000000 ; SYMBOLS
   1443  2550				  -
   1444  2550				  -	      .byte	%00000000	; SYMBOLS
   1445  2550				  -	      .byte	%00000000	; SYMBOLS
   1446  2550				  -	      .byte	%00000000	; SYMBOLS
   1447  2550				  -	      .byte	%00000000	; SYMBOLS
   1448  2550				  -	      .byte	%00000000	; SYMBOLS
   1449  2550				  -	      .byte	%00000000	; SYMBOLS
   1450  2550				  -	      .byte	%00000000	; SYMBOLS
   1451  2550				  -	      .byte	%00000000	; SYMBOLS
   1452  2550				  -
   1453  2550				  -			;byte %00000000 ; SYMBOLS
   1454  2550					      endif		; fontcharSPACE
   1455  2550
   1456  2550				  -	      ifconst	fontcharDOLLAR
   1457  2550				  -			;byte %00000000 ; SYMBOLS
   1458  2550				  -
   1459  2550				  -	      .byte	%00000000	; SYMBOLS
   1460  2550				  -	      .byte	%00010000	; SYMBOLS
   1461  2550				  -	      .byte	%01111100	; SYMBOLS
   1462  2550				  -	      .byte	%00010010	; SYMBOLS
   1463  2550				  -	      .byte	%01111100	; SYMBOLS
   1464  2550				  -	      .byte	%10010000	; SYMBOLS
   1465  2550				  -	      .byte	%01111100	; SYMBOLS
   1466  2550				  -	      .byte	%00010000	; SYMBOLS
   1467  2550				  -
   1468  2550				  -			;byte %00000000 ; SYMBOLS
   1469  2550				  -
   1470  2550					      endif		; fontcharDOLLAR
   1471  2550
   1472  2550				  -	      ifconst	fontcharPOUND
   1473  2550				  -			;byte %00000000 ; SYMBOLS
   1474  2550				  -
   1475  2550				  -	      .byte	%01111110	; SYMBOLS
   1476  2550				  -	      .byte	%01000000	; SYMBOLS
   1477  2550				  -	      .byte	%00100000	; SYMBOLS
   1478  2550				  -	      .byte	%00100000	; SYMBOLS
   1479  2550				  -	      .byte	%01111000	; SYMBOLS
   1480  2550				  -	      .byte	%00100000	; SYMBOLS
   1481  2550				  -	      .byte	%00100010	; SYMBOLS
   1482  2550				  -	      .byte	%00011100	; SYMBOLS
   1483  2550				  -
   1484  2550				  -			;byte %00000000 ; SYMBOLS
   1485  2550				  -
   1486  2550					      endif		; fontcharPOUND
   1487  2550
   1488  2550
   1489  2550				  -	      ifconst	fontcharMRHAPPY
   1490  2550				  -			;byte %00000000 ; SYMBOLS
   1491  2550				  -
   1492  2550				  -	      .byte	%00111100	; SYMBOLS
   1493  2550				  -	      .byte	%01100110	; SYMBOLS
   1494  2550				  -	      .byte	%01011010	; SYMBOLS
   1495  2550				  -	      .byte	%01111110	; SYMBOLS
   1496  2550				  -	      .byte	%01111110	; SYMBOLS
   1497  2550				  -	      .byte	%01011010	; SYMBOLS
   1498  2550				  -	      .byte	%01111110	; SYMBOLS
   1499  2550				  -	      .byte	%00111100	; SYMBOLS
   1500  2550				  -
   1501  2550				  -			;byte %00000000 ; SYMBOLS
   1502  2550				  -
   1503  2550					      endif		; fontcharMRHAPPY
   1504  2550
   1505  2550				  -	      ifconst	fontcharMRSAD
   1506  2550				  -			;byte %00000000 ; SYMBOLS
   1507  2550				  -
   1508  2550				  -	      .byte	%00111100	; SYMBOLS
   1509  2550				  -	      .byte	%01011010	; SYMBOLS
   1510  2550				  -	      .byte	%01100110	; SYMBOLS
   1511  2550				  -	      .byte	%01111110	; SYMBOLS
   1512  2550				  -	      .byte	%01111110	; SYMBOLS
   1513  2550				  -	      .byte	%01011010	; SYMBOLS
   1514  2550				  -	      .byte	%01111110	; SYMBOLS
   1515  2550				  -	      .byte	%00111100	; SYMBOLS
   1516  2550				  -
   1517  2550				  -			;byte %00000000 ; SYMBOLS
   1518  2550				  -
   1519  2550					      endif		; fontcharMRSAD
   1520  2550
   1521  2550
   1522  2550				  -	      ifconst	fontcharCOPYRIGHT
   1523  2550				  -			;byte %00000000 ; SYMBOLS
   1524  2550				  -
   1525  2550				  -	      .byte	%00000000	; SYMBOLS
   1526  2550				  -	      .byte	%00111000	; SYMBOLS
   1527  2550				  -	      .byte	%01000100	; SYMBOLS
   1528  2550				  -	      .byte	%10111010	; SYMBOLS
   1529  2550				  -	      .byte	%10100010	; SYMBOLS
   1530  2550				  -	      .byte	%10111010	; SYMBOLS
   1531  2550				  -	      .byte	%01000100	; SYMBOLS
   1532  2550				  -	      .byte	%00111000	; SYMBOLS
   1533  2550				  -
   1534  2550				  -			;byte %00000000 ; SYMBOLS
   1535  2550				  -
   1536  2550					      endif		; fontcharCOPYRIGHT
   1537  2550
   1538  2550
   1539  2550				  -	      ifconst	fontcharFUJI
   1540  2550				  -
   1541  2550				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2550				  -
   1543  2550				  -	      .byte	%01110000	; SYMBOLS
   1544  2550				  -	      .byte	%01111001	; SYMBOLS
   1545  2550				  -	      .byte	%00011101	; SYMBOLS
   1546  2550				  -	      .byte	%00001101	; SYMBOLS
   1547  2550				  -	      .byte	%00001101	; SYMBOLS
   1548  2550				  -	      .byte	%00001101	; SYMBOLS
   1549  2550				  -	      .byte	%00001101	; SYMBOLS
   1550  2550				  -	      .byte	%00000000	; SYMBOLS
   1551  2550				  -
   1552  2550				  -			;byte %00000000 ; SYMBOLS
   1553  2550				  -
   1554  2550				  -	      .byte	%00001110	; SYMBOLS
   1555  2550				  -	      .byte	%10011110	; SYMBOLS
   1556  2550				  -	      .byte	%10111000	; SYMBOLS
   1557  2550				  -	      .byte	%10110000	; SYMBOLS
   1558  2550				  -	      .byte	%10110000	; SYMBOLS
   1559  2550				  -	      .byte	%10110000	; SYMBOLS
   1560  2550				  -	      .byte	%10110000	; SYMBOLS
   1561  2550				  -	      .byte	%00000000	; SYMBOLS
   1562  2550				  -
   1563  2550				  -			;byte %00000000 ; SYMBOLS
   1564  2550				  -
   1565  2550					      endif		; fontcharFUJI
   1566  2550
   1567  2550
   1568  2550				  -	      ifconst	fontcharHEART
   1569  2550				  -			;byte %00000000 ; SYMBOLS
   1570  2550				  -
   1571  2550				  -	      .byte	%00010000	; SYMBOLS
   1572  2550				  -	      .byte	%00111000	; SYMBOLS
   1573  2550				  -	      .byte	%01111100	; SYMBOLS
   1574  2550				  -	      .byte	%01111100	; SYMBOLS
   1575  2550				  -	      .byte	%11111110	; SYMBOLS
   1576  2550				  -	      .byte	%11111110	; SYMBOLS
   1577  2550				  -	      .byte	%11101110	; SYMBOLS
   1578  2550				  -	      .byte	%01000100	; SYMBOLS
   1579  2550				  -
   1580  2550				  -			;byte %00000000 ; SYMBOLS
   1581  2550				  -
   1582  2550					      endif		; fontcharHEART
   1583  2550
   1584  2550				  -	      ifconst	fontcharDIAMOND
   1585  2550				  -			;byte %00000000 ; SYMBOLS
   1586  2550				  -
   1587  2550				  -	      .byte	%00010000	; SYMBOLS
   1588  2550				  -	      .byte	%00111000	; SYMBOLS
   1589  2550				  -	      .byte	%01111100	; SYMBOLS
   1590  2550				  -	      .byte	%11111110	; SYMBOLS
   1591  2550				  -	      .byte	%11111110	; SYMBOLS
   1592  2550				  -	      .byte	%01111100	; SYMBOLS
   1593  2550				  -	      .byte	%00111000	; SYMBOLS
   1594  2550				  -	      .byte	%00010000	; SYMBOLS
   1595  2550				  -
   1596  2550				  -			;byte %00000000 ; SYMBOLS
   1597  2550				  -
   1598  2550					      endif		; fontcharDIAMOND
   1599  2550
   1600  2550				  -	      ifconst	fontcharSPADE
   1601  2550				  -			;byte %00000000 ; SYMBOLS
   1602  2550				  -
   1603  2550				  -	      .byte	%00111000	; SYMBOLS
   1604  2550				  -	      .byte	%00010000	; SYMBOLS
   1605  2550				  -	      .byte	%01010100	; SYMBOLS
   1606  2550				  -	      .byte	%11111110	; SYMBOLS
   1607  2550				  -	      .byte	%11111110	; SYMBOLS
   1608  2550				  -	      .byte	%01111100	; SYMBOLS
   1609  2550				  -	      .byte	%00111000	; SYMBOLS
   1610  2550				  -	      .byte	%00010000	; SYMBOLS
   1611  2550				  -
   1612  2550				  -			;byte %00000000 ; SYMBOLS
   1613  2550				  -
   1614  2550					      endif		; fontcharSPADE
   1615  2550
   1616  2550				  -	      ifconst	fontcharCLUB
   1617  2550				  -			;byte %00000000 ; SYMBOLS
   1618  2550				  -
   1619  2550				  -	      .byte	%00111000	; SYMBOLS
   1620  2550				  -	      .byte	%00010000	; SYMBOLS
   1621  2550				  -	      .byte	%11010110	; SYMBOLS
   1622  2550				  -	      .byte	%11111110	; SYMBOLS
   1623  2550				  -	      .byte	%11010110	; SYMBOLS
   1624  2550				  -	      .byte	%00111000	; SYMBOLS
   1625  2550				  -	      .byte	%00111000	; SYMBOLS
   1626  2550				  -	      .byte	%00000000	; SYMBOLS
   1627  2550				  -
   1628  2550				  -			;byte %00000000 ; SYMBOLS
   1629  2550				  -
   1630  2550					      endif		; fontcharCLUB
   1631  2550
   1632  2550
   1633  2550				  -	      ifconst	fontcharCOLON
   1634  2550				  -			;byte %00000000 ; SYMBOLS
   1635  2550				  -
   1636  2550				  -	      .byte	%00000000	; SYMBOLS
   1637  2550				  -	      .byte	%00011000	; SYMBOLS
   1638  2550				  -	      .byte	%00011000	; SYMBOLS
   1639  2550				  -	      .byte	%00000000	; SYMBOLS
   1640  2550				  -	      .byte	%00000000	; SYMBOLS
   1641  2550				  -	      .byte	%00011000	; SYMBOLS
   1642  2550				  -	      .byte	%00011000	; SYMBOLS
   1643  2550				  -	      .byte	%00000000	; SYMBOLS
   1644  2550				  -
   1645  2550				  -			;byte %00000000 ; SYMBOLS
   1646  2550				  -
   1647  2550					      endif		; fontcharCOLON
   1648  2550
   1649  2550
   1650  2550				  -	      ifconst	fontcharBLOCK
   1651  2550				  -
   1652  2550				  -			;byte %00000000 ; SYMBOLS
   1653  2550				  -
   1654  2550				  -	      .byte	%11111111	; SYMBOLS
   1655  2550				  -	      .byte	%11111111	; SYMBOLS
   1656  2550				  -	      .byte	%11111111	; SYMBOLS
   1657  2550				  -	      .byte	%11111111	; SYMBOLS
   1658  2550				  -	      .byte	%11111111	; SYMBOLS
   1659  2550				  -	      .byte	%11111111	; SYMBOLS
   1660  2550				  -	      .byte	%11111111	; SYMBOLS
   1661  2550				  -	      .byte	%11111111	; SYMBOLS
   1662  2550				  -
   1663  2550				  -			;byte %00000000 ; SYMBOLS
   1664  2550				  -
   1665  2550					      endif		; fontcharBLOCK
   1666  2550
   1667  2550				  -	      ifconst	fontcharUNDERLINE
   1668  2550				  -
   1669  2550				  -			;byte %00000000 ; SYMBOLS
   1670  2550				  -
   1671  2550				  -	      .byte	%11111111	; SYMBOLS
   1672  2550				  -	      .byte	%00000000	; SYMBOLS
   1673  2550				  -	      .byte	%00000000	; SYMBOLS
   1674  2550				  -	      .byte	%00000000	; SYMBOLS
   1675  2550				  -	      .byte	%00000000	; SYMBOLS
   1676  2550				  -	      .byte	%00000000	; SYMBOLS
   1677  2550				  -	      .byte	%00000000	; SYMBOLS
   1678  2550				  -	      .byte	%00000000	; SYMBOLS
   1679  2550				  -
   1680  2550				  -			;byte %00000000 ; SYMBOLS
   1681  2550				  -
   1682  2550					      endif		; fontcharUNDERLINE
   1683  2550
   1684  2550				  -	      ifconst	fontcharARISIDE
   1685  2550				  -			;byte %00000000 ; SYMBOLS
   1686  2550				  -
   1687  2550				  -	      .byte	%00000000	; SYMBOLS
   1688  2550				  -	      .byte	%00101010	; SYMBOLS
   1689  2550				  -	      .byte	%00101010	; SYMBOLS
   1690  2550				  -	      .byte	%00101100	; SYMBOLS
   1691  2550				  -	      .byte	%01111111	; SYMBOLS
   1692  2550				  -	      .byte	%00110111	; SYMBOLS
   1693  2550				  -	      .byte	%00000010	; SYMBOLS
   1694  2550				  -	      .byte	%00000001	; SYMBOLS
   1695  2550				  -
   1696  2550				  -			;byte %00000000 ; SYMBOLS
   1697  2550				  -
   1698  2550					      endif		; fontcharARISIDE
   1699  2550
   1700  2550				  -	      ifconst	fontcharARIFACE
   1701  2550				  -			;byte %00000000 ; SYMBOLS
   1702  2550				  -
   1703  2550				  -	      .byte	%00001000	; SYMBOLS
   1704  2550				  -	      .byte	%00011100	; SYMBOLS
   1705  2550				  -	      .byte	%00111110	; SYMBOLS
   1706  2550				  -	      .byte	%00101010	; SYMBOLS
   1707  2550				  -	      .byte	%00011100	; SYMBOLS
   1708  2550				  -	      .byte	%01010100	; SYMBOLS
   1709  2550				  -	      .byte	%00100100	; SYMBOLS
   1710  2550				  -	      .byte	%00000010	; SYMBOLS
   1711  2550				  -
   1712  2550				  -			;byte %00000000 ; SYMBOLS
   1713  2550				  -
   1714  2550				  -
   1715  2550					      endif		; fontcharARIRACE
   1716  2550
------- FILE titlescreen/asm/titlescreen.asm
    303  2550					      endif
    304  2550
    305  2550				  -	      ifconst	mk_gameselect_on
    306  2550				  -	      include	"titlescreen/gameselect_image.asm"
    307  2550					      endif
    308  2550
    309  2550					      ifconst	mk_player_on
------- FILE titlescreen/asm/player_kernel.asm LEVEL 3 PASS 2
      0  2550					      include	"titlescreen/asm/player_kernel.asm"
      1  2550							; The player minikernel - display 2 different players, 1 line resolution
      2  2550
      3  2550				   draw_player_display
      4  2550
      5  2550		       20 02 b6 	      jsr	TSpositionp0p1
      6  2553
      7  2553				   save_variables
      8  2553		       a5 85		      lda	player0y
      9  2555		       85 9d		      sta	temp2
     10  2557		       a5 86		      lda	player1y
     11  2559		       85 9e		      sta	temp3
     12  255b
     13  255b				   init_variables
     14  255b		       a9 33		      lda	#(bmp_player_window+1)
     15  255d		       85 9c		      sta	temp1	; our line count
     16  255f		       a9 01		      lda	#1
     17  2561		       85 25		      sta	VDELP0
     18  2563		       a9 00		      lda	#0
     19  2565		       85 1c		      sta	GRP1
     20  2567		       85 1b		      sta	GRP0
     21  2569		       ad 4e b4 	      lda	bmp_player0_refp
     22  256c		       85 0b		      sta	REFP0
     23  256e		       ad 4f b4 	      lda	bmp_player1_refp
     24  2571		       85 0c		      sta	REFP1
     25  2573		       ad 4c b4 	      lda	bmp_player0_nusiz
     26  2576		       85 04		      sta	NUSIZ0
     27  2578		       ad 4d b4 	      lda	bmp_player1_nusiz
     28  257b		       85 05		      sta	NUSIZ1
     29  257d		       a9 09		      lda	#(bmp_player0_height-1)
     30  257f		       85 8e		      sta	player0height
     31  2581		       a9 09		      lda	#(bmp_player1_height-1)
     32  2583		       85 8f		      sta	player1height
     33  2585
     34  2585		       a9 50		      lda	#<bmp_player0
     35  2587					      ifconst	bmp_player0_index
     36  2587		       18		      clc
     37  2588		       65 d6		      adc	bmp_player0_index
     38  258a					      endif
     39  258a		       85 8a		      sta	player0pointer
     40  258c		       a9 b4		      lda	#>bmp_player0
     41  258e					      ifconst	bmp_player0_index
     42  258e		       69 00		      adc	#0
     43  2590					      endif
     44  2590		       85 8b		      sta	player0pointer+1
     45  2592
     46  2592		       a9 78		      lda	#<bmp_color_player0
     47  2594					      ifconst	bmp_player0_index
     48  2594		       18		      clc
     49  2595		       65 d6		      adc	bmp_player0_index
     50  2597					      endif
     51  2597		       85 90		      sta	player0color
     52  2599		       a9 b4		      lda	#>bmp_color_player0
     53  259b					      ifconst	bmp_player0_index
     54  259b		       69 00		      adc	#0
     55  259d					      endif
     56  259d		       85 91		      sta	player0color+1
     57  259f
     58  259f
     59  259f		       a9 a0		      lda	#<bmp_player1
     60  25a1				  -	      ifconst	bmp_player1_index
     61  25a1				  -	      clc
     62  25a1				  -	      adc	bmp_player1_index
     63  25a1					      endif
     64  25a1		       85 8c		      sta	player1pointer
     65  25a3		       a9 b4		      lda	#>bmp_player1
     66  25a5				  -	      ifconst	bmp_player1_index
     67  25a5				  -	      adc	#0
     68  25a5					      endif
     69  25a5		       85 8d		      sta	player1pointer+1
     70  25a7
     71  25a7		       a9 aa		      lda	#<bmp_color_player1
     72  25a9				  -	      ifconst	bmp_player1_index
     73  25a9				  -	      clc
     74  25a9				  -	      adc	bmp_player1_index
     75  25a9					      endif
     76  25a9		       85 87		      sta	player1color
     77  25ab		       a9 b4		      lda	#>bmp_color_player1
     78  25ad				  -	      ifconst	bmp_player1_index
     79  25ad				  -	      adc	#0
     80  25ad					      endif
     81  25ad		       85 88		      sta	player1color+1
     82  25af
     83  25af		       a9 01		      lda	#bmp_player_kernellines
     84  25b1		       85 9f		      sta	temp4
     85  25b3		       a9 00		      lda	#0
     86  25b5
     87  25b5				   draw_players
     88  25b5		       85 02		      sta	WSYNC
     89  25b7		       85 1c		      sta	GRP1	;3
     90  25b9		       b1 87		      lda	(player1color),y	;5
     91  25bb		       85 07		      sta	COLUP1	;3
     92  25bd		       86 06		      stx	COLUP0	;3
     93  25bf
     94  25bf		       a5 8e		      lda	player0height	;3
     95  25c1		       c7 85		      dcp	player0y	;5
     96  25c3		       90 31		      bcc	skipdrawP0	;2/3
     97  25c5		       a4 85		      ldy	player0y	;3
     98  25c7		       b1 8a		      lda	(player0pointer),y	;5+
     99  25c9				   continueP0
    100  25c9		       85 1b		      sta	GRP0	;3
    101  25cb
    102  25cb		       b3 90		      lax	(player0color),y	;5+
    103  25cd							;=29++
    104  25cd
    105  25cd				  -	      REPEAT	(bmp_player_kernellines-1)
    106  25cd				  -	      sta	WSYNC
    107  25cd					      REPEND
    108  25cd		       a5 8f		      lda	player1height	;3
    109  25cf		       c7 86		      dcp	player1y	;5
    110  25d1		       90 29		      bcc	skipdrawP1	;2/3
    111  25d3		       a4 86		      ldy	player1y	;3
    112  25d5		       b1 8c		      lda	(player1pointer),y	;5
    113  25d7				   continueP1
    114  25d7
    115  25d7		       c6 9c		      dec	temp1	;5
    116  25d9		       d0 da		      bne	draw_players	;2/3
    117  25db		       85 02		      sta	WSYNC
    118  25dd		       85 1c		      sta	GRP1	;3
    119  25df		       85 1b		      sta	GRP0	;3
    120  25e1							;=8
    121  25e1		       a9 00		      lda	#0
    122  25e3		       85 1b		      sta	GRP0
    123  25e5		       85 1c		      sta	GRP1
    124  25e7		       85 0b		      sta	REFP0
    125  25e9		       85 0c		      sta	REFP1
    126  25eb		       85 26		      sta	VDELP1
    127  25ed
    128  25ed				   restore_variables
    129  25ed		       a5 9d		      lda	temp2
    130  25ef		       85 85		      sta	player0y
    131  25f1		       a5 9e		      lda	temp3
    132  25f3		       85 86		      sta	player1y
    133  25f5
    134  25f5		       60		      rts
    135  25f6
    136  25f6				   skipdrawP0
    137  25f6		       a9 00		      lda	#0	;2
    138  25f8		       a8		      tay		;2
    139  25f9		       4c c9 b5 	      jmp	continueP0	;5
    140  25fc
    141  25fc				   skipdrawP1
    142  25fc		       a9 00		      lda	#0	;2
    143  25fe		       a8		      tay		;2
    144  25ff		       4c d7 b5 	      jmp	continueP1	;5
    145  2602
    146  2602
    147  2602				  -	      if	>. != >[.+$55]
    148  2602				  -	      align	256
    149  2602					      endif
    150  2602
    151  2602				   TSpositionp0p1
    152  2602		       a2 01		      ldx	#1
    153  2604		       a5 80		      lda	player0x
    154  2606		       85 f4		      sta	aux5
    155  2608		       a5 81		      lda	player1x
    156  260a		       85 f5		      sta	aux6
    157  260c				   TSpositionp0p1Loop
    158  260c		       b5 f4		      lda	aux5,x
    159  260e		       18		      clc
    160  260f		       7d 50 b6 	      adc	TSadjust,x
    161  2612		       c9 a1		      cmp	#161
    162  2614		       90 03		      bcc	TSskipadjust
    163  2616		       38		      sec
    164  2617		       e9 a0		      sbc	#160
    165  2619				   TSskipadjust
    166  2619		       95 f4		      sta	aux5,x
    167  261b		       85 02		      sta	WSYNC
    168  261d		       85 2b		      sta	HMCLR	; clear out HMP*
      0  261f					      SLEEP	2
      1  261f				   .CYCLES    SET	2
      2  261f
      3  261f				  -	      IF	.CYCLES < 2
      4  261f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  261f				  -	      ERR
      6  261f					      ENDIF
      7  261f
      8  261f				  -	      IF	.CYCLES & 1
      9  261f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  261f				  -	      nop	0
     11  261f				  -	      ELSE
     12  261f				  -	      bit	VSYNC
     13  261f				  -	      ENDIF
     14  261f				  -.CYCLES    SET	.CYCLES - 3
     15  261f					      ENDIF
     16  261f
     17  261f					      REPEAT	.CYCLES / 2
     18  261f		       ea		      nop
     19  2620					      REPEND
    170  2620				   TSHorPosLoop 		;     5
    171  2620		       b5 f4		      lda	aux5,x	;+4   9
    172  2622		       38		      sec		;+2  11
    173  2623				   TSDivLoop
    174  2623		       e9 0f		      sbc	#15
    175  2625		       b0 fc		      bcs	TSDivLoop	;+4  15
    176  2627		       95 f6		      sta	stack1,X	;+4  19
    177  2629		       95 10		      sta	RESP0,X	;+4  23
    178  262b		       85 02		      sta	WSYNC
    179  262d
    180  262d		       b4 f6		      ldy	stack1,X	;+4
    181  262f		       b9 50 b5 	      lda	TSrepostable-256,Y	;+4
    182  2632		       95 20		      sta	HMP0,X	;+4
    183  2634							;=12
    184  2634		       a0 0a		      ldy	#10	;+2
    185  2636				   wastetimeloop1
    186  2636		       88		      dey		;2
    187  2637		       10 fd		      bpl	wastetimeloop1	;3/2
      0  2639					      sleep	2
      1  2639				   .CYCLES    SET	2
      2  2639
      3  2639				  -	      IF	.CYCLES < 2
      4  2639				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2639				  -	      ERR
      6  2639					      ENDIF
      7  2639
      8  2639				  -	      IF	.CYCLES & 1
      9  2639				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2639				  -	      nop	0
     11  2639				  -	      ELSE
     12  2639				  -	      bit	VSYNC
     13  2639				  -	      ENDIF
     14  2639				  -.CYCLES    SET	.CYCLES - 3
     15  2639					      ENDIF
     16  2639
     17  2639					      REPEAT	.CYCLES / 2
     18  2639		       ea		      nop
     19  263a					      REPEND
    189  263a		       85 2a		      sta	HMOVE
    190  263c		       ca		      dex
    191  263d		       10 cd		      bpl	TSpositionp0p1Loop
    192  263f		       60		      rts
    193  2640
    194  2640		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
    195  2649		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
    196  2650				   TSrepostable
    197  2650
    198  2650				   TSadjust
    199  2650		       09 11		      .byte.b	9,17
    200  2652
    201  2652							; DPC doesn't have these adjacent in memory. Ughh.
    202  2652				   TSregister
    203  2652		       80 81		      .byte.b	player0x,player1x
    204  2654
    205  2654							;echo "size: ",(TSrepostable-TSpositionp0p1)
    206  2654
    207  2654
------- FILE titlescreen/asm/titlescreen.asm
    311  2654					      endif		;mk_player_on
    312  2654
    313  2654
------- FILE C:\Users\jefma\Desktop\titlescreen_kernel_1.8\examples\ex5-player_and_playfield\ex5-player_and_playfield.bas.asm
    392  2654
    393  2654					      if	ECHO2
      2432 bytes of ROM space left in bank 2
    394  2654					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    395  2654					      endif
    396  2654		       00 01	   ECHO2      =	1
    397  2fd4					      ORG	$2FF4-bscode_length
    398  2fd4					      RORG	$BFF4-bscode_length
    399  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    400  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    401  2fd6				  -	      stx	FASTFETCH
    402  2fd6					      endif
    403  2fd6		       9a		      txs
    404  2fd7				  -	      if	bankswitch == 64
    405  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    406  2fd7					      else
    407  2fd7		       a9 f2		      lda	#>(start-1)
    408  2fd9					      endif
    409  2fd9		       48		      pha
    410  2fda		       a9 4f		      lda	#<(start-1)
    411  2fdc		       48		      pha
    412  2fdd		       48		      pha
    413  2fde		       8a		      txa
    414  2fdf		       48		      pha
    415  2fe0		       ba		      tsx
    416  2fe1					      if	bankswitch != 64
    417  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    418  2fe3		       2a		      rol
    419  2fe4		       2a		      rol
    420  2fe5		       2a		      rol
    421  2fe6		       2a		      rol
    422  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    423  2fe9		       aa		      tax
    424  2fea		       e8		      inx
    425  2feb				  -	      else
    426  2feb				  -	      lda	4,x	; get high byte of return address
    427  2feb				  -	      tay
    428  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    429  2feb				  -	      sta	4,x
    430  2feb				  -	      tya
    431  2feb				  -	      lsr
    432  2feb				  -	      lsr
    433  2feb				  -	      lsr
    434  2feb				  -	      lsr
    435  2feb				  -	      tax
    436  2feb				  -	      inx
    437  2feb					      endif
    438  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    439  2fee		       68		      pla
    440  2fef		       aa		      tax
    441  2ff0		       68		      pla
    442  2ff1		       60		      rts
    443  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    444  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    445  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    446  2ff2					      endif
    447  2ffc					      ORG	$2FFC
    448  2ffc					      RORG	$BFFC
    449  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    450  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    451  3000					      ORG	$3000
    452  3000					      RORG	$D000
    453  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    454  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    455  3000					      endif
    456  3000		       00 01	   ECHO3      =	1
    457  3fd4					      ORG	$3FF4-bscode_length
    458  3fd4					      RORG	$DFF4-bscode_length
    459  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    460  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    461  3fd6				  -	      stx	FASTFETCH
    462  3fd6					      endif
    463  3fd6		       9a		      txs
    464  3fd7				  -	      if	bankswitch == 64
    465  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    466  3fd7					      else
    467  3fd7		       a9 f2		      lda	#>(start-1)
    468  3fd9					      endif
    469  3fd9		       48		      pha
    470  3fda		       a9 4f		      lda	#<(start-1)
    471  3fdc		       48		      pha
    472  3fdd		       48		      pha
    473  3fde		       8a		      txa
    474  3fdf		       48		      pha
    475  3fe0		       ba		      tsx
    476  3fe1					      if	bankswitch != 64
    477  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    478  3fe3		       2a		      rol
    479  3fe4		       2a		      rol
    480  3fe5		       2a		      rol
    481  3fe6		       2a		      rol
    482  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    483  3fe9		       aa		      tax
    484  3fea		       e8		      inx
    485  3feb				  -	      else
    486  3feb				  -	      lda	4,x	; get high byte of return address
    487  3feb				  -	      tay
    488  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    489  3feb				  -	      sta	4,x
    490  3feb				  -	      tya
    491  3feb				  -	      lsr
    492  3feb				  -	      lsr
    493  3feb				  -	      lsr
    494  3feb				  -	      lsr
    495  3feb				  -	      tax
    496  3feb				  -	      inx
    497  3feb					      endif
    498  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    499  3fee		       68		      pla
    500  3fef		       aa		      tax
    501  3ff0		       68		      pla
    502  3ff1		       60		      rts
    503  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    504  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    505  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    506  3ff2					      endif
    507  3ffc					      ORG	$3FFC
    508  3ffc					      RORG	$DFFC
    509  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    510  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    511  4000					      ORG	$4000
    512  4000					      RORG	$F000
    513  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
    514  4000
    515  4000							; This is a 2-line kernel!
    516  4000					      ifnconst	vertical_reflect
    517  4000				   kernel
    518  4000					      endif
    519  4000		       85 02		      sta	WSYNC
    520  4002		       a9 ff		      lda	#255
    521  4004		       8d 96 02 	      sta	TIM64T
    522  4007
    523  4007		       a9 01		      lda	#1
    524  4009		       85 27		      sta	VDELBL
    525  400b		       85 25		      sta	VDELP0
    526  400d		       a6 92		      ldx	ballheight
    527  400f		       e8		      inx
    528  4010		       e8		      inx
    529  4011		       86 9f		      stx	temp4
    530  4013		       a5 86		      lda	player1y
    531  4015		       85 9e		      sta	temp3
    532  4017
    533  4017				  -	      ifconst	shakescreen
    534  4017				  -	      jsr	doshakescreen
    535  4017					      else
    536  4017		       a6 90		      ldx	missile0height
    537  4019		       e8		      inx
    538  401a					      endif
    539  401a
    540  401a		       e8		      inx
    541  401b		       86 f6		      stx	stack1
    542  401d
    543  401d		       a5 89		      lda	bally
    544  401f		       85 f7		      sta	stack2
    545  4021
    546  4021		       a5 85		      lda	player0y
    547  4023		       a2 00		      ldx	#0
    548  4025		       85 02		      sta	WSYNC
    549  4027		       86 1b		      stx	GRP0
    550  4029		       86 1c		      stx	GRP1
    551  402b		       86 0e		      stx	PF1L
    552  402d		       86 0f		      stx	PF2
    553  402f		       86 2c		      stx	CXCLR
    554  4031				  -	      ifconst	readpaddle
    555  4031				  -	      stx	paddle
    556  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    558  4033					      endif
    559  4033
    560  4033		       95 9d		      sta	temp2,x
    561  4035
    562  4035							;store these so they can be retrieved later
    563  4035					      ifnconst	pfres
    564  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    565  4037				  -	      else
    566  4037				  -	      ldx	#132-pfres*pfwidth
    567  4037					      endif
    568  4037
    569  4037		       c6 85		      dec	player0y
    570  4039
    571  4039		       a5 91		      lda	missile0y
    572  403b		       85 a0		      sta	temp5
    573  403d		       a5 88		      lda	missile1y
    574  403f		       85 a1		      sta	temp6
    575  4041
    576  4041		       a5 ef		      lda	playfieldpos
    577  4043		       85 9c		      sta	temp1
    578  4045
    579  4045				  -	      ifconst	pfrowheight
    580  4045				  -	      lda	#pfrowheight+2
    581  4045					      else
    582  4045					      ifnconst	pfres
    583  4045		       a9 0a		      lda	#10
    584  4047				  -	      else
    585  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    586  4047					      endif
    587  4047					      endif
    588  4047		       18		      clc
    589  4048		       e5 ef		      sbc	playfieldpos
    590  404a		       85 ef		      sta	playfieldpos
    591  404c		       4c 74 f0 	      jmp	.startkernel
    592  404f
    593  404f				   .skipDrawP0
    594  404f		       a9 00		      lda	#0
    595  4051		       a8		      tay
    596  4052		       4c a2 f0 	      jmp	.continueP0
    597  4055
    598  4055				   .skipDrawP1
    599  4055		       a9 00		      lda	#0
    600  4057		       a8		      tay
    601  4058		       4c 7e f0 	      jmp	.continueP1
    602  405b
    603  405b				   .kerloop		; enter at cycle 59??
    604  405b
    605  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    607  405c				   continuekernel2
    608  405c		       a5 92		      lda	ballheight
    609  405e
    610  405e				  -	      ifconst	pfres
    611  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    612  405e				  -	      sty	PF1L	;3
    613  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    614  405e				  -	      sty	PF2L	;3
    615  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    616  405e				  -	      sty	PF1R	; 3 too early?
    617  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    618  405e				  -	      sty	PF2R	;3
    619  405e					      else
    620  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    621  4060		       84 0e		      sty	PF1L	;3
    622  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    623  4064		       84 0f		      sty	PF2L	;3
    624  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    625  4068		       84 0e		      sty	PF1R	; 3 too early?
    626  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    627  406c		       84 0f		      sty	PF2R	;3
    628  406e					      endif
    629  406e
    630  406e							; should be playfield+$38 for width=2
    631  406e
    632  406e		       c7 89		      dcp	bally
    633  4070		       2a		      rol
    634  4071		       2a		      rol
    635  4072							; rol
    636  4072							; rol
    637  4072				   goback
    638  4072		       85 1f		      sta	ENABL
    639  4074				   .startkernel
    640  4074		       a5 8f		      lda	player1height	;3
    641  4076		       c7 86		      dcp	player1y	;5
    642  4078		       90 db		      bcc	.skipDrawP1	;2
    643  407a		       a4 86		      ldy	player1y	;3
    644  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    645  407e							; so it doesn't cross a page boundary!
    646  407e
    647  407e				   .continueP1
    648  407e		       85 1c		      sta	GRP1	;3
    649  4080
    650  4080					      ifnconst	player1colors
    651  4080		       a5 87		      lda	missile1height	;3
    652  4082		       c7 88		      dcp	missile1y	;5
    653  4084		       2a		      rol		;2
    654  4085		       2a		      rol		;2
    655  4086		       85 1e		      sta	ENAM1	;3
    656  4088				  -	      else
    657  4088				  -	      lda	(player1color),y
    658  4088				  -	      sta	COLUP1
    659  4088				  -	      ifnconst	playercolors
    660  4088				  -	      sleep	7
    661  4088				  -	      else
    662  4088				  -	      lda.w	player0colorstore
    663  4088				  -	      sta	COLUP0
    664  4088				  -	      endif
    665  4088					      endif
    666  4088
    667  4088				  -	      ifconst	pfres
    668  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    669  4088				  -	      sta	PF1L	;3
    670  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    671  4088				  -	      sta	PF2L	;3
    672  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    673  4088				  -	      sta	PF1R	; 3 too early?
    674  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    675  4088				  -	      sta	PF2R	;3
    676  4088					      else
    677  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    678  408a		       85 0e		      sta	PF1L	;3
    679  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    680  408e		       85 0f		      sta	PF2L	;3
    681  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    682  4092		       85 0e		      sta	PF1R	; 3 too early?
    683  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    684  4096		       85 0f		      sta	PF2R	;3
    685  4098					      endif
    686  4098							; sleep 3
    687  4098
    688  4098		       a5 8e		      lda	player0height
    689  409a		       c7 85		      dcp	player0y
    690  409c		       90 b1		      bcc	.skipDrawP0
    691  409e		       a4 85		      ldy	player0y
    692  40a0		       b1 8a		      lda	(player0pointer),y
    693  40a2				   .continueP0
    694  40a2		       85 1b		      sta	GRP0
    695  40a4
    696  40a4					      ifnconst	no_blank_lines
    697  40a4					      ifnconst	playercolors
    698  40a4		       a5 90		      lda	missile0height	;3
    699  40a6		       c7 91		      dcp	missile0y	;5
    700  40a8		       e5 f6		      sbc	stack1
    701  40aa		       85 1d		      sta	ENAM0	;3
    702  40ac				  -	      else
    703  40ac				  -	      lda	(player0color),y
    704  40ac				  -	      sta	player0colorstore
    705  40ac				  -	      sleep	6
    706  40ac					      endif
    707  40ac		       c6 9c		      dec	temp1
    708  40ae		       d0 ab		      bne	continuekernel
    709  40b0				  -	      else
    710  40b0				  -	      dec	temp1
    711  40b0				  -	      beq	altkernel2
    712  40b0				  -	      ifconst	readpaddle
    713  40b0				  -	      ldy	currentpaddle
    714  40b0				  -	      lda	INPT0,y
    715  40b0				  -	      bpl	noreadpaddle
    716  40b0				  -	      inc	paddle
    717  40b0				  -	      jmp	continuekernel2
    718  40b0				  -noreadpaddle
    719  40b0				  -	      sleep	2
    720  40b0				  -	      jmp	continuekernel
    721  40b0				  -	      else
    722  40b0				  -	      ifnconst	playercolors
    723  40b0				  -	      ifconst	PFcolors
    724  40b0				  -	      txa
    725  40b0				  -	      tay
    726  40b0				  -	      lda	(pfcolortable),y
    727  40b0				  -	      ifnconst	backgroundchange
    728  40b0				  -	      sta	COLUPF
    729  40b0				  -	      else
    730  40b0				  -	      sta	COLUBK
    731  40b0				  -	      endif
    732  40b0				  -	      jmp	continuekernel
    733  40b0				  -	      else
    734  40b0				  -	      ifconst	kernelmacrodef
    735  40b0				  -	      kernelmacro
    736  40b0				  -	      else
    737  40b0				  -	      sleep	12
    738  40b0				  -	      endif
    739  40b0				  -	      endif
    740  40b0				  -	      else
    741  40b0				  -	      lda	(player0color),y
    742  40b0				  -	      sta	player0colorstore
    743  40b0				  -	      sleep	4
    744  40b0				  -	      endif
    745  40b0				  -	      jmp	continuekernel
    746  40b0				  -	      endif
    747  40b0				  -altkernel2
    748  40b0				  -	      txa
    749  40b0				  -	      ifnconst	vertical_reflect
    750  40b0				  -	      sbx	#256-pfwidth
    751  40b0				  -	      else
    752  40b0				  -	      sbx	#256-pfwidth/2
    753  40b0				  -	      endif
    754  40b0				  -	      bmi	lastkernelline
    755  40b0				  -	      ifconst	pfrowheight
    756  40b0				  -	      lda	#pfrowheight
    757  40b0				  -	      else
    758  40b0				  -	      ifnconst	pfres
    759  40b0				  -	      lda	#8
    760  40b0				  -	      else
    761  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    762  40b0				  -	      endif
    763  40b0				  -	      endif
    764  40b0				  -	      sta	temp1
    765  40b0				  -	      jmp	continuekernel
    766  40b0					      endif
    767  40b0
    768  40b0				   altkernel
    769  40b0
    770  40b0				  -	      ifconst	PFmaskvalue
    771  40b0				  -	      lda	#PFmaskvalue
    772  40b0					      else
    773  40b0		       a9 00		      lda	#0
    774  40b2					      endif
    775  40b2		       85 0e		      sta	PF1L
    776  40b4		       85 0f		      sta	PF2
    777  40b6
    778  40b6
    779  40b6							;sleep 3
    780  40b6
    781  40b6							;28 cycles to fix things
    782  40b6							;minus 11=17
    783  40b6
    784  40b6							; lax temp4
    785  40b6							; clc
    786  40b6		       8a		      txa
    787  40b7					      ifnconst	vertical_reflect
    788  40b7		       cb fc		      sbx	#256-pfwidth
    789  40b9				  -	      else
    790  40b9				  -	      sbx	#256-pfwidth/2
    791  40b9					      endif
    792  40b9
    793  40b9		       30 12		      bmi	lastkernelline
    794  40bb
    795  40bb				  -	      ifconst	PFcolorandheight
    796  40bb				  -	      ifconst	pfres
    797  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    798  40bb				  -	      else
    799  40bb				  -	      ldy	playfieldcolorandheight-87,x
    800  40bb				  -	      endif
    801  40bb				  -	      ifnconst	backgroundchange
    802  40bb				  -	      sty	COLUPF
    803  40bb				  -	      else
    804  40bb				  -	      sty	COLUBK
    805  40bb				  -	      endif
    806  40bb				  -	      ifconst	pfres
    807  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    808  40bb				  -	      else
    809  40bb				  -	      lda	playfieldcolorandheight-88,x
    810  40bb				  -	      endif
    811  40bb				  -	      sta.w	temp1
    812  40bb					      endif
    813  40bb				  -	      ifconst	PFheights
    814  40bb				  -	      lsr
    815  40bb				  -	      lsr
    816  40bb				  -	      tay
    817  40bb				  -	      lda	(pfheighttable),y
    818  40bb				  -	      sta.w	temp1
    819  40bb					      endif
    820  40bb				  -	      ifconst	PFcolors
    821  40bb				  -	      tay
    822  40bb				  -	      lda	(pfcolortable),y
    823  40bb				  -	      ifnconst	backgroundchange
    824  40bb				  -	      sta	COLUPF
    825  40bb				  -	      else
    826  40bb				  -	      sta	COLUBK
    827  40bb				  -	      endif
    828  40bb				  -	      ifconst	pfrowheight
    829  40bb				  -	      lda	#pfrowheight
    830  40bb				  -	      else
    831  40bb				  -	      ifnconst	pfres
    832  40bb				  -	      lda	#8
    833  40bb				  -	      else
    834  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    835  40bb				  -	      endif
    836  40bb				  -	      endif
    837  40bb				  -	      sta	temp1
    838  40bb					      endif
    839  40bb					      ifnconst	PFcolorandheight
    840  40bb					      ifnconst	PFcolors
    841  40bb					      ifnconst	PFheights
    842  40bb					      ifnconst	no_blank_lines
    843  40bb							; read paddle 0
    844  40bb							; lo-res paddle read
    845  40bb							; bit INPT0
    846  40bb							; bmi paddleskipread
    847  40bb							; inc paddle0
    848  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    850  40c0				  -	      ifconst	pfrowheight
    851  40c0				  -	      lda	#pfrowheight
    852  40c0					      else
    853  40c0					      ifnconst	pfres
    854  40c0		       a9 08		      lda	#8
    855  40c2				  -	      else
    856  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    857  40c2					      endif
    858  40c2					      endif
    859  40c2		       85 9c		      sta	temp1
    860  40c4					      endif
    861  40c4					      endif
    862  40c4					      endif
    863  40c4					      endif
    864  40c4
    865  40c4
    866  40c4		       a5 92		      lda	ballheight
    867  40c6		       c7 89		      dcp	bally
    868  40c8		       e5 9f		      sbc	temp4
    869  40ca
    870  40ca
    871  40ca		       4c 72 f0 	      jmp	goback
    872  40cd
    873  40cd
    874  40cd					      ifnconst	no_blank_lines
    875  40cd				   lastkernelline
    876  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    878  40d2				  -	      else
    879  40d2				  -	      ldy	#124
    880  40d2				  -	      lda	(pfcolortable),y
    881  40d2				  -	      sta	COLUPF
    882  40d2					      endif
    883  40d2
    884  40d2				  -	      ifconst	PFheights
    885  40d2				  -	      ldx	#1
    886  40d2				  -			;sleep 4
    887  40d2				  -	      sleep	3	; this was over 1 cycle
    888  40d2					      else
    889  40d2		       a6 ef		      ldx	playfieldpos
    890  40d4							;sleep 3
      0  40d4					      sleep	2	; this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    892  40d5					      endif
    893  40d5
    894  40d5		       4c 1b f1 	      jmp	enterlastkernel
    895  40d8
    896  40d8				  -	      else
    897  40d8				  -lastkernelline
    898  40d8				  -
    899  40d8				  -	      ifconst	PFheights
    900  40d8				  -	      ldx	#1
    901  40d8				  -			;sleep 5
    902  40d8				  -	      sleep	4	; this was over 1 cycle
    903  40d8				  -	      else
    904  40d8				  -	      ldx	playfieldpos
    905  40d8				  -			;sleep 4
    906  40d8				  -	      sleep	3	; this was over 1 cycle
    907  40d8				  -	      endif
    908  40d8				  -
    909  40d8				  -	      cpx	#0
    910  40d8				  -	      bne	.enterfromNBL
    911  40d8				  -	      jmp	no_blank_lines_bailout
    912  40d8					      endif
    913  40d8
    914  40d8					      if	((<*)>$d5)
    915  4100		       00 00 00 00*	      align	256
    916  4100					      endif
    917  4100							; this is a kludge to prevent page wrapping - fix!!!
    918  4100
    919  4100				   .skipDrawlastP1
    920  4100		       a9 00		      lda	#0
    921  4102		       a8		      tay		; added so we don't cross a page
    922  4103		       4c 2d f1 	      jmp	.continuelastP1
    923  4106
    924  4106				   .endkerloop		; enter at cycle 59??
    925  4106
    926  4106		       ea		      nop
    927  4107
    928  4107				   .enterfromNBL
    929  4107				  -	      ifconst	pfres
    930  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    931  4107				  -	      sty	PF1L	;3
    932  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    933  4107				  -	      sty	PF2L	;3
    934  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    935  4107				  -	      sty	PF1R	; possibly too early?
    936  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    937  4107				  -	      sty	PF2R	;3
    938  4107					      else
    939  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    940  410a		       84 0e		      sty	PF1L	;3
    941  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    942  410f		       84 0f		      sty	PF2L	;3
    943  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    944  4114		       84 0e		      sty	PF1R	; possibly too early?
    945  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    946  4119		       84 0f		      sty	PF2R	;3
    947  411b					      endif
    948  411b
    949  411b				   enterlastkernel
    950  411b		       a5 92		      lda	ballheight
    951  411d
    952  411d							; tya
    953  411d		       c7 89		      dcp	bally
    954  411f							; sleep 4
    955  411f
    956  411f							; sbc stack3
    957  411f		       2a		      rol
    958  4120		       2a		      rol
    959  4121		       85 1f		      sta	ENABL
    960  4123
    961  4123		       a5 8f		      lda	player1height	;3
    962  4125		       c7 86		      dcp	player1y	;5
    963  4127		       90 d7		      bcc	.skipDrawlastP1
    964  4129		       a4 86		      ldy	player1y	;3
    965  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    966  412d							; so it doesn't cross a page boundary!
    967  412d
    968  412d				   .continuelastP1
    969  412d		       85 1c		      sta	GRP1	;3
    970  412f
    971  412f					      ifnconst	player1colors
    972  412f		       a5 87		      lda	missile1height	;3
    973  4131		       c7 88		      dcp	missile1y	;5
    974  4133				  -	      else
    975  4133				  -	      lda	(player1color),y
    976  4133				  -	      sta	COLUP1
    977  4133					      endif
    978  4133
    979  4133		       ca		      dex
    980  4134							;dec temp4 ; might try putting this above PF writes
    981  4134		       f0 36		      beq	endkernel
    982  4136
    983  4136
    984  4136				  -	      ifconst	pfres
    985  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    986  4136				  -	      sty	PF1L	;3
    987  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    988  4136				  -	      sty	PF2L	;3
    989  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    990  4136				  -	      sty	PF1R	; possibly too early?
    991  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    992  4136				  -	      sty	PF2R	;3
    993  4136					      else
    994  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    995  4139		       84 0e		      sty	PF1L	;3
    996  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    997  413e		       84 0f		      sty	PF2L	;3
    998  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    999  4143		       84 0e		      sty	PF1R	; possibly too early?
   1000  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1001  4148		       84 0f		      sty	PF2R	;3
   1002  414a					      endif
   1003  414a
   1004  414a					      ifnconst	player1colors
   1005  414a		       2a		      rol		;2
   1006  414b		       2a		      rol		;2
   1007  414c		       85 1e		      sta	ENAM1	;3
   1008  414e				  -	      else
   1009  414e				  -	      ifnconst	playercolors
   1010  414e				  -	      sleep	7
   1011  414e				  -	      else
   1012  414e				  -	      lda.w	player0colorstore
   1013  414e				  -	      sta	COLUP0
   1014  414e				  -	      endif
   1015  414e					      endif
   1016  414e
   1017  414e		       ad 8e 00 	      lda.w	player0height
   1018  4151		       c7 85		      dcp	player0y
   1019  4153		       90 11		      bcc	.skipDrawlastP0
   1020  4155		       a4 85		      ldy	player0y
   1021  4157		       b1 8a		      lda	(player0pointer),y
   1022  4159				   .continuelastP0
   1023  4159		       85 1b		      sta	GRP0
   1024  415b
   1025  415b
   1026  415b
   1027  415b					      ifnconst	no_blank_lines
   1028  415b		       a5 90		      lda	missile0height	;3
   1029  415d		       c7 91		      dcp	missile0y	;5
   1030  415f		       e5 f6		      sbc	stack1
   1031  4161		       85 1d		      sta	ENAM0	;3
   1032  4163		       4c 06 f1 	      jmp	.endkerloop
   1033  4166				  -	      else
   1034  4166				  -	      ifconst	readpaddle
   1035  4166				  -	      ldy	currentpaddle
   1036  4166				  -	      lda	INPT0,y
   1037  4166				  -	      bpl	noreadpaddle2
   1038  4166				  -	      inc	paddle
   1039  4166				  -	      jmp	.endkerloop
   1040  4166				  -noreadpaddle2
   1041  4166				  -	      sleep	4
   1042  4166				  -	      jmp	.endkerloop
   1043  4166				  -	      else		; no_blank_lines and no paddle reading
   1044  4166				  -	      pla
   1045  4166				  -	      pha		; 14 cycles in 4 bytes
   1046  4166				  -	      pla
   1047  4166				  -	      pha
   1048  4166				  -			; sleep 14
   1049  4166				  -	      jmp	.endkerloop
   1050  4166				  -	      endif
   1051  4166					      endif
   1052  4166
   1053  4166
   1054  4166							; ifconst donepaddleskip
   1055  4166							;paddleskipread
   1056  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   1057  4166							; plus we get a lo-res paddle read
   1058  4166							; bmi donepaddleskip
   1059  4166							; endif
   1060  4166
   1061  4166				   .skipDrawlastP0
   1062  4166		       a9 00		      lda	#0
   1063  4168		       a8		      tay
   1064  4169		       4c 59 f1 	      jmp	.continuelastP0
   1065  416c
   1066  416c				  -	      ifconst	no_blank_lines
   1067  416c				  -no_blank_lines_bailout
   1068  416c				  -	      ldx	#0
   1069  416c					      endif
   1070  416c
   1071  416c				   endkernel
   1072  416c							; 6 digit score routine
   1073  416c		       86 0e		      stx	PF1
   1074  416e		       86 0f		      stx	PF2
   1075  4170		       86 0d		      stx	PF0
   1076  4172		       18		      clc
   1077  4173
   1078  4173				  -	      ifconst	pfrowheight
   1079  4173				  -	      lda	#pfrowheight+2
   1080  4173					      else
   1081  4173					      ifnconst	pfres
   1082  4173		       a9 0a		      lda	#10
   1083  4175				  -	      else
   1084  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1085  4175					      endif
   1086  4175					      endif
   1087  4175
   1088  4175		       e5 ef		      sbc	playfieldpos
   1089  4177		       85 ef		      sta	playfieldpos
   1090  4179		       8a		      txa
   1091  417a
   1092  417a				  -	      ifconst	shakescreen
   1093  417a				  -	      bit	shakescreen
   1094  417a				  -	      bmi	noshakescreen2
   1095  417a				  -	      ldx	#$3D
   1096  417a				  -noshakescreen2
   1097  417a					      endif
   1098  417a
   1099  417a		       95 02		      sta	WSYNC,x
   1100  417c
   1101  417c							; STA WSYNC ;first one, need one more
   1102  417c		       85 0b		      sta	REFP0
   1103  417e		       85 0c		      sta	REFP1
   1104  4180		       85 1b		      STA	GRP0
   1105  4182		       85 1c		      STA	GRP1
   1106  4184							; STA PF1
   1107  4184							; STA PF2
   1108  4184		       85 2b		      sta	HMCLR
   1109  4186		       85 1d		      sta	ENAM0
   1110  4188		       85 1e		      sta	ENAM1
   1111  418a		       85 1f		      sta	ENABL
   1112  418c
   1113  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1114  418e		       85 85		      sta	player0y
   1115  4190		       a5 9e		      lda	temp3
   1116  4192		       85 86		      sta	player1y
   1117  4194					      ifnconst	player1colors
   1118  4194		       a5 a1		      lda	temp6
   1119  4196		       85 88		      sta	missile1y
   1120  4198					      endif
   1121  4198					      ifnconst	playercolors
   1122  4198					      ifnconst	readpaddle
   1123  4198		       a5 a0		      lda	temp5
   1124  419a		       85 91		      sta	missile0y
   1125  419c					      endif
   1126  419c					      endif
   1127  419c		       a5 f7		      lda	stack2
   1128  419e		       85 89		      sta	bally
   1129  41a0
   1130  41a0							; strangely, this isn't required any more. might have
   1131  41a0							; resulted from the no_blank_lines score bounce fix
   1132  41a0							;ifconst no_blank_lines
   1133  41a0							;sta WSYNC
   1134  41a0							;endif
   1135  41a0
   1136  41a0		       ad 84 02 	      lda	INTIM
   1137  41a3		       18		      clc
   1138  41a4					      ifnconst	vblank_time
   1139  41a4		       69 8e		      adc	#43+12+87
   1140  41a6				  -	      else
   1141  41a6				  -	      adc	#vblank_time+12+87
   1142  41a6				  -
   1143  41a6					      endif
   1144  41a6							; sta WSYNC
   1145  41a6		       8d 96 02 	      sta	TIM64T
   1146  41a9
   1147  41a9				  -	      ifconst	minikernel
   1148  41a9				  -	      jsr	minikernel
   1149  41a9					      endif
   1150  41a9
   1151  41a9							; now reassign temp vars for score pointers
   1152  41a9
   1153  41a9							; score pointers contain:
   1154  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1155  41a9							; swap lo2->temp1
   1156  41a9							; swap lo4->temp3
   1157  41a9							; swap lo6->temp5
   1158  41a9					      ifnconst	noscore
   1159  41a9		       a5 97		      lda	scorepointers+1
   1160  41ab							; ldy temp1
   1161  41ab		       85 9c		      sta	temp1
   1162  41ad							; sty scorepointers+1
   1163  41ad
   1164  41ad		       a5 99		      lda	scorepointers+3
   1165  41af							; ldy temp3
   1166  41af		       85 9e		      sta	temp3
   1167  41b1							; sty scorepointers+3
   1168  41b1
   1169  41b1
   1170  41b1		       85 2b		      sta	HMCLR
   1171  41b3		       ba		      tsx
   1172  41b4		       86 f6		      stx	stack1
   1173  41b6		       a2 e0		      ldx	#$E0
   1174  41b8		       86 20		      stx	HMP0
   1175  41ba
   1176  41ba		       a5 a3		      LDA	scorecolor
   1177  41bc		       85 06		      STA	COLUP0
   1178  41be		       85 07		      STA	COLUP1
   1179  41c0				  -	      ifconst	scorefade
   1180  41c0				  -	      STA	stack2
   1181  41c0					      endif
   1182  41c0				  -	      ifconst	pfscore
   1183  41c0				  -	      lda	pfscorecolor
   1184  41c0				  -	      sta	COLUPF
   1185  41c0					      endif
   1186  41c0		       85 02		      sta	WSYNC
   1187  41c2		       a2 00		      ldx	#0
   1188  41c4		       86 1b		      STx	GRP0
   1189  41c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1190  41c8
   1191  41c8		       a5 9b		      lda	scorepointers+5
   1192  41ca							; ldy temp5
   1193  41ca		       95 a0		      sta	temp5,x
   1194  41cc							; sty scorepointers+5
   1195  41cc		       a9 ff		      lda	#>scoretable
   1196  41ce		       85 97		      sta	scorepointers+1
   1197  41d0		       85 99		      sta	scorepointers+3
   1198  41d2		       85 9b		      sta	scorepointers+5
   1199  41d4		       85 9d		      sta	temp2
   1200  41d6		       85 9f		      sta	temp4
   1201  41d8		       85 a1		      sta	temp6
   1202  41da		       a0 07		      LDY	#7
   1203  41dc		       84 25		      STY	VDELP0
   1204  41de		       85 10		      STA	RESP0
   1205  41e0		       85 11		      STA	RESP1
   1206  41e2
   1207  41e2
   1208  41e2		       a9 03		      LDA	#$03
   1209  41e4		       85 04		      STA	NUSIZ0
   1210  41e6		       85 05		      STA	NUSIZ1
   1211  41e8		       85 26		      STA	VDELP1
   1212  41ea		       a9 f0		      LDA	#$F0
   1213  41ec		       85 21		      STA	HMP1
   1214  41ee		       b1 96		      lda	(scorepointers),y
   1215  41f0		       85 1b		      sta	GRP0
   1216  41f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   1217  41f4		       4c 08 f2 	      jmp	beginscore
   1218  41f7
   1219  41f7
   1220  41f7					      if	((<*)>$d4)
   1221  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1222  4200					      endif
   1223  4200
   1224  4200				   loop2
   1225  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1226  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1227  4204				  -	      ifconst	pfscore
   1228  4204				  -	      lda.w	pfscore1
   1229  4204				  -	      sta	PF1
   1230  4204					      else
   1231  4204				  -	      ifconst	scorefade
   1232  4204				  -	      sleep	2
   1233  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   1234  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   1236  4208					      endif
   1237  4208					      endif
   1238  4208							; cycle 0
   1239  4208				   beginscore
   1240  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1241  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1242  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1243  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1244  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1245  4212		       9a		      txs
   1246  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1247  4215				  -	      ifconst	scorefade
   1248  4215				  -	      lda	stack2
   1249  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   1251  4217					      endif
   1252  4217
   1253  4217				  -	      ifconst	pfscore
   1254  4217				  -	      lda	pfscore2
   1255  4217				  -	      sta	PF1
   1256  4217					      else
   1257  4217				  -	      ifconst	scorefade
   1258  4217				  -	      sta	COLUP0
   1259  4217				  -	      sta	COLUP1
   1260  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   1262  421a					      endif
   1263  421a					      endif
   1264  421a
   1265  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1266  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1267  421e		       ba		      tsx
   1268  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1269  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1270  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1271  4225		       88		      dey
   1272  4226		       10 d8		      bpl	loop2	;+2 60 180
   1273  4228
   1274  4228		       a6 f6		      ldx	stack1
   1275  422a		       9a		      txs
   1276  422b							; lda scorepointers+1
   1277  422b		       a4 9c		      ldy	temp1
   1278  422d							; sta temp1
   1279  422d		       84 97		      sty	scorepointers+1
   1280  422f
   1281  422f		       a9 00		      LDA	#0
   1282  4231		       85 0e		      sta	PF1
   1283  4233		       85 1b		      STA	GRP0
   1284  4235		       85 1c		      STA	GRP1
   1285  4237		       85 25		      STA	VDELP0
   1286  4239		       85 26		      STA	VDELP1	;do we need these
   1287  423b		       85 04		      STA	NUSIZ0
   1288  423d		       85 05		      STA	NUSIZ1
   1289  423f
   1290  423f							; lda scorepointers+3
   1291  423f		       a4 9e		      ldy	temp3
   1292  4241							; sta temp3
   1293  4241		       84 99		      sty	scorepointers+3
   1294  4243
   1295  4243							; lda scorepointers+5
   1296  4243		       a4 a0		      ldy	temp5
   1297  4245							; sta temp5
   1298  4245		       84 9b		      sty	scorepointers+5
   1299  4247					      endif		;noscore
   1300  4247				  -	      ifconst	readpaddle
   1301  4247				  -	      lda	#%11000010
   1302  4247					      else
   1303  4247				  -	      ifconst	qtcontroller
   1304  4247				  -	      lda	qtcontroller
   1305  4247				  -	      lsr		; bit 0 in carry
   1306  4247				  -	      lda	#4
   1307  4247				  -	      ror		; carry into top of A
   1308  4247					      else
   1309  4247		       a9 02		      lda	#2
   1310  4249					      endif		; qtcontroller
   1311  4249					      endif		; readpaddle
   1312  4249		       85 02		      sta	WSYNC
   1313  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1315  4250				  -	      ifconst	shakescreen
   1316  4250				  -doshakescreen
   1317  4250				  -	      bit	shakescreen
   1318  4250				  -	      bmi	noshakescreen
   1319  4250				  -	      sta	WSYNC
   1320  4250				  -noshakescreen
   1321  4250				  -	      ldx	missile0height
   1322  4250				  -	      inx
   1323  4250				  -	      rts
   1324  4250					      endif
   1325  4250
   1326  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1327  4250
   1328  4250				   start
   1329  4250		       78		      sei
   1330  4251		       d8		      cld
   1331  4252		       a0 00		      ldy	#0
   1332  4254		       a5 d0		      lda	$D0
   1333  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1334  4258		       d0 07		      bne	MachineIs2600
   1335  425a		       a5 d1		      lda	$D1
   1336  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1337  425e		       d0 01		      bne	MachineIs2600
   1338  4260		       88		      dey
   1339  4261				   MachineIs2600
   1340  4261		       a2 00		      ldx	#0
   1341  4263		       8a		      txa
   1342  4264				   clearmem
   1343  4264		       e8		      inx
   1344  4265		       9a		      txs
   1345  4266		       48		      pha
   1346  4267		       d0 fb		      bne	clearmem
   1347  4269		       84 9c		      sty	temp1
   1348  426b					      ifnconst	multisprite
   1349  426b				  -	      ifconst	pfrowheight
   1350  426b				  -	      lda	#pfrowheight
   1351  426b					      else
   1352  426b				  -	      ifconst	pfres
   1353  426b				  -	      lda	#(96/pfres)
   1354  426b					      else
   1355  426b		       a9 08		      lda	#8
   1356  426d					      endif
   1357  426d					      endif
   1358  426d		       85 ef		      sta	playfieldpos
   1359  426f					      endif
   1360  426f		       a2 05		      ldx	#5
   1361  4271				   initscore
   1362  4271		       a9 74		      lda	#<scoretable
   1363  4273		       95 96		      sta	scorepointers,x
   1364  4275		       ca		      dex
   1365  4276		       10 f9		      bpl	initscore
   1366  4278		       a9 01		      lda	#1
   1367  427a		       85 0a		      sta	CTRLPF
   1368  427c		       0d 84 02 	      ora	INTIM
   1369  427f		       85 a2		      sta	rand
   1370  4281
   1371  4281				  -	      ifconst	multisprite
   1372  4281				  -	      jsr	multisprite_setup
   1373  4281					      endif
   1374  4281
   1375  4281				  -	      ifnconst	bankswitch
   1376  4281				  -	      jmp	game
   1377  4281					      else
   1378  4281		       a9 8f		      lda	#>(game-1)
   1379  4283		       48		      pha
   1380  4284		       a9 ff		      lda	#<(game-1)
   1381  4286		       48		      pha
   1382  4287		       48		      pha
   1383  4288		       48		      pha
   1384  4289		       a2 01		      ldx	#1
   1385  428b		       4c eb ff 	      jmp	BS_jsr
   1386  428e					      endif
   1387  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1388  428e
   1389  428e							; playfield drawing routines
   1390  428e							; you get a 32x12 bitmapped display in a single color :)
   1391  428e							; 0-31 and 0-11
   1392  428e
   1393  428e				   pfclear		; clears playfield - or fill with pattern
   1394  428e				  -	      ifconst	pfres
   1395  428e				  -	      ldx	#pfres*pfwidth-1
   1396  428e					      else
   1397  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1398  4290					      endif
   1399  4290				   pfclear_loop
   1400  4290					      ifnconst	superchip
   1401  4290		       95 a4		      sta	playfield,x
   1402  4292				  -	      else
   1403  4292				  -	      sta	playfield-128,x
   1404  4292					      endif
   1405  4292		       ca		      dex
   1406  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1408  4298
   1409  4298				   setuppointers
   1410  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1411  429a		       aa		      tax		; put x-value in x 
   1412  429b		       4a		      lsr
   1413  429c		       4a		      lsr
   1414  429d		       4a		      lsr		; divide x pos by 8 
   1415  429e		       85 9c		      sta	temp1
   1416  42a0		       98		      tya
   1417  42a1		       0a		      asl
   1418  42a2					      if	pfwidth=4
   1419  42a2		       0a		      asl		; multiply y pos by 4
   1420  42a3					      endif		; else multiply by 2
   1421  42a3		       18		      clc
   1422  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1423  42a6		       a8		      tay		; put the value in y
   1424  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1425  42a9		       60		      rts
   1426  42aa
   1427  42aa				   pfread
   1428  42aa							;x=xvalue, y=yvalue
   1429  42aa		       20 98 f2 	      jsr	setuppointers
   1430  42ad		       bd 42 f3 	      lda	setbyte,x
   1431  42b0		       39 a4 00 	      and	playfield,y
   1432  42b3		       5d 42 f3 	      eor	setbyte,x
   1433  42b6							; beq readzero
   1434  42b6							; lda #1
   1435  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1437  42b9
   1438  42b9				   pfpixel
   1439  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1440  42b9		       20 98 f2 	      jsr	setuppointers
   1441  42bc
   1442  42bc					      ifconst	bankswitch
   1443  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1444  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1445  42c0		       4a		      lsr
   1446  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1447  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1448  42c6		       5d 42 f3 	      eor	setbyte,x
   1449  42c9				  -	      ifconst	superchip
   1450  42c9				  -	      sta	playfield-128,y
   1451  42c9					      else
   1452  42c9		       99 a4 00 	      sta	playfield,y
   1453  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1455  42cf				   pixelon_r
   1456  42cf		       b9 a4 00 	      lda	playfield,y
   1457  42d2		       1d 42 f3 	      ora	setbyte,x
   1458  42d5				  -	      ifconst	superchip
   1459  42d5				  -	      sta	playfield-128,y
   1460  42d5					      else
   1461  42d5		       99 a4 00 	      sta	playfield,y
   1462  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1464  42db				   pixeloff_r
   1465  42db		       bd 42 f3 	      lda	setbyte,x
   1466  42de		       49 ff		      eor	#$ff
   1467  42e0		       39 a4 00 	      and	playfield,y
   1468  42e3				  -	      ifconst	superchip
   1469  42e3				  -	      sta	playfield-128,y
   1470  42e3					      else
   1471  42e3		       99 a4 00 	      sta	playfield,y
   1472  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1474  42e9
   1475  42e9				  -	      else
   1476  42e9				  -	      jmp	plotpoint
   1477  42e9					      endif
   1478  42e9
   1479  42e9				   pfhline
   1480  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1481  42e9		       20 98 f2 	      jsr	setuppointers
   1482  42ec		       4c f6 f2 	      jmp	noinc
   1483  42ef				   keepgoing
   1484  42ef		       e8		      inx
   1485  42f0		       8a		      txa
   1486  42f1		       29 07		      and	#7
   1487  42f3		       d0 01		      bne	noinc
   1488  42f5		       c8		      iny
   1489  42f6				   noinc
   1490  42f6		       20 1b f3 	      jsr	plotpoint
   1491  42f9		       e4 9e		      cpx	temp3
   1492  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1494  4300
   1495  4300				   pfvline
   1496  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1497  4300		       20 98 f2 	      jsr	setuppointers
   1498  4303		       84 9c		      sty	temp1	; store memory location offset
   1499  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1500  4307		       a5 9e		      lda	temp3
   1501  4309		       0a		      asl
   1502  430a					      if	pfwidth=4
   1503  430a		       0a		      asl		; multiply by 4
   1504  430b					      endif		; else multiply by 2
   1505  430b		       85 9e		      sta	temp3	; store it
   1506  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1507  430d							; right now, temp1=y=starting memory location, temp3=final
   1508  430d							; x should equal original x value
   1509  430d				   keepgoingy
   1510  430d		       20 1b f3 	      jsr	plotpoint
   1511  4310		       c8		      iny
   1512  4311		       c8		      iny
   1513  4312					      if	pfwidth=4
   1514  4312		       c8		      iny
   1515  4313		       c8		      iny
   1516  4314					      endif
   1517  4314		       c4 9e		      cpy	temp3
   1518  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1520  431b
   1521  431b				   plotpoint
   1522  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1523  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1524  431f		       4a		      lsr
   1525  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1526  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1527  4325		       5d 42 f3 	      eor	setbyte,x
   1528  4328				  -	      ifconst	superchip
   1529  4328				  -	      sta	playfield-128,y
   1530  4328					      else
   1531  4328		       99 a4 00 	      sta	playfield,y
   1532  432b					      endif
   1533  432b		       60		      rts
   1534  432c				   pixelon
   1535  432c		       b9 a4 00 	      lda	playfield,y
   1536  432f		       1d 42 f3 	      ora	setbyte,x
   1537  4332				  -	      ifconst	superchip
   1538  4332				  -	      sta	playfield-128,y
   1539  4332					      else
   1540  4332		       99 a4 00 	      sta	playfield,y
   1541  4335					      endif
   1542  4335		       60		      rts
   1543  4336				   pixeloff
   1544  4336		       bd 42 f3 	      lda	setbyte,x
   1545  4339		       49 ff		      eor	#$ff
   1546  433b		       39 a4 00 	      and	playfield,y
   1547  433e				  -	      ifconst	superchip
   1548  433e				  -	      sta	playfield-128,y
   1549  433e					      else
   1550  433e		       99 a4 00 	      sta	playfield,y
   1551  4341					      endif
   1552  4341		       60		      rts
   1553  4342
   1554  4342				   setbyte
   1555  4342					      ifnconst	pfcenter
   1556  4342		       80		      .byte.b	$80
   1557  4343		       40		      .byte.b	$40
   1558  4344		       20		      .byte.b	$20
   1559  4345		       10		      .byte.b	$10
   1560  4346		       08		      .byte.b	$08
   1561  4347		       04		      .byte.b	$04
   1562  4348		       02		      .byte.b	$02
   1563  4349		       01		      .byte.b	$01
   1564  434a					      endif
   1565  434a		       01		      .byte.b	$01
   1566  434b		       02		      .byte.b	$02
   1567  434c		       04		      .byte.b	$04
   1568  434d		       08		      .byte.b	$08
   1569  434e		       10		      .byte.b	$10
   1570  434f		       20		      .byte.b	$20
   1571  4350		       40		      .byte.b	$40
   1572  4351		       80		      .byte.b	$80
   1573  4352		       80		      .byte.b	$80
   1574  4353		       40		      .byte.b	$40
   1575  4354		       20		      .byte.b	$20
   1576  4355		       10		      .byte.b	$10
   1577  4356		       08		      .byte.b	$08
   1578  4357		       04		      .byte.b	$04
   1579  4358		       02		      .byte.b	$02
   1580  4359		       01		      .byte.b	$01
   1581  435a		       01		      .byte.b	$01
   1582  435b		       02		      .byte.b	$02
   1583  435c		       04		      .byte.b	$04
   1584  435d		       08		      .byte.b	$08
   1585  435e		       10		      .byte.b	$10
   1586  435f		       20		      .byte.b	$20
   1587  4360		       40		      .byte.b	$40
   1588  4361		       80		      .byte.b	$80
   1589  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1590  4362
   1591  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1592  4362		       d0 15		      bne	notleft
   1593  4364							;left
   1594  4364				  -	      ifconst	pfres
   1595  4364				  -	      ldx	#pfres*4
   1596  4364					      else
   1597  4364		       a2 30		      ldx	#48
   1598  4366					      endif
   1599  4366				   leftloop
   1600  4366		       b5 a3		      lda	playfield-1,x
   1601  4368		       4a		      lsr
   1602  4369
   1603  4369				  -	      ifconst	superchip
   1604  4369				  -	      lda	playfield-2,x
   1605  4369				  -	      rol
   1606  4369				  -	      sta	playfield-130,x
   1607  4369				  -	      lda	playfield-3,x
   1608  4369				  -	      ror
   1609  4369				  -	      sta	playfield-131,x
   1610  4369				  -	      lda	playfield-4,x
   1611  4369				  -	      rol
   1612  4369				  -	      sta	playfield-132,x
   1613  4369				  -	      lda	playfield-1,x
   1614  4369				  -	      ror
   1615  4369				  -	      sta	playfield-129,x
   1616  4369					      else
   1617  4369		       36 a2		      rol	playfield-2,x
   1618  436b		       76 a1		      ror	playfield-3,x
   1619  436d		       36 a0		      rol	playfield-4,x
   1620  436f		       76 a3		      ror	playfield-1,x
   1621  4371					      endif
   1622  4371
   1623  4371		       8a		      txa
   1624  4372		       cb 04		      sbx	#4
   1625  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1627  4379
   1628  4379				   notleft
   1629  4379		       4a		      lsr
   1630  437a		       90 15		      bcc	notright
   1631  437c							;right
   1632  437c
   1633  437c				  -	      ifconst	pfres
   1634  437c				  -	      ldx	#pfres*4
   1635  437c					      else
   1636  437c		       a2 30		      ldx	#48
   1637  437e					      endif
   1638  437e				   rightloop
   1639  437e		       b5 a0		      lda	playfield-4,x
   1640  4380		       4a		      lsr
   1641  4381				  -	      ifconst	superchip
   1642  4381				  -	      lda	playfield-3,x
   1643  4381				  -	      rol
   1644  4381				  -	      sta	playfield-131,x
   1645  4381				  -	      lda	playfield-2,x
   1646  4381				  -	      ror
   1647  4381				  -	      sta	playfield-130,x
   1648  4381				  -	      lda	playfield-1,x
   1649  4381				  -	      rol
   1650  4381				  -	      sta	playfield-129,x
   1651  4381				  -	      lda	playfield-4,x
   1652  4381				  -	      ror
   1653  4381				  -	      sta	playfield-132,x
   1654  4381					      else
   1655  4381		       36 a1		      rol	playfield-3,x
   1656  4383		       76 a2		      ror	playfield-2,x
   1657  4385		       36 a3		      rol	playfield-1,x
   1658  4387		       76 a0		      ror	playfield-4,x
   1659  4389					      endif
   1660  4389		       8a		      txa
   1661  438a		       cb 04		      sbx	#4
   1662  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1664  4391
   1665  4391				   notright
   1666  4391		       4a		      lsr
   1667  4392		       90 4b		      bcc	notup
   1668  4394							;up
   1669  4394		       4a		      lsr
   1670  4395		       90 02		      bcc	onedecup
   1671  4397		       c6 ef		      dec	playfieldpos
   1672  4399				   onedecup
   1673  4399		       c6 ef		      dec	playfieldpos
   1674  439b		       f0 02		      beq	shiftdown
   1675  439d		       10 3d		      bpl	noshiftdown2
   1676  439f				   shiftdown
   1677  439f				  -	      ifconst	pfrowheight
   1678  439f				  -	      lda	#pfrowheight
   1679  439f					      else
   1680  439f					      ifnconst	pfres
   1681  439f		       a9 08		      lda	#8
   1682  43a1				  -	      else
   1683  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1684  43a1					      endif
   1685  43a1					      endif
   1686  43a1
   1687  43a1		       85 ef		      sta	playfieldpos
   1688  43a3		       a5 a7		      lda	playfield+3
   1689  43a5		       85 9f		      sta	temp4
   1690  43a7		       a5 a6		      lda	playfield+2
   1691  43a9		       85 9e		      sta	temp3
   1692  43ab		       a5 a5		      lda	playfield+1
   1693  43ad		       85 9d		      sta	temp2
   1694  43af		       a5 a4		      lda	playfield
   1695  43b1		       85 9c		      sta	temp1
   1696  43b3		       a2 00		      ldx	#0
   1697  43b5				   up2
   1698  43b5		       b5 a8		      lda	playfield+4,x
   1699  43b7				  -	      ifconst	superchip
   1700  43b7				  -	      sta	playfield-128,x
   1701  43b7				  -	      lda	playfield+5,x
   1702  43b7				  -	      sta	playfield-127,x
   1703  43b7				  -	      lda	playfield+6,x
   1704  43b7				  -	      sta	playfield-126,x
   1705  43b7				  -	      lda	playfield+7,x
   1706  43b7				  -	      sta	playfield-125,x
   1707  43b7					      else
   1708  43b7		       95 a4		      sta	playfield,x
   1709  43b9		       b5 a9		      lda	playfield+5,x
   1710  43bb		       95 a5		      sta	playfield+1,x
   1711  43bd		       b5 aa		      lda	playfield+6,x
   1712  43bf		       95 a6		      sta	playfield+2,x
   1713  43c1		       b5 ab		      lda	playfield+7,x
   1714  43c3		       95 a7		      sta	playfield+3,x
   1715  43c5					      endif
   1716  43c5		       8a		      txa
   1717  43c6		       cb fc		      sbx	#252
   1718  43c8				  -	      ifconst	pfres
   1719  43c8				  -	      cpx	#(pfres-1)*4
   1720  43c8					      else
   1721  43c8		       e0 2c		      cpx	#44
   1722  43ca					      endif
   1723  43ca		       d0 e9		      bne	up2
   1724  43cc
   1725  43cc		       a5 9f		      lda	temp4
   1726  43ce
   1727  43ce				  -	      ifconst	superchip
   1728  43ce				  -	      ifconst	pfres
   1729  43ce				  -	      sta	playfield+pfres*4-129
   1730  43ce				  -	      lda	temp3
   1731  43ce				  -	      sta	playfield+pfres*4-130
   1732  43ce				  -	      lda	temp2
   1733  43ce				  -	      sta	playfield+pfres*4-131
   1734  43ce				  -	      lda	temp1
   1735  43ce				  -	      sta	playfield+pfres*4-132
   1736  43ce				  -	      else
   1737  43ce				  -	      sta	playfield+47-128
   1738  43ce				  -	      lda	temp3
   1739  43ce				  -	      sta	playfield+46-128
   1740  43ce				  -	      lda	temp2
   1741  43ce				  -	      sta	playfield+45-128
   1742  43ce				  -	      lda	temp1
   1743  43ce				  -	      sta	playfield+44-128
   1744  43ce				  -	      endif
   1745  43ce					      else
   1746  43ce				  -	      ifconst	pfres
   1747  43ce				  -	      sta	playfield+pfres*4-1
   1748  43ce				  -	      lda	temp3
   1749  43ce				  -	      sta	playfield+pfres*4-2
   1750  43ce				  -	      lda	temp2
   1751  43ce				  -	      sta	playfield+pfres*4-3
   1752  43ce				  -	      lda	temp1
   1753  43ce				  -	      sta	playfield+pfres*4-4
   1754  43ce					      else
   1755  43ce		       85 d3		      sta	playfield+47
   1756  43d0		       a5 9e		      lda	temp3
   1757  43d2		       85 d2		      sta	playfield+46
   1758  43d4		       a5 9d		      lda	temp2
   1759  43d6		       85 d1		      sta	playfield+45
   1760  43d8		       a5 9c		      lda	temp1
   1761  43da		       85 d0		      sta	playfield+44
   1762  43dc					      endif
   1763  43dc					      endif
   1764  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1766  43df
   1767  43df
   1768  43df				   notup
   1769  43df							;down
   1770  43df		       4a		      lsr
   1771  43e0		       b0 02		      bcs	oneincup
   1772  43e2		       e6 ef		      inc	playfieldpos
   1773  43e4				   oneincup
   1774  43e4		       e6 ef		      inc	playfieldpos
   1775  43e6		       a5 ef		      lda	playfieldpos
   1776  43e8
   1777  43e8				  -	      ifconst	pfrowheight
   1778  43e8				  -	      cmp	#pfrowheight+1
   1779  43e8					      else
   1780  43e8					      ifnconst	pfres
   1781  43e8		       c9 09		      cmp	#9
   1782  43ea				  -	      else
   1783  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1784  43ea					      endif
   1785  43ea					      endif
   1786  43ea
   1787  43ea		       90 3b		      bcc	noshiftdown
   1788  43ec		       a9 01		      lda	#1
   1789  43ee		       85 ef		      sta	playfieldpos
   1790  43f0
   1791  43f0				  -	      ifconst	pfres
   1792  43f0				  -	      lda	playfield+pfres*4-1
   1793  43f0				  -	      sta	temp4
   1794  43f0				  -	      lda	playfield+pfres*4-2
   1795  43f0				  -	      sta	temp3
   1796  43f0				  -	      lda	playfield+pfres*4-3
   1797  43f0				  -	      sta	temp2
   1798  43f0				  -	      lda	playfield+pfres*4-4
   1799  43f0					      else
   1800  43f0		       a5 d3		      lda	playfield+47
   1801  43f2		       85 9f		      sta	temp4
   1802  43f4		       a5 d2		      lda	playfield+46
   1803  43f6		       85 9e		      sta	temp3
   1804  43f8		       a5 d1		      lda	playfield+45
   1805  43fa		       85 9d		      sta	temp2
   1806  43fc		       a5 d0		      lda	playfield+44
   1807  43fe					      endif
   1808  43fe
   1809  43fe		       85 9c		      sta	temp1
   1810  4400
   1811  4400				  -	      ifconst	pfres
   1812  4400				  -	      ldx	#(pfres-1)*4
   1813  4400					      else
   1814  4400		       a2 2c		      ldx	#44
   1815  4402					      endif
   1816  4402				   down2
   1817  4402		       b5 a3		      lda	playfield-1,x
   1818  4404				  -	      ifconst	superchip
   1819  4404				  -	      sta	playfield-125,x
   1820  4404				  -	      lda	playfield-2,x
   1821  4404				  -	      sta	playfield-126,x
   1822  4404				  -	      lda	playfield-3,x
   1823  4404				  -	      sta	playfield-127,x
   1824  4404				  -	      lda	playfield-4,x
   1825  4404				  -	      sta	playfield-128,x
   1826  4404					      else
   1827  4404		       95 a7		      sta	playfield+3,x
   1828  4406		       b5 a2		      lda	playfield-2,x
   1829  4408		       95 a6		      sta	playfield+2,x
   1830  440a		       b5 a1		      lda	playfield-3,x
   1831  440c		       95 a5		      sta	playfield+1,x
   1832  440e		       b5 a0		      lda	playfield-4,x
   1833  4410		       95 a4		      sta	playfield,x
   1834  4412					      endif
   1835  4412		       8a		      txa
   1836  4413		       cb 04		      sbx	#4
   1837  4415		       d0 eb		      bne	down2
   1838  4417
   1839  4417		       a5 9f		      lda	temp4
   1840  4419				  -	      ifconst	superchip
   1841  4419				  -	      sta	playfield-125
   1842  4419				  -	      lda	temp3
   1843  4419				  -	      sta	playfield-126
   1844  4419				  -	      lda	temp2
   1845  4419				  -	      sta	playfield-127
   1846  4419				  -	      lda	temp1
   1847  4419				  -	      sta	playfield-128
   1848  4419					      else
   1849  4419		       85 a7		      sta	playfield+3
   1850  441b		       a5 9e		      lda	temp3
   1851  441d		       85 a6		      sta	playfield+2
   1852  441f		       a5 9d		      lda	temp2
   1853  4421		       85 a5		      sta	playfield+1
   1854  4423		       a5 9c		      lda	temp1
   1855  4425		       85 a4		      sta	playfield
   1856  4427					      endif
   1857  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1859  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1860  442a
   1861  442a							;standard routines needed for pretty much all games
   1862  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1863  442a							; repositioning code and score pointer setup moved to overscan
   1864  442a							; read switches, joysticks now compiler generated (more efficient)
   1865  442a
   1866  442a				   randomize
   1867  442a		       a5 a2		      lda	rand
   1868  442c		       4a		      lsr
   1869  442d				  -	      ifconst	rand16
   1870  442d				  -	      rol	rand16
   1871  442d					      endif
   1872  442d		       90 02		      bcc	noeor
   1873  442f		       49 b4		      eor	#$B4
   1874  4431				   noeor
   1875  4431		       85 a2		      sta	rand
   1876  4433				  -	      ifconst	rand16
   1877  4433				  -	      eor	rand16
   1878  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1880  4436							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1881  4436
   1882  4436				   drawscreen
   1883  4436				  -	      ifconst	debugscore
   1884  4436				  -	      ldx	#14
   1885  4436				  -	      lda	INTIM	; display # cycles left in the score
   1886  4436				  -
   1887  4436				  -	      ifconst	mincycles
   1888  4436				  -	      lda	mincycles
   1889  4436				  -	      cmp	INTIM
   1890  4436				  -	      lda	mincycles
   1891  4436				  -	      bcc	nochange
   1892  4436				  -	      lda	INTIM
   1893  4436				  -	      sta	mincycles
   1894  4436				  -nochange
   1895  4436				  -	      endif
   1896  4436				  -
   1897  4436				  -			; cmp #$2B
   1898  4436				  -			; bcs no_cycles_left
   1899  4436				  -	      bmi	cycles_left
   1900  4436				  -	      ldx	#64
   1901  4436				  -	      eor	#$ff	;make negative
   1902  4436				  -cycles_left
   1903  4436				  -	      stx	scorecolor
   1904  4436				  -	      and	#$7f	; clear sign bit
   1905  4436				  -	      tax
   1906  4436				  -	      lda	scorebcd,x
   1907  4436				  -	      sta	score+2
   1908  4436				  -	      lda	scorebcd1,x
   1909  4436				  -	      sta	score+1
   1910  4436				  -	      jmp	done_debugscore
   1911  4436				  -scorebcd
   1912  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1913  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1914  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1915  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1916  4436				  -scorebcd1
   1917  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1918  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1919  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1920  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1921  4436				  -done_debugscore
   1922  4436					      endif
   1923  4436
   1924  4436				  -	      ifconst	debugcycles
   1925  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1926  4436				  -			; cmp #$2B
   1927  4436				  -			; BCC overscan
   1928  4436				  -	      bmi	overscan
   1929  4436				  -	      sta	COLUBK
   1930  4436				  -	      bcs	doneoverscan
   1931  4436					      endif
   1932  4436
   1933  4436				   overscan
   1934  4436				  -	      ifconst	interlaced
   1935  4436				  -	      PHP
   1936  4436				  -	      PLA
   1937  4436				  -	      EOR	#4	; flip interrupt bit
   1938  4436				  -	      PHA
   1939  4436				  -	      PLP
   1940  4436				  -	      AND	#4	; isolate the interrupt bit
   1941  4436				  -	      TAX		; save it for later
   1942  4436					      endif
   1943  4436
   1944  4436				   overscanloop
   1945  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1946  4439		       30 fb		      bmi	overscanloop
   1947  443b				   doneoverscan
   1948  443b
   1949  443b							;do VSYNC
   1950  443b
   1951  443b				  -	      ifconst	interlaced
   1952  443b				  -	      CPX	#4
   1953  443b				  -	      BNE	oddframevsync
   1954  443b					      endif
   1955  443b
   1956  443b		       a9 02		      lda	#2
   1957  443d		       85 02		      sta	WSYNC
   1958  443f		       85 00		      sta	VSYNC
   1959  4441		       85 02		      STA	WSYNC
   1960  4443		       85 02		      STA	WSYNC
   1961  4445		       4a		      lsr
   1962  4446		       85 02		      STA	WSYNC
   1963  4448		       85 00		      STA	VSYNC
   1964  444a		       85 01		      sta	VBLANK
   1965  444c					      ifnconst	overscan_time
   1966  444c		       a9 a5		      lda	#37+128
   1967  444e				  -	      else
   1968  444e				  -	      lda	#overscan_time+128
   1969  444e					      endif
   1970  444e		       8d 96 02 	      sta	TIM64T
   1971  4451
   1972  4451				  -	      ifconst	interlaced
   1973  4451				  -	      jmp	postsync
   1974  4451				  -
   1975  4451				  -oddframevsync
   1976  4451				  -	      sta	WSYNC
   1977  4451				  -
   1978  4451				  -	      LDA	($80,X)	; 11 waste
   1979  4451				  -	      LDA	($80,X)	; 11 waste
   1980  4451				  -	      LDA	($80,X)	; 11 waste
   1981  4451				  -
   1982  4451				  -	      lda	#2
   1983  4451				  -	      sta	VSYNC
   1984  4451				  -	      sta	WSYNC
   1985  4451				  -	      sta	WSYNC
   1986  4451				  -	      sta	WSYNC
   1987  4451				  -
   1988  4451				  -	      LDA	($80,X)	; 11 waste
   1989  4451				  -	      LDA	($80,X)	; 11 waste
   1990  4451				  -	      LDA	($80,X)	; 11 waste
   1991  4451				  -
   1992  4451				  -	      lda	#0
   1993  4451				  -	      sta	VSYNC
   1994  4451				  -	      sta	VBLANK
   1995  4451				  -	      ifnconst	overscan_time
   1996  4451				  -	      lda	#37+128
   1997  4451				  -	      else
   1998  4451				  -	      lda	#overscan_time+128
   1999  4451				  -	      endif
   2000  4451				  -	      sta	TIM64T
   2001  4451				  -
   2002  4451				  -postsync
   2003  4451					      endif
   2004  4451
   2005  4451				  -	      ifconst	legacy
   2006  4451				  -	      if	legacy < 100
   2007  4451				  -	      ldx	#4
   2008  4451				  -adjustloop
   2009  4451				  -	      lda	player0x,x
   2010  4451				  -	      sec
   2011  4451				  -	      sbc	#14	;?
   2012  4451				  -	      sta	player0x,x
   2013  4451				  -	      dex
   2014  4451				  -	      bpl	adjustloop
   2015  4451				  -	      endif
   2016  4451					      endif
   2017  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   2018  4451				  -	      repeat	($fa-(<*))
   2019  4451				  -	      nop
   2020  4451				  -	      repend
   2021  4451					      endif
   2022  4451		       85 02		      sta	WSYNC
   2023  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   2025  4457				   HorPosLoop		; 5
   2026  4457		       b5 80		      lda	player0x,X	;+4 9
   2027  4459		       38		      sec		;+2 11
   2028  445a				   DivideLoop
   2029  445a		       e9 0f		      sbc	#15
   2030  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   2031  445e		       95 9c		      sta	temp1,X	;+4 19
   2032  4460		       95 10		      sta	RESP0,X	;+4 23
   2033  4462		       85 02		      sta	WSYNC
   2034  4464		       ca		      dex
   2035  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   2036  4467							; 4
   2037  4467
   2038  4467		       a2 04		      ldx	#4
   2039  4469		       b4 9c		      ldy	temp1,X
   2040  446b		       b9 c7 f3 	      lda	repostable-256,Y
   2041  446e		       95 20		      sta	HMP0,X	;+14 18
   2042  4470
   2043  4470		       ca		      dex
   2044  4471		       b4 9c		      ldy	temp1,X
   2045  4473		       b9 c7 f3 	      lda	repostable-256,Y
   2046  4476		       95 20		      sta	HMP0,X	;+14 32
   2047  4478
   2048  4478		       ca		      dex
   2049  4479		       b4 9c		      ldy	temp1,X
   2050  447b		       b9 c7 f3 	      lda	repostable-256,Y
   2051  447e		       95 20		      sta	HMP0,X	;+14 46
   2052  4480
   2053  4480		       ca		      dex
   2054  4481		       b4 9c		      ldy	temp1,X
   2055  4483		       b9 c7 f3 	      lda	repostable-256,Y
   2056  4486		       95 20		      sta	HMP0,X	;+14 60
   2057  4488
   2058  4488		       ca		      dex
   2059  4489		       b4 9c		      ldy	temp1,X
   2060  448b		       b9 c7 f3 	      lda	repostable-256,Y
   2061  448e		       95 20		      sta	HMP0,X	;+14 74
   2062  4490
   2063  4490		       85 02		      sta	WSYNC
   2064  4492
   2065  4492		       85 2a		      sta	HMOVE	;+3 3
   2066  4494
   2067  4494
   2068  4494				  -	      ifconst	legacy
   2069  4494				  -	      if	legacy < 100
   2070  4494				  -	      ldx	#4
   2071  4494				  -adjustloop2
   2072  4494				  -	      lda	player0x,x
   2073  4494				  -	      clc
   2074  4494				  -	      adc	#14	;?
   2075  4494				  -	      sta	player0x,x
   2076  4494				  -	      dex
   2077  4494				  -	      bpl	adjustloop2
   2078  4494				  -	      endif
   2079  4494					      endif
   2080  4494
   2081  4494
   2082  4494
   2083  4494
   2084  4494							;set score pointers
   2085  4494		       a7 95		      lax	score+2
   2086  4496		       20 c7 f4 	      jsr	scorepointerset
   2087  4499		       84 9b		      sty	scorepointers+5
   2088  449b		       86 98		      stx	scorepointers+2
   2089  449d		       a7 94		      lax	score+1
   2090  449f		       20 c7 f4 	      jsr	scorepointerset
   2091  44a2		       84 9a		      sty	scorepointers+4
   2092  44a4		       86 97		      stx	scorepointers+1
   2093  44a6		       a7 93		      lax	score
   2094  44a8		       20 c7 f4 	      jsr	scorepointerset
   2095  44ab		       84 99		      sty	scorepointers+3
   2096  44ad		       86 96		      stx	scorepointers
   2097  44af
   2098  44af				   vblk
   2099  44af							; run possible vblank bB code
   2100  44af				  -	      ifconst	vblank_bB_code
   2101  44af				  -	      jsr	vblank_bB_code
   2102  44af					      endif
   2103  44af				   vblk2
   2104  44af		       ad 84 02 	      LDA	INTIM
   2105  44b2		       30 fb		      bmi	vblk2
   2106  44b4		       4c 00 f0 	      jmp	kernel
   2107  44b7
   2108  44b7
   2109  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2110  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2111  44c7				   repostable
   2112  44c7
   2113  44c7				   scorepointerset
   2114  44c7		       29 0f		      and	#$0F
   2115  44c9		       0a		      asl
   2116  44ca		       0a		      asl
   2117  44cb		       0a		      asl
   2118  44cc		       69 74		      adc	#<scoretable
   2119  44ce		       a8		      tay
   2120  44cf		       8a		      txa
   2121  44d0							; and #$F0
   2122  44d0							; lsr
   2123  44d0		       4b f0		      asr	#$F0
   2124  44d2		       69 74		      adc	#<scoretable
   2125  44d4		       aa		      tax
   2126  44d5		       60		      rts
   2127  44d6							;bB.asm
   2128  44d6							; bB.asm file is split here
   2129  44d6				  -	      if	(<*) > (<(*+0))
   2130  44d6				  -	      repeat	($100-<*)
   2131  44d6				  -	      .byte	0
   2132  44d6				  -	      repend
   2133  44d6					      endif
   2134  44d6				   playerL031_0
   2135  44d6		       00		      .byte.b	0
   2136  44d7				  -	      if	(<*) > (<(*+0))
   2137  44d7				  -	      repeat	($100-<*)
   2138  44d7				  -	      .byte	0
   2139  44d7				  -	      repend
   2140  44d7					      endif
   2141  44d7				   playerL032_1
   2142  44d7		       00		      .byte.b	0
   2143  44d8					      if	ECHOFIRST
      2716 bytes of ROM space left in bank 4
   2144  44d8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2145  44d8					      endif
   2146  44d8		       00 01	   ECHOFIRST  =	1
   2147  44d8
   2148  44d8
   2149  44d8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2150  44d8
   2151  44d8							; feel free to modify the score graphics - just keep each digit 8 high
   2152  44d8							; and keep the conditional compilation stuff intact
   2153  44d8				  -	      ifconst	ROM2k
   2154  44d8				  -	      ORG	$F7AC-8
   2155  44d8					      else
   2156  44d8					      ifconst	bankswitch
   2157  44d8				  -	      if	bankswitch == 8
   2158  44d8				  -	      ORG	$2F94-bscode_length
   2159  44d8				  -	      RORG	$FF94-bscode_length
   2160  44d8					      endif
   2161  44d8					      if	bankswitch == 16
   2162  4f74					      ORG	$4F94-bscode_length
   2163  4f74					      RORG	$FF94-bscode_length
   2164  4f74					      endif
   2165  4f74				  -	      if	bankswitch == 32
   2166  4f74				  -	      ORG	$8F94-bscode_length
   2167  4f74				  -	      RORG	$FF94-bscode_length
   2168  4f74					      endif
   2169  4f74				  -	      if	bankswitch == 64
   2170  4f74				  -	      ORG	$10F80-bscode_length
   2171  4f74				  -	      RORG	$1FF80-bscode_length
   2172  4f74					      endif
   2173  4f74				  -	      else
   2174  4f74				  -	      ORG	$FF9C
   2175  4f74					      endif
   2176  4f74					      endif
   2177  4f74
   2178  4f74							; font equates
   2179  4f74		       00 01	   .21stcentury =	1
   2180  4f74		       00 02	   alarmclock =	2
   2181  4f74		       00 03	   handwritten =	3
   2182  4f74		       00 04	   interrupted =	4
   2183  4f74		       00 05	   retroputer =	5
   2184  4f74		       00 06	   whimsey    =	6
   2185  4f74		       00 07	   tiny       =	7
   2186  4f74		       00 08	   hex	      =	8
   2187  4f74
   2188  4f74				  -	      ifconst	font
   2189  4f74				  -	      if	font == hex
   2190  4f74				  -	      ORG	. - 48
   2191  4f74				  -	      endif
   2192  4f74					      endif
   2193  4f74
   2194  4f74				   scoretable
   2195  4f74
   2196  4f74				  -	      ifconst	font
   2197  4f74				  -	      if	font == .21stcentury
   2198  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2199  4f74				  -	      endif
   2200  4f74				  -	      if	font == alarmclock
   2201  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2202  4f74				  -	      endif
   2203  4f74				  -	      if	font == handwritten
   2204  4f74				  -	      include	"score_graphics.asm.handwritten"
   2205  4f74				  -	      endif
   2206  4f74				  -	      if	font == interrupted
   2207  4f74				  -	      include	"score_graphics.asm.interrupted"
   2208  4f74				  -	      endif
   2209  4f74				  -	      if	font == retroputer
   2210  4f74				  -	      include	"score_graphics.asm.retroputer"
   2211  4f74				  -	      endif
   2212  4f74				  -	      if	font == whimsey
   2213  4f74				  -	      include	"score_graphics.asm.whimsey"
   2214  4f74				  -	      endif
   2215  4f74				  -	      if	font == tiny
   2216  4f74				  -	      include	"score_graphics.asm.tiny"
   2217  4f74				  -	      endif
   2218  4f74				  -	      if	font == hex
   2219  4f74				  -	      include	"score_graphics.asm.hex"
   2220  4f74				  -	      endif
   2221  4f74					      else		; default font
   2222  4f74
   2223  4f74		       3c		      .byte.b	%00111100
   2224  4f75		       66		      .byte.b	%01100110
   2225  4f76		       66		      .byte.b	%01100110
   2226  4f77		       66		      .byte.b	%01100110
   2227  4f78		       66		      .byte.b	%01100110
   2228  4f79		       66		      .byte.b	%01100110
   2229  4f7a		       66		      .byte.b	%01100110
   2230  4f7b		       3c		      .byte.b	%00111100
   2231  4f7c
   2232  4f7c		       7e		      .byte.b	%01111110
   2233  4f7d		       18		      .byte.b	%00011000
   2234  4f7e		       18		      .byte.b	%00011000
   2235  4f7f		       18		      .byte.b	%00011000
   2236  4f80		       18		      .byte.b	%00011000
   2237  4f81		       38		      .byte.b	%00111000
   2238  4f82		       18		      .byte.b	%00011000
   2239  4f83		       08		      .byte.b	%00001000
   2240  4f84
   2241  4f84		       7e		      .byte.b	%01111110
   2242  4f85		       60		      .byte.b	%01100000
   2243  4f86		       60		      .byte.b	%01100000
   2244  4f87		       3c		      .byte.b	%00111100
   2245  4f88		       06		      .byte.b	%00000110
   2246  4f89		       06		      .byte.b	%00000110
   2247  4f8a		       46		      .byte.b	%01000110
   2248  4f8b		       3c		      .byte.b	%00111100
   2249  4f8c
   2250  4f8c		       3c		      .byte.b	%00111100
   2251  4f8d		       46		      .byte.b	%01000110
   2252  4f8e		       06		      .byte.b	%00000110
   2253  4f8f		       06		      .byte.b	%00000110
   2254  4f90		       1c		      .byte.b	%00011100
   2255  4f91		       06		      .byte.b	%00000110
   2256  4f92		       46		      .byte.b	%01000110
   2257  4f93		       3c		      .byte.b	%00111100
   2258  4f94
   2259  4f94		       0c		      .byte.b	%00001100
   2260  4f95		       0c		      .byte.b	%00001100
   2261  4f96		       7e		      .byte.b	%01111110
   2262  4f97		       4c		      .byte.b	%01001100
   2263  4f98		       4c		      .byte.b	%01001100
   2264  4f99		       2c		      .byte.b	%00101100
   2265  4f9a		       1c		      .byte.b	%00011100
   2266  4f9b		       0c		      .byte.b	%00001100
   2267  4f9c
   2268  4f9c		       3c		      .byte.b	%00111100
   2269  4f9d		       46		      .byte.b	%01000110
   2270  4f9e		       06		      .byte.b	%00000110
   2271  4f9f		       06		      .byte.b	%00000110
   2272  4fa0		       3c		      .byte.b	%00111100
   2273  4fa1		       60		      .byte.b	%01100000
   2274  4fa2		       60		      .byte.b	%01100000
   2275  4fa3		       7e		      .byte.b	%01111110
   2276  4fa4
   2277  4fa4		       3c		      .byte.b	%00111100
   2278  4fa5		       66		      .byte.b	%01100110
   2279  4fa6		       66		      .byte.b	%01100110
   2280  4fa7		       66		      .byte.b	%01100110
   2281  4fa8		       7c		      .byte.b	%01111100
   2282  4fa9		       60		      .byte.b	%01100000
   2283  4faa		       62		      .byte.b	%01100010
   2284  4fab		       3c		      .byte.b	%00111100
   2285  4fac
   2286  4fac		       30		      .byte.b	%00110000
   2287  4fad		       30		      .byte.b	%00110000
   2288  4fae		       30		      .byte.b	%00110000
   2289  4faf		       18		      .byte.b	%00011000
   2290  4fb0		       0c		      .byte.b	%00001100
   2291  4fb1		       06		      .byte.b	%00000110
   2292  4fb2		       42		      .byte.b	%01000010
   2293  4fb3		       3e		      .byte.b	%00111110
   2294  4fb4
   2295  4fb4		       3c		      .byte.b	%00111100
   2296  4fb5		       66		      .byte.b	%01100110
   2297  4fb6		       66		      .byte.b	%01100110
   2298  4fb7		       66		      .byte.b	%01100110
   2299  4fb8		       3c		      .byte.b	%00111100
   2300  4fb9		       66		      .byte.b	%01100110
   2301  4fba		       66		      .byte.b	%01100110
   2302  4fbb		       3c		      .byte.b	%00111100
   2303  4fbc
   2304  4fbc		       3c		      .byte.b	%00111100
   2305  4fbd		       46		      .byte.b	%01000110
   2306  4fbe		       06		      .byte.b	%00000110
   2307  4fbf		       3e		      .byte.b	%00111110
   2308  4fc0		       66		      .byte.b	%01100110
   2309  4fc1		       66		      .byte.b	%01100110
   2310  4fc2		       66		      .byte.b	%01100110
   2311  4fc3		       3c		      .byte.b	%00111100
   2312  4fc4
   2313  4fc4					      ifnconst	DPC_kernel_options
   2314  4fc4
   2315  4fc4		       00		      .byte.b	%00000000
   2316  4fc5		       00		      .byte.b	%00000000
   2317  4fc6		       00		      .byte.b	%00000000
   2318  4fc7		       00		      .byte.b	%00000000
   2319  4fc8		       00		      .byte.b	%00000000
   2320  4fc9		       00		      .byte.b	%00000000
   2321  4fca		       00		      .byte.b	%00000000
   2322  4fcb		       00		      .byte.b	%00000000
   2323  4fcc
   2324  4fcc					      endif
   2325  4fcc
   2326  4fcc					      endif
   2327  4fcc
   2328  4fcc				  -	      ifconst	ROM2k
   2329  4fcc				  -	      ORG	$F7FC
   2330  4fcc					      else
   2331  4fcc					      ifconst	bankswitch
   2332  4fcc				  -	      if	bankswitch == 8
   2333  4fcc				  -	      ORG	$2FF4-bscode_length
   2334  4fcc				  -	      RORG	$FFF4-bscode_length
   2335  4fcc					      endif
   2336  4fcc					      if	bankswitch == 16
   2337  4fd4					      ORG	$4FF4-bscode_length
   2338  4fd4					      RORG	$FFF4-bscode_length
   2339  4fd4					      endif
   2340  4fd4				  -	      if	bankswitch == 32
   2341  4fd4				  -	      ORG	$8FF4-bscode_length
   2342  4fd4				  -	      RORG	$FFF4-bscode_length
   2343  4fd4					      endif
   2344  4fd4				  -	      if	bankswitch == 64
   2345  4fd4				  -	      ORG	$10FE0-bscode_length
   2346  4fd4				  -	      RORG	$1FFE0-bscode_length
   2347  4fd4					      endif
   2348  4fd4				  -	      else
   2349  4fd4				  -	      ORG	$FFFC
   2350  4fd4					      endif
   2351  4fd4					      endif
   2352  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2353  4fd4
   2354  4fd4							; every bank has this stuff at the same place
   2355  4fd4							; this code can switch to/from any bank at any entry point
   2356  4fd4							; and can preserve register values
   2357  4fd4							; note: lines not starting with a space are not placed in all banks
   2358  4fd4							;
   2359  4fd4							; line below tells the compiler how long this is - do not remove
   2360  4fd4							;size=32
   2361  4fd4
   2362  4fd4				   begin_bscode
   2363  4fd4		       a2 ff		      ldx	#$ff
   2364  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2365  4fd6				  -	      stx	FASTFETCH
   2366  4fd6					      endif
   2367  4fd6		       9a		      txs
   2368  4fd7				  -	      if	bankswitch == 64
   2369  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2370  4fd7					      else
   2371  4fd7		       a9 f2		      lda	#>(start-1)
   2372  4fd9					      endif
   2373  4fd9		       48		      pha
   2374  4fda		       a9 4f		      lda	#<(start-1)
   2375  4fdc		       48		      pha
   2376  4fdd
   2377  4fdd				   BS_return
   2378  4fdd		       48		      pha
   2379  4fde		       8a		      txa
   2380  4fdf		       48		      pha
   2381  4fe0		       ba		      tsx
   2382  4fe1
   2383  4fe1					      if	bankswitch != 64
   2384  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2385  4fe3
   2386  4fe3		       2a		      rol
   2387  4fe4		       2a		      rol
   2388  4fe5		       2a		      rol
   2389  4fe6		       2a		      rol
   2390  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2391  4fe9		       aa		      tax
   2392  4fea		       e8		      inx
   2393  4feb				  -	      else
   2394  4feb				  -	      lda	4,x	; get high byte of return address
   2395  4feb				  -	      tay
   2396  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2397  4feb				  -	      sta	4,x
   2398  4feb				  -	      tya
   2399  4feb				  -	      lsr
   2400  4feb				  -	      lsr
   2401  4feb				  -	      lsr
   2402  4feb				  -	      lsr
   2403  4feb				  -	      tax
   2404  4feb				  -	      inx
   2405  4feb					      endif
   2406  4feb
   2407  4feb				   BS_jsr
   2408  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2409  4fee		       68		      pla
   2410  4fef		       aa		      tax
   2411  4ff0		       68		      pla
   2412  4ff1		       60		      rts
   2413  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2414  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2415  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2416  4ff2					      endif
   2417  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2418  4ff2
   2419  4ff2					      ifconst	bankswitch
   2420  4ff2				  -	      if	bankswitch == 8
   2421  4ff2				  -	      ORG	$2FFC
   2422  4ff2				  -	      RORG	$FFFC
   2423  4ff2					      endif
   2424  4ff2					      if	bankswitch == 16
   2425  4ffc					      ORG	$4FFC
   2426  4ffc					      RORG	$FFFC
   2427  4ffc					      endif
   2428  4ffc				  -	      if	bankswitch == 32
   2429  4ffc				  -	      ORG	$8FFC
   2430  4ffc				  -	      RORG	$FFFC
   2431  4ffc					      endif
   2432  4ffc				  -	      if	bankswitch == 64
   2433  4ffc				  -	      ORG	$10FF0
   2434  4ffc				  -	      RORG	$1FFF0
   2435  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2436  4ffc				  -	      ORG	$10FF8
   2437  4ffc				  -	      RORG	$1FFF8
   2438  4ffc				  -	      ifconst	superchip
   2439  4ffc				  -	      .byte	"E","F","S","C"
   2440  4ffc				  -	      else
   2441  4ffc				  -	      .byte	"E","F","E","F"
   2442  4ffc				  -	      endif
   2443  4ffc				  -	      ORG	$10FFC
   2444  4ffc				  -	      RORG	$1FFFC
   2445  4ffc					      endif
   2446  4ffc				  -	      else
   2447  4ffc				  -	      ifconst	ROM2k
   2448  4ffc				  -	      ORG	$F7FC
   2449  4ffc				  -	      else
   2450  4ffc				  -	      ORG	$FFFC
   2451  4ffc				  -	      endif
   2452  4ffc					      endif
   2453  4ffc		       50 f2		      .word.w	(start & $ffff)
   2454  4ffe		       50 f2		      .word.w	(start & $ffff)

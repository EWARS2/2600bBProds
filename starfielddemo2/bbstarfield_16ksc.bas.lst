------- FILE C:\Users\jefma\Desktop\gaem\starfielddemo2\bbstarfield_16ksc.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\starfielddemo2\bbstarfield_16ksc.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE C:\Users\jefma\Desktop\gaem\starfielddemo2\bbstarfield_16ksc.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   effect     =	b
      5  5000 ????
      6  5000 ????	       00 d4	   frame      =	a
      7  5000 ????
      8  5000 ????	       00 01	   no_blank_lines =	1
      9  5000 ????	       00 01	   superchip  =	1
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       10 d0	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE C:\Users\jefma\Desktop\gaem\starfielddemo2\bbstarfield_16ksc.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 d5	   effect     =	b
      5  5000 ????
      6  5000 ????	       00 d4	   frame      =	a
      7  5000 ????
      8  5000 ????	       00 01	   no_blank_lines =	1
      9  5000 ????	       00 01	   superchip  =	1
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE C:\Users\jefma\Desktop\gaem\starfielddemo2\bbstarfield_16ksc.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .
     33  1100							; 
     34  1100
     35  1100				   .L00 		;  set romsize 16kSC
     36  1100
     37  1100				   .
     38  1100							; 
     39  1100
     40  1100				   .L01 		;  rem ** Demo of the Cosmic Ark starfield effect in bB
     41  1100
     42  1100				   .
     43  1100							; 
     44  1100
     45  1100				   .L02 		;  rem ** no_blank_lines takes away missile0, so we'll create our starfield
     46  1100
     47  1100				   .L03 		;  rem ** using it.
     48  1100
     49  1100				   .L04 		;  set kernel_options no_blank_lines
     50  1100
     51  1100				   .
     52  1100							; 
     53  1100
     54  1100				   .L05 		;  scorecolor = $0f
     55  1100
     56  1100		       a9 0f		      LDA	#$0f
     57  1102		       85 a3		      STA	scorecolor
     58  1104				   .
     59  1104							; 
     60  1104
     61  1104				   .L06 		;  dim frame = a
     62  1104
     63  1104				   .L07 		;  dim effect = b
     64  1104
     65  1104				   .
     66  1104							; 
     67  1104
     68  1104				   .L08 		;  CTRLPF = 5
     69  1104
     70  1104		       a9 05		      LDA	#5
     71  1106		       85 0a		      STA	CTRLPF
     72  1108				   .L09 		;  playfield:
     73  1108
     74  1108				  -	      ifconst	pfres
     75  1108				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
     76  1108					      else
     77  1108		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
     78  110a					      endif
     79  110a		       4c 39 91 	      jmp	pflabel0
     80  110d				   PF_data0
     81  110d		       00 00		      .byte.b	%00000000, %00000000
     82  110f					      if	(pfwidth>2)
     83  110f		       00 00		      .byte.b	%00000000, %00000000
     84  1111					      endif
     85  1111		       00 00		      .byte.b	%00000000, %00000000
     86  1113					      if	(pfwidth>2)
     87  1113		       00 00		      .byte.b	%00000000, %00000000
     88  1115					      endif
     89  1115		       00 00		      .byte.b	%00000000, %00000000
     90  1117					      if	(pfwidth>2)
     91  1117		       00 00		      .byte.b	%00000000, %00000000
     92  1119					      endif
     93  1119		       00 00		      .byte.b	%00000000, %00000000
     94  111b					      if	(pfwidth>2)
     95  111b		       00 00		      .byte.b	%00000000, %00000000
     96  111d					      endif
     97  111d		       00 00		      .byte.b	%00000000, %00000000
     98  111f					      if	(pfwidth>2)
     99  111f		       00 00		      .byte.b	%00000000, %00000000
    100  1121					      endif
    101  1121		       00 00		      .byte.b	%00000000, %00000000
    102  1123					      if	(pfwidth>2)
    103  1123		       00 00		      .byte.b	%00000000, %00000000
    104  1125					      endif
    105  1125		       00 00		      .byte.b	%00000000, %00000000
    106  1127					      if	(pfwidth>2)
    107  1127		       00 00		      .byte.b	%00000000, %00000000
    108  1129					      endif
    109  1129		       00 00		      .byte.b	%00000000, %00000000
    110  112b					      if	(pfwidth>2)
    111  112b		       00 00		      .byte.b	%00000000, %00000000
    112  112d					      endif
    113  112d		       03 ff		      .byte.b	%00000011, %11111111
    114  112f					      if	(pfwidth>2)
    115  112f		       ff 03		      .byte.b	%11111111, %00000011
    116  1131					      endif
    117  1131		       1f ff		      .byte.b	%00011111, %11111111
    118  1133					      if	(pfwidth>2)
    119  1133		       ff 1f		      .byte.b	%11111111, %00011111
    120  1135					      endif
    121  1135		       ff ff		      .byte.b	%11111111, %11111111
    122  1137					      if	(pfwidth>2)
    123  1137		       ff ff		      .byte.b	%11111111, %11111111
    124  1139					      endif
    125  1139				   pflabel0
    126  1139		       bd 0d 91 	      lda	PF_data0,x
    127  113c		       9d 50 10 	      sta	playfield-128,x
    128  113f		       ca		      dex
    129  1140		       10 f7		      bpl	pflabel0
    130  1142				   .
    131  1142							; 
    132  1142
    133  1142				   .L010		;  player0:
    134  1142
    135  1142		       a2 44		      LDX	#<playerL010_0
    136  1144		       86 8a		      STX	player0pointerlo
    137  1146		       a9 f6		      LDA	#>playerL010_0
    138  1148		       85 8b		      STA	player0pointerhi
    139  114a		       a9 04		      LDA	#4
    140  114c		       85 8e		      STA	player0height
    141  114e				   .
    142  114e							; 
    143  114e
    144  114e				   .L011		;  player1:
    145  114e
    146  114e		       a2 49		      LDX	#<playerL011_1
    147  1150		       86 8c		      STX	player1pointerlo
    148  1152		       a9 f6		      LDA	#>playerL011_1
    149  1154		       85 8d		      STA	player1pointerhi
    150  1156		       a9 04		      LDA	#4
    151  1158		       85 8f		      STA	player1height
    152  115a				   .
    153  115a							; 
    154  115a
    155  115a				   .
    156  115a							; 
    157  115a
    158  115a				   .L012		;  rem ** position the other objects, to prove we still can
    159  115a
    160  115a				   .L013		;  player0x = 50 : player0y = 40
    161  115a
    162  115a		       a9 32		      LDA	#50
    163  115c		       85 80		      STA	player0x
    164  115e		       a9 28		      LDA	#40
    165  1160		       85 85		      STA	player0y
    166  1162				   .L014		;  player1x = 120 : player1y = 40
    167  1162
    168  1162		       a9 78		      LDA	#120
    169  1164		       85 81		      STA	player1x
    170  1166		       a9 28		      LDA	#40
    171  1168		       85 86		      STA	player1y
    172  116a				   .L015		;  ballx = 70 : bally = 40 : ballheight = 6
    173  116a
    174  116a		       a9 46		      LDA	#70
    175  116c		       85 84		      STA	ballx
    176  116e		       a9 28		      LDA	#40
    177  1170		       85 89		      STA	bally
    178  1172		       a9 06		      LDA	#6
    179  1174		       85 92		      STA	ballheight
    180  1176				   .L016		;  missile1x = 100 : missile1y = 40 : missile1height = 6
    181  1176
    182  1176		       a9 64		      LDA	#100
    183  1178		       85 83		      STA	missile1x
    184  117a		       a9 28		      LDA	#40
    185  117c		       85 88		      STA	missile1y
    186  117e		       a9 06		      LDA	#6
    187  1180		       85 87		      STA	missile1height
    188  1182				   .
    189  1182							; 
    190  1182
    191  1182				   .
    192  1182							; 
    193  1182
    194  1182				   .mainloop
    195  1182							; mainloop
    196  1182
    197  1182				   .L017		;  COLUP0 = $0A
    198  1182
    199  1182		       a9 0a		      LDA	#$0A
    200  1184		       85 06		      STA	COLUP0
    201  1186				   .L018		;  COLUP1 = $44
    202  1186
    203  1186		       a9 44		      LDA	#$44
    204  1188		       85 07		      STA	COLUP1
    205  118a				   .L019		;  COLUBK = $80
    206  118a
    207  118a		       a9 80		      LDA	#$80
    208  118c		       85 09		      STA	COLUBK
    209  118e				   .L020		;  COLUPF = $B4
    210  118e
    211  118e		       a9 b4		      LDA	#$B4
    212  1190		       85 08		      STA	COLUPF
    213  1192				   .
    214  1192							; 
    215  1192
    216  1192				   .L021		;  player0x = player0x - 1
    217  1192
    218  1192		       c6 80		      DEC	player0x
    219  1194				   .
    220  1194							; 
    221  1194
    222  1194				   .L022		;  frame = frame + 1
    223  1194
    224  1194		       e6 d4		      INC	frame
    225  1196				   .L023		;  if frame = 0 then effect = effect + 1
    226  1196
    227  1196		       a5 d4		      LDA	frame
    228  1198		       c9 00		      CMP	#0
    229  119a		       d0 02		      BNE	.skipL023
    230  119c				   .condpart0
    231  119c		       e6 d5		      INC	effect
    232  119e				   .skipL023
    233  119e				   .L024		;  if effect > 6 then effect = 0
    234  119e
    235  119e		       a9 06		      LDA	#6
    236  11a0		       c5 d5		      CMP	effect
    237  11a2		       b0 04		      BCS	.skipL024
    238  11a4				   .condpart1
    239  11a4		       a9 00		      LDA	#0
    240  11a6		       85 d5		      STA	effect
    241  11a8				   .skipL024
    242  11a8				   .
    243  11a8							; 
    244  11a8
    245  11a8				   .L025		;  ENAM0 = 2  :  rem ** set ENAM0=0 when you want the stars to be gone
    246  11a8
    247  11a8		       a9 02		      LDA	#2
    248  11aa		       85 1d		      STA	ENAM0
    249  11ac				   .
    250  11ac							; 
    251  11ac
    252  11ac				   .L026		;  rem ** no adjustment leaves the stars in place
    253  11ac
    254  11ac				   .L027		;  if effect = 0 then score = 0
    255  11ac
    256  11ac		       a5 d5		      LDA	effect
    257  11ae		       c9 00		      CMP	#0
    258  11b0		       d0 0c		      BNE	.skipL027
    259  11b2				   .condpart2
    260  11b2		       a9 00		      LDA	#$00
    261  11b4		       85 95		      STA	score+2
    262  11b6		       a9 00		      LDA	#$00
    263  11b8		       85 94		      STA	score+1
    264  11ba		       a9 00		      LDA	#$00
    265  11bc		       85 93		      STA	score
    266  11be				   .skipL027
    267  11be				   .
    268  11be							; 
    269  11be
    270  11be				   .L028		;  rem ** Adjusting missile0x by +1 or -1 moves the stars right or left
    271  11be
    272  11be				   .L029		;  if effect = 1 then missile0x = missile0x - 1 : score = 1
    273  11be
    274  11be		       a5 d5		      LDA	effect
    275  11c0		       c9 01		      CMP	#1
    276  11c2		       d0 0e		      BNE	.skipL029
    277  11c4				   .condpart3
    278  11c4		       c6 82		      DEC	missile0x
    279  11c6		       a9 01		      LDA	#$01
    280  11c8		       85 95		      STA	score+2
    281  11ca		       a9 00		      LDA	#$00
    282  11cc		       85 94		      STA	score+1
    283  11ce		       a9 00		      LDA	#$00
    284  11d0		       85 93		      STA	score
    285  11d2				   .skipL029
    286  11d2				   .
    287  11d2							; 
    288  11d2
    289  11d2				   .L030		;  rem ** +8 or -8 moves the stars diagonally, and displays them closer together
    290  11d2
    291  11d2				   .L031		;  if effect = 2 then missile0x = missile0x - 8 : score = 8
    292  11d2
    293  11d2		       a5 d5		      LDA	effect
    294  11d4		       c9 02		      CMP	#2
    295  11d6		       d0 13		      BNE	.skipL031
    296  11d8				   .condpart4
    297  11d8		       a5 82		      LDA	missile0x
    298  11da		       38		      SEC
    299  11db		       e9 08		      SBC	#8
    300  11dd		       85 82		      STA	missile0x
    301  11df		       a9 08		      LDA	#$08
    302  11e1		       85 95		      STA	score+2
    303  11e3		       a9 00		      LDA	#$00
    304  11e5		       85 94		      STA	score+1
    305  11e7		       a9 00		      LDA	#$00
    306  11e9		       85 93		      STA	score
    307  11eb				   .skipL031
    308  11eb				   .
    309  11eb							; 
    310  11eb
    311  11eb				   .L032		;  rem ** +16 or -16 moves them diagonally, and displays them farther apart 
    312  11eb
    313  11eb				   .L033		;  if effect = 3 then missile0x = missile0x + 16 : score = 16
    314  11eb
    315  11eb		       a5 d5		      LDA	effect
    316  11ed		       c9 03		      CMP	#3
    317  11ef		       d0 13		      BNE	.skipL033
    318  11f1				   .condpart5
    319  11f1		       a5 82		      LDA	missile0x
    320  11f3		       18		      CLC
    321  11f4		       69 10		      ADC	#16
    322  11f6		       85 82		      STA	missile0x
    323  11f8		       a9 16		      LDA	#$16
    324  11fa		       85 95		      STA	score+2
    325  11fc		       a9 00		      LDA	#$00
    326  11fe		       85 94		      STA	score+1
    327  1200		       a9 00		      LDA	#$00
    328  1202		       85 93		      STA	score
    329  1204				   .skipL033
    330  1204				   .
    331  1204							; 
    332  1204
    333  1204				   .L034		;  rem ** +12 or -12 is quick and nearly vertical
    334  1204
    335  1204				   .L035		;  if effect = 4 then missile0x = missile0x - 12 : score = 12
    336  1204
    337  1204		       a5 d5		      LDA	effect
    338  1206		       c9 04		      CMP	#4
    339  1208		       d0 13		      BNE	.skipL035
    340  120a				   .condpart6
    341  120a		       a5 82		      LDA	missile0x
    342  120c		       38		      SEC
    343  120d		       e9 0c		      SBC	#12
    344  120f		       85 82		      STA	missile0x
    345  1211		       a9 12		      LDA	#$12
    346  1213		       85 95		      STA	score+2
    347  1215		       a9 00		      LDA	#$00
    348  1217		       85 94		      STA	score+1
    349  1219		       a9 00		      LDA	#$00
    350  121b		       85 93		      STA	score
    351  121d				   .skipL035
    352  121d				   .
    353  121d							; 
    354  121d
    355  121d				   .L036		;  rem ** +48 or -48 is a slow diagonal effect
    356  121d
    357  121d				   .L037		;  if effect = 5 then missile0x = missile0x - 48 : score = 48
    358  121d
    359  121d		       a5 d5		      LDA	effect
    360  121f		       c9 05		      CMP	#5
    361  1221		       d0 13		      BNE	.skipL037
    362  1223				   .condpart7
    363  1223		       a5 82		      LDA	missile0x
    364  1225		       38		      SEC
    365  1226		       e9 30		      SBC	#48
    366  1228		       85 82		      STA	missile0x
    367  122a		       a9 48		      LDA	#$48
    368  122c		       85 95		      STA	score+2
    369  122e		       a9 00		      LDA	#$00
    370  1230		       85 94		      STA	score+1
    371  1232		       a9 00		      LDA	#$00
    372  1234		       85 93		      STA	score
    373  1236				   .skipL037
    374  1236				   .
    375  1236							; 
    376  1236
    377  1236				   .L038		;  rem ** +48 or -48 is a slow diagonal effect
    378  1236
    379  1236				   .L039		;  if effect = 6 then missile0x = missile0x + 32 : score = 32
    380  1236
    381  1236		       a5 d5		      LDA	effect
    382  1238		       c9 06		      CMP	#6
    383  123a		       d0 13		      BNE	.skipL039
    384  123c				   .condpart8
    385  123c		       a5 82		      LDA	missile0x
    386  123e		       18		      CLC
    387  123f		       69 20		      ADC	#32
    388  1241		       85 82		      STA	missile0x
    389  1243		       a9 32		      LDA	#$32
    390  1245		       85 95		      STA	score+2
    391  1247		       a9 00		      LDA	#$00
    392  1249		       85 94		      STA	score+1
    393  124b		       a9 00		      LDA	#$00
    394  124d		       85 93		      STA	score
    395  124f				   .skipL039
    396  124f				   .
    397  124f							; 
    398  124f
    399  124f				   .L040		;  rem ** You need to ensure the missile0x position ranges from 0-159. 
    400  124f
    401  124f				   .L041		;  rem ** If missile0x is 0 and decreases, then set it to 159. 
    402  124f
    403  124f				   .L042		;  rem ** If missile0x is 159 and increases, set it to 0.
    404  124f
    405  124f				   .L043		;  if missile0x > 200 then missile0x = missile0x + 160
    406  124f
    407  124f		       a9 c8		      LDA	#200
    408  1251		       c5 82		      CMP	missile0x
    409  1253		       b0 07		      BCS	.skipL043
    410  1255				   .condpart9
    411  1255		       a5 82		      LDA	missile0x
    412  1257		       18		      CLC
    413  1258		       69 a0		      ADC	#160
    414  125a		       85 82		      STA	missile0x
    415  125c				   .skipL043
    416  125c				   .L044		;  if missile0x > 159 then missile0x = missile0x - 160
    417  125c
    418  125c		       a9 9f		      LDA	#159
    419  125e		       c5 82		      CMP	missile0x
    420  1260		       b0 07		      BCS	.skipL044
    421  1262				   .condpart10
    422  1262		       a5 82		      LDA	missile0x
    423  1264		       38		      SEC
    424  1265		       e9 a0		      SBC	#160
    425  1267		       85 82		      STA	missile0x
    426  1269				   .skipL044
    427  1269				   .
    428  1269							; 
    429  1269
    430  1269				   .L045		;  drawscreen
    431  1269
    432  1269		       85 ee		      sta	temp7
    433  126b		       a9 92		      lda	#>(ret_point1-1)
    434  126d		       48		      pha
    435  126e		       a9 80		      lda	#<(ret_point1-1)
    436  1270		       48		      pha
    437  1271		       a9 f5		      lda	#>(drawscreen-1)
    438  1273		       48		      pha
    439  1274		       a9 80		      lda	#<(drawscreen-1)
    440  1276		       48		      pha
    441  1277		       a5 ee		      lda	temp7
    442  1279		       48		      pha
    443  127a		       8a		      txa
    444  127b		       48		      pha
    445  127c		       a2 04		      ldx	#4
    446  127e		       4c eb ff 	      jmp	BS_jsr
    447  1281				   ret_point1
    448  1281				   .L046		;  goto mainloop
    449  1281
    450  1281		       4c 82 91 	      jmp	.mainloop
    451  1284
    452  1284				   .
    453  1284							; 
    454  1284
    455  1284				   .L047		;  bank 2
    456  1284
    457  1284					      if	ECHO1
      3408 bytes of ROM space left in bank 1
    458  1284					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    459  1284					      endif
    460  1284		       00 01	   ECHO1      =	1
    461  1fd4					      ORG	$1FF4-bscode_length
    462  1fd4					      RORG	$9FF4-bscode_length
    463  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    464  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    465  1fd6				  -	      stx	FASTFETCH
    466  1fd6					      endif
    467  1fd6		       9a		      txs
    468  1fd7				  -	      if	bankswitch == 64
    469  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    470  1fd7					      else
    471  1fd7		       a9 f3		      lda	#>(start-1)
    472  1fd9					      endif
    473  1fd9		       48		      pha
    474  1fda		       a9 4f		      lda	#<(start-1)
    475  1fdc		       48		      pha
    476  1fdd		       48		      pha
    477  1fde		       8a		      txa
    478  1fdf		       48		      pha
    479  1fe0		       ba		      tsx
    480  1fe1					      if	bankswitch != 64
    481  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    482  1fe3		       2a		      rol
    483  1fe4		       2a		      rol
    484  1fe5		       2a		      rol
    485  1fe6		       2a		      rol
    486  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    487  1fe9		       aa		      tax
    488  1fea		       e8		      inx
    489  1feb				  -	      else
    490  1feb				  -	      lda	4,x	; get high byte of return address
    491  1feb				  -	      tay
    492  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    493  1feb				  -	      sta	4,x
    494  1feb				  -	      tya
    495  1feb				  -	      lsr
    496  1feb				  -	      lsr
    497  1feb				  -	      lsr
    498  1feb				  -	      lsr
    499  1feb				  -	      tax
    500  1feb				  -	      inx
    501  1feb					      endif
    502  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    503  1fee		       68		      pla
    504  1fef		       aa		      tax
    505  1ff0		       68		      pla
    506  1ff1		       60		      rts
    507  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    508  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    509  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    510  1ff2					      endif
    511  1ffc					      ORG	$1FFC
    512  1ffc					      RORG	$9FFC
    513  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    514  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    515  2000					      ORG	$2000
    516  2000					      RORG	$B000
    517  2000					      repeat	256
    518  2000		       ff		      .byte.b	$ff
    517  2000					      repend
    518  2001		       ff		      .byte.b	$ff
    517  2001					      repend
    518  2002		       ff		      .byte.b	$ff
    517  2002					      repend
    518  2003		       ff		      .byte.b	$ff
    517  2003					      repend
    518  2004		       ff		      .byte.b	$ff
    517  2004					      repend
    518  2005		       ff		      .byte.b	$ff
    517  2005					      repend
    518  2006		       ff		      .byte.b	$ff
    517  2006					      repend
    518  2007		       ff		      .byte.b	$ff
    517  2007					      repend
    518  2008		       ff		      .byte.b	$ff
    517  2008					      repend
    518  2009		       ff		      .byte.b	$ff
    517  2009					      repend
    518  200a		       ff		      .byte.b	$ff
    517  200a					      repend
    518  200b		       ff		      .byte.b	$ff
    517  200b					      repend
    518  200c		       ff		      .byte.b	$ff
    517  200c					      repend
    518  200d		       ff		      .byte.b	$ff
    517  200d					      repend
    518  200e		       ff		      .byte.b	$ff
    517  200e					      repend
    518  200f		       ff		      .byte.b	$ff
    517  200f					      repend
    518  2010		       ff		      .byte.b	$ff
    517  2010					      repend
    518  2011		       ff		      .byte.b	$ff
    517  2011					      repend
    518  2012		       ff		      .byte.b	$ff
    517  2012					      repend
    518  2013		       ff		      .byte.b	$ff
    517  2013					      repend
    518  2014		       ff		      .byte.b	$ff
    517  2014					      repend
    518  2015		       ff		      .byte.b	$ff
    517  2015					      repend
    518  2016		       ff		      .byte.b	$ff
    517  2016					      repend
    518  2017		       ff		      .byte.b	$ff
    517  2017					      repend
    518  2018		       ff		      .byte.b	$ff
    517  2018					      repend
    518  2019		       ff		      .byte.b	$ff
    517  2019					      repend
    518  201a		       ff		      .byte.b	$ff
    517  201a					      repend
    518  201b		       ff		      .byte.b	$ff
    517  201b					      repend
    518  201c		       ff		      .byte.b	$ff
    517  201c					      repend
    518  201d		       ff		      .byte.b	$ff
    517  201d					      repend
    518  201e		       ff		      .byte.b	$ff
    517  201e					      repend
    518  201f		       ff		      .byte.b	$ff
    517  201f					      repend
    518  2020		       ff		      .byte.b	$ff
    517  2020					      repend
    518  2021		       ff		      .byte.b	$ff
    517  2021					      repend
    518  2022		       ff		      .byte.b	$ff
    517  2022					      repend
    518  2023		       ff		      .byte.b	$ff
    517  2023					      repend
    518  2024		       ff		      .byte.b	$ff
    517  2024					      repend
    518  2025		       ff		      .byte.b	$ff
    517  2025					      repend
    518  2026		       ff		      .byte.b	$ff
    517  2026					      repend
    518  2027		       ff		      .byte.b	$ff
    517  2027					      repend
    518  2028		       ff		      .byte.b	$ff
    517  2028					      repend
    518  2029		       ff		      .byte.b	$ff
    517  2029					      repend
    518  202a		       ff		      .byte.b	$ff
    517  202a					      repend
    518  202b		       ff		      .byte.b	$ff
    517  202b					      repend
    518  202c		       ff		      .byte.b	$ff
    517  202c					      repend
    518  202d		       ff		      .byte.b	$ff
    517  202d					      repend
    518  202e		       ff		      .byte.b	$ff
    517  202e					      repend
    518  202f		       ff		      .byte.b	$ff
    517  202f					      repend
    518  2030		       ff		      .byte.b	$ff
    517  2030					      repend
    518  2031		       ff		      .byte.b	$ff
    517  2031					      repend
    518  2032		       ff		      .byte.b	$ff
    517  2032					      repend
    518  2033		       ff		      .byte.b	$ff
    517  2033					      repend
    518  2034		       ff		      .byte.b	$ff
    517  2034					      repend
    518  2035		       ff		      .byte.b	$ff
    517  2035					      repend
    518  2036		       ff		      .byte.b	$ff
    517  2036					      repend
    518  2037		       ff		      .byte.b	$ff
    517  2037					      repend
    518  2038		       ff		      .byte.b	$ff
    517  2038					      repend
    518  2039		       ff		      .byte.b	$ff
    517  2039					      repend
    518  203a		       ff		      .byte.b	$ff
    517  203a					      repend
    518  203b		       ff		      .byte.b	$ff
    517  203b					      repend
    518  203c		       ff		      .byte.b	$ff
    517  203c					      repend
    518  203d		       ff		      .byte.b	$ff
    517  203d					      repend
    518  203e		       ff		      .byte.b	$ff
    517  203e					      repend
    518  203f		       ff		      .byte.b	$ff
    517  203f					      repend
    518  2040		       ff		      .byte.b	$ff
    517  2040					      repend
    518  2041		       ff		      .byte.b	$ff
    517  2041					      repend
    518  2042		       ff		      .byte.b	$ff
    517  2042					      repend
    518  2043		       ff		      .byte.b	$ff
    517  2043					      repend
    518  2044		       ff		      .byte.b	$ff
    517  2044					      repend
    518  2045		       ff		      .byte.b	$ff
    517  2045					      repend
    518  2046		       ff		      .byte.b	$ff
    517  2046					      repend
    518  2047		       ff		      .byte.b	$ff
    517  2047					      repend
    518  2048		       ff		      .byte.b	$ff
    517  2048					      repend
    518  2049		       ff		      .byte.b	$ff
    517  2049					      repend
    518  204a		       ff		      .byte.b	$ff
    517  204a					      repend
    518  204b		       ff		      .byte.b	$ff
    517  204b					      repend
    518  204c		       ff		      .byte.b	$ff
    517  204c					      repend
    518  204d		       ff		      .byte.b	$ff
    517  204d					      repend
    518  204e		       ff		      .byte.b	$ff
    517  204e					      repend
    518  204f		       ff		      .byte.b	$ff
    517  204f					      repend
    518  2050		       ff		      .byte.b	$ff
    517  2050					      repend
    518  2051		       ff		      .byte.b	$ff
    517  2051					      repend
    518  2052		       ff		      .byte.b	$ff
    517  2052					      repend
    518  2053		       ff		      .byte.b	$ff
    517  2053					      repend
    518  2054		       ff		      .byte.b	$ff
    517  2054					      repend
    518  2055		       ff		      .byte.b	$ff
    517  2055					      repend
    518  2056		       ff		      .byte.b	$ff
    517  2056					      repend
    518  2057		       ff		      .byte.b	$ff
    517  2057					      repend
    518  2058		       ff		      .byte.b	$ff
    517  2058					      repend
    518  2059		       ff		      .byte.b	$ff
    517  2059					      repend
    518  205a		       ff		      .byte.b	$ff
    517  205a					      repend
    518  205b		       ff		      .byte.b	$ff
    517  205b					      repend
    518  205c		       ff		      .byte.b	$ff
    517  205c					      repend
    518  205d		       ff		      .byte.b	$ff
    517  205d					      repend
    518  205e		       ff		      .byte.b	$ff
    517  205e					      repend
    518  205f		       ff		      .byte.b	$ff
    517  205f					      repend
    518  2060		       ff		      .byte.b	$ff
    517  2060					      repend
    518  2061		       ff		      .byte.b	$ff
    517  2061					      repend
    518  2062		       ff		      .byte.b	$ff
    517  2062					      repend
    518  2063		       ff		      .byte.b	$ff
    517  2063					      repend
    518  2064		       ff		      .byte.b	$ff
    517  2064					      repend
    518  2065		       ff		      .byte.b	$ff
    517  2065					      repend
    518  2066		       ff		      .byte.b	$ff
    517  2066					      repend
    518  2067		       ff		      .byte.b	$ff
    517  2067					      repend
    518  2068		       ff		      .byte.b	$ff
    517  2068					      repend
    518  2069		       ff		      .byte.b	$ff
    517  2069					      repend
    518  206a		       ff		      .byte.b	$ff
    517  206a					      repend
    518  206b		       ff		      .byte.b	$ff
    517  206b					      repend
    518  206c		       ff		      .byte.b	$ff
    517  206c					      repend
    518  206d		       ff		      .byte.b	$ff
    517  206d					      repend
    518  206e		       ff		      .byte.b	$ff
    517  206e					      repend
    518  206f		       ff		      .byte.b	$ff
    517  206f					      repend
    518  2070		       ff		      .byte.b	$ff
    517  2070					      repend
    518  2071		       ff		      .byte.b	$ff
    517  2071					      repend
    518  2072		       ff		      .byte.b	$ff
    517  2072					      repend
    518  2073		       ff		      .byte.b	$ff
    517  2073					      repend
    518  2074		       ff		      .byte.b	$ff
    517  2074					      repend
    518  2075		       ff		      .byte.b	$ff
    517  2075					      repend
    518  2076		       ff		      .byte.b	$ff
    517  2076					      repend
    518  2077		       ff		      .byte.b	$ff
    517  2077					      repend
    518  2078		       ff		      .byte.b	$ff
    517  2078					      repend
    518  2079		       ff		      .byte.b	$ff
    517  2079					      repend
    518  207a		       ff		      .byte.b	$ff
    517  207a					      repend
    518  207b		       ff		      .byte.b	$ff
    517  207b					      repend
    518  207c		       ff		      .byte.b	$ff
    517  207c					      repend
    518  207d		       ff		      .byte.b	$ff
    517  207d					      repend
    518  207e		       ff		      .byte.b	$ff
    517  207e					      repend
    518  207f		       ff		      .byte.b	$ff
    517  207f					      repend
    518  2080		       ff		      .byte.b	$ff
    517  2080					      repend
    518  2081		       ff		      .byte.b	$ff
    517  2081					      repend
    518  2082		       ff		      .byte.b	$ff
    517  2082					      repend
    518  2083		       ff		      .byte.b	$ff
    517  2083					      repend
    518  2084		       ff		      .byte.b	$ff
    517  2084					      repend
    518  2085		       ff		      .byte.b	$ff
    517  2085					      repend
    518  2086		       ff		      .byte.b	$ff
    517  2086					      repend
    518  2087		       ff		      .byte.b	$ff
    517  2087					      repend
    518  2088		       ff		      .byte.b	$ff
    517  2088					      repend
    518  2089		       ff		      .byte.b	$ff
    517  2089					      repend
    518  208a		       ff		      .byte.b	$ff
    517  208a					      repend
    518  208b		       ff		      .byte.b	$ff
    517  208b					      repend
    518  208c		       ff		      .byte.b	$ff
    517  208c					      repend
    518  208d		       ff		      .byte.b	$ff
    517  208d					      repend
    518  208e		       ff		      .byte.b	$ff
    517  208e					      repend
    518  208f		       ff		      .byte.b	$ff
    517  208f					      repend
    518  2090		       ff		      .byte.b	$ff
    517  2090					      repend
    518  2091		       ff		      .byte.b	$ff
    517  2091					      repend
    518  2092		       ff		      .byte.b	$ff
    517  2092					      repend
    518  2093		       ff		      .byte.b	$ff
    517  2093					      repend
    518  2094		       ff		      .byte.b	$ff
    517  2094					      repend
    518  2095		       ff		      .byte.b	$ff
    517  2095					      repend
    518  2096		       ff		      .byte.b	$ff
    517  2096					      repend
    518  2097		       ff		      .byte.b	$ff
    517  2097					      repend
    518  2098		       ff		      .byte.b	$ff
    517  2098					      repend
    518  2099		       ff		      .byte.b	$ff
    517  2099					      repend
    518  209a		       ff		      .byte.b	$ff
    517  209a					      repend
    518  209b		       ff		      .byte.b	$ff
    517  209b					      repend
    518  209c		       ff		      .byte.b	$ff
    517  209c					      repend
    518  209d		       ff		      .byte.b	$ff
    517  209d					      repend
    518  209e		       ff		      .byte.b	$ff
    517  209e					      repend
    518  209f		       ff		      .byte.b	$ff
    517  209f					      repend
    518  20a0		       ff		      .byte.b	$ff
    517  20a0					      repend
    518  20a1		       ff		      .byte.b	$ff
    517  20a1					      repend
    518  20a2		       ff		      .byte.b	$ff
    517  20a2					      repend
    518  20a3		       ff		      .byte.b	$ff
    517  20a3					      repend
    518  20a4		       ff		      .byte.b	$ff
    517  20a4					      repend
    518  20a5		       ff		      .byte.b	$ff
    517  20a5					      repend
    518  20a6		       ff		      .byte.b	$ff
    517  20a6					      repend
    518  20a7		       ff		      .byte.b	$ff
    517  20a7					      repend
    518  20a8		       ff		      .byte.b	$ff
    517  20a8					      repend
    518  20a9		       ff		      .byte.b	$ff
    517  20a9					      repend
    518  20aa		       ff		      .byte.b	$ff
    517  20aa					      repend
    518  20ab		       ff		      .byte.b	$ff
    517  20ab					      repend
    518  20ac		       ff		      .byte.b	$ff
    517  20ac					      repend
    518  20ad		       ff		      .byte.b	$ff
    517  20ad					      repend
    518  20ae		       ff		      .byte.b	$ff
    517  20ae					      repend
    518  20af		       ff		      .byte.b	$ff
    517  20af					      repend
    518  20b0		       ff		      .byte.b	$ff
    517  20b0					      repend
    518  20b1		       ff		      .byte.b	$ff
    517  20b1					      repend
    518  20b2		       ff		      .byte.b	$ff
    517  20b2					      repend
    518  20b3		       ff		      .byte.b	$ff
    517  20b3					      repend
    518  20b4		       ff		      .byte.b	$ff
    517  20b4					      repend
    518  20b5		       ff		      .byte.b	$ff
    517  20b5					      repend
    518  20b6		       ff		      .byte.b	$ff
    517  20b6					      repend
    518  20b7		       ff		      .byte.b	$ff
    517  20b7					      repend
    518  20b8		       ff		      .byte.b	$ff
    517  20b8					      repend
    518  20b9		       ff		      .byte.b	$ff
    517  20b9					      repend
    518  20ba		       ff		      .byte.b	$ff
    517  20ba					      repend
    518  20bb		       ff		      .byte.b	$ff
    517  20bb					      repend
    518  20bc		       ff		      .byte.b	$ff
    517  20bc					      repend
    518  20bd		       ff		      .byte.b	$ff
    517  20bd					      repend
    518  20be		       ff		      .byte.b	$ff
    517  20be					      repend
    518  20bf		       ff		      .byte.b	$ff
    517  20bf					      repend
    518  20c0		       ff		      .byte.b	$ff
    517  20c0					      repend
    518  20c1		       ff		      .byte.b	$ff
    517  20c1					      repend
    518  20c2		       ff		      .byte.b	$ff
    517  20c2					      repend
    518  20c3		       ff		      .byte.b	$ff
    517  20c3					      repend
    518  20c4		       ff		      .byte.b	$ff
    517  20c4					      repend
    518  20c5		       ff		      .byte.b	$ff
    517  20c5					      repend
    518  20c6		       ff		      .byte.b	$ff
    517  20c6					      repend
    518  20c7		       ff		      .byte.b	$ff
    517  20c7					      repend
    518  20c8		       ff		      .byte.b	$ff
    517  20c8					      repend
    518  20c9		       ff		      .byte.b	$ff
    517  20c9					      repend
    518  20ca		       ff		      .byte.b	$ff
    517  20ca					      repend
    518  20cb		       ff		      .byte.b	$ff
    517  20cb					      repend
    518  20cc		       ff		      .byte.b	$ff
    517  20cc					      repend
    518  20cd		       ff		      .byte.b	$ff
    517  20cd					      repend
    518  20ce		       ff		      .byte.b	$ff
    517  20ce					      repend
    518  20cf		       ff		      .byte.b	$ff
    517  20cf					      repend
    518  20d0		       ff		      .byte.b	$ff
    517  20d0					      repend
    518  20d1		       ff		      .byte.b	$ff
    517  20d1					      repend
    518  20d2		       ff		      .byte.b	$ff
    517  20d2					      repend
    518  20d3		       ff		      .byte.b	$ff
    517  20d3					      repend
    518  20d4		       ff		      .byte.b	$ff
    517  20d4					      repend
    518  20d5		       ff		      .byte.b	$ff
    517  20d5					      repend
    518  20d6		       ff		      .byte.b	$ff
    517  20d6					      repend
    518  20d7		       ff		      .byte.b	$ff
    517  20d7					      repend
    518  20d8		       ff		      .byte.b	$ff
    517  20d8					      repend
    518  20d9		       ff		      .byte.b	$ff
    517  20d9					      repend
    518  20da		       ff		      .byte.b	$ff
    517  20da					      repend
    518  20db		       ff		      .byte.b	$ff
    517  20db					      repend
    518  20dc		       ff		      .byte.b	$ff
    517  20dc					      repend
    518  20dd		       ff		      .byte.b	$ff
    517  20dd					      repend
    518  20de		       ff		      .byte.b	$ff
    517  20de					      repend
    518  20df		       ff		      .byte.b	$ff
    517  20df					      repend
    518  20e0		       ff		      .byte.b	$ff
    517  20e0					      repend
    518  20e1		       ff		      .byte.b	$ff
    517  20e1					      repend
    518  20e2		       ff		      .byte.b	$ff
    517  20e2					      repend
    518  20e3		       ff		      .byte.b	$ff
    517  20e3					      repend
    518  20e4		       ff		      .byte.b	$ff
    517  20e4					      repend
    518  20e5		       ff		      .byte.b	$ff
    517  20e5					      repend
    518  20e6		       ff		      .byte.b	$ff
    517  20e6					      repend
    518  20e7		       ff		      .byte.b	$ff
    517  20e7					      repend
    518  20e8		       ff		      .byte.b	$ff
    517  20e8					      repend
    518  20e9		       ff		      .byte.b	$ff
    517  20e9					      repend
    518  20ea		       ff		      .byte.b	$ff
    517  20ea					      repend
    518  20eb		       ff		      .byte.b	$ff
    517  20eb					      repend
    518  20ec		       ff		      .byte.b	$ff
    517  20ec					      repend
    518  20ed		       ff		      .byte.b	$ff
    517  20ed					      repend
    518  20ee		       ff		      .byte.b	$ff
    517  20ee					      repend
    518  20ef		       ff		      .byte.b	$ff
    517  20ef					      repend
    518  20f0		       ff		      .byte.b	$ff
    517  20f0					      repend
    518  20f1		       ff		      .byte.b	$ff
    517  20f1					      repend
    518  20f2		       ff		      .byte.b	$ff
    517  20f2					      repend
    518  20f3		       ff		      .byte.b	$ff
    517  20f3					      repend
    518  20f4		       ff		      .byte.b	$ff
    517  20f4					      repend
    518  20f5		       ff		      .byte.b	$ff
    517  20f5					      repend
    518  20f6		       ff		      .byte.b	$ff
    517  20f6					      repend
    518  20f7		       ff		      .byte.b	$ff
    517  20f7					      repend
    518  20f8		       ff		      .byte.b	$ff
    517  20f8					      repend
    518  20f9		       ff		      .byte.b	$ff
    517  20f9					      repend
    518  20fa		       ff		      .byte.b	$ff
    517  20fa					      repend
    518  20fb		       ff		      .byte.b	$ff
    517  20fb					      repend
    518  20fc		       ff		      .byte.b	$ff
    517  20fc					      repend
    518  20fd		       ff		      .byte.b	$ff
    517  20fd					      repend
    518  20fe		       ff		      .byte.b	$ff
    517  20fe					      repend
    518  20ff		       ff		      .byte.b	$ff
    519  2100					      repend
    520  2100				   .L048		;  bank 3
    521  2100
    522  2100					      if	ECHO2
      3796 bytes of ROM space left in bank 2
    523  2100					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    524  2100					      endif
    525  2100		       00 01	   ECHO2      =	1
    526  2fd4					      ORG	$2FF4-bscode_length
    527  2fd4					      RORG	$BFF4-bscode_length
    528  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    529  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    530  2fd6				  -	      stx	FASTFETCH
    531  2fd6					      endif
    532  2fd6		       9a		      txs
    533  2fd7				  -	      if	bankswitch == 64
    534  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    535  2fd7					      else
    536  2fd7		       a9 f3		      lda	#>(start-1)
    537  2fd9					      endif
    538  2fd9		       48		      pha
    539  2fda		       a9 4f		      lda	#<(start-1)
    540  2fdc		       48		      pha
    541  2fdd		       48		      pha
    542  2fde		       8a		      txa
    543  2fdf		       48		      pha
    544  2fe0		       ba		      tsx
    545  2fe1					      if	bankswitch != 64
    546  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    547  2fe3		       2a		      rol
    548  2fe4		       2a		      rol
    549  2fe5		       2a		      rol
    550  2fe6		       2a		      rol
    551  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    552  2fe9		       aa		      tax
    553  2fea		       e8		      inx
    554  2feb				  -	      else
    555  2feb				  -	      lda	4,x	; get high byte of return address
    556  2feb				  -	      tay
    557  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    558  2feb				  -	      sta	4,x
    559  2feb				  -	      tya
    560  2feb				  -	      lsr
    561  2feb				  -	      lsr
    562  2feb				  -	      lsr
    563  2feb				  -	      lsr
    564  2feb				  -	      tax
    565  2feb				  -	      inx
    566  2feb					      endif
    567  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    568  2fee		       68		      pla
    569  2fef		       aa		      tax
    570  2ff0		       68		      pla
    571  2ff1		       60		      rts
    572  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    573  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    574  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    575  2ff2					      endif
    576  2ffc					      ORG	$2FFC
    577  2ffc					      RORG	$BFFC
    578  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    579  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    580  3000					      ORG	$3000
    581  3000					      RORG	$D000
    582  3000					      repeat	256
    583  3000		       ff		      .byte.b	$ff
    582  3000					      repend
    583  3001		       ff		      .byte.b	$ff
    582  3001					      repend
    583  3002		       ff		      .byte.b	$ff
    582  3002					      repend
    583  3003		       ff		      .byte.b	$ff
    582  3003					      repend
    583  3004		       ff		      .byte.b	$ff
    582  3004					      repend
    583  3005		       ff		      .byte.b	$ff
    582  3005					      repend
    583  3006		       ff		      .byte.b	$ff
    582  3006					      repend
    583  3007		       ff		      .byte.b	$ff
    582  3007					      repend
    583  3008		       ff		      .byte.b	$ff
    582  3008					      repend
    583  3009		       ff		      .byte.b	$ff
    582  3009					      repend
    583  300a		       ff		      .byte.b	$ff
    582  300a					      repend
    583  300b		       ff		      .byte.b	$ff
    582  300b					      repend
    583  300c		       ff		      .byte.b	$ff
    582  300c					      repend
    583  300d		       ff		      .byte.b	$ff
    582  300d					      repend
    583  300e		       ff		      .byte.b	$ff
    582  300e					      repend
    583  300f		       ff		      .byte.b	$ff
    582  300f					      repend
    583  3010		       ff		      .byte.b	$ff
    582  3010					      repend
    583  3011		       ff		      .byte.b	$ff
    582  3011					      repend
    583  3012		       ff		      .byte.b	$ff
    582  3012					      repend
    583  3013		       ff		      .byte.b	$ff
    582  3013					      repend
    583  3014		       ff		      .byte.b	$ff
    582  3014					      repend
    583  3015		       ff		      .byte.b	$ff
    582  3015					      repend
    583  3016		       ff		      .byte.b	$ff
    582  3016					      repend
    583  3017		       ff		      .byte.b	$ff
    582  3017					      repend
    583  3018		       ff		      .byte.b	$ff
    582  3018					      repend
    583  3019		       ff		      .byte.b	$ff
    582  3019					      repend
    583  301a		       ff		      .byte.b	$ff
    582  301a					      repend
    583  301b		       ff		      .byte.b	$ff
    582  301b					      repend
    583  301c		       ff		      .byte.b	$ff
    582  301c					      repend
    583  301d		       ff		      .byte.b	$ff
    582  301d					      repend
    583  301e		       ff		      .byte.b	$ff
    582  301e					      repend
    583  301f		       ff		      .byte.b	$ff
    582  301f					      repend
    583  3020		       ff		      .byte.b	$ff
    582  3020					      repend
    583  3021		       ff		      .byte.b	$ff
    582  3021					      repend
    583  3022		       ff		      .byte.b	$ff
    582  3022					      repend
    583  3023		       ff		      .byte.b	$ff
    582  3023					      repend
    583  3024		       ff		      .byte.b	$ff
    582  3024					      repend
    583  3025		       ff		      .byte.b	$ff
    582  3025					      repend
    583  3026		       ff		      .byte.b	$ff
    582  3026					      repend
    583  3027		       ff		      .byte.b	$ff
    582  3027					      repend
    583  3028		       ff		      .byte.b	$ff
    582  3028					      repend
    583  3029		       ff		      .byte.b	$ff
    582  3029					      repend
    583  302a		       ff		      .byte.b	$ff
    582  302a					      repend
    583  302b		       ff		      .byte.b	$ff
    582  302b					      repend
    583  302c		       ff		      .byte.b	$ff
    582  302c					      repend
    583  302d		       ff		      .byte.b	$ff
    582  302d					      repend
    583  302e		       ff		      .byte.b	$ff
    582  302e					      repend
    583  302f		       ff		      .byte.b	$ff
    582  302f					      repend
    583  3030		       ff		      .byte.b	$ff
    582  3030					      repend
    583  3031		       ff		      .byte.b	$ff
    582  3031					      repend
    583  3032		       ff		      .byte.b	$ff
    582  3032					      repend
    583  3033		       ff		      .byte.b	$ff
    582  3033					      repend
    583  3034		       ff		      .byte.b	$ff
    582  3034					      repend
    583  3035		       ff		      .byte.b	$ff
    582  3035					      repend
    583  3036		       ff		      .byte.b	$ff
    582  3036					      repend
    583  3037		       ff		      .byte.b	$ff
    582  3037					      repend
    583  3038		       ff		      .byte.b	$ff
    582  3038					      repend
    583  3039		       ff		      .byte.b	$ff
    582  3039					      repend
    583  303a		       ff		      .byte.b	$ff
    582  303a					      repend
    583  303b		       ff		      .byte.b	$ff
    582  303b					      repend
    583  303c		       ff		      .byte.b	$ff
    582  303c					      repend
    583  303d		       ff		      .byte.b	$ff
    582  303d					      repend
    583  303e		       ff		      .byte.b	$ff
    582  303e					      repend
    583  303f		       ff		      .byte.b	$ff
    582  303f					      repend
    583  3040		       ff		      .byte.b	$ff
    582  3040					      repend
    583  3041		       ff		      .byte.b	$ff
    582  3041					      repend
    583  3042		       ff		      .byte.b	$ff
    582  3042					      repend
    583  3043		       ff		      .byte.b	$ff
    582  3043					      repend
    583  3044		       ff		      .byte.b	$ff
    582  3044					      repend
    583  3045		       ff		      .byte.b	$ff
    582  3045					      repend
    583  3046		       ff		      .byte.b	$ff
    582  3046					      repend
    583  3047		       ff		      .byte.b	$ff
    582  3047					      repend
    583  3048		       ff		      .byte.b	$ff
    582  3048					      repend
    583  3049		       ff		      .byte.b	$ff
    582  3049					      repend
    583  304a		       ff		      .byte.b	$ff
    582  304a					      repend
    583  304b		       ff		      .byte.b	$ff
    582  304b					      repend
    583  304c		       ff		      .byte.b	$ff
    582  304c					      repend
    583  304d		       ff		      .byte.b	$ff
    582  304d					      repend
    583  304e		       ff		      .byte.b	$ff
    582  304e					      repend
    583  304f		       ff		      .byte.b	$ff
    582  304f					      repend
    583  3050		       ff		      .byte.b	$ff
    582  3050					      repend
    583  3051		       ff		      .byte.b	$ff
    582  3051					      repend
    583  3052		       ff		      .byte.b	$ff
    582  3052					      repend
    583  3053		       ff		      .byte.b	$ff
    582  3053					      repend
    583  3054		       ff		      .byte.b	$ff
    582  3054					      repend
    583  3055		       ff		      .byte.b	$ff
    582  3055					      repend
    583  3056		       ff		      .byte.b	$ff
    582  3056					      repend
    583  3057		       ff		      .byte.b	$ff
    582  3057					      repend
    583  3058		       ff		      .byte.b	$ff
    582  3058					      repend
    583  3059		       ff		      .byte.b	$ff
    582  3059					      repend
    583  305a		       ff		      .byte.b	$ff
    582  305a					      repend
    583  305b		       ff		      .byte.b	$ff
    582  305b					      repend
    583  305c		       ff		      .byte.b	$ff
    582  305c					      repend
    583  305d		       ff		      .byte.b	$ff
    582  305d					      repend
    583  305e		       ff		      .byte.b	$ff
    582  305e					      repend
    583  305f		       ff		      .byte.b	$ff
    582  305f					      repend
    583  3060		       ff		      .byte.b	$ff
    582  3060					      repend
    583  3061		       ff		      .byte.b	$ff
    582  3061					      repend
    583  3062		       ff		      .byte.b	$ff
    582  3062					      repend
    583  3063		       ff		      .byte.b	$ff
    582  3063					      repend
    583  3064		       ff		      .byte.b	$ff
    582  3064					      repend
    583  3065		       ff		      .byte.b	$ff
    582  3065					      repend
    583  3066		       ff		      .byte.b	$ff
    582  3066					      repend
    583  3067		       ff		      .byte.b	$ff
    582  3067					      repend
    583  3068		       ff		      .byte.b	$ff
    582  3068					      repend
    583  3069		       ff		      .byte.b	$ff
    582  3069					      repend
    583  306a		       ff		      .byte.b	$ff
    582  306a					      repend
    583  306b		       ff		      .byte.b	$ff
    582  306b					      repend
    583  306c		       ff		      .byte.b	$ff
    582  306c					      repend
    583  306d		       ff		      .byte.b	$ff
    582  306d					      repend
    583  306e		       ff		      .byte.b	$ff
    582  306e					      repend
    583  306f		       ff		      .byte.b	$ff
    582  306f					      repend
    583  3070		       ff		      .byte.b	$ff
    582  3070					      repend
    583  3071		       ff		      .byte.b	$ff
    582  3071					      repend
    583  3072		       ff		      .byte.b	$ff
    582  3072					      repend
    583  3073		       ff		      .byte.b	$ff
    582  3073					      repend
    583  3074		       ff		      .byte.b	$ff
    582  3074					      repend
    583  3075		       ff		      .byte.b	$ff
    582  3075					      repend
    583  3076		       ff		      .byte.b	$ff
    582  3076					      repend
    583  3077		       ff		      .byte.b	$ff
    582  3077					      repend
    583  3078		       ff		      .byte.b	$ff
    582  3078					      repend
    583  3079		       ff		      .byte.b	$ff
    582  3079					      repend
    583  307a		       ff		      .byte.b	$ff
    582  307a					      repend
    583  307b		       ff		      .byte.b	$ff
    582  307b					      repend
    583  307c		       ff		      .byte.b	$ff
    582  307c					      repend
    583  307d		       ff		      .byte.b	$ff
    582  307d					      repend
    583  307e		       ff		      .byte.b	$ff
    582  307e					      repend
    583  307f		       ff		      .byte.b	$ff
    582  307f					      repend
    583  3080		       ff		      .byte.b	$ff
    582  3080					      repend
    583  3081		       ff		      .byte.b	$ff
    582  3081					      repend
    583  3082		       ff		      .byte.b	$ff
    582  3082					      repend
    583  3083		       ff		      .byte.b	$ff
    582  3083					      repend
    583  3084		       ff		      .byte.b	$ff
    582  3084					      repend
    583  3085		       ff		      .byte.b	$ff
    582  3085					      repend
    583  3086		       ff		      .byte.b	$ff
    582  3086					      repend
    583  3087		       ff		      .byte.b	$ff
    582  3087					      repend
    583  3088		       ff		      .byte.b	$ff
    582  3088					      repend
    583  3089		       ff		      .byte.b	$ff
    582  3089					      repend
    583  308a		       ff		      .byte.b	$ff
    582  308a					      repend
    583  308b		       ff		      .byte.b	$ff
    582  308b					      repend
    583  308c		       ff		      .byte.b	$ff
    582  308c					      repend
    583  308d		       ff		      .byte.b	$ff
    582  308d					      repend
    583  308e		       ff		      .byte.b	$ff
    582  308e					      repend
    583  308f		       ff		      .byte.b	$ff
    582  308f					      repend
    583  3090		       ff		      .byte.b	$ff
    582  3090					      repend
    583  3091		       ff		      .byte.b	$ff
    582  3091					      repend
    583  3092		       ff		      .byte.b	$ff
    582  3092					      repend
    583  3093		       ff		      .byte.b	$ff
    582  3093					      repend
    583  3094		       ff		      .byte.b	$ff
    582  3094					      repend
    583  3095		       ff		      .byte.b	$ff
    582  3095					      repend
    583  3096		       ff		      .byte.b	$ff
    582  3096					      repend
    583  3097		       ff		      .byte.b	$ff
    582  3097					      repend
    583  3098		       ff		      .byte.b	$ff
    582  3098					      repend
    583  3099		       ff		      .byte.b	$ff
    582  3099					      repend
    583  309a		       ff		      .byte.b	$ff
    582  309a					      repend
    583  309b		       ff		      .byte.b	$ff
    582  309b					      repend
    583  309c		       ff		      .byte.b	$ff
    582  309c					      repend
    583  309d		       ff		      .byte.b	$ff
    582  309d					      repend
    583  309e		       ff		      .byte.b	$ff
    582  309e					      repend
    583  309f		       ff		      .byte.b	$ff
    582  309f					      repend
    583  30a0		       ff		      .byte.b	$ff
    582  30a0					      repend
    583  30a1		       ff		      .byte.b	$ff
    582  30a1					      repend
    583  30a2		       ff		      .byte.b	$ff
    582  30a2					      repend
    583  30a3		       ff		      .byte.b	$ff
    582  30a3					      repend
    583  30a4		       ff		      .byte.b	$ff
    582  30a4					      repend
    583  30a5		       ff		      .byte.b	$ff
    582  30a5					      repend
    583  30a6		       ff		      .byte.b	$ff
    582  30a6					      repend
    583  30a7		       ff		      .byte.b	$ff
    582  30a7					      repend
    583  30a8		       ff		      .byte.b	$ff
    582  30a8					      repend
    583  30a9		       ff		      .byte.b	$ff
    582  30a9					      repend
    583  30aa		       ff		      .byte.b	$ff
    582  30aa					      repend
    583  30ab		       ff		      .byte.b	$ff
    582  30ab					      repend
    583  30ac		       ff		      .byte.b	$ff
    582  30ac					      repend
    583  30ad		       ff		      .byte.b	$ff
    582  30ad					      repend
    583  30ae		       ff		      .byte.b	$ff
    582  30ae					      repend
    583  30af		       ff		      .byte.b	$ff
    582  30af					      repend
    583  30b0		       ff		      .byte.b	$ff
    582  30b0					      repend
    583  30b1		       ff		      .byte.b	$ff
    582  30b1					      repend
    583  30b2		       ff		      .byte.b	$ff
    582  30b2					      repend
    583  30b3		       ff		      .byte.b	$ff
    582  30b3					      repend
    583  30b4		       ff		      .byte.b	$ff
    582  30b4					      repend
    583  30b5		       ff		      .byte.b	$ff
    582  30b5					      repend
    583  30b6		       ff		      .byte.b	$ff
    582  30b6					      repend
    583  30b7		       ff		      .byte.b	$ff
    582  30b7					      repend
    583  30b8		       ff		      .byte.b	$ff
    582  30b8					      repend
    583  30b9		       ff		      .byte.b	$ff
    582  30b9					      repend
    583  30ba		       ff		      .byte.b	$ff
    582  30ba					      repend
    583  30bb		       ff		      .byte.b	$ff
    582  30bb					      repend
    583  30bc		       ff		      .byte.b	$ff
    582  30bc					      repend
    583  30bd		       ff		      .byte.b	$ff
    582  30bd					      repend
    583  30be		       ff		      .byte.b	$ff
    582  30be					      repend
    583  30bf		       ff		      .byte.b	$ff
    582  30bf					      repend
    583  30c0		       ff		      .byte.b	$ff
    582  30c0					      repend
    583  30c1		       ff		      .byte.b	$ff
    582  30c1					      repend
    583  30c2		       ff		      .byte.b	$ff
    582  30c2					      repend
    583  30c3		       ff		      .byte.b	$ff
    582  30c3					      repend
    583  30c4		       ff		      .byte.b	$ff
    582  30c4					      repend
    583  30c5		       ff		      .byte.b	$ff
    582  30c5					      repend
    583  30c6		       ff		      .byte.b	$ff
    582  30c6					      repend
    583  30c7		       ff		      .byte.b	$ff
    582  30c7					      repend
    583  30c8		       ff		      .byte.b	$ff
    582  30c8					      repend
    583  30c9		       ff		      .byte.b	$ff
    582  30c9					      repend
    583  30ca		       ff		      .byte.b	$ff
    582  30ca					      repend
    583  30cb		       ff		      .byte.b	$ff
    582  30cb					      repend
    583  30cc		       ff		      .byte.b	$ff
    582  30cc					      repend
    583  30cd		       ff		      .byte.b	$ff
    582  30cd					      repend
    583  30ce		       ff		      .byte.b	$ff
    582  30ce					      repend
    583  30cf		       ff		      .byte.b	$ff
    582  30cf					      repend
    583  30d0		       ff		      .byte.b	$ff
    582  30d0					      repend
    583  30d1		       ff		      .byte.b	$ff
    582  30d1					      repend
    583  30d2		       ff		      .byte.b	$ff
    582  30d2					      repend
    583  30d3		       ff		      .byte.b	$ff
    582  30d3					      repend
    583  30d4		       ff		      .byte.b	$ff
    582  30d4					      repend
    583  30d5		       ff		      .byte.b	$ff
    582  30d5					      repend
    583  30d6		       ff		      .byte.b	$ff
    582  30d6					      repend
    583  30d7		       ff		      .byte.b	$ff
    582  30d7					      repend
    583  30d8		       ff		      .byte.b	$ff
    582  30d8					      repend
    583  30d9		       ff		      .byte.b	$ff
    582  30d9					      repend
    583  30da		       ff		      .byte.b	$ff
    582  30da					      repend
    583  30db		       ff		      .byte.b	$ff
    582  30db					      repend
    583  30dc		       ff		      .byte.b	$ff
    582  30dc					      repend
    583  30dd		       ff		      .byte.b	$ff
    582  30dd					      repend
    583  30de		       ff		      .byte.b	$ff
    582  30de					      repend
    583  30df		       ff		      .byte.b	$ff
    582  30df					      repend
    583  30e0		       ff		      .byte.b	$ff
    582  30e0					      repend
    583  30e1		       ff		      .byte.b	$ff
    582  30e1					      repend
    583  30e2		       ff		      .byte.b	$ff
    582  30e2					      repend
    583  30e3		       ff		      .byte.b	$ff
    582  30e3					      repend
    583  30e4		       ff		      .byte.b	$ff
    582  30e4					      repend
    583  30e5		       ff		      .byte.b	$ff
    582  30e5					      repend
    583  30e6		       ff		      .byte.b	$ff
    582  30e6					      repend
    583  30e7		       ff		      .byte.b	$ff
    582  30e7					      repend
    583  30e8		       ff		      .byte.b	$ff
    582  30e8					      repend
    583  30e9		       ff		      .byte.b	$ff
    582  30e9					      repend
    583  30ea		       ff		      .byte.b	$ff
    582  30ea					      repend
    583  30eb		       ff		      .byte.b	$ff
    582  30eb					      repend
    583  30ec		       ff		      .byte.b	$ff
    582  30ec					      repend
    583  30ed		       ff		      .byte.b	$ff
    582  30ed					      repend
    583  30ee		       ff		      .byte.b	$ff
    582  30ee					      repend
    583  30ef		       ff		      .byte.b	$ff
    582  30ef					      repend
    583  30f0		       ff		      .byte.b	$ff
    582  30f0					      repend
    583  30f1		       ff		      .byte.b	$ff
    582  30f1					      repend
    583  30f2		       ff		      .byte.b	$ff
    582  30f2					      repend
    583  30f3		       ff		      .byte.b	$ff
    582  30f3					      repend
    583  30f4		       ff		      .byte.b	$ff
    582  30f4					      repend
    583  30f5		       ff		      .byte.b	$ff
    582  30f5					      repend
    583  30f6		       ff		      .byte.b	$ff
    582  30f6					      repend
    583  30f7		       ff		      .byte.b	$ff
    582  30f7					      repend
    583  30f8		       ff		      .byte.b	$ff
    582  30f8					      repend
    583  30f9		       ff		      .byte.b	$ff
    582  30f9					      repend
    583  30fa		       ff		      .byte.b	$ff
    582  30fa					      repend
    583  30fb		       ff		      .byte.b	$ff
    582  30fb					      repend
    583  30fc		       ff		      .byte.b	$ff
    582  30fc					      repend
    583  30fd		       ff		      .byte.b	$ff
    582  30fd					      repend
    583  30fe		       ff		      .byte.b	$ff
    582  30fe					      repend
    583  30ff		       ff		      .byte.b	$ff
    584  3100					      repend
    585  3100				   .L049		;  bank 4
    586  3100
    587  3100					      if	ECHO3
      3796 bytes of ROM space left in bank 3
    588  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    589  3100					      endif
    590  3100		       00 01	   ECHO3      =	1
    591  3fd4					      ORG	$3FF4-bscode_length
    592  3fd4					      RORG	$DFF4-bscode_length
    593  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    594  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    595  3fd6				  -	      stx	FASTFETCH
    596  3fd6					      endif
    597  3fd6		       9a		      txs
    598  3fd7				  -	      if	bankswitch == 64
    599  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    600  3fd7					      else
    601  3fd7		       a9 f3		      lda	#>(start-1)
    602  3fd9					      endif
    603  3fd9		       48		      pha
    604  3fda		       a9 4f		      lda	#<(start-1)
    605  3fdc		       48		      pha
    606  3fdd		       48		      pha
    607  3fde		       8a		      txa
    608  3fdf		       48		      pha
    609  3fe0		       ba		      tsx
    610  3fe1					      if	bankswitch != 64
    611  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    612  3fe3		       2a		      rol
    613  3fe4		       2a		      rol
    614  3fe5		       2a		      rol
    615  3fe6		       2a		      rol
    616  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    617  3fe9		       aa		      tax
    618  3fea		       e8		      inx
    619  3feb				  -	      else
    620  3feb				  -	      lda	4,x	; get high byte of return address
    621  3feb				  -	      tay
    622  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    623  3feb				  -	      sta	4,x
    624  3feb				  -	      tya
    625  3feb				  -	      lsr
    626  3feb				  -	      lsr
    627  3feb				  -	      lsr
    628  3feb				  -	      lsr
    629  3feb				  -	      tax
    630  3feb				  -	      inx
    631  3feb					      endif
    632  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    633  3fee		       68		      pla
    634  3fef		       aa		      tax
    635  3ff0		       68		      pla
    636  3ff1		       60		      rts
    637  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    638  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    639  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    640  3ff2					      endif
    641  3ffc					      ORG	$3FFC
    642  3ffc					      RORG	$DFFC
    643  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    644  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    645  4000					      ORG	$4000
    646  4000					      RORG	$F000
    647  4000					      repeat	256
    648  4000		       ff		      .byte.b	$ff
    647  4000					      repend
    648  4001		       ff		      .byte.b	$ff
    647  4001					      repend
    648  4002		       ff		      .byte.b	$ff
    647  4002					      repend
    648  4003		       ff		      .byte.b	$ff
    647  4003					      repend
    648  4004		       ff		      .byte.b	$ff
    647  4004					      repend
    648  4005		       ff		      .byte.b	$ff
    647  4005					      repend
    648  4006		       ff		      .byte.b	$ff
    647  4006					      repend
    648  4007		       ff		      .byte.b	$ff
    647  4007					      repend
    648  4008		       ff		      .byte.b	$ff
    647  4008					      repend
    648  4009		       ff		      .byte.b	$ff
    647  4009					      repend
    648  400a		       ff		      .byte.b	$ff
    647  400a					      repend
    648  400b		       ff		      .byte.b	$ff
    647  400b					      repend
    648  400c		       ff		      .byte.b	$ff
    647  400c					      repend
    648  400d		       ff		      .byte.b	$ff
    647  400d					      repend
    648  400e		       ff		      .byte.b	$ff
    647  400e					      repend
    648  400f		       ff		      .byte.b	$ff
    647  400f					      repend
    648  4010		       ff		      .byte.b	$ff
    647  4010					      repend
    648  4011		       ff		      .byte.b	$ff
    647  4011					      repend
    648  4012		       ff		      .byte.b	$ff
    647  4012					      repend
    648  4013		       ff		      .byte.b	$ff
    647  4013					      repend
    648  4014		       ff		      .byte.b	$ff
    647  4014					      repend
    648  4015		       ff		      .byte.b	$ff
    647  4015					      repend
    648  4016		       ff		      .byte.b	$ff
    647  4016					      repend
    648  4017		       ff		      .byte.b	$ff
    647  4017					      repend
    648  4018		       ff		      .byte.b	$ff
    647  4018					      repend
    648  4019		       ff		      .byte.b	$ff
    647  4019					      repend
    648  401a		       ff		      .byte.b	$ff
    647  401a					      repend
    648  401b		       ff		      .byte.b	$ff
    647  401b					      repend
    648  401c		       ff		      .byte.b	$ff
    647  401c					      repend
    648  401d		       ff		      .byte.b	$ff
    647  401d					      repend
    648  401e		       ff		      .byte.b	$ff
    647  401e					      repend
    648  401f		       ff		      .byte.b	$ff
    647  401f					      repend
    648  4020		       ff		      .byte.b	$ff
    647  4020					      repend
    648  4021		       ff		      .byte.b	$ff
    647  4021					      repend
    648  4022		       ff		      .byte.b	$ff
    647  4022					      repend
    648  4023		       ff		      .byte.b	$ff
    647  4023					      repend
    648  4024		       ff		      .byte.b	$ff
    647  4024					      repend
    648  4025		       ff		      .byte.b	$ff
    647  4025					      repend
    648  4026		       ff		      .byte.b	$ff
    647  4026					      repend
    648  4027		       ff		      .byte.b	$ff
    647  4027					      repend
    648  4028		       ff		      .byte.b	$ff
    647  4028					      repend
    648  4029		       ff		      .byte.b	$ff
    647  4029					      repend
    648  402a		       ff		      .byte.b	$ff
    647  402a					      repend
    648  402b		       ff		      .byte.b	$ff
    647  402b					      repend
    648  402c		       ff		      .byte.b	$ff
    647  402c					      repend
    648  402d		       ff		      .byte.b	$ff
    647  402d					      repend
    648  402e		       ff		      .byte.b	$ff
    647  402e					      repend
    648  402f		       ff		      .byte.b	$ff
    647  402f					      repend
    648  4030		       ff		      .byte.b	$ff
    647  4030					      repend
    648  4031		       ff		      .byte.b	$ff
    647  4031					      repend
    648  4032		       ff		      .byte.b	$ff
    647  4032					      repend
    648  4033		       ff		      .byte.b	$ff
    647  4033					      repend
    648  4034		       ff		      .byte.b	$ff
    647  4034					      repend
    648  4035		       ff		      .byte.b	$ff
    647  4035					      repend
    648  4036		       ff		      .byte.b	$ff
    647  4036					      repend
    648  4037		       ff		      .byte.b	$ff
    647  4037					      repend
    648  4038		       ff		      .byte.b	$ff
    647  4038					      repend
    648  4039		       ff		      .byte.b	$ff
    647  4039					      repend
    648  403a		       ff		      .byte.b	$ff
    647  403a					      repend
    648  403b		       ff		      .byte.b	$ff
    647  403b					      repend
    648  403c		       ff		      .byte.b	$ff
    647  403c					      repend
    648  403d		       ff		      .byte.b	$ff
    647  403d					      repend
    648  403e		       ff		      .byte.b	$ff
    647  403e					      repend
    648  403f		       ff		      .byte.b	$ff
    647  403f					      repend
    648  4040		       ff		      .byte.b	$ff
    647  4040					      repend
    648  4041		       ff		      .byte.b	$ff
    647  4041					      repend
    648  4042		       ff		      .byte.b	$ff
    647  4042					      repend
    648  4043		       ff		      .byte.b	$ff
    647  4043					      repend
    648  4044		       ff		      .byte.b	$ff
    647  4044					      repend
    648  4045		       ff		      .byte.b	$ff
    647  4045					      repend
    648  4046		       ff		      .byte.b	$ff
    647  4046					      repend
    648  4047		       ff		      .byte.b	$ff
    647  4047					      repend
    648  4048		       ff		      .byte.b	$ff
    647  4048					      repend
    648  4049		       ff		      .byte.b	$ff
    647  4049					      repend
    648  404a		       ff		      .byte.b	$ff
    647  404a					      repend
    648  404b		       ff		      .byte.b	$ff
    647  404b					      repend
    648  404c		       ff		      .byte.b	$ff
    647  404c					      repend
    648  404d		       ff		      .byte.b	$ff
    647  404d					      repend
    648  404e		       ff		      .byte.b	$ff
    647  404e					      repend
    648  404f		       ff		      .byte.b	$ff
    647  404f					      repend
    648  4050		       ff		      .byte.b	$ff
    647  4050					      repend
    648  4051		       ff		      .byte.b	$ff
    647  4051					      repend
    648  4052		       ff		      .byte.b	$ff
    647  4052					      repend
    648  4053		       ff		      .byte.b	$ff
    647  4053					      repend
    648  4054		       ff		      .byte.b	$ff
    647  4054					      repend
    648  4055		       ff		      .byte.b	$ff
    647  4055					      repend
    648  4056		       ff		      .byte.b	$ff
    647  4056					      repend
    648  4057		       ff		      .byte.b	$ff
    647  4057					      repend
    648  4058		       ff		      .byte.b	$ff
    647  4058					      repend
    648  4059		       ff		      .byte.b	$ff
    647  4059					      repend
    648  405a		       ff		      .byte.b	$ff
    647  405a					      repend
    648  405b		       ff		      .byte.b	$ff
    647  405b					      repend
    648  405c		       ff		      .byte.b	$ff
    647  405c					      repend
    648  405d		       ff		      .byte.b	$ff
    647  405d					      repend
    648  405e		       ff		      .byte.b	$ff
    647  405e					      repend
    648  405f		       ff		      .byte.b	$ff
    647  405f					      repend
    648  4060		       ff		      .byte.b	$ff
    647  4060					      repend
    648  4061		       ff		      .byte.b	$ff
    647  4061					      repend
    648  4062		       ff		      .byte.b	$ff
    647  4062					      repend
    648  4063		       ff		      .byte.b	$ff
    647  4063					      repend
    648  4064		       ff		      .byte.b	$ff
    647  4064					      repend
    648  4065		       ff		      .byte.b	$ff
    647  4065					      repend
    648  4066		       ff		      .byte.b	$ff
    647  4066					      repend
    648  4067		       ff		      .byte.b	$ff
    647  4067					      repend
    648  4068		       ff		      .byte.b	$ff
    647  4068					      repend
    648  4069		       ff		      .byte.b	$ff
    647  4069					      repend
    648  406a		       ff		      .byte.b	$ff
    647  406a					      repend
    648  406b		       ff		      .byte.b	$ff
    647  406b					      repend
    648  406c		       ff		      .byte.b	$ff
    647  406c					      repend
    648  406d		       ff		      .byte.b	$ff
    647  406d					      repend
    648  406e		       ff		      .byte.b	$ff
    647  406e					      repend
    648  406f		       ff		      .byte.b	$ff
    647  406f					      repend
    648  4070		       ff		      .byte.b	$ff
    647  4070					      repend
    648  4071		       ff		      .byte.b	$ff
    647  4071					      repend
    648  4072		       ff		      .byte.b	$ff
    647  4072					      repend
    648  4073		       ff		      .byte.b	$ff
    647  4073					      repend
    648  4074		       ff		      .byte.b	$ff
    647  4074					      repend
    648  4075		       ff		      .byte.b	$ff
    647  4075					      repend
    648  4076		       ff		      .byte.b	$ff
    647  4076					      repend
    648  4077		       ff		      .byte.b	$ff
    647  4077					      repend
    648  4078		       ff		      .byte.b	$ff
    647  4078					      repend
    648  4079		       ff		      .byte.b	$ff
    647  4079					      repend
    648  407a		       ff		      .byte.b	$ff
    647  407a					      repend
    648  407b		       ff		      .byte.b	$ff
    647  407b					      repend
    648  407c		       ff		      .byte.b	$ff
    647  407c					      repend
    648  407d		       ff		      .byte.b	$ff
    647  407d					      repend
    648  407e		       ff		      .byte.b	$ff
    647  407e					      repend
    648  407f		       ff		      .byte.b	$ff
    647  407f					      repend
    648  4080		       ff		      .byte.b	$ff
    647  4080					      repend
    648  4081		       ff		      .byte.b	$ff
    647  4081					      repend
    648  4082		       ff		      .byte.b	$ff
    647  4082					      repend
    648  4083		       ff		      .byte.b	$ff
    647  4083					      repend
    648  4084		       ff		      .byte.b	$ff
    647  4084					      repend
    648  4085		       ff		      .byte.b	$ff
    647  4085					      repend
    648  4086		       ff		      .byte.b	$ff
    647  4086					      repend
    648  4087		       ff		      .byte.b	$ff
    647  4087					      repend
    648  4088		       ff		      .byte.b	$ff
    647  4088					      repend
    648  4089		       ff		      .byte.b	$ff
    647  4089					      repend
    648  408a		       ff		      .byte.b	$ff
    647  408a					      repend
    648  408b		       ff		      .byte.b	$ff
    647  408b					      repend
    648  408c		       ff		      .byte.b	$ff
    647  408c					      repend
    648  408d		       ff		      .byte.b	$ff
    647  408d					      repend
    648  408e		       ff		      .byte.b	$ff
    647  408e					      repend
    648  408f		       ff		      .byte.b	$ff
    647  408f					      repend
    648  4090		       ff		      .byte.b	$ff
    647  4090					      repend
    648  4091		       ff		      .byte.b	$ff
    647  4091					      repend
    648  4092		       ff		      .byte.b	$ff
    647  4092					      repend
    648  4093		       ff		      .byte.b	$ff
    647  4093					      repend
    648  4094		       ff		      .byte.b	$ff
    647  4094					      repend
    648  4095		       ff		      .byte.b	$ff
    647  4095					      repend
    648  4096		       ff		      .byte.b	$ff
    647  4096					      repend
    648  4097		       ff		      .byte.b	$ff
    647  4097					      repend
    648  4098		       ff		      .byte.b	$ff
    647  4098					      repend
    648  4099		       ff		      .byte.b	$ff
    647  4099					      repend
    648  409a		       ff		      .byte.b	$ff
    647  409a					      repend
    648  409b		       ff		      .byte.b	$ff
    647  409b					      repend
    648  409c		       ff		      .byte.b	$ff
    647  409c					      repend
    648  409d		       ff		      .byte.b	$ff
    647  409d					      repend
    648  409e		       ff		      .byte.b	$ff
    647  409e					      repend
    648  409f		       ff		      .byte.b	$ff
    647  409f					      repend
    648  40a0		       ff		      .byte.b	$ff
    647  40a0					      repend
    648  40a1		       ff		      .byte.b	$ff
    647  40a1					      repend
    648  40a2		       ff		      .byte.b	$ff
    647  40a2					      repend
    648  40a3		       ff		      .byte.b	$ff
    647  40a3					      repend
    648  40a4		       ff		      .byte.b	$ff
    647  40a4					      repend
    648  40a5		       ff		      .byte.b	$ff
    647  40a5					      repend
    648  40a6		       ff		      .byte.b	$ff
    647  40a6					      repend
    648  40a7		       ff		      .byte.b	$ff
    647  40a7					      repend
    648  40a8		       ff		      .byte.b	$ff
    647  40a8					      repend
    648  40a9		       ff		      .byte.b	$ff
    647  40a9					      repend
    648  40aa		       ff		      .byte.b	$ff
    647  40aa					      repend
    648  40ab		       ff		      .byte.b	$ff
    647  40ab					      repend
    648  40ac		       ff		      .byte.b	$ff
    647  40ac					      repend
    648  40ad		       ff		      .byte.b	$ff
    647  40ad					      repend
    648  40ae		       ff		      .byte.b	$ff
    647  40ae					      repend
    648  40af		       ff		      .byte.b	$ff
    647  40af					      repend
    648  40b0		       ff		      .byte.b	$ff
    647  40b0					      repend
    648  40b1		       ff		      .byte.b	$ff
    647  40b1					      repend
    648  40b2		       ff		      .byte.b	$ff
    647  40b2					      repend
    648  40b3		       ff		      .byte.b	$ff
    647  40b3					      repend
    648  40b4		       ff		      .byte.b	$ff
    647  40b4					      repend
    648  40b5		       ff		      .byte.b	$ff
    647  40b5					      repend
    648  40b6		       ff		      .byte.b	$ff
    647  40b6					      repend
    648  40b7		       ff		      .byte.b	$ff
    647  40b7					      repend
    648  40b8		       ff		      .byte.b	$ff
    647  40b8					      repend
    648  40b9		       ff		      .byte.b	$ff
    647  40b9					      repend
    648  40ba		       ff		      .byte.b	$ff
    647  40ba					      repend
    648  40bb		       ff		      .byte.b	$ff
    647  40bb					      repend
    648  40bc		       ff		      .byte.b	$ff
    647  40bc					      repend
    648  40bd		       ff		      .byte.b	$ff
    647  40bd					      repend
    648  40be		       ff		      .byte.b	$ff
    647  40be					      repend
    648  40bf		       ff		      .byte.b	$ff
    647  40bf					      repend
    648  40c0		       ff		      .byte.b	$ff
    647  40c0					      repend
    648  40c1		       ff		      .byte.b	$ff
    647  40c1					      repend
    648  40c2		       ff		      .byte.b	$ff
    647  40c2					      repend
    648  40c3		       ff		      .byte.b	$ff
    647  40c3					      repend
    648  40c4		       ff		      .byte.b	$ff
    647  40c4					      repend
    648  40c5		       ff		      .byte.b	$ff
    647  40c5					      repend
    648  40c6		       ff		      .byte.b	$ff
    647  40c6					      repend
    648  40c7		       ff		      .byte.b	$ff
    647  40c7					      repend
    648  40c8		       ff		      .byte.b	$ff
    647  40c8					      repend
    648  40c9		       ff		      .byte.b	$ff
    647  40c9					      repend
    648  40ca		       ff		      .byte.b	$ff
    647  40ca					      repend
    648  40cb		       ff		      .byte.b	$ff
    647  40cb					      repend
    648  40cc		       ff		      .byte.b	$ff
    647  40cc					      repend
    648  40cd		       ff		      .byte.b	$ff
    647  40cd					      repend
    648  40ce		       ff		      .byte.b	$ff
    647  40ce					      repend
    648  40cf		       ff		      .byte.b	$ff
    647  40cf					      repend
    648  40d0		       ff		      .byte.b	$ff
    647  40d0					      repend
    648  40d1		       ff		      .byte.b	$ff
    647  40d1					      repend
    648  40d2		       ff		      .byte.b	$ff
    647  40d2					      repend
    648  40d3		       ff		      .byte.b	$ff
    647  40d3					      repend
    648  40d4		       ff		      .byte.b	$ff
    647  40d4					      repend
    648  40d5		       ff		      .byte.b	$ff
    647  40d5					      repend
    648  40d6		       ff		      .byte.b	$ff
    647  40d6					      repend
    648  40d7		       ff		      .byte.b	$ff
    647  40d7					      repend
    648  40d8		       ff		      .byte.b	$ff
    647  40d8					      repend
    648  40d9		       ff		      .byte.b	$ff
    647  40d9					      repend
    648  40da		       ff		      .byte.b	$ff
    647  40da					      repend
    648  40db		       ff		      .byte.b	$ff
    647  40db					      repend
    648  40dc		       ff		      .byte.b	$ff
    647  40dc					      repend
    648  40dd		       ff		      .byte.b	$ff
    647  40dd					      repend
    648  40de		       ff		      .byte.b	$ff
    647  40de					      repend
    648  40df		       ff		      .byte.b	$ff
    647  40df					      repend
    648  40e0		       ff		      .byte.b	$ff
    647  40e0					      repend
    648  40e1		       ff		      .byte.b	$ff
    647  40e1					      repend
    648  40e2		       ff		      .byte.b	$ff
    647  40e2					      repend
    648  40e3		       ff		      .byte.b	$ff
    647  40e3					      repend
    648  40e4		       ff		      .byte.b	$ff
    647  40e4					      repend
    648  40e5		       ff		      .byte.b	$ff
    647  40e5					      repend
    648  40e6		       ff		      .byte.b	$ff
    647  40e6					      repend
    648  40e7		       ff		      .byte.b	$ff
    647  40e7					      repend
    648  40e8		       ff		      .byte.b	$ff
    647  40e8					      repend
    648  40e9		       ff		      .byte.b	$ff
    647  40e9					      repend
    648  40ea		       ff		      .byte.b	$ff
    647  40ea					      repend
    648  40eb		       ff		      .byte.b	$ff
    647  40eb					      repend
    648  40ec		       ff		      .byte.b	$ff
    647  40ec					      repend
    648  40ed		       ff		      .byte.b	$ff
    647  40ed					      repend
    648  40ee		       ff		      .byte.b	$ff
    647  40ee					      repend
    648  40ef		       ff		      .byte.b	$ff
    647  40ef					      repend
    648  40f0		       ff		      .byte.b	$ff
    647  40f0					      repend
    648  40f1		       ff		      .byte.b	$ff
    647  40f1					      repend
    648  40f2		       ff		      .byte.b	$ff
    647  40f2					      repend
    648  40f3		       ff		      .byte.b	$ff
    647  40f3					      repend
    648  40f4		       ff		      .byte.b	$ff
    647  40f4					      repend
    648  40f5		       ff		      .byte.b	$ff
    647  40f5					      repend
    648  40f6		       ff		      .byte.b	$ff
    647  40f6					      repend
    648  40f7		       ff		      .byte.b	$ff
    647  40f7					      repend
    648  40f8		       ff		      .byte.b	$ff
    647  40f8					      repend
    648  40f9		       ff		      .byte.b	$ff
    647  40f9					      repend
    648  40fa		       ff		      .byte.b	$ff
    647  40fa					      repend
    648  40fb		       ff		      .byte.b	$ff
    647  40fb					      repend
    648  40fc		       ff		      .byte.b	$ff
    647  40fc					      repend
    648  40fd		       ff		      .byte.b	$ff
    647  40fd					      repend
    648  40fe		       ff		      .byte.b	$ff
    647  40fe					      repend
    648  40ff		       ff		      .byte.b	$ff
    649  4100					      repend
    650  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
    651  4100
    652  4100							; This is a 2-line kernel!
    653  4100					      ifnconst	vertical_reflect
    654  4100				   kernel
    655  4100					      endif
    656  4100		       85 02		      sta	WSYNC
    657  4102		       a9 ff		      lda	#255
    658  4104		       8d 96 02 	      sta	TIM64T
    659  4107
    660  4107		       a9 01		      lda	#1
    661  4109		       85 27		      sta	VDELBL
    662  410b		       85 25		      sta	VDELP0
    663  410d		       a6 92		      ldx	ballheight
    664  410f		       e8		      inx
    665  4110		       e8		      inx
    666  4111		       86 9f		      stx	temp4
    667  4113		       a5 86		      lda	player1y
    668  4115		       85 9e		      sta	temp3
    669  4117
    670  4117				  -	      ifconst	shakescreen
    671  4117				  -	      jsr	doshakescreen
    672  4117					      else
    673  4117		       a6 90		      ldx	missile0height
    674  4119		       e8		      inx
    675  411a					      endif
    676  411a
    677  411a		       e8		      inx
    678  411b		       86 f6		      stx	stack1
    679  411d
    680  411d		       a5 89		      lda	bally
    681  411f		       85 f7		      sta	stack2
    682  4121
    683  4121		       a5 85		      lda	player0y
    684  4123		       a2 00		      ldx	#0
    685  4125		       85 02		      sta	WSYNC
    686  4127		       86 1b		      stx	GRP0
    687  4129		       86 1c		      stx	GRP1
    688  412b		       86 0e		      stx	PF1L
    689  412d		       86 0f		      stx	PF2
    690  412f		       86 2c		      stx	CXCLR
    691  4131				  -	      ifconst	readpaddle
    692  4131				  -	      stx	paddle
    693  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
    695  4133					      endif
    696  4133
    697  4133		       95 9d		      sta	temp2,x
    698  4135
    699  4135							;store these so they can be retrieved later
    700  4135					      ifnconst	pfres
    701  4135		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    702  4137				  -	      else
    703  4137				  -	      ldx	#132-pfres*pfwidth
    704  4137					      endif
    705  4137
    706  4137		       c6 85		      dec	player0y
    707  4139
    708  4139		       a5 91		      lda	missile0y
    709  413b		       85 a0		      sta	temp5
    710  413d		       a5 88		      lda	missile1y
    711  413f		       85 a1		      sta	temp6
    712  4141
    713  4141		       a5 ef		      lda	playfieldpos
    714  4143		       85 9c		      sta	temp1
    715  4145
    716  4145				  -	      ifconst	pfrowheight
    717  4145				  -	      lda	#pfrowheight+2
    718  4145					      else
    719  4145					      ifnconst	pfres
    720  4145		       a9 0a		      lda	#10
    721  4147				  -	      else
    722  4147				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    723  4147					      endif
    724  4147					      endif
    725  4147		       18		      clc
    726  4148		       e5 ef		      sbc	playfieldpos
    727  414a		       85 ef		      sta	playfieldpos
    728  414c		       4c 78 f1 	      jmp	.startkernel
    729  414f
    730  414f				   .skipDrawP0
    731  414f		       a9 00		      lda	#0
    732  4151		       a8		      tay
    733  4152		       4c aa f1 	      jmp	.continueP0
    734  4155
    735  4155				   .skipDrawP1
    736  4155		       a9 00		      lda	#0
    737  4157		       a8		      tay
    738  4158		       4c 82 f1 	      jmp	.continueP1
    739  415b
    740  415b				   .kerloop		; enter at cycle 59??
    741  415b
    742  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
    744  415c				   continuekernel2
    745  415c		       a5 92		      lda	ballheight
    746  415e
    747  415e				  -	      ifconst	pfres
    748  415e				  -	      ldy	playfield+pfres*pfwidth-132,x
    749  415e				  -	      sty	PF1L	;3
    750  415e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    751  415e				  -	      sty	PF2L	;3
    752  415e				  -	      ldy	playfield+pfres*pfwidth-129,x
    753  415e				  -	      sty	PF1R	; 3 too early?
    754  415e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    755  415e				  -	      sty	PF2R	;3
    756  415e					      else
    757  415e		       bc 7c 10 	      ldy	playfield-48+pfwidth*12+44-128,x
    758  4161		       84 0e		      sty	PF1L	;3
    759  4163		       bc 7d 10 	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    760  4166		       84 0f		      sty	PF2L	;3
    761  4168		       bc 7f 10 	      ldy	playfield-48+pfwidth*12+47-128,x	;4
    762  416b		       84 0e		      sty	PF1R	; 3 too early?
    763  416d		       bc 7e 10 	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    764  4170		       84 0f		      sty	PF2R	;3
    765  4172					      endif
    766  4172
    767  4172							; should be playfield+$38 for width=2
    768  4172
    769  4172		       c7 89		      dcp	bally
    770  4174		       2a		      rol
    771  4175		       2a		      rol
    772  4176							; rol
    773  4176							; rol
    774  4176				   goback
    775  4176		       85 1f		      sta	ENABL
    776  4178				   .startkernel
    777  4178		       a5 8f		      lda	player1height	;3
    778  417a		       c7 86		      dcp	player1y	;5
    779  417c		       90 d7		      bcc	.skipDrawP1	;2
    780  417e		       a4 86		      ldy	player1y	;3
    781  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    782  4182							; so it doesn't cross a page boundary!
    783  4182
    784  4182				   .continueP1
    785  4182		       85 1c		      sta	GRP1	;3
    786  4184
    787  4184					      ifnconst	player1colors
    788  4184		       a5 87		      lda	missile1height	;3
    789  4186		       c7 88		      dcp	missile1y	;5
    790  4188		       2a		      rol		;2
    791  4189		       2a		      rol		;2
    792  418a		       85 1e		      sta	ENAM1	;3
    793  418c				  -	      else
    794  418c				  -	      lda	(player1color),y
    795  418c				  -	      sta	COLUP1
    796  418c				  -	      ifnconst	playercolors
    797  418c				  -	      sleep	7
    798  418c				  -	      else
    799  418c				  -	      lda.w	player0colorstore
    800  418c				  -	      sta	COLUP0
    801  418c				  -	      endif
    802  418c					      endif
    803  418c
    804  418c				  -	      ifconst	pfres
    805  418c				  -	      lda	playfield+pfres*pfwidth-132,x
    806  418c				  -	      sta	PF1L	;3
    807  418c				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    808  418c				  -	      sta	PF2L	;3
    809  418c				  -	      lda	playfield+pfres*pfwidth-129,x
    810  418c				  -	      sta	PF1R	; 3 too early?
    811  418c				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    812  418c				  -	      sta	PF2R	;3
    813  418c					      else
    814  418c		       bd 7c 10 	      lda	playfield-48+pfwidth*12+44-128,x	;4
    815  418f		       85 0e		      sta	PF1L	;3
    816  4191		       bd 7d 10 	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    817  4194		       85 0f		      sta	PF2L	;3
    818  4196		       bd 7f 10 	      lda	playfield-48+pfwidth*12+47-128,x	;4
    819  4199		       85 0e		      sta	PF1R	; 3 too early?
    820  419b		       bd 7e 10 	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    821  419e		       85 0f		      sta	PF2R	;3
    822  41a0					      endif
    823  41a0							; sleep 3
    824  41a0
    825  41a0		       a5 8e		      lda	player0height
    826  41a2		       c7 85		      dcp	player0y
    827  41a4		       90 a9		      bcc	.skipDrawP0
    828  41a6		       a4 85		      ldy	player0y
    829  41a8		       b1 8a		      lda	(player0pointer),y
    830  41aa				   .continueP0
    831  41aa		       85 1b		      sta	GRP0
    832  41ac
    833  41ac				  -	      ifnconst	no_blank_lines
    834  41ac				  -	      ifnconst	playercolors
    835  41ac				  -	      lda	missile0height	;3
    836  41ac				  -	      dcp	missile0y	;5
    837  41ac				  -	      sbc	stack1
    838  41ac				  -	      sta	ENAM0	;3
    839  41ac				  -	      else
    840  41ac				  -	      lda	(player0color),y
    841  41ac				  -	      sta	player0colorstore
    842  41ac				  -	      sleep	6
    843  41ac				  -	      endif
    844  41ac				  -	      dec	temp1
    845  41ac				  -	      bne	continuekernel
    846  41ac					      else
    847  41ac		       c6 9c		      dec	temp1
    848  41ae		       f0 09		      beq	altkernel2
    849  41b0				  -	      ifconst	readpaddle
    850  41b0				  -	      ldy	currentpaddle
    851  41b0				  -	      lda	INPT0,y
    852  41b0				  -	      bpl	noreadpaddle
    853  41b0				  -	      inc	paddle
    854  41b0				  -	      jmp	continuekernel2
    855  41b0				  -noreadpaddle
    856  41b0				  -	      sleep	2
    857  41b0				  -	      jmp	continuekernel
    858  41b0					      else
    859  41b0					      ifnconst	playercolors
    860  41b0				  -	      ifconst	PFcolors
    861  41b0				  -	      txa
    862  41b0				  -	      tay
    863  41b0				  -	      lda	(pfcolortable),y
    864  41b0				  -	      ifnconst	backgroundchange
    865  41b0				  -	      sta	COLUPF
    866  41b0				  -	      else
    867  41b0				  -	      sta	COLUBK
    868  41b0				  -	      endif
    869  41b0				  -	      jmp	continuekernel
    870  41b0					      else
    871  41b0				  -	      ifconst	kernelmacrodef
    872  41b0				  -	      kernelmacro
    873  41b0					      else
      0  41b0					      sleep	12
      1  41b0				   .CYCLES    SET	12
      2  41b0
      3  41b0				  -	      IF	.CYCLES < 2
      4  41b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41b0				  -	      ERR
      6  41b0					      ENDIF
      7  41b0
      8  41b0				  -	      IF	.CYCLES & 1
      9  41b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41b0				  -	      nop	0
     11  41b0				  -	      ELSE
     12  41b0				  -	      bit	VSYNC
     13  41b0				  -	      ENDIF
     14  41b0				  -.CYCLES    SET	.CYCLES - 3
     15  41b0					      ENDIF
     16  41b0
     17  41b0					      REPEAT	.CYCLES / 2
     18  41b0		       ea		      nop
     17  41b0					      REPEND
     18  41b1		       ea		      nop
     17  41b1					      REPEND
     18  41b2		       ea		      nop
     17  41b2					      REPEND
     18  41b3		       ea		      nop
     17  41b3					      REPEND
     18  41b4		       ea		      nop
     17  41b4					      REPEND
     18  41b5		       ea		      nop
     19  41b6					      REPEND
    875  41b6					      endif
    876  41b6					      endif
    877  41b6				  -	      else
    878  41b6				  -	      lda	(player0color),y
    879  41b6				  -	      sta	player0colorstore
    880  41b6				  -	      sleep	4
    881  41b6					      endif
    882  41b6		       4c 5b f1 	      jmp	continuekernel
    883  41b9					      endif
    884  41b9				   altkernel2
    885  41b9		       8a		      txa
    886  41ba					      ifnconst	vertical_reflect
    887  41ba		       cb fc		      sbx	#256-pfwidth
    888  41bc				  -	      else
    889  41bc				  -	      sbx	#256-pfwidth/2
    890  41bc					      endif
    891  41bc		       30 1b		      bmi	lastkernelline
    892  41be				  -	      ifconst	pfrowheight
    893  41be				  -	      lda	#pfrowheight
    894  41be					      else
    895  41be					      ifnconst	pfres
    896  41be		       a9 08		      lda	#8
    897  41c0				  -	      else
    898  41c0				  -	      lda	#(96/pfres)	; try to come close to the real size
    899  41c0					      endif
    900  41c0					      endif
    901  41c0		       85 9c		      sta	temp1
    902  41c2		       4c 5b f1 	      jmp	continuekernel
    903  41c5					      endif
    904  41c5
    905  41c5				   altkernel
    906  41c5
    907  41c5				  -	      ifconst	PFmaskvalue
    908  41c5				  -	      lda	#PFmaskvalue
    909  41c5					      else
    910  41c5		       a9 00		      lda	#0
    911  41c7					      endif
    912  41c7		       85 0e		      sta	PF1L
    913  41c9		       85 0f		      sta	PF2
    914  41cb
    915  41cb
    916  41cb							;sleep 3
    917  41cb
    918  41cb							;28 cycles to fix things
    919  41cb							;minus 11=17
    920  41cb
    921  41cb							; lax temp4
    922  41cb							; clc
    923  41cb		       8a		      txa
    924  41cc					      ifnconst	vertical_reflect
    925  41cc		       cb fc		      sbx	#256-pfwidth
    926  41ce				  -	      else
    927  41ce				  -	      sbx	#256-pfwidth/2
    928  41ce					      endif
    929  41ce
    930  41ce		       30 09		      bmi	lastkernelline
    931  41d0
    932  41d0				  -	      ifconst	PFcolorandheight
    933  41d0				  -	      ifconst	pfres
    934  41d0				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    935  41d0				  -	      else
    936  41d0				  -	      ldy	playfieldcolorandheight-87,x
    937  41d0				  -	      endif
    938  41d0				  -	      ifnconst	backgroundchange
    939  41d0				  -	      sty	COLUPF
    940  41d0				  -	      else
    941  41d0				  -	      sty	COLUBK
    942  41d0				  -	      endif
    943  41d0				  -	      ifconst	pfres
    944  41d0				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    945  41d0				  -	      else
    946  41d0				  -	      lda	playfieldcolorandheight-88,x
    947  41d0				  -	      endif
    948  41d0				  -	      sta.w	temp1
    949  41d0					      endif
    950  41d0				  -	      ifconst	PFheights
    951  41d0				  -	      lsr
    952  41d0				  -	      lsr
    953  41d0				  -	      tay
    954  41d0				  -	      lda	(pfheighttable),y
    955  41d0				  -	      sta.w	temp1
    956  41d0					      endif
    957  41d0				  -	      ifconst	PFcolors
    958  41d0				  -	      tay
    959  41d0				  -	      lda	(pfcolortable),y
    960  41d0				  -	      ifnconst	backgroundchange
    961  41d0				  -	      sta	COLUPF
    962  41d0				  -	      else
    963  41d0				  -	      sta	COLUBK
    964  41d0				  -	      endif
    965  41d0				  -	      ifconst	pfrowheight
    966  41d0				  -	      lda	#pfrowheight
    967  41d0				  -	      else
    968  41d0				  -	      ifnconst	pfres
    969  41d0				  -	      lda	#8
    970  41d0				  -	      else
    971  41d0				  -	      lda	#(96/pfres)	; try to come close to the real size
    972  41d0				  -	      endif
    973  41d0				  -	      endif
    974  41d0				  -	      sta	temp1
    975  41d0					      endif
    976  41d0					      ifnconst	PFcolorandheight
    977  41d0					      ifnconst	PFcolors
    978  41d0					      ifnconst	PFheights
    979  41d0				  -	      ifnconst	no_blank_lines
    980  41d0				  -			; read paddle 0
    981  41d0				  -			; lo-res paddle read
    982  41d0				  -			; bit INPT0
    983  41d0				  -			; bmi paddleskipread
    984  41d0				  -			; inc paddle0
    985  41d0				  -			;donepaddleskip
    986  41d0				  -	      sleep	10
    987  41d0				  -	      ifconst	pfrowheight
    988  41d0				  -	      lda	#pfrowheight
    989  41d0				  -	      else
    990  41d0				  -	      ifnconst	pfres
    991  41d0				  -	      lda	#8
    992  41d0				  -	      else
    993  41d0				  -	      lda	#(96/pfres)	; try to come close to the real size
    994  41d0				  -	      endif
    995  41d0				  -	      endif
    996  41d0				  -	      sta	temp1
    997  41d0					      endif
    998  41d0					      endif
    999  41d0					      endif
   1000  41d0					      endif
   1001  41d0
   1002  41d0
   1003  41d0		       a5 92		      lda	ballheight
   1004  41d2		       c7 89		      dcp	bally
   1005  41d4		       e5 9f		      sbc	temp4
   1006  41d6
   1007  41d6
   1008  41d6		       4c 76 f1 	      jmp	goback
   1009  41d9
   1010  41d9
   1011  41d9				  -	      ifnconst	no_blank_lines
   1012  41d9				  -lastkernelline
   1013  41d9				  -	      ifnconst	PFcolors
   1014  41d9				  -	      sleep	10
   1015  41d9				  -	      else
   1016  41d9				  -	      ldy	#124
   1017  41d9				  -	      lda	(pfcolortable),y
   1018  41d9				  -	      sta	COLUPF
   1019  41d9				  -	      endif
   1020  41d9				  -
   1021  41d9				  -	      ifconst	PFheights
   1022  41d9				  -	      ldx	#1
   1023  41d9				  -			;sleep 4
   1024  41d9				  -	      sleep	3	; this was over 1 cycle
   1025  41d9				  -	      else
   1026  41d9				  -	      ldx	playfieldpos
   1027  41d9				  -			;sleep 3
   1028  41d9				  -	      sleep	2	; this was over 1 cycle
   1029  41d9				  -	      endif
   1030  41d9				  -
   1031  41d9				  -	      jmp	enterlastkernel
   1032  41d9				  -
   1033  41d9					      else
   1034  41d9				   lastkernelline
   1035  41d9
   1036  41d9				  -	      ifconst	PFheights
   1037  41d9				  -	      ldx	#1
   1038  41d9				  -			;sleep 5
   1039  41d9				  -	      sleep	4	; this was over 1 cycle
   1040  41d9					      else
   1041  41d9		       a6 ef		      ldx	playfieldpos
   1042  41db							;sleep 4
      0  41db					      sleep	3	; this was over 1 cycle
      1  41db				   .CYCLES    SET	3
      2  41db
      3  41db				  -	      IF	.CYCLES < 2
      4  41db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41db				  -	      ERR
      6  41db					      ENDIF
      7  41db
      8  41db					      IF	.CYCLES & 1
      9  41db					      IFNCONST	NO_ILLEGAL_OPCODES
     10  41db		       04 00		      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd					      ENDIF
     14  41dd				   .CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd				  -	      REPEAT	.CYCLES / 2
     18  41dd				  -	      nop
     19  41dd					      REPEND
   1044  41dd					      endif
   1045  41dd
   1046  41dd		       e0 00		      cpx	#0
   1047  41df		       d0 26		      bne	.enterfromNBL
   1048  41e1		       4c 68 f2 	      jmp	no_blank_lines_bailout
   1049  41e4					      endif
   1050  41e4
   1051  41e4					      if	((<*)>$d5)
   1052  4200		       00 00 00 00*	      align	256
   1053  4200					      endif
   1054  4200							; this is a kludge to prevent page wrapping - fix!!!
   1055  4200
   1056  4200				   .skipDrawlastP1
   1057  4200		       a9 00		      lda	#0
   1058  4202		       a8		      tay		; added so we don't cross a page
   1059  4203		       4c 2d f2 	      jmp	.continuelastP1
   1060  4206
   1061  4206				   .endkerloop		; enter at cycle 59??
   1062  4206
   1063  4206		       ea		      nop
   1064  4207
   1065  4207				   .enterfromNBL
   1066  4207				  -	      ifconst	pfres
   1067  4207				  -	      ldy.w	playfield+pfres*pfwidth-4
   1068  4207				  -	      sty	PF1L	;3
   1069  4207				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1070  4207				  -	      sty	PF2L	;3
   1071  4207				  -	      ldy.w	playfield+pfres*pfwidth-1
   1072  4207				  -	      sty	PF1R	; possibly too early?
   1073  4207				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1074  4207				  -	      sty	PF2R	;3
   1075  4207					      else
   1076  4207		       ac fc 10 	      ldy.w	playfield-48+pfwidth*12+44
   1077  420a		       84 0e		      sty	PF1L	;3
   1078  420c		       ac fd 10 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1079  420f		       84 0f		      sty	PF2L	;3
   1080  4211		       ac ff 10 	      ldy.w	playfield-48+pfwidth*12+47
   1081  4214		       84 0e		      sty	PF1R	; possibly too early?
   1082  4216		       ac fe 10 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1083  4219		       84 0f		      sty	PF2R	;3
   1084  421b					      endif
   1085  421b
   1086  421b				   enterlastkernel
   1087  421b		       a5 92		      lda	ballheight
   1088  421d
   1089  421d							; tya
   1090  421d		       c7 89		      dcp	bally
   1091  421f							; sleep 4
   1092  421f
   1093  421f							; sbc stack3
   1094  421f		       2a		      rol
   1095  4220		       2a		      rol
   1096  4221		       85 1f		      sta	ENABL
   1097  4223
   1098  4223		       a5 8f		      lda	player1height	;3
   1099  4225		       c7 86		      dcp	player1y	;5
   1100  4227		       90 d7		      bcc	.skipDrawlastP1
   1101  4229		       a4 86		      ldy	player1y	;3
   1102  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   1103  422d							; so it doesn't cross a page boundary!
   1104  422d
   1105  422d				   .continuelastP1
   1106  422d		       85 1c		      sta	GRP1	;3
   1107  422f
   1108  422f					      ifnconst	player1colors
   1109  422f		       a5 87		      lda	missile1height	;3
   1110  4231		       c7 88		      dcp	missile1y	;5
   1111  4233				  -	      else
   1112  4233				  -	      lda	(player1color),y
   1113  4233				  -	      sta	COLUP1
   1114  4233					      endif
   1115  4233
   1116  4233		       ca		      dex
   1117  4234							;dec temp4 ; might try putting this above PF writes
   1118  4234		       f0 34		      beq	endkernel
   1119  4236
   1120  4236
   1121  4236				  -	      ifconst	pfres
   1122  4236				  -	      ldy.w	playfield+pfres*pfwidth-4
   1123  4236				  -	      sty	PF1L	;3
   1124  4236				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1125  4236				  -	      sty	PF2L	;3
   1126  4236				  -	      ldy.w	playfield+pfres*pfwidth-1
   1127  4236				  -	      sty	PF1R	; possibly too early?
   1128  4236				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1129  4236				  -	      sty	PF2R	;3
   1130  4236					      else
   1131  4236		       ac fc 10 	      ldy.w	playfield-48+pfwidth*12+44
   1132  4239		       84 0e		      sty	PF1L	;3
   1133  423b		       ac fd 10 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1134  423e		       84 0f		      sty	PF2L	;3
   1135  4240		       ac ff 10 	      ldy.w	playfield-48+pfwidth*12+47
   1136  4243		       84 0e		      sty	PF1R	; possibly too early?
   1137  4245		       ac fe 10 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1138  4248		       84 0f		      sty	PF2R	;3
   1139  424a					      endif
   1140  424a
   1141  424a					      ifnconst	player1colors
   1142  424a		       2a		      rol		;2
   1143  424b		       2a		      rol		;2
   1144  424c		       85 1e		      sta	ENAM1	;3
   1145  424e				  -	      else
   1146  424e				  -	      ifnconst	playercolors
   1147  424e				  -	      sleep	7
   1148  424e				  -	      else
   1149  424e				  -	      lda.w	player0colorstore
   1150  424e				  -	      sta	COLUP0
   1151  424e				  -	      endif
   1152  424e					      endif
   1153  424e
   1154  424e		       ad 8e 00 	      lda.w	player0height
   1155  4251		       c7 85		      dcp	player0y
   1156  4253		       90 0d		      bcc	.skipDrawlastP0
   1157  4255		       a4 85		      ldy	player0y
   1158  4257		       b1 8a		      lda	(player0pointer),y
   1159  4259				   .continuelastP0
   1160  4259		       85 1b		      sta	GRP0
   1161  425b
   1162  425b
   1163  425b
   1164  425b				  -	      ifnconst	no_blank_lines
   1165  425b				  -	      lda	missile0height	;3
   1166  425b				  -	      dcp	missile0y	;5
   1167  425b				  -	      sbc	stack1
   1168  425b				  -	      sta	ENAM0	;3
   1169  425b				  -	      jmp	.endkerloop
   1170  425b					      else
   1171  425b				  -	      ifconst	readpaddle
   1172  425b				  -	      ldy	currentpaddle
   1173  425b				  -	      lda	INPT0,y
   1174  425b				  -	      bpl	noreadpaddle2
   1175  425b				  -	      inc	paddle
   1176  425b				  -	      jmp	.endkerloop
   1177  425b				  -noreadpaddle2
   1178  425b				  -	      sleep	4
   1179  425b				  -	      jmp	.endkerloop
   1180  425b					      else		; no_blank_lines and no paddle reading
   1181  425b		       68		      pla
   1182  425c		       48		      pha		; 14 cycles in 4 bytes
   1183  425d		       68		      pla
   1184  425e		       48		      pha
   1185  425f							; sleep 14
   1186  425f		       4c 06 f2 	      jmp	.endkerloop
   1187  4262					      endif
   1188  4262					      endif
   1189  4262
   1190  4262
   1191  4262							; ifconst donepaddleskip
   1192  4262							;paddleskipread
   1193  4262							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   1194  4262							; plus we get a lo-res paddle read
   1195  4262							; bmi donepaddleskip
   1196  4262							; endif
   1197  4262
   1198  4262				   .skipDrawlastP0
   1199  4262		       a9 00		      lda	#0
   1200  4264		       a8		      tay
   1201  4265		       4c 59 f2 	      jmp	.continuelastP0
   1202  4268
   1203  4268					      ifconst	no_blank_lines
   1204  4268				   no_blank_lines_bailout
   1205  4268		       a2 00		      ldx	#0
   1206  426a					      endif
   1207  426a
   1208  426a				   endkernel
   1209  426a							; 6 digit score routine
   1210  426a		       86 0e		      stx	PF1
   1211  426c		       86 0f		      stx	PF2
   1212  426e		       86 0d		      stx	PF0
   1213  4270		       18		      clc
   1214  4271
   1215  4271				  -	      ifconst	pfrowheight
   1216  4271				  -	      lda	#pfrowheight+2
   1217  4271					      else
   1218  4271					      ifnconst	pfres
   1219  4271		       a9 0a		      lda	#10
   1220  4273				  -	      else
   1221  4273				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1222  4273					      endif
   1223  4273					      endif
   1224  4273
   1225  4273		       e5 ef		      sbc	playfieldpos
   1226  4275		       85 ef		      sta	playfieldpos
   1227  4277		       8a		      txa
   1228  4278
   1229  4278				  -	      ifconst	shakescreen
   1230  4278				  -	      bit	shakescreen
   1231  4278				  -	      bmi	noshakescreen2
   1232  4278				  -	      ldx	#$3D
   1233  4278				  -noshakescreen2
   1234  4278					      endif
   1235  4278
   1236  4278		       95 02		      sta	WSYNC,x
   1237  427a
   1238  427a							; STA WSYNC ;first one, need one more
   1239  427a		       85 0b		      sta	REFP0
   1240  427c		       85 0c		      sta	REFP1
   1241  427e		       85 1b		      STA	GRP0
   1242  4280		       85 1c		      STA	GRP1
   1243  4282							; STA PF1
   1244  4282							; STA PF2
   1245  4282		       85 2b		      sta	HMCLR
   1246  4284		       85 1d		      sta	ENAM0
   1247  4286		       85 1e		      sta	ENAM1
   1248  4288		       85 1f		      sta	ENABL
   1249  428a
   1250  428a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1251  428c		       85 85		      sta	player0y
   1252  428e		       a5 9e		      lda	temp3
   1253  4290		       85 86		      sta	player1y
   1254  4292					      ifnconst	player1colors
   1255  4292		       a5 a1		      lda	temp6
   1256  4294		       85 88		      sta	missile1y
   1257  4296					      endif
   1258  4296					      ifnconst	playercolors
   1259  4296					      ifnconst	readpaddle
   1260  4296		       a5 a0		      lda	temp5
   1261  4298		       85 91		      sta	missile0y
   1262  429a					      endif
   1263  429a					      endif
   1264  429a		       a5 f7		      lda	stack2
   1265  429c		       85 89		      sta	bally
   1266  429e
   1267  429e							; strangely, this isn't required any more. might have
   1268  429e							; resulted from the no_blank_lines score bounce fix
   1269  429e							;ifconst no_blank_lines
   1270  429e							;sta WSYNC
   1271  429e							;endif
   1272  429e
   1273  429e		       ad 84 02 	      lda	INTIM
   1274  42a1		       18		      clc
   1275  42a2					      ifnconst	vblank_time
   1276  42a2		       69 8e		      adc	#43+12+87
   1277  42a4				  -	      else
   1278  42a4				  -	      adc	#vblank_time+12+87
   1279  42a4				  -
   1280  42a4					      endif
   1281  42a4							; sta WSYNC
   1282  42a4		       8d 96 02 	      sta	TIM64T
   1283  42a7
   1284  42a7				  -	      ifconst	minikernel
   1285  42a7				  -	      jsr	minikernel
   1286  42a7					      endif
   1287  42a7
   1288  42a7							; now reassign temp vars for score pointers
   1289  42a7
   1290  42a7							; score pointers contain:
   1291  42a7							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1292  42a7							; swap lo2->temp1
   1293  42a7							; swap lo4->temp3
   1294  42a7							; swap lo6->temp5
   1295  42a7					      ifnconst	noscore
   1296  42a7		       a5 97		      lda	scorepointers+1
   1297  42a9							; ldy temp1
   1298  42a9		       85 9c		      sta	temp1
   1299  42ab							; sty scorepointers+1
   1300  42ab
   1301  42ab		       a5 99		      lda	scorepointers+3
   1302  42ad							; ldy temp3
   1303  42ad		       85 9e		      sta	temp3
   1304  42af							; sty scorepointers+3
   1305  42af
   1306  42af
   1307  42af		       85 2b		      sta	HMCLR
   1308  42b1		       ba		      tsx
   1309  42b2		       86 f6		      stx	stack1
   1310  42b4		       a2 e0		      ldx	#$E0
   1311  42b6		       86 20		      stx	HMP0
   1312  42b8
   1313  42b8		       a5 a3		      LDA	scorecolor
   1314  42ba		       85 06		      STA	COLUP0
   1315  42bc		       85 07		      STA	COLUP1
   1316  42be				  -	      ifconst	scorefade
   1317  42be				  -	      STA	stack2
   1318  42be					      endif
   1319  42be				  -	      ifconst	pfscore
   1320  42be				  -	      lda	pfscorecolor
   1321  42be				  -	      sta	COLUPF
   1322  42be					      endif
   1323  42be		       85 02		      sta	WSYNC
   1324  42c0		       a2 00		      ldx	#0
   1325  42c2		       86 1b		      STx	GRP0
   1326  42c4		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1327  42c6
   1328  42c6		       a5 9b		      lda	scorepointers+5
   1329  42c8							; ldy temp5
   1330  42c8		       95 a0		      sta	temp5,x
   1331  42ca							; sty scorepointers+5
   1332  42ca		       a9 ff		      lda	#>scoretable
   1333  42cc		       85 97		      sta	scorepointers+1
   1334  42ce		       85 99		      sta	scorepointers+3
   1335  42d0		       85 9b		      sta	scorepointers+5
   1336  42d2		       85 9d		      sta	temp2
   1337  42d4		       85 9f		      sta	temp4
   1338  42d6		       85 a1		      sta	temp6
   1339  42d8		       a0 07		      LDY	#7
   1340  42da		       84 25		      STY	VDELP0
   1341  42dc		       85 10		      STA	RESP0
   1342  42de		       85 11		      STA	RESP1
   1343  42e0
   1344  42e0
   1345  42e0		       a9 03		      LDA	#$03
   1346  42e2		       85 04		      STA	NUSIZ0
   1347  42e4		       85 05		      STA	NUSIZ1
   1348  42e6		       85 26		      STA	VDELP1
   1349  42e8		       a9 f0		      LDA	#$F0
   1350  42ea		       85 21		      STA	HMP1
   1351  42ec		       b1 96		      lda	(scorepointers),y
   1352  42ee		       85 1b		      sta	GRP0
   1353  42f0		       85 2a		      STA	HMOVE	; cycle 73 ?
   1354  42f2		       4c 08 f3 	      jmp	beginscore
   1355  42f5
   1356  42f5
   1357  42f5					      if	((<*)>$d4)
   1358  4300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1359  4300					      endif
   1360  4300
   1361  4300				   loop2
   1362  4300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1363  4302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1364  4304				  -	      ifconst	pfscore
   1365  4304				  -	      lda.w	pfscore1
   1366  4304				  -	      sta	PF1
   1367  4304					      else
   1368  4304				  -	      ifconst	scorefade
   1369  4304				  -	      sleep	2
   1370  4304				  -	      dec	stack2	; decrement the temporary scorecolor
   1371  4304					      else
      0  4304					      sleep	7
      1  4304				   .CYCLES    SET	7
      2  4304
      3  4304				  -	      IF	.CYCLES < 2
      4  4304				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4304				  -	      ERR
      6  4304					      ENDIF
      7  4304
      8  4304					      IF	.CYCLES & 1
      9  4304					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4304		       04 00		      nop	0
     11  4306				  -	      ELSE
     12  4306				  -	      bit	VSYNC
     13  4306					      ENDIF
     14  4306				   .CYCLES    SET	.CYCLES - 3
     15  4306					      ENDIF
     16  4306
     17  4306					      REPEAT	.CYCLES / 2
     18  4306		       ea		      nop
     17  4306					      REPEND
     18  4307		       ea		      nop
     19  4308					      REPEND
   1373  4308					      endif
   1374  4308					      endif
   1375  4308							; cycle 0
   1376  4308				   beginscore
   1377  4308		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1378  430a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1379  430c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1380  430e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1381  4310		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1382  4312		       9a		      txs
   1383  4313		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1384  4315				  -	      ifconst	scorefade
   1385  4315				  -	      lda	stack2
   1386  4315					      else
      0  4315					      sleep	3
      1  4315				   .CYCLES    SET	3
      2  4315
      3  4315				  -	      IF	.CYCLES < 2
      4  4315				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4315				  -	      ERR
      6  4315					      ENDIF
      7  4315
      8  4315					      IF	.CYCLES & 1
      9  4315					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4315		       04 00		      nop	0
     11  4317				  -	      ELSE
     12  4317				  -	      bit	VSYNC
     13  4317					      ENDIF
     14  4317				   .CYCLES    SET	.CYCLES - 3
     15  4317					      ENDIF
     16  4317
     17  4317				  -	      REPEAT	.CYCLES / 2
     18  4317				  -	      nop
     19  4317					      REPEND
   1388  4317					      endif
   1389  4317
   1390  4317				  -	      ifconst	pfscore
   1391  4317				  -	      lda	pfscore2
   1392  4317				  -	      sta	PF1
   1393  4317					      else
   1394  4317				  -	      ifconst	scorefade
   1395  4317				  -	      sta	COLUP0
   1396  4317				  -	      sta	COLUP1
   1397  4317					      else
      0  4317					      sleep	6
      1  4317				   .CYCLES    SET	6
      2  4317
      3  4317				  -	      IF	.CYCLES < 2
      4  4317				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4317				  -	      ERR
      6  4317					      ENDIF
      7  4317
      8  4317				  -	      IF	.CYCLES & 1
      9  4317				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4317				  -	      nop	0
     11  4317				  -	      ELSE
     12  4317				  -	      bit	VSYNC
     13  4317				  -	      ENDIF
     14  4317				  -.CYCLES    SET	.CYCLES - 3
     15  4317					      ENDIF
     16  4317
     17  4317					      REPEAT	.CYCLES / 2
     18  4317		       ea		      nop
     17  4317					      REPEND
     18  4318		       ea		      nop
     17  4318					      REPEND
     18  4319		       ea		      nop
     19  431a					      REPEND
   1399  431a					      endif
   1400  431a					      endif
   1401  431a
   1402  431a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1403  431c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1404  431e		       ba		      tsx
   1405  431f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1406  4321		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1407  4323		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1408  4325		       88		      dey
   1409  4326		       10 d8		      bpl	loop2	;+2 60 180
   1410  4328
   1411  4328		       a6 f6		      ldx	stack1
   1412  432a		       9a		      txs
   1413  432b							; lda scorepointers+1
   1414  432b		       a4 9c		      ldy	temp1
   1415  432d							; sta temp1
   1416  432d		       84 97		      sty	scorepointers+1
   1417  432f
   1418  432f		       a9 00		      LDA	#0
   1419  4331		       85 0e		      sta	PF1
   1420  4333		       85 1b		      STA	GRP0
   1421  4335		       85 1c		      STA	GRP1
   1422  4337		       85 25		      STA	VDELP0
   1423  4339		       85 26		      STA	VDELP1	;do we need these
   1424  433b		       85 04		      STA	NUSIZ0
   1425  433d		       85 05		      STA	NUSIZ1
   1426  433f
   1427  433f							; lda scorepointers+3
   1428  433f		       a4 9e		      ldy	temp3
   1429  4341							; sta temp3
   1430  4341		       84 99		      sty	scorepointers+3
   1431  4343
   1432  4343							; lda scorepointers+5
   1433  4343		       a4 a0		      ldy	temp5
   1434  4345							; sta temp5
   1435  4345		       84 9b		      sty	scorepointers+5
   1436  4347					      endif		;noscore
   1437  4347				  -	      ifconst	readpaddle
   1438  4347				  -	      lda	#%11000010
   1439  4347					      else
   1440  4347				  -	      ifconst	qtcontroller
   1441  4347				  -	      lda	qtcontroller
   1442  4347				  -	      lsr		; bit 0 in carry
   1443  4347				  -	      lda	#4
   1444  4347				  -	      ror		; carry into top of A
   1445  4347					      else
   1446  4347		       a9 02		      lda	#2
   1447  4349					      endif		; qtcontroller
   1448  4349					      endif		; readpaddle
   1449  4349		       85 02		      sta	WSYNC
   1450  434b		       85 01		      sta	VBLANK
      0  434d					      RETURN
      1  434d				  -	      ifnconst	bankswitch
      2  434d				  -	      rts
      3  434d					      else
      4  434d		       4c dd ff 	      jmp	BS_return
      5  4350					      endif
   1452  4350				  -	      ifconst	shakescreen
   1453  4350				  -doshakescreen
   1454  4350				  -	      bit	shakescreen
   1455  4350				  -	      bmi	noshakescreen
   1456  4350				  -	      sta	WSYNC
   1457  4350				  -noshakescreen
   1458  4350				  -	      ldx	missile0height
   1459  4350				  -	      inx
   1460  4350				  -	      rts
   1461  4350					      endif
   1462  4350
   1463  4350							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1464  4350
   1465  4350				   start
   1466  4350		       78		      sei
   1467  4351		       d8		      cld
   1468  4352		       a0 00		      ldy	#0
   1469  4354		       a5 d0		      lda	$D0
   1470  4356		       c9 2c		      cmp	#$2C	;check RAM location #1
   1471  4358		       d0 07		      bne	MachineIs2600
   1472  435a		       a5 d1		      lda	$D1
   1473  435c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1474  435e		       d0 01		      bne	MachineIs2600
   1475  4360		       88		      dey
   1476  4361				   MachineIs2600
   1477  4361		       a2 00		      ldx	#0
   1478  4363		       8a		      txa
   1479  4364				   clearmem
   1480  4364		       e8		      inx
   1481  4365		       9a		      txs
   1482  4366		       48		      pha
   1483  4367		       d0 fb		      bne	clearmem
   1484  4369		       84 9c		      sty	temp1
   1485  436b					      ifnconst	multisprite
   1486  436b				  -	      ifconst	pfrowheight
   1487  436b				  -	      lda	#pfrowheight
   1488  436b					      else
   1489  436b				  -	      ifconst	pfres
   1490  436b				  -	      lda	#(96/pfres)
   1491  436b					      else
   1492  436b		       a9 08		      lda	#8
   1493  436d					      endif
   1494  436d					      endif
   1495  436d		       85 ef		      sta	playfieldpos
   1496  436f					      endif
   1497  436f		       a2 05		      ldx	#5
   1498  4371				   initscore
   1499  4371		       a9 74		      lda	#<scoretable
   1500  4373		       95 96		      sta	scorepointers,x
   1501  4375		       ca		      dex
   1502  4376		       10 f9		      bpl	initscore
   1503  4378		       a9 01		      lda	#1
   1504  437a		       85 0a		      sta	CTRLPF
   1505  437c		       0d 84 02 	      ora	INTIM
   1506  437f		       85 a2		      sta	rand
   1507  4381
   1508  4381				  -	      ifconst	multisprite
   1509  4381				  -	      jsr	multisprite_setup
   1510  4381					      endif
   1511  4381
   1512  4381				  -	      ifnconst	bankswitch
   1513  4381				  -	      jmp	game
   1514  4381					      else
   1515  4381		       a9 90		      lda	#>(game-1)
   1516  4383		       48		      pha
   1517  4384		       a9 ff		      lda	#<(game-1)
   1518  4386		       48		      pha
   1519  4387		       48		      pha
   1520  4388		       48		      pha
   1521  4389		       a2 01		      ldx	#1
   1522  438b		       4c eb ff 	      jmp	BS_jsr
   1523  438e					      endif
   1524  438e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1525  438e
   1526  438e							; playfield drawing routines
   1527  438e							; you get a 32x12 bitmapped display in a single color :)
   1528  438e							; 0-31 and 0-11
   1529  438e
   1530  438e				   pfclear		; clears playfield - or fill with pattern
   1531  438e				  -	      ifconst	pfres
   1532  438e				  -	      ldx	#pfres*pfwidth-1
   1533  438e					      else
   1534  438e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1535  4390					      endif
   1536  4390				   pfclear_loop
   1537  4390				  -	      ifnconst	superchip
   1538  4390				  -	      sta	playfield,x
   1539  4390					      else
   1540  4390		       9d 50 10 	      sta	playfield-128,x
   1541  4393					      endif
   1542  4393		       ca		      dex
   1543  4394		       10 fa		      bpl	pfclear_loop
      0  4396					      RETURN
      1  4396				  -	      ifnconst	bankswitch
      2  4396				  -	      rts
      3  4396					      else
      4  4396		       4c dd ff 	      jmp	BS_return
      5  4399					      endif
   1545  4399
   1546  4399				   setuppointers
   1547  4399		       86 9d		      stx	temp2	; store on.off.flip value
   1548  439b		       aa		      tax		; put x-value in x 
   1549  439c		       4a		      lsr
   1550  439d		       4a		      lsr
   1551  439e		       4a		      lsr		; divide x pos by 8 
   1552  439f		       85 9c		      sta	temp1
   1553  43a1		       98		      tya
   1554  43a2		       0a		      asl
   1555  43a3					      if	pfwidth=4
   1556  43a3		       0a		      asl		; multiply y pos by 4
   1557  43a4					      endif		; else multiply by 2
   1558  43a4		       18		      clc
   1559  43a5		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1560  43a7		       a8		      tay		; put the value in y
   1561  43a8		       a5 9d		      lda	temp2	; restore on.off.flip value
   1562  43aa		       60		      rts
   1563  43ab
   1564  43ab				   pfread
   1565  43ab							;x=xvalue, y=yvalue
   1566  43ab		       20 99 f3 	      jsr	setuppointers
   1567  43ae		       bd 43 f4 	      lda	setbyte,x
   1568  43b1		       39 d0 10 	      and	playfield,y
   1569  43b4		       5d 43 f4 	      eor	setbyte,x
   1570  43b7							; beq readzero
   1571  43b7							; lda #1
   1572  43b7							; readzero
      0  43b7					      RETURN
      1  43b7				  -	      ifnconst	bankswitch
      2  43b7				  -	      rts
      3  43b7					      else
      4  43b7		       4c dd ff 	      jmp	BS_return
      5  43ba					      endif
   1574  43ba
   1575  43ba				   pfpixel
   1576  43ba							;x=xvalue, y=yvalue, a=0,1,2
   1577  43ba		       20 99 f3 	      jsr	setuppointers
   1578  43bd
   1579  43bd					      ifconst	bankswitch
   1580  43bd		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1581  43bf		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1582  43c1		       4a		      lsr
   1583  43c2		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1584  43c4		       b9 d0 10 	      lda	playfield,y	; if here, it's "flip"
   1585  43c7		       5d 43 f4 	      eor	setbyte,x
   1586  43ca					      ifconst	superchip
   1587  43ca		       99 50 10 	      sta	playfield-128,y
   1588  43cd				  -	      else
   1589  43cd				  -	      sta	playfield,y
   1590  43cd					      endif
      0  43cd					      RETURN
      1  43cd				  -	      ifnconst	bankswitch
      2  43cd				  -	      rts
      3  43cd					      else
      4  43cd		       4c dd ff 	      jmp	BS_return
      5  43d0					      endif
   1592  43d0				   pixelon_r
   1593  43d0		       b9 d0 10 	      lda	playfield,y
   1594  43d3		       1d 43 f4 	      ora	setbyte,x
   1595  43d6					      ifconst	superchip
   1596  43d6		       99 50 10 	      sta	playfield-128,y
   1597  43d9				  -	      else
   1598  43d9				  -	      sta	playfield,y
   1599  43d9					      endif
      0  43d9					      RETURN
      1  43d9				  -	      ifnconst	bankswitch
      2  43d9				  -	      rts
      3  43d9					      else
      4  43d9		       4c dd ff 	      jmp	BS_return
      5  43dc					      endif
   1601  43dc				   pixeloff_r
   1602  43dc		       bd 43 f4 	      lda	setbyte,x
   1603  43df		       49 ff		      eor	#$ff
   1604  43e1		       39 d0 10 	      and	playfield,y
   1605  43e4					      ifconst	superchip
   1606  43e4		       99 50 10 	      sta	playfield-128,y
   1607  43e7				  -	      else
   1608  43e7				  -	      sta	playfield,y
   1609  43e7					      endif
      0  43e7					      RETURN
      1  43e7				  -	      ifnconst	bankswitch
      2  43e7				  -	      rts
      3  43e7					      else
      4  43e7		       4c dd ff 	      jmp	BS_return
      5  43ea					      endif
   1611  43ea
   1612  43ea				  -	      else
   1613  43ea				  -	      jmp	plotpoint
   1614  43ea					      endif
   1615  43ea
   1616  43ea				   pfhline
   1617  43ea							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1618  43ea		       20 99 f3 	      jsr	setuppointers
   1619  43ed		       4c f7 f3 	      jmp	noinc
   1620  43f0				   keepgoing
   1621  43f0		       e8		      inx
   1622  43f1		       8a		      txa
   1623  43f2		       29 07		      and	#7
   1624  43f4		       d0 01		      bne	noinc
   1625  43f6		       c8		      iny
   1626  43f7				   noinc
   1627  43f7		       20 1c f4 	      jsr	plotpoint
   1628  43fa		       e4 9e		      cpx	temp3
   1629  43fc		       30 f2		      bmi	keepgoing
      0  43fe					      RETURN
      1  43fe				  -	      ifnconst	bankswitch
      2  43fe				  -	      rts
      3  43fe					      else
      4  43fe		       4c dd ff 	      jmp	BS_return
      5  4401					      endif
   1631  4401
   1632  4401				   pfvline
   1633  4401							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1634  4401		       20 99 f3 	      jsr	setuppointers
   1635  4404		       84 9c		      sty	temp1	; store memory location offset
   1636  4406		       e6 9e		      inc	temp3	; increase final x by 1 
   1637  4408		       a5 9e		      lda	temp3
   1638  440a		       0a		      asl
   1639  440b					      if	pfwidth=4
   1640  440b		       0a		      asl		; multiply by 4
   1641  440c					      endif		; else multiply by 2
   1642  440c		       85 9e		      sta	temp3	; store it
   1643  440e							; Thanks to Michael Rideout for fixing a bug in this code
   1644  440e							; right now, temp1=y=starting memory location, temp3=final
   1645  440e							; x should equal original x value
   1646  440e				   keepgoingy
   1647  440e		       20 1c f4 	      jsr	plotpoint
   1648  4411		       c8		      iny
   1649  4412		       c8		      iny
   1650  4413					      if	pfwidth=4
   1651  4413		       c8		      iny
   1652  4414		       c8		      iny
   1653  4415					      endif
   1654  4415		       c4 9e		      cpy	temp3
   1655  4417		       30 f5		      bmi	keepgoingy
      0  4419					      RETURN
      1  4419				  -	      ifnconst	bankswitch
      2  4419				  -	      rts
      3  4419					      else
      4  4419		       4c dd ff 	      jmp	BS_return
      5  441c					      endif
   1657  441c
   1658  441c				   plotpoint
   1659  441c		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1660  441e		       f0 0d		      beq	pixelon	; if "on" go to on
   1661  4420		       4a		      lsr
   1662  4421		       b0 14		      bcs	pixeloff	; value is 1 if true
   1663  4423		       b9 d0 10 	      lda	playfield,y	; if here, it's "flip"
   1664  4426		       5d 43 f4 	      eor	setbyte,x
   1665  4429					      ifconst	superchip
   1666  4429		       99 50 10 	      sta	playfield-128,y
   1667  442c				  -	      else
   1668  442c				  -	      sta	playfield,y
   1669  442c					      endif
   1670  442c		       60		      rts
   1671  442d				   pixelon
   1672  442d		       b9 d0 10 	      lda	playfield,y
   1673  4430		       1d 43 f4 	      ora	setbyte,x
   1674  4433					      ifconst	superchip
   1675  4433		       99 50 10 	      sta	playfield-128,y
   1676  4436				  -	      else
   1677  4436				  -	      sta	playfield,y
   1678  4436					      endif
   1679  4436		       60		      rts
   1680  4437				   pixeloff
   1681  4437		       bd 43 f4 	      lda	setbyte,x
   1682  443a		       49 ff		      eor	#$ff
   1683  443c		       39 d0 10 	      and	playfield,y
   1684  443f					      ifconst	superchip
   1685  443f		       99 50 10 	      sta	playfield-128,y
   1686  4442				  -	      else
   1687  4442				  -	      sta	playfield,y
   1688  4442					      endif
   1689  4442		       60		      rts
   1690  4443
   1691  4443				   setbyte
   1692  4443					      ifnconst	pfcenter
   1693  4443		       80		      .byte.b	$80
   1694  4444		       40		      .byte.b	$40
   1695  4445		       20		      .byte.b	$20
   1696  4446		       10		      .byte.b	$10
   1697  4447		       08		      .byte.b	$08
   1698  4448		       04		      .byte.b	$04
   1699  4449		       02		      .byte.b	$02
   1700  444a		       01		      .byte.b	$01
   1701  444b					      endif
   1702  444b		       01		      .byte.b	$01
   1703  444c		       02		      .byte.b	$02
   1704  444d		       04		      .byte.b	$04
   1705  444e		       08		      .byte.b	$08
   1706  444f		       10		      .byte.b	$10
   1707  4450		       20		      .byte.b	$20
   1708  4451		       40		      .byte.b	$40
   1709  4452		       80		      .byte.b	$80
   1710  4453		       80		      .byte.b	$80
   1711  4454		       40		      .byte.b	$40
   1712  4455		       20		      .byte.b	$20
   1713  4456		       10		      .byte.b	$10
   1714  4457		       08		      .byte.b	$08
   1715  4458		       04		      .byte.b	$04
   1716  4459		       02		      .byte.b	$02
   1717  445a		       01		      .byte.b	$01
   1718  445b		       01		      .byte.b	$01
   1719  445c		       02		      .byte.b	$02
   1720  445d		       04		      .byte.b	$04
   1721  445e		       08		      .byte.b	$08
   1722  445f		       10		      .byte.b	$10
   1723  4460		       20		      .byte.b	$20
   1724  4461		       40		      .byte.b	$40
   1725  4462		       80		      .byte.b	$80
   1726  4463							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1727  4463
   1728  4463				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1729  4463		       d0 2a		      bne	notleft
   1730  4465							;left
   1731  4465				  -	      ifconst	pfres
   1732  4465				  -	      ldx	#pfres*4
   1733  4465					      else
   1734  4465		       a2 30		      ldx	#48
   1735  4467					      endif
   1736  4467				   leftloop
   1737  4467		       bd cf 10 	      lda	playfield-1,x
   1738  446a		       4a		      lsr
   1739  446b
   1740  446b					      ifconst	superchip
   1741  446b		       bd ce 10 	      lda	playfield-2,x
   1742  446e		       2a		      rol
   1743  446f		       9d 4e 10 	      sta	playfield-130,x
   1744  4472		       bd cd 10 	      lda	playfield-3,x
   1745  4475		       6a		      ror
   1746  4476		       9d 4d 10 	      sta	playfield-131,x
   1747  4479		       bd cc 10 	      lda	playfield-4,x
   1748  447c		       2a		      rol
   1749  447d		       9d 4c 10 	      sta	playfield-132,x
   1750  4480		       bd cf 10 	      lda	playfield-1,x
   1751  4483		       6a		      ror
   1752  4484		       9d 4f 10 	      sta	playfield-129,x
   1753  4487				  -	      else
   1754  4487				  -	      rol	playfield-2,x
   1755  4487				  -	      ror	playfield-3,x
   1756  4487				  -	      rol	playfield-4,x
   1757  4487				  -	      ror	playfield-1,x
   1758  4487					      endif
   1759  4487
   1760  4487		       8a		      txa
   1761  4488		       cb 04		      sbx	#4
   1762  448a		       d0 db		      bne	leftloop
      0  448c					      RETURN
      1  448c				  -	      ifnconst	bankswitch
      2  448c				  -	      rts
      3  448c					      else
      4  448c		       4c dd ff 	      jmp	BS_return
      5  448f					      endif
   1764  448f
   1765  448f				   notleft
   1766  448f		       4a		      lsr
   1767  4490		       90 2a		      bcc	notright
   1768  4492							;right
   1769  4492
   1770  4492				  -	      ifconst	pfres
   1771  4492				  -	      ldx	#pfres*4
   1772  4492					      else
   1773  4492		       a2 30		      ldx	#48
   1774  4494					      endif
   1775  4494				   rightloop
   1776  4494		       bd cc 10 	      lda	playfield-4,x
   1777  4497		       4a		      lsr
   1778  4498					      ifconst	superchip
   1779  4498		       bd cd 10 	      lda	playfield-3,x
   1780  449b		       2a		      rol
   1781  449c		       9d 4d 10 	      sta	playfield-131,x
   1782  449f		       bd ce 10 	      lda	playfield-2,x
   1783  44a2		       6a		      ror
   1784  44a3		       9d 4e 10 	      sta	playfield-130,x
   1785  44a6		       bd cf 10 	      lda	playfield-1,x
   1786  44a9		       2a		      rol
   1787  44aa		       9d 4f 10 	      sta	playfield-129,x
   1788  44ad		       bd cc 10 	      lda	playfield-4,x
   1789  44b0		       6a		      ror
   1790  44b1		       9d 4c 10 	      sta	playfield-132,x
   1791  44b4				  -	      else
   1792  44b4				  -	      rol	playfield-3,x
   1793  44b4				  -	      ror	playfield-2,x
   1794  44b4				  -	      rol	playfield-1,x
   1795  44b4				  -	      ror	playfield-4,x
   1796  44b4					      endif
   1797  44b4		       8a		      txa
   1798  44b5		       cb 04		      sbx	#4
   1799  44b7		       d0 db		      bne	rightloop
      0  44b9					      RETURN
      1  44b9				  -	      ifnconst	bankswitch
      2  44b9				  -	      rts
      3  44b9					      else
      4  44b9		       4c dd ff 	      jmp	BS_return
      5  44bc					      endif
   1801  44bc
   1802  44bc				   notright
   1803  44bc		       4a		      lsr
   1804  44bd		       90 5b		      bcc	notup
   1805  44bf							;up
   1806  44bf		       4a		      lsr
   1807  44c0		       90 02		      bcc	onedecup
   1808  44c2		       c6 ef		      dec	playfieldpos
   1809  44c4				   onedecup
   1810  44c4		       c6 ef		      dec	playfieldpos
   1811  44c6		       f0 02		      beq	shiftdown
   1812  44c8		       10 4d		      bpl	noshiftdown2
   1813  44ca				   shiftdown
   1814  44ca				  -	      ifconst	pfrowheight
   1815  44ca				  -	      lda	#pfrowheight
   1816  44ca					      else
   1817  44ca					      ifnconst	pfres
   1818  44ca		       a9 08		      lda	#8
   1819  44cc				  -	      else
   1820  44cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   1821  44cc					      endif
   1822  44cc					      endif
   1823  44cc
   1824  44cc		       85 ef		      sta	playfieldpos
   1825  44ce		       ad d3 10 	      lda	playfield+3
   1826  44d1		       85 9f		      sta	temp4
   1827  44d3		       ad d2 10 	      lda	playfield+2
   1828  44d6		       85 9e		      sta	temp3
   1829  44d8		       ad d1 10 	      lda	playfield+1
   1830  44db		       85 9d		      sta	temp2
   1831  44dd		       ad d0 10 	      lda	playfield
   1832  44e0		       85 9c		      sta	temp1
   1833  44e2		       a2 00		      ldx	#0
   1834  44e4				   up2
   1835  44e4		       bd d4 10 	      lda	playfield+4,x
   1836  44e7					      ifconst	superchip
   1837  44e7		       9d 50 10 	      sta	playfield-128,x
   1838  44ea		       bd d5 10 	      lda	playfield+5,x
   1839  44ed		       9d 51 10 	      sta	playfield-127,x
   1840  44f0		       bd d6 10 	      lda	playfield+6,x
   1841  44f3		       9d 52 10 	      sta	playfield-126,x
   1842  44f6		       bd d7 10 	      lda	playfield+7,x
   1843  44f9		       9d 53 10 	      sta	playfield-125,x
   1844  44fc				  -	      else
   1845  44fc				  -	      sta	playfield,x
   1846  44fc				  -	      lda	playfield+5,x
   1847  44fc				  -	      sta	playfield+1,x
   1848  44fc				  -	      lda	playfield+6,x
   1849  44fc				  -	      sta	playfield+2,x
   1850  44fc				  -	      lda	playfield+7,x
   1851  44fc				  -	      sta	playfield+3,x
   1852  44fc					      endif
   1853  44fc		       8a		      txa
   1854  44fd		       cb fc		      sbx	#252
   1855  44ff				  -	      ifconst	pfres
   1856  44ff				  -	      cpx	#(pfres-1)*4
   1857  44ff					      else
   1858  44ff		       e0 2c		      cpx	#44
   1859  4501					      endif
   1860  4501		       d0 e1		      bne	up2
   1861  4503
   1862  4503		       a5 9f		      lda	temp4
   1863  4505
   1864  4505					      ifconst	superchip
   1865  4505				  -	      ifconst	pfres
   1866  4505				  -	      sta	playfield+pfres*4-129
   1867  4505				  -	      lda	temp3
   1868  4505				  -	      sta	playfield+pfres*4-130
   1869  4505				  -	      lda	temp2
   1870  4505				  -	      sta	playfield+pfres*4-131
   1871  4505				  -	      lda	temp1
   1872  4505				  -	      sta	playfield+pfres*4-132
   1873  4505					      else
   1874  4505		       8d 7f 10 	      sta	playfield+47-128
   1875  4508		       a5 9e		      lda	temp3
   1876  450a		       8d 7e 10 	      sta	playfield+46-128
   1877  450d		       a5 9d		      lda	temp2
   1878  450f		       8d 7d 10 	      sta	playfield+45-128
   1879  4512		       a5 9c		      lda	temp1
   1880  4514		       8d 7c 10 	      sta	playfield+44-128
   1881  4517					      endif
   1882  4517				  -	      else
   1883  4517				  -	      ifconst	pfres
   1884  4517				  -	      sta	playfield+pfres*4-1
   1885  4517				  -	      lda	temp3
   1886  4517				  -	      sta	playfield+pfres*4-2
   1887  4517				  -	      lda	temp2
   1888  4517				  -	      sta	playfield+pfres*4-3
   1889  4517				  -	      lda	temp1
   1890  4517				  -	      sta	playfield+pfres*4-4
   1891  4517				  -	      else
   1892  4517				  -	      sta	playfield+47
   1893  4517				  -	      lda	temp3
   1894  4517				  -	      sta	playfield+46
   1895  4517				  -	      lda	temp2
   1896  4517				  -	      sta	playfield+45
   1897  4517				  -	      lda	temp1
   1898  4517				  -	      sta	playfield+44
   1899  4517				  -	      endif
   1900  4517					      endif
   1901  4517				   noshiftdown2
      0  4517					      RETURN
      1  4517				  -	      ifnconst	bankswitch
      2  4517				  -	      rts
      3  4517					      else
      4  4517		       4c dd ff 	      jmp	BS_return
      5  451a					      endif
   1903  451a
   1904  451a
   1905  451a				   notup
   1906  451a							;down
   1907  451a		       4a		      lsr
   1908  451b		       b0 02		      bcs	oneincup
   1909  451d		       e6 ef		      inc	playfieldpos
   1910  451f				   oneincup
   1911  451f		       e6 ef		      inc	playfieldpos
   1912  4521		       a5 ef		      lda	playfieldpos
   1913  4523
   1914  4523				  -	      ifconst	pfrowheight
   1915  4523				  -	      cmp	#pfrowheight+1
   1916  4523					      else
   1917  4523					      ifnconst	pfres
   1918  4523		       c9 09		      cmp	#9
   1919  4525				  -	      else
   1920  4525				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1921  4525					      endif
   1922  4525					      endif
   1923  4525
   1924  4525		       90 4b		      bcc	noshiftdown
   1925  4527		       a9 01		      lda	#1
   1926  4529		       85 ef		      sta	playfieldpos
   1927  452b
   1928  452b				  -	      ifconst	pfres
   1929  452b				  -	      lda	playfield+pfres*4-1
   1930  452b				  -	      sta	temp4
   1931  452b				  -	      lda	playfield+pfres*4-2
   1932  452b				  -	      sta	temp3
   1933  452b				  -	      lda	playfield+pfres*4-3
   1934  452b				  -	      sta	temp2
   1935  452b				  -	      lda	playfield+pfres*4-4
   1936  452b					      else
   1937  452b		       ad ff 10 	      lda	playfield+47
   1938  452e		       85 9f		      sta	temp4
   1939  4530		       ad fe 10 	      lda	playfield+46
   1940  4533		       85 9e		      sta	temp3
   1941  4535		       ad fd 10 	      lda	playfield+45
   1942  4538		       85 9d		      sta	temp2
   1943  453a		       ad fc 10 	      lda	playfield+44
   1944  453d					      endif
   1945  453d
   1946  453d		       85 9c		      sta	temp1
   1947  453f
   1948  453f				  -	      ifconst	pfres
   1949  453f				  -	      ldx	#(pfres-1)*4
   1950  453f					      else
   1951  453f		       a2 2c		      ldx	#44
   1952  4541					      endif
   1953  4541				   down2
   1954  4541		       bd cf 10 	      lda	playfield-1,x
   1955  4544					      ifconst	superchip
   1956  4544		       9d 53 10 	      sta	playfield-125,x
   1957  4547		       bd ce 10 	      lda	playfield-2,x
   1958  454a		       9d 52 10 	      sta	playfield-126,x
   1959  454d		       bd cd 10 	      lda	playfield-3,x
   1960  4550		       9d 51 10 	      sta	playfield-127,x
   1961  4553		       bd cc 10 	      lda	playfield-4,x
   1962  4556		       9d 50 10 	      sta	playfield-128,x
   1963  4559				  -	      else
   1964  4559				  -	      sta	playfield+3,x
   1965  4559				  -	      lda	playfield-2,x
   1966  4559				  -	      sta	playfield+2,x
   1967  4559				  -	      lda	playfield-3,x
   1968  4559				  -	      sta	playfield+1,x
   1969  4559				  -	      lda	playfield-4,x
   1970  4559				  -	      sta	playfield,x
   1971  4559					      endif
   1972  4559		       8a		      txa
   1973  455a		       cb 04		      sbx	#4
   1974  455c		       d0 e3		      bne	down2
   1975  455e
   1976  455e		       a5 9f		      lda	temp4
   1977  4560					      ifconst	superchip
   1978  4560		       8d 53 10 	      sta	playfield-125
   1979  4563		       a5 9e		      lda	temp3
   1980  4565		       8d 52 10 	      sta	playfield-126
   1981  4568		       a5 9d		      lda	temp2
   1982  456a		       8d 51 10 	      sta	playfield-127
   1983  456d		       a5 9c		      lda	temp1
   1984  456f		       8d 50 10 	      sta	playfield-128
   1985  4572				  -	      else
   1986  4572				  -	      sta	playfield+3
   1987  4572				  -	      lda	temp3
   1988  4572				  -	      sta	playfield+2
   1989  4572				  -	      lda	temp2
   1990  4572				  -	      sta	playfield+1
   1991  4572				  -	      lda	temp1
   1992  4572				  -	      sta	playfield
   1993  4572					      endif
   1994  4572				   noshiftdown
      0  4572					      RETURN
      1  4572				  -	      ifnconst	bankswitch
      2  4572				  -	      rts
      3  4572					      else
      4  4572		       4c dd ff 	      jmp	BS_return
      5  4575					      endif
   1996  4575							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1997  4575
   1998  4575							;standard routines needed for pretty much all games
   1999  4575							; just the random number generator is left - maybe we should remove this asm file altogether?
   2000  4575							; repositioning code and score pointer setup moved to overscan
   2001  4575							; read switches, joysticks now compiler generated (more efficient)
   2002  4575
   2003  4575				   randomize
   2004  4575		       a5 a2		      lda	rand
   2005  4577		       4a		      lsr
   2006  4578				  -	      ifconst	rand16
   2007  4578				  -	      rol	rand16
   2008  4578					      endif
   2009  4578		       90 02		      bcc	noeor
   2010  457a		       49 b4		      eor	#$B4
   2011  457c				   noeor
   2012  457c		       85 a2		      sta	rand
   2013  457e				  -	      ifconst	rand16
   2014  457e				  -	      eor	rand16
   2015  457e					      endif
      0  457e					      RETURN
      1  457e				  -	      ifnconst	bankswitch
      2  457e				  -	      rts
      3  457e					      else
      4  457e		       4c dd ff 	      jmp	BS_return
      5  4581					      endif
   2017  4581							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2018  4581
   2019  4581				   drawscreen
   2020  4581				  -	      ifconst	debugscore
   2021  4581				  -	      ldx	#14
   2022  4581				  -	      lda	INTIM	; display # cycles left in the score
   2023  4581				  -
   2024  4581				  -	      ifconst	mincycles
   2025  4581				  -	      lda	mincycles
   2026  4581				  -	      cmp	INTIM
   2027  4581				  -	      lda	mincycles
   2028  4581				  -	      bcc	nochange
   2029  4581				  -	      lda	INTIM
   2030  4581				  -	      sta	mincycles
   2031  4581				  -nochange
   2032  4581				  -	      endif
   2033  4581				  -
   2034  4581				  -			; cmp #$2B
   2035  4581				  -			; bcs no_cycles_left
   2036  4581				  -	      bmi	cycles_left
   2037  4581				  -	      ldx	#64
   2038  4581				  -	      eor	#$ff	;make negative
   2039  4581				  -cycles_left
   2040  4581				  -	      stx	scorecolor
   2041  4581				  -	      and	#$7f	; clear sign bit
   2042  4581				  -	      tax
   2043  4581				  -	      lda	scorebcd,x
   2044  4581				  -	      sta	score+2
   2045  4581				  -	      lda	scorebcd1,x
   2046  4581				  -	      sta	score+1
   2047  4581				  -	      jmp	done_debugscore
   2048  4581				  -scorebcd
   2049  4581				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   2050  4581				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   2051  4581				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   2052  4581				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   2053  4581				  -scorebcd1
   2054  4581				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   2055  4581				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   2056  4581				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   2057  4581				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   2058  4581				  -done_debugscore
   2059  4581					      endif
   2060  4581
   2061  4581				  -	      ifconst	debugcycles
   2062  4581				  -	      lda	INTIM	; if we go over, it mucks up the background color
   2063  4581				  -			; cmp #$2B
   2064  4581				  -			; BCC overscan
   2065  4581				  -	      bmi	overscan
   2066  4581				  -	      sta	COLUBK
   2067  4581				  -	      bcs	doneoverscan
   2068  4581					      endif
   2069  4581
   2070  4581				   overscan
   2071  4581				  -	      ifconst	interlaced
   2072  4581				  -	      PHP
   2073  4581				  -	      PLA
   2074  4581				  -	      EOR	#4	; flip interrupt bit
   2075  4581				  -	      PHA
   2076  4581				  -	      PLP
   2077  4581				  -	      AND	#4	; isolate the interrupt bit
   2078  4581				  -	      TAX		; save it for later
   2079  4581					      endif
   2080  4581
   2081  4581				   overscanloop
   2082  4581		       ad 84 02 	      lda	INTIM	;wait for sync
   2083  4584		       30 fb		      bmi	overscanloop
   2084  4586				   doneoverscan
   2085  4586
   2086  4586							;do VSYNC
   2087  4586
   2088  4586				  -	      ifconst	interlaced
   2089  4586				  -	      CPX	#4
   2090  4586				  -	      BNE	oddframevsync
   2091  4586					      endif
   2092  4586
   2093  4586		       a9 02		      lda	#2
   2094  4588		       85 02		      sta	WSYNC
   2095  458a		       85 00		      sta	VSYNC
   2096  458c		       85 02		      STA	WSYNC
   2097  458e		       85 02		      STA	WSYNC
   2098  4590		       4a		      lsr
   2099  4591		       85 02		      STA	WSYNC
   2100  4593		       85 00		      STA	VSYNC
   2101  4595		       85 01		      sta	VBLANK
   2102  4597					      ifnconst	overscan_time
   2103  4597		       a9 a5		      lda	#37+128
   2104  4599				  -	      else
   2105  4599				  -	      lda	#overscan_time+128
   2106  4599					      endif
   2107  4599		       8d 96 02 	      sta	TIM64T
   2108  459c
   2109  459c				  -	      ifconst	interlaced
   2110  459c				  -	      jmp	postsync
   2111  459c				  -
   2112  459c				  -oddframevsync
   2113  459c				  -	      sta	WSYNC
   2114  459c				  -
   2115  459c				  -	      LDA	($80,X)	; 11 waste
   2116  459c				  -	      LDA	($80,X)	; 11 waste
   2117  459c				  -	      LDA	($80,X)	; 11 waste
   2118  459c				  -
   2119  459c				  -	      lda	#2
   2120  459c				  -	      sta	VSYNC
   2121  459c				  -	      sta	WSYNC
   2122  459c				  -	      sta	WSYNC
   2123  459c				  -	      sta	WSYNC
   2124  459c				  -
   2125  459c				  -	      LDA	($80,X)	; 11 waste
   2126  459c				  -	      LDA	($80,X)	; 11 waste
   2127  459c				  -	      LDA	($80,X)	; 11 waste
   2128  459c				  -
   2129  459c				  -	      lda	#0
   2130  459c				  -	      sta	VSYNC
   2131  459c				  -	      sta	VBLANK
   2132  459c				  -	      ifnconst	overscan_time
   2133  459c				  -	      lda	#37+128
   2134  459c				  -	      else
   2135  459c				  -	      lda	#overscan_time+128
   2136  459c				  -	      endif
   2137  459c				  -	      sta	TIM64T
   2138  459c				  -
   2139  459c				  -postsync
   2140  459c					      endif
   2141  459c
   2142  459c				  -	      ifconst	legacy
   2143  459c				  -	      if	legacy < 100
   2144  459c				  -	      ldx	#4
   2145  459c				  -adjustloop
   2146  459c				  -	      lda	player0x,x
   2147  459c				  -	      sec
   2148  459c				  -	      sbc	#14	;?
   2149  459c				  -	      sta	player0x,x
   2150  459c				  -	      dex
   2151  459c				  -	      bpl	adjustloop
   2152  459c				  -	      endif
   2153  459c					      endif
   2154  459c				  -	      if	((<*)>$e9)&&((<*)<$fa)
   2155  459c				  -	      repeat	($fa-(<*))
   2156  459c				  -	      nop
   2157  459c				  -	      repend
   2158  459c					      endif
   2159  459c		       85 02		      sta	WSYNC
   2160  459e		       a2 04		      ldx	#4
      0  45a0					      SLEEP	3
      1  45a0				   .CYCLES    SET	3
      2  45a0
      3  45a0				  -	      IF	.CYCLES < 2
      4  45a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45a0				  -	      ERR
      6  45a0					      ENDIF
      7  45a0
      8  45a0					      IF	.CYCLES & 1
      9  45a0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45a0		       04 00		      nop	0
     11  45a2				  -	      ELSE
     12  45a2				  -	      bit	VSYNC
     13  45a2					      ENDIF
     14  45a2				   .CYCLES    SET	.CYCLES - 3
     15  45a2					      ENDIF
     16  45a2
     17  45a2				  -	      REPEAT	.CYCLES / 2
     18  45a2				  -	      nop
     19  45a2					      REPEND
   2162  45a2				   HorPosLoop		; 5
   2163  45a2		       b5 80		      lda	player0x,X	;+4 9
   2164  45a4		       38		      sec		;+2 11
   2165  45a5				   DivideLoop
   2166  45a5		       e9 0f		      sbc	#15
   2167  45a7		       b0 fc		      bcs	DivideLoop	;+4 15
   2168  45a9		       95 9c		      sta	temp1,X	;+4 19
   2169  45ab		       95 10		      sta	RESP0,X	;+4 23
   2170  45ad		       85 02		      sta	WSYNC
   2171  45af		       ca		      dex
   2172  45b0		       10 f0		      bpl	HorPosLoop	;+5 5
   2173  45b2							; 4
   2174  45b2
   2175  45b2		       a2 04		      ldx	#4
   2176  45b4		       b4 9c		      ldy	temp1,X
   2177  45b6		       b9 15 f5 	      lda	repostable-256,Y
   2178  45b9		       95 20		      sta	HMP0,X	;+14 18
   2179  45bb
   2180  45bb		       ca		      dex
   2181  45bc		       b4 9c		      ldy	temp1,X
   2182  45be		       b9 15 f5 	      lda	repostable-256,Y
   2183  45c1		       95 20		      sta	HMP0,X	;+14 32
   2184  45c3
   2185  45c3		       ca		      dex
   2186  45c4		       b4 9c		      ldy	temp1,X
   2187  45c6		       b9 15 f5 	      lda	repostable-256,Y
   2188  45c9		       95 20		      sta	HMP0,X	;+14 46
   2189  45cb
   2190  45cb		       ca		      dex
   2191  45cc		       b4 9c		      ldy	temp1,X
   2192  45ce		       b9 15 f5 	      lda	repostable-256,Y
   2193  45d1		       95 20		      sta	HMP0,X	;+14 60
   2194  45d3
   2195  45d3		       ca		      dex
   2196  45d4		       b4 9c		      ldy	temp1,X
   2197  45d6		       b9 15 f5 	      lda	repostable-256,Y
   2198  45d9		       95 20		      sta	HMP0,X	;+14 74
   2199  45db
   2200  45db		       85 02		      sta	WSYNC
   2201  45dd
   2202  45dd		       85 2a		      sta	HMOVE	;+3 3
   2203  45df
   2204  45df
   2205  45df				  -	      ifconst	legacy
   2206  45df				  -	      if	legacy < 100
   2207  45df				  -	      ldx	#4
   2208  45df				  -adjustloop2
   2209  45df				  -	      lda	player0x,x
   2210  45df				  -	      clc
   2211  45df				  -	      adc	#14	;?
   2212  45df				  -	      sta	player0x,x
   2213  45df				  -	      dex
   2214  45df				  -	      bpl	adjustloop2
   2215  45df				  -	      endif
   2216  45df					      endif
   2217  45df
   2218  45df
   2219  45df
   2220  45df
   2221  45df							;set score pointers
   2222  45df		       a7 95		      lax	score+2
   2223  45e1		       20 15 f6 	      jsr	scorepointerset
   2224  45e4		       84 9b		      sty	scorepointers+5
   2225  45e6		       86 98		      stx	scorepointers+2
   2226  45e8		       a7 94		      lax	score+1
   2227  45ea		       20 15 f6 	      jsr	scorepointerset
   2228  45ed		       84 9a		      sty	scorepointers+4
   2229  45ef		       86 97		      stx	scorepointers+1
   2230  45f1		       a7 93		      lax	score
   2231  45f3		       20 15 f6 	      jsr	scorepointerset
   2232  45f6		       84 99		      sty	scorepointers+3
   2233  45f8		       86 96		      stx	scorepointers
   2234  45fa
   2235  45fa				   vblk
   2236  45fa							; run possible vblank bB code
   2237  45fa					      ifconst	vblank_bB_code
   2238  45fa		       20 24 f6 	      jsr	vblank_bB_code
   2239  45fd					      endif
   2240  45fd				   vblk2
   2241  45fd		       ad 84 02 	      LDA	INTIM
   2242  4600		       30 fb		      bmi	vblk2
   2243  4602		       4c 00 f1 	      jmp	kernel
   2244  4605
   2245  4605
   2246  4605		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2247  460e		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2248  4615				   repostable
   2249  4615
   2250  4615				   scorepointerset
   2251  4615		       29 0f		      and	#$0F
   2252  4617		       0a		      asl
   2253  4618		       0a		      asl
   2254  4619		       0a		      asl
   2255  461a		       69 74		      adc	#<scoretable
   2256  461c		       a8		      tay
   2257  461d		       8a		      txa
   2258  461e							; and #$F0
   2259  461e							; lsr
   2260  461e		       4b f0		      asr	#$F0
   2261  4620		       69 74		      adc	#<scoretable
   2262  4622		       aa		      tax
   2263  4623		       60		      rts
   2264  4624							;bB.asm
   2265  4624							; bB.asm file is split here
   2266  4624				   .
   2267  4624							; 
   2268  4624
   2269  4624				   .L050		;  vblank
   2270  4624
   2271  4624				   vblank_bB_code
   2272  4624				   .L051		;  rem ** Enable the TIA bug that causes missile0 to be repeated
   2273  4624
   2274  4624				   .L052		;  asm
   2275  4624
   2276  4624		       85 2b		      sta	HMCLR
   2277  4626
   2278  4626		       85 02		      sta	WSYNC
   2279  4628
   2280  4628		       a9 ff		      lda	#$ff
   2281  462a
   2282  462a		       85 22		      sta	HMM0
   2283  462c
   2284  462c		       a9 c0		      lda	#$c0
   2285  462e
   2286  462e		       85 02		      sta	WSYNC
   2287  4630
   2288  4630		       85 2a		      sta	HMOVE
   2289  4632
      0  4632					      sleep	5
      1  4632				   .CYCLES    SET	5
      2  4632
      3  4632				  -	      IF	.CYCLES < 2
      4  4632				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4632				  -	      ERR
      6  4632					      ENDIF
      7  4632
      8  4632					      IF	.CYCLES & 1
      9  4632					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4632		       04 00		      nop	0
     11  4634				  -	      ELSE
     12  4634				  -	      bit	VSYNC
     13  4634					      ENDIF
     14  4634				   .CYCLES    SET	.CYCLES - 3
     15  4634					      ENDIF
     16  4634
     17  4634					      REPEAT	.CYCLES / 2
     18  4634		       ea		      nop
     19  4635					      REPEND
   2291  4635
   2292  4635		       85 22		      sta	HMM0
   2293  4637
   2294  4637				   .L053		;  return
   2295  4637
   2296  4637		       ba		      tsx
   2297  4638		       b5 02		      lda	2,x	; check return address
   2298  463a		       49 f6		      eor	#(>*)	; vs. current PCH
   2299  463c		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   2300  463e		       f0 03		      beq	*+5	; if equal, do normal return
   2301  4640		       4c dd ff 	      JMP	BS_return
   2302  4643		       60		      RTS
   2303  4644				  -	      if	(<*) > (<(*+4))
   2304  4644				  -	      repeat	($100-<*)
   2305  4644				  -	      .byte	0
   2306  4644				  -	      repend
   2307  4644					      endif
   2308  4644				   playerL010_0
   2309  4644		       81		      .byte.b	%10000001
   2310  4645		       c3		      .byte.b	%11000011
   2311  4646		       ff		      .byte.b	%11111111
   2312  4647		       5a		      .byte.b	%01011010
   2313  4648		       3c		      .byte.b	%00111100
   2314  4649				  -	      if	(<*) > (<(*+4))
   2315  4649				  -	      repeat	($100-<*)
   2316  4649				  -	      .byte	0
   2317  4649				  -	      repend
   2318  4649					      endif
   2319  4649				   playerL011_1
   2320  4649		       3c		      .byte.b	%00111100
   2321  464a		       5a		      .byte.b	%01011010
   2322  464b		       ff		      .byte.b	%11111111
   2323  464c		       c3		      .byte.b	%11000011
   2324  464d		       81		      .byte.b	%10000001
   2325  464e					      if	ECHOFIRST
      2342 bytes of ROM space left in bank 4
   2326  464e					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2327  464e					      endif
   2328  464e		       00 01	   ECHOFIRST  =	1
   2329  464e
   2330  464e
   2331  464e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2332  464e
   2333  464e							; feel free to modify the score graphics - just keep each digit 8 high
   2334  464e							; and keep the conditional compilation stuff intact
   2335  464e				  -	      ifconst	ROM2k
   2336  464e				  -	      ORG	$F7AC-8
   2337  464e					      else
   2338  464e					      ifconst	bankswitch
   2339  464e				  -	      if	bankswitch == 8
   2340  464e				  -	      ORG	$2F94-bscode_length
   2341  464e				  -	      RORG	$FF94-bscode_length
   2342  464e					      endif
   2343  464e					      if	bankswitch == 16
   2344  4f74					      ORG	$4F94-bscode_length
   2345  4f74					      RORG	$FF94-bscode_length
   2346  4f74					      endif
   2347  4f74				  -	      if	bankswitch == 32
   2348  4f74				  -	      ORG	$8F94-bscode_length
   2349  4f74				  -	      RORG	$FF94-bscode_length
   2350  4f74					      endif
   2351  4f74				  -	      if	bankswitch == 64
   2352  4f74				  -	      ORG	$10F80-bscode_length
   2353  4f74				  -	      RORG	$1FF80-bscode_length
   2354  4f74					      endif
   2355  4f74				  -	      else
   2356  4f74				  -	      ORG	$FF9C
   2357  4f74					      endif
   2358  4f74					      endif
   2359  4f74
   2360  4f74							; font equates
   2361  4f74		       00 01	   .21stcentury =	1
   2362  4f74		       00 02	   alarmclock =	2
   2363  4f74		       00 03	   handwritten =	3
   2364  4f74		       00 04	   interrupted =	4
   2365  4f74		       00 05	   retroputer =	5
   2366  4f74		       00 06	   whimsey    =	6
   2367  4f74		       00 07	   tiny       =	7
   2368  4f74		       00 08	   hex	      =	8
   2369  4f74
   2370  4f74				  -	      ifconst	font
   2371  4f74				  -	      if	font == hex
   2372  4f74				  -	      ORG	. - 48
   2373  4f74				  -	      endif
   2374  4f74					      endif
   2375  4f74
   2376  4f74				   scoretable
   2377  4f74
   2378  4f74				  -	      ifconst	font
   2379  4f74				  -	      if	font == .21stcentury
   2380  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2381  4f74				  -	      endif
   2382  4f74				  -	      if	font == alarmclock
   2383  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2384  4f74				  -	      endif
   2385  4f74				  -	      if	font == handwritten
   2386  4f74				  -	      include	"score_graphics.asm.handwritten"
   2387  4f74				  -	      endif
   2388  4f74				  -	      if	font == interrupted
   2389  4f74				  -	      include	"score_graphics.asm.interrupted"
   2390  4f74				  -	      endif
   2391  4f74				  -	      if	font == retroputer
   2392  4f74				  -	      include	"score_graphics.asm.retroputer"
   2393  4f74				  -	      endif
   2394  4f74				  -	      if	font == whimsey
   2395  4f74				  -	      include	"score_graphics.asm.whimsey"
   2396  4f74				  -	      endif
   2397  4f74				  -	      if	font == tiny
   2398  4f74				  -	      include	"score_graphics.asm.tiny"
   2399  4f74				  -	      endif
   2400  4f74				  -	      if	font == hex
   2401  4f74				  -	      include	"score_graphics.asm.hex"
   2402  4f74				  -	      endif
   2403  4f74					      else		; default font
   2404  4f74
   2405  4f74		       3c		      .byte.b	%00111100
   2406  4f75		       66		      .byte.b	%01100110
   2407  4f76		       66		      .byte.b	%01100110
   2408  4f77		       66		      .byte.b	%01100110
   2409  4f78		       66		      .byte.b	%01100110
   2410  4f79		       66		      .byte.b	%01100110
   2411  4f7a		       66		      .byte.b	%01100110
   2412  4f7b		       3c		      .byte.b	%00111100
   2413  4f7c
   2414  4f7c		       7e		      .byte.b	%01111110
   2415  4f7d		       18		      .byte.b	%00011000
   2416  4f7e		       18		      .byte.b	%00011000
   2417  4f7f		       18		      .byte.b	%00011000
   2418  4f80		       18		      .byte.b	%00011000
   2419  4f81		       38		      .byte.b	%00111000
   2420  4f82		       18		      .byte.b	%00011000
   2421  4f83		       08		      .byte.b	%00001000
   2422  4f84
   2423  4f84		       7e		      .byte.b	%01111110
   2424  4f85		       60		      .byte.b	%01100000
   2425  4f86		       60		      .byte.b	%01100000
   2426  4f87		       3c		      .byte.b	%00111100
   2427  4f88		       06		      .byte.b	%00000110
   2428  4f89		       06		      .byte.b	%00000110
   2429  4f8a		       46		      .byte.b	%01000110
   2430  4f8b		       3c		      .byte.b	%00111100
   2431  4f8c
   2432  4f8c		       3c		      .byte.b	%00111100
   2433  4f8d		       46		      .byte.b	%01000110
   2434  4f8e		       06		      .byte.b	%00000110
   2435  4f8f		       06		      .byte.b	%00000110
   2436  4f90		       1c		      .byte.b	%00011100
   2437  4f91		       06		      .byte.b	%00000110
   2438  4f92		       46		      .byte.b	%01000110
   2439  4f93		       3c		      .byte.b	%00111100
   2440  4f94
   2441  4f94		       0c		      .byte.b	%00001100
   2442  4f95		       0c		      .byte.b	%00001100
   2443  4f96		       7e		      .byte.b	%01111110
   2444  4f97		       4c		      .byte.b	%01001100
   2445  4f98		       4c		      .byte.b	%01001100
   2446  4f99		       2c		      .byte.b	%00101100
   2447  4f9a		       1c		      .byte.b	%00011100
   2448  4f9b		       0c		      .byte.b	%00001100
   2449  4f9c
   2450  4f9c		       3c		      .byte.b	%00111100
   2451  4f9d		       46		      .byte.b	%01000110
   2452  4f9e		       06		      .byte.b	%00000110
   2453  4f9f		       06		      .byte.b	%00000110
   2454  4fa0		       3c		      .byte.b	%00111100
   2455  4fa1		       60		      .byte.b	%01100000
   2456  4fa2		       60		      .byte.b	%01100000
   2457  4fa3		       7e		      .byte.b	%01111110
   2458  4fa4
   2459  4fa4		       3c		      .byte.b	%00111100
   2460  4fa5		       66		      .byte.b	%01100110
   2461  4fa6		       66		      .byte.b	%01100110
   2462  4fa7		       66		      .byte.b	%01100110
   2463  4fa8		       7c		      .byte.b	%01111100
   2464  4fa9		       60		      .byte.b	%01100000
   2465  4faa		       62		      .byte.b	%01100010
   2466  4fab		       3c		      .byte.b	%00111100
   2467  4fac
   2468  4fac		       30		      .byte.b	%00110000
   2469  4fad		       30		      .byte.b	%00110000
   2470  4fae		       30		      .byte.b	%00110000
   2471  4faf		       18		      .byte.b	%00011000
   2472  4fb0		       0c		      .byte.b	%00001100
   2473  4fb1		       06		      .byte.b	%00000110
   2474  4fb2		       42		      .byte.b	%01000010
   2475  4fb3		       3e		      .byte.b	%00111110
   2476  4fb4
   2477  4fb4		       3c		      .byte.b	%00111100
   2478  4fb5		       66		      .byte.b	%01100110
   2479  4fb6		       66		      .byte.b	%01100110
   2480  4fb7		       66		      .byte.b	%01100110
   2481  4fb8		       3c		      .byte.b	%00111100
   2482  4fb9		       66		      .byte.b	%01100110
   2483  4fba		       66		      .byte.b	%01100110
   2484  4fbb		       3c		      .byte.b	%00111100
   2485  4fbc
   2486  4fbc		       3c		      .byte.b	%00111100
   2487  4fbd		       46		      .byte.b	%01000110
   2488  4fbe		       06		      .byte.b	%00000110
   2489  4fbf		       3e		      .byte.b	%00111110
   2490  4fc0		       66		      .byte.b	%01100110
   2491  4fc1		       66		      .byte.b	%01100110
   2492  4fc2		       66		      .byte.b	%01100110
   2493  4fc3		       3c		      .byte.b	%00111100
   2494  4fc4
   2495  4fc4					      ifnconst	DPC_kernel_options
   2496  4fc4
   2497  4fc4		       00		      .byte.b	%00000000
   2498  4fc5		       00		      .byte.b	%00000000
   2499  4fc6		       00		      .byte.b	%00000000
   2500  4fc7		       00		      .byte.b	%00000000
   2501  4fc8		       00		      .byte.b	%00000000
   2502  4fc9		       00		      .byte.b	%00000000
   2503  4fca		       00		      .byte.b	%00000000
   2504  4fcb		       00		      .byte.b	%00000000
   2505  4fcc
   2506  4fcc					      endif
   2507  4fcc
   2508  4fcc					      endif
   2509  4fcc
   2510  4fcc				  -	      ifconst	ROM2k
   2511  4fcc				  -	      ORG	$F7FC
   2512  4fcc					      else
   2513  4fcc					      ifconst	bankswitch
   2514  4fcc				  -	      if	bankswitch == 8
   2515  4fcc				  -	      ORG	$2FF4-bscode_length
   2516  4fcc				  -	      RORG	$FFF4-bscode_length
   2517  4fcc					      endif
   2518  4fcc					      if	bankswitch == 16
   2519  4fd4					      ORG	$4FF4-bscode_length
   2520  4fd4					      RORG	$FFF4-bscode_length
   2521  4fd4					      endif
   2522  4fd4				  -	      if	bankswitch == 32
   2523  4fd4				  -	      ORG	$8FF4-bscode_length
   2524  4fd4				  -	      RORG	$FFF4-bscode_length
   2525  4fd4					      endif
   2526  4fd4				  -	      if	bankswitch == 64
   2527  4fd4				  -	      ORG	$10FE0-bscode_length
   2528  4fd4				  -	      RORG	$1FFE0-bscode_length
   2529  4fd4					      endif
   2530  4fd4				  -	      else
   2531  4fd4				  -	      ORG	$FFFC
   2532  4fd4					      endif
   2533  4fd4					      endif
   2534  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2535  4fd4
   2536  4fd4							; every bank has this stuff at the same place
   2537  4fd4							; this code can switch to/from any bank at any entry point
   2538  4fd4							; and can preserve register values
   2539  4fd4							; note: lines not starting with a space are not placed in all banks
   2540  4fd4							;
   2541  4fd4							; line below tells the compiler how long this is - do not remove
   2542  4fd4							;size=32
   2543  4fd4
   2544  4fd4				   begin_bscode
   2545  4fd4		       a2 ff		      ldx	#$ff
   2546  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2547  4fd6				  -	      stx	FASTFETCH
   2548  4fd6					      endif
   2549  4fd6		       9a		      txs
   2550  4fd7				  -	      if	bankswitch == 64
   2551  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2552  4fd7					      else
   2553  4fd7		       a9 f3		      lda	#>(start-1)
   2554  4fd9					      endif
   2555  4fd9		       48		      pha
   2556  4fda		       a9 4f		      lda	#<(start-1)
   2557  4fdc		       48		      pha
   2558  4fdd
   2559  4fdd				   BS_return
   2560  4fdd		       48		      pha
   2561  4fde		       8a		      txa
   2562  4fdf		       48		      pha
   2563  4fe0		       ba		      tsx
   2564  4fe1
   2565  4fe1					      if	bankswitch != 64
   2566  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2567  4fe3
   2568  4fe3		       2a		      rol
   2569  4fe4		       2a		      rol
   2570  4fe5		       2a		      rol
   2571  4fe6		       2a		      rol
   2572  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2573  4fe9		       aa		      tax
   2574  4fea		       e8		      inx
   2575  4feb				  -	      else
   2576  4feb				  -	      lda	4,x	; get high byte of return address
   2577  4feb				  -	      tay
   2578  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2579  4feb				  -	      sta	4,x
   2580  4feb				  -	      tya
   2581  4feb				  -	      lsr
   2582  4feb				  -	      lsr
   2583  4feb				  -	      lsr
   2584  4feb				  -	      lsr
   2585  4feb				  -	      tax
   2586  4feb				  -	      inx
   2587  4feb					      endif
   2588  4feb
   2589  4feb				   BS_jsr
   2590  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2591  4fee		       68		      pla
   2592  4fef		       aa		      tax
   2593  4ff0		       68		      pla
   2594  4ff1		       60		      rts
   2595  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2596  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2597  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2598  4ff2					      endif
   2599  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2600  4ff2
   2601  4ff2					      ifconst	bankswitch
   2602  4ff2				  -	      if	bankswitch == 8
   2603  4ff2				  -	      ORG	$2FFC
   2604  4ff2				  -	      RORG	$FFFC
   2605  4ff2					      endif
   2606  4ff2					      if	bankswitch == 16
   2607  4ffc					      ORG	$4FFC
   2608  4ffc					      RORG	$FFFC
   2609  4ffc					      endif
   2610  4ffc				  -	      if	bankswitch == 32
   2611  4ffc				  -	      ORG	$8FFC
   2612  4ffc				  -	      RORG	$FFFC
   2613  4ffc					      endif
   2614  4ffc				  -	      if	bankswitch == 64
   2615  4ffc				  -	      ORG	$10FF0
   2616  4ffc				  -	      RORG	$1FFF0
   2617  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2618  4ffc				  -	      ORG	$10FF8
   2619  4ffc				  -	      RORG	$1FFF8
   2620  4ffc				  -	      ifconst	superchip
   2621  4ffc				  -	      .byte	"E","F","S","C"
   2622  4ffc				  -	      else
   2623  4ffc				  -	      .byte	"E","F","E","F"
   2624  4ffc				  -	      endif
   2625  4ffc				  -	      ORG	$10FFC
   2626  4ffc				  -	      RORG	$1FFFC
   2627  4ffc					      endif
   2628  4ffc				  -	      else
   2629  4ffc				  -	      ifconst	ROM2k
   2630  4ffc				  -	      ORG	$F7FC
   2631  4ffc				  -	      else
   2632  4ffc				  -	      ORG	$FFFC
   2633  4ffc				  -	      endif
   2634  4ffc					      endif
   2635  4ffc		       50 f3		      .word.w	(start & $ffff)
   2636  4ffe		       50 f3		      .word.w	(start & $ffff)
